// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2020.1 (win64) Build 2902540 Wed May 27 19:54:49 MDT 2020
// Date        : Sat May 11 20:59:01 2024
// Host        : zez running 64-bit major release  (build 9200)
// Command     : write_verilog -mode timesim -nolib -sdf_anno true -force -file
//               C:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.sim/sim_1/impl/timing/xsim/design_1_wrapper_time_impl.v
// Design      : design_1_wrapper
// Purpose     : This verilog netlist is a timing simulation representation of the design and should not be modified or
//               synthesized. Please ensure that this netlist is used with the corresponding SDF file.
// Device      : xc7z010clg400-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps
`define XIL_TIMING

module RAM32M_UNIQ_BASE_
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD340
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD341
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD342
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD343
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD344
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32X1S_UNIQ_BASE_
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001A),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD345
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000018),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD346
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD347
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD348
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD349
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001C),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD350
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD351
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD352
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD353
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD354
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD355
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000015),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD356
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000016),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD357
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD358
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD359
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD360
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD361
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD362
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD363
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD364
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD365
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD366
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD367
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD368
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD369
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD370
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD371
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD372
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD373
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD374
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD375
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD376
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD377
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD378
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD379
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD380
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD381
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD382
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD383
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD384
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD385
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD386
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD387
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD388
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD389
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD390
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD391
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD392
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD393
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD394
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD395
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD396
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD397
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD398
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD399
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD400
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD401
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD402
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD403
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD404
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD405
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD406
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD407
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD408
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD409
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD410
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD411
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001A),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD412
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD413
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD414
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001C),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD415
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD416
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD417
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD418
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD419
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD420
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD421
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD422
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD423
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD424
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD425
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD426
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD427
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD428
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD429
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD430
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD431
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD432
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD433
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD434
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD435
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD436
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD437
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD438
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD439
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD440
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD441
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD442
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD443
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD444
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD445
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD446
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD447
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD448
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD449
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD450
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD451
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h0000001F),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD452
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000010),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module clk_x_pntrs
   (out,
    ram_full_fb_i_reg,
    rd_clk,
    wr_clk,
    wr_en,
    AR,
    D,
    Q,
    \Q_reg_reg[0] ,
    \gnxpm_cdc.rd_pntr_gc_reg[3]_0 ,
    \gnxpm_cdc.wr_pntr_bin_reg[3]_0 ,
    \gnxpm_cdc.wr_pntr_gc_reg[3]_0 ,
    ram_full_fb_i_reg_0);
  input out;
  output ram_full_fb_i_reg;
  input rd_clk;
  input wr_clk;
  input wr_en;
  input [0:0]AR;
  input [2:0]D;
  input [3:0]Q;
  input [0:0]\Q_reg_reg[0] ;
  input [0:0]\gnxpm_cdc.rd_pntr_gc_reg[3]_0 ;
  output [3:0]\gnxpm_cdc.wr_pntr_bin_reg[3]_0 ;
  input [3:0]\gnxpm_cdc.wr_pntr_gc_reg[3]_0 ;
  input [3:0]ram_full_fb_i_reg_0;

  wire [0:0]AR;
  wire [2:0]D;
  wire [3:0]Q;
  wire [0:0]\Q_reg_reg[0] ;
  wire [2:0]bin2gray;
  wire \gnxpm_cdc.gsync_stage[2].wr_stg_inst_n_4 ;
  wire [0:0]\gnxpm_cdc.rd_pntr_gc_reg[3]_0 ;
  wire [3:0]\gnxpm_cdc.wr_pntr_bin_reg[3]_0 ;
  wire [3:0]\gnxpm_cdc.wr_pntr_gc_reg[3]_0 ;
  wire gray2bin0__0;
  wire \gray2bin0_inferred__0/i__n_0 ;
  wire \gray2bin0_inferred__2/i__n_0 ;
  wire \gray2bin0_inferred__3/i__n_0 ;
  wire gray2bin0_n_0;
  wire out;
  wire ram_full_fb_i_reg;
  wire [3:0]ram_full_fb_i_reg_0;
  wire ram_full_i_i_2_n_0;
  wire ram_full_i_i_3_n_0;
  wire ram_full_i_i_4_n_0;
  wire ram_full_i_i_5_n_0;
  wire rd_clk;
  wire [3:0]rd_pntr_gc;
  wire [3:0]rd_pntr_wr;
  wire [3:0]\rd_q[1]_5 ;
  wire [3:0]\rd_q[2]_7 ;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_gc;
  wire [3:0]\wr_q[1]_4 ;
  wire [3:0]\wr_q[2]_6 ;

  synchronizer_ff__parameterized0 \gnxpm_cdc.gsync_stage[1].rd_stg_inst 
       (.D(\wr_q[1]_4 ),
        .Q(wr_pntr_gc),
        .\Q_reg_reg[0]_0 (\Q_reg_reg[0] ),
        .rd_clk(rd_clk));
  synchronizer_ff__parameterized0_4 \gnxpm_cdc.gsync_stage[1].wr_stg_inst 
       (.AR(AR),
        .D(\rd_q[1]_5 ),
        .Q(rd_pntr_gc),
        .wr_clk(wr_clk));
  synchronizer_ff__parameterized0_5 \gnxpm_cdc.gsync_stage[2].rd_stg_inst 
       (.D(gray2bin0__0),
        .\Q_reg_reg[0]_0 (\Q_reg_reg[0] ),
        .\Q_reg_reg[3]_0 (\wr_q[1]_4 ),
        .out(\wr_q[2]_6 ),
        .rd_clk(rd_clk));
  synchronizer_ff__parameterized0_6 \gnxpm_cdc.gsync_stage[2].wr_stg_inst 
       (.AR(AR),
        .D(\gnxpm_cdc.gsync_stage[2].wr_stg_inst_n_4 ),
        .\Q_reg_reg[3]_0 (\rd_q[1]_5 ),
        .out(\rd_q[2]_7 ),
        .wr_clk(wr_clk));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gray2bin0_inferred__2/i__n_0 ),
        .Q(rd_pntr_wr[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gray2bin0_inferred__3/i__n_0 ),
        .Q(rd_pntr_wr[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gnxpm_cdc.gsync_stage[2].wr_stg_inst_n_4 ),
        .Q(rd_pntr_wr[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\rd_q[2]_7 [3]),
        .Q(rd_pntr_wr[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(D[0]),
        .Q(rd_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(D[1]),
        .Q(rd_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(D[2]),
        .Q(rd_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(\gnxpm_cdc.rd_pntr_gc_reg[3]_0 ),
        .Q(rd_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(gray2bin0_n_0),
        .Q(\gnxpm_cdc.wr_pntr_bin_reg[3]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(\gray2bin0_inferred__0/i__n_0 ),
        .Q(\gnxpm_cdc.wr_pntr_bin_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(gray2bin0__0),
        .Q(\gnxpm_cdc.wr_pntr_bin_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(\wr_q[2]_6 [3]),
        .Q(\gnxpm_cdc.wr_pntr_bin_reg[3]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_gc[0]_i_1 
       (.I0(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [1]),
        .I1(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [0]),
        .O(bin2gray[0]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_gc[1]_i_1 
       (.I0(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [2]),
        .I1(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [1]),
        .O(bin2gray[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_gc[2]_i_1 
       (.I0(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [3]),
        .I1(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [2]),
        .O(bin2gray[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(bin2gray[0]),
        .Q(wr_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(bin2gray[1]),
        .Q(wr_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(bin2gray[2]),
        .Q(wr_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [3]),
        .Q(wr_pntr_gc[3]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    gray2bin0
       (.I0(\wr_q[2]_6 [2]),
        .I1(\wr_q[2]_6 [3]),
        .I2(\wr_q[2]_6 [0]),
        .I3(\wr_q[2]_6 [1]),
        .O(gray2bin0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \gray2bin0_inferred__0/i_ 
       (.I0(\wr_q[2]_6 [3]),
        .I1(\wr_q[2]_6 [1]),
        .I2(\wr_q[2]_6 [2]),
        .O(\gray2bin0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \gray2bin0_inferred__2/i_ 
       (.I0(\rd_q[2]_7 [2]),
        .I1(\rd_q[2]_7 [3]),
        .I2(\rd_q[2]_7 [0]),
        .I3(\rd_q[2]_7 [1]),
        .O(\gray2bin0_inferred__2/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \gray2bin0_inferred__3/i_ 
       (.I0(\rd_q[2]_7 [3]),
        .I1(\rd_q[2]_7 [1]),
        .I2(\rd_q[2]_7 [2]),
        .O(\gray2bin0_inferred__3/i__n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    ram_full_i_i_1
       (.I0(ram_full_i_i_2_n_0),
        .I1(ram_full_i_i_3_n_0),
        .I2(wr_en),
        .I3(out),
        .I4(ram_full_i_i_4_n_0),
        .I5(ram_full_i_i_5_n_0),
        .O(ram_full_fb_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_2
       (.I0(rd_pntr_wr[2]),
        .I1(Q[2]),
        .I2(rd_pntr_wr[3]),
        .I3(Q[3]),
        .O(ram_full_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_3
       (.I0(rd_pntr_wr[0]),
        .I1(Q[0]),
        .I2(rd_pntr_wr[1]),
        .I3(Q[1]),
        .O(ram_full_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_4
       (.I0(rd_pntr_wr[0]),
        .I1(ram_full_fb_i_reg_0[0]),
        .I2(rd_pntr_wr[1]),
        .I3(ram_full_fb_i_reg_0[1]),
        .O(ram_full_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_5
       (.I0(rd_pntr_wr[2]),
        .I1(ram_full_fb_i_reg_0[2]),
        .I2(rd_pntr_wr[3]),
        .I3(ram_full_fb_i_reg_0[3]),
        .O(ram_full_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module clk_x_pntrs_7
   (\gnxpm_cdc.wr_pntr_bin_reg[2]_0 ,
    out,
    ram_full_fb_i_reg,
    rd_clk,
    wr_clk,
    wr_en,
    AR,
    D,
    Q,
    \Q_reg_reg[0] ,
    \gnxpm_cdc.rd_pntr_gc_reg[3]_0 ,
    \gnxpm_cdc.wr_pntr_gc_reg[3]_0 ,
    ram_empty_i_reg,
    ram_full_fb_i_reg_0,
    ram_full_fb_i_reg_1);
  output \gnxpm_cdc.wr_pntr_bin_reg[2]_0 ;
  input out;
  output ram_full_fb_i_reg;
  input rd_clk;
  input wr_clk;
  input wr_en;
  input [0:0]AR;
  input [2:0]D;
  output [3:0]Q;
  input [0:0]\Q_reg_reg[0] ;
  input [0:0]\gnxpm_cdc.rd_pntr_gc_reg[3]_0 ;
  input [3:0]\gnxpm_cdc.wr_pntr_gc_reg[3]_0 ;
  input [2:0]ram_empty_i_reg;
  input [3:0]ram_full_fb_i_reg_0;
  input [3:0]ram_full_fb_i_reg_1;

  wire [0:0]AR;
  wire [2:0]D;
  wire [3:0]Q;
  wire [0:0]\Q_reg_reg[0] ;
  wire [2:0]bin2gray;
  wire \gnxpm_cdc.gsync_stage[2].wr_stg_inst_n_4 ;
  wire [0:0]\gnxpm_cdc.rd_pntr_gc_reg[3]_0 ;
  wire \gnxpm_cdc.wr_pntr_bin_reg[2]_0 ;
  wire [3:0]\gnxpm_cdc.wr_pntr_gc_reg[3]_0 ;
  wire gray2bin0__0;
  wire \gray2bin0_inferred__0/i__n_0 ;
  wire \gray2bin0_inferred__2/i__n_0 ;
  wire \gray2bin0_inferred__3/i__n_0 ;
  wire gray2bin0_n_0;
  wire out;
  wire [2:0]ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire [3:0]ram_full_fb_i_reg_0;
  wire [3:0]ram_full_fb_i_reg_1;
  wire ram_full_i_i_2_n_0;
  wire ram_full_i_i_3_n_0;
  wire ram_full_i_i_4_n_0;
  wire ram_full_i_i_5_n_0;
  wire rd_clk;
  wire [3:0]rd_pntr_gc;
  wire [3:0]rd_pntr_wr;
  wire [3:0]\rd_q[1]_5 ;
  wire [3:0]\rd_q[2]_7 ;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_gc;
  wire [3:0]\wr_q[1]_4 ;
  wire [3:0]\wr_q[2]_6 ;

  synchronizer_ff__parameterized0_19 \gnxpm_cdc.gsync_stage[1].rd_stg_inst 
       (.D(\wr_q[1]_4 ),
        .Q(wr_pntr_gc),
        .\Q_reg_reg[0]_0 (\Q_reg_reg[0] ),
        .rd_clk(rd_clk));
  synchronizer_ff__parameterized0_20 \gnxpm_cdc.gsync_stage[1].wr_stg_inst 
       (.AR(AR),
        .D(\rd_q[1]_5 ),
        .Q(rd_pntr_gc),
        .wr_clk(wr_clk));
  synchronizer_ff__parameterized0_21 \gnxpm_cdc.gsync_stage[2].rd_stg_inst 
       (.D(gray2bin0__0),
        .\Q_reg_reg[0]_0 (\Q_reg_reg[0] ),
        .\Q_reg_reg[3]_0 (\wr_q[1]_4 ),
        .out(\wr_q[2]_6 ),
        .rd_clk(rd_clk));
  synchronizer_ff__parameterized0_22 \gnxpm_cdc.gsync_stage[2].wr_stg_inst 
       (.AR(AR),
        .D(\gnxpm_cdc.gsync_stage[2].wr_stg_inst_n_4 ),
        .\Q_reg_reg[3]_0 (\rd_q[1]_5 ),
        .out(\rd_q[2]_7 ),
        .wr_clk(wr_clk));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gray2bin0_inferred__2/i__n_0 ),
        .Q(rd_pntr_wr[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gray2bin0_inferred__3/i__n_0 ),
        .Q(rd_pntr_wr[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gnxpm_cdc.gsync_stage[2].wr_stg_inst_n_4 ),
        .Q(rd_pntr_wr[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\rd_q[2]_7 [3]),
        .Q(rd_pntr_wr[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(D[0]),
        .Q(rd_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(D[1]),
        .Q(rd_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(D[2]),
        .Q(rd_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(\gnxpm_cdc.rd_pntr_gc_reg[3]_0 ),
        .Q(rd_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(gray2bin0_n_0),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(\gray2bin0_inferred__0/i__n_0 ),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(gray2bin0__0),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0] ),
        .D(\wr_q[2]_6 [3]),
        .Q(Q[3]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_gc[0]_i_1 
       (.I0(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [1]),
        .I1(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [0]),
        .O(bin2gray[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_gc[1]_i_1 
       (.I0(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [2]),
        .I1(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [1]),
        .O(bin2gray[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_gc[2]_i_1 
       (.I0(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [3]),
        .I1(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [2]),
        .O(bin2gray[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(bin2gray[0]),
        .Q(wr_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(bin2gray[1]),
        .Q(wr_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(bin2gray[2]),
        .Q(wr_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gnxpm_cdc.wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\gnxpm_cdc.wr_pntr_gc_reg[3]_0 [3]),
        .Q(wr_pntr_gc[3]));
  (* \PinAttr:I3:HOLD_DETOUR  = "154" *) 
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    gray2bin0
       (.I0(\wr_q[2]_6 [2]),
        .I1(\wr_q[2]_6 [3]),
        .I2(\wr_q[2]_6 [0]),
        .I3(\wr_q[2]_6 [1]),
        .O(gray2bin0_n_0));
  (* \PinAttr:I1:HOLD_DETOUR  = "154" *) 
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \gray2bin0_inferred__0/i_ 
       (.I0(\wr_q[2]_6 [3]),
        .I1(\wr_q[2]_6 [1]),
        .I2(\wr_q[2]_6 [2]),
        .O(\gray2bin0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \gray2bin0_inferred__2/i_ 
       (.I0(\rd_q[2]_7 [2]),
        .I1(\rd_q[2]_7 [3]),
        .I2(\rd_q[2]_7 [0]),
        .I3(\rd_q[2]_7 [1]),
        .O(\gray2bin0_inferred__2/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \gray2bin0_inferred__3/i_ 
       (.I0(\rd_q[2]_7 [3]),
        .I1(\rd_q[2]_7 [1]),
        .I2(\rd_q[2]_7 [2]),
        .O(\gray2bin0_inferred__3/i__n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_4
       (.I0(Q[2]),
        .I1(ram_empty_i_reg[2]),
        .I2(Q[1]),
        .I3(ram_empty_i_reg[1]),
        .I4(ram_empty_i_reg[0]),
        .I5(Q[0]),
        .O(\gnxpm_cdc.wr_pntr_bin_reg[2]_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    ram_full_i_i_1
       (.I0(ram_full_i_i_2_n_0),
        .I1(ram_full_i_i_3_n_0),
        .I2(wr_en),
        .I3(out),
        .I4(ram_full_i_i_4_n_0),
        .I5(ram_full_i_i_5_n_0),
        .O(ram_full_fb_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_2
       (.I0(rd_pntr_wr[2]),
        .I1(ram_full_fb_i_reg_0[2]),
        .I2(rd_pntr_wr[3]),
        .I3(ram_full_fb_i_reg_0[3]),
        .O(ram_full_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_3
       (.I0(rd_pntr_wr[0]),
        .I1(ram_full_fb_i_reg_0[0]),
        .I2(rd_pntr_wr[1]),
        .I3(ram_full_fb_i_reg_0[1]),
        .O(ram_full_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_4
       (.I0(rd_pntr_wr[0]),
        .I1(ram_full_fb_i_reg_1[0]),
        .I2(rd_pntr_wr[1]),
        .I3(ram_full_fb_i_reg_1[1]),
        .O(ram_full_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_5
       (.I0(rd_pntr_wr[2]),
        .I1(ram_full_fb_i_reg_1[2]),
        .I2(rd_pntr_wr[3]),
        .I3(ram_full_fb_i_reg_1[3]),
        .O(ram_full_i_i_5_n_0));
endmodule

(* CHECK_LICENSE_TYPE = "dbg_hub,xsdbm_v3_0_0_xsdbm,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "xsdbm_v3_0_0_xsdbm,Vivado 2020.1" *) 
module dbg_hub
   (clk,
    sl_iport0_o,
    sl_oport0_i);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 signal_clock CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME signal_clock, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.000, INSERT_VIP 0" *) input clk;
  output [36:0]sl_iport0_o;
  input [16:0]sl_oport0_i;

  wire clk;
  wire [36:0]sl_iport0_o;
  wire [16:0]sl_oport0_i;
  wire NLW_inst_bscanid_en_0_UNCONNECTED;
  wire NLW_inst_bscanid_en_1_UNCONNECTED;
  wire NLW_inst_bscanid_en_10_UNCONNECTED;
  wire NLW_inst_bscanid_en_11_UNCONNECTED;
  wire NLW_inst_bscanid_en_12_UNCONNECTED;
  wire NLW_inst_bscanid_en_13_UNCONNECTED;
  wire NLW_inst_bscanid_en_14_UNCONNECTED;
  wire NLW_inst_bscanid_en_15_UNCONNECTED;
  wire NLW_inst_bscanid_en_2_UNCONNECTED;
  wire NLW_inst_bscanid_en_3_UNCONNECTED;
  wire NLW_inst_bscanid_en_4_UNCONNECTED;
  wire NLW_inst_bscanid_en_5_UNCONNECTED;
  wire NLW_inst_bscanid_en_6_UNCONNECTED;
  wire NLW_inst_bscanid_en_7_UNCONNECTED;
  wire NLW_inst_bscanid_en_8_UNCONNECTED;
  wire NLW_inst_bscanid_en_9_UNCONNECTED;
  wire NLW_inst_capture_0_UNCONNECTED;
  wire NLW_inst_capture_1_UNCONNECTED;
  wire NLW_inst_capture_10_UNCONNECTED;
  wire NLW_inst_capture_11_UNCONNECTED;
  wire NLW_inst_capture_12_UNCONNECTED;
  wire NLW_inst_capture_13_UNCONNECTED;
  wire NLW_inst_capture_14_UNCONNECTED;
  wire NLW_inst_capture_15_UNCONNECTED;
  wire NLW_inst_capture_2_UNCONNECTED;
  wire NLW_inst_capture_3_UNCONNECTED;
  wire NLW_inst_capture_4_UNCONNECTED;
  wire NLW_inst_capture_5_UNCONNECTED;
  wire NLW_inst_capture_6_UNCONNECTED;
  wire NLW_inst_capture_7_UNCONNECTED;
  wire NLW_inst_capture_8_UNCONNECTED;
  wire NLW_inst_capture_9_UNCONNECTED;
  wire NLW_inst_drck_0_UNCONNECTED;
  wire NLW_inst_drck_1_UNCONNECTED;
  wire NLW_inst_drck_10_UNCONNECTED;
  wire NLW_inst_drck_11_UNCONNECTED;
  wire NLW_inst_drck_12_UNCONNECTED;
  wire NLW_inst_drck_13_UNCONNECTED;
  wire NLW_inst_drck_14_UNCONNECTED;
  wire NLW_inst_drck_15_UNCONNECTED;
  wire NLW_inst_drck_2_UNCONNECTED;
  wire NLW_inst_drck_3_UNCONNECTED;
  wire NLW_inst_drck_4_UNCONNECTED;
  wire NLW_inst_drck_5_UNCONNECTED;
  wire NLW_inst_drck_6_UNCONNECTED;
  wire NLW_inst_drck_7_UNCONNECTED;
  wire NLW_inst_drck_8_UNCONNECTED;
  wire NLW_inst_drck_9_UNCONNECTED;
  wire NLW_inst_reset_0_UNCONNECTED;
  wire NLW_inst_reset_1_UNCONNECTED;
  wire NLW_inst_reset_10_UNCONNECTED;
  wire NLW_inst_reset_11_UNCONNECTED;
  wire NLW_inst_reset_12_UNCONNECTED;
  wire NLW_inst_reset_13_UNCONNECTED;
  wire NLW_inst_reset_14_UNCONNECTED;
  wire NLW_inst_reset_15_UNCONNECTED;
  wire NLW_inst_reset_2_UNCONNECTED;
  wire NLW_inst_reset_3_UNCONNECTED;
  wire NLW_inst_reset_4_UNCONNECTED;
  wire NLW_inst_reset_5_UNCONNECTED;
  wire NLW_inst_reset_6_UNCONNECTED;
  wire NLW_inst_reset_7_UNCONNECTED;
  wire NLW_inst_reset_8_UNCONNECTED;
  wire NLW_inst_reset_9_UNCONNECTED;
  wire NLW_inst_runtest_0_UNCONNECTED;
  wire NLW_inst_runtest_1_UNCONNECTED;
  wire NLW_inst_runtest_10_UNCONNECTED;
  wire NLW_inst_runtest_11_UNCONNECTED;
  wire NLW_inst_runtest_12_UNCONNECTED;
  wire NLW_inst_runtest_13_UNCONNECTED;
  wire NLW_inst_runtest_14_UNCONNECTED;
  wire NLW_inst_runtest_15_UNCONNECTED;
  wire NLW_inst_runtest_2_UNCONNECTED;
  wire NLW_inst_runtest_3_UNCONNECTED;
  wire NLW_inst_runtest_4_UNCONNECTED;
  wire NLW_inst_runtest_5_UNCONNECTED;
  wire NLW_inst_runtest_6_UNCONNECTED;
  wire NLW_inst_runtest_7_UNCONNECTED;
  wire NLW_inst_runtest_8_UNCONNECTED;
  wire NLW_inst_runtest_9_UNCONNECTED;
  wire NLW_inst_sel_0_UNCONNECTED;
  wire NLW_inst_sel_1_UNCONNECTED;
  wire NLW_inst_sel_10_UNCONNECTED;
  wire NLW_inst_sel_11_UNCONNECTED;
  wire NLW_inst_sel_12_UNCONNECTED;
  wire NLW_inst_sel_13_UNCONNECTED;
  wire NLW_inst_sel_14_UNCONNECTED;
  wire NLW_inst_sel_15_UNCONNECTED;
  wire NLW_inst_sel_2_UNCONNECTED;
  wire NLW_inst_sel_3_UNCONNECTED;
  wire NLW_inst_sel_4_UNCONNECTED;
  wire NLW_inst_sel_5_UNCONNECTED;
  wire NLW_inst_sel_6_UNCONNECTED;
  wire NLW_inst_sel_7_UNCONNECTED;
  wire NLW_inst_sel_8_UNCONNECTED;
  wire NLW_inst_sel_9_UNCONNECTED;
  wire NLW_inst_shift_0_UNCONNECTED;
  wire NLW_inst_shift_1_UNCONNECTED;
  wire NLW_inst_shift_10_UNCONNECTED;
  wire NLW_inst_shift_11_UNCONNECTED;
  wire NLW_inst_shift_12_UNCONNECTED;
  wire NLW_inst_shift_13_UNCONNECTED;
  wire NLW_inst_shift_14_UNCONNECTED;
  wire NLW_inst_shift_15_UNCONNECTED;
  wire NLW_inst_shift_2_UNCONNECTED;
  wire NLW_inst_shift_3_UNCONNECTED;
  wire NLW_inst_shift_4_UNCONNECTED;
  wire NLW_inst_shift_5_UNCONNECTED;
  wire NLW_inst_shift_6_UNCONNECTED;
  wire NLW_inst_shift_7_UNCONNECTED;
  wire NLW_inst_shift_8_UNCONNECTED;
  wire NLW_inst_shift_9_UNCONNECTED;
  wire NLW_inst_tck_0_UNCONNECTED;
  wire NLW_inst_tck_1_UNCONNECTED;
  wire NLW_inst_tck_10_UNCONNECTED;
  wire NLW_inst_tck_11_UNCONNECTED;
  wire NLW_inst_tck_12_UNCONNECTED;
  wire NLW_inst_tck_13_UNCONNECTED;
  wire NLW_inst_tck_14_UNCONNECTED;
  wire NLW_inst_tck_15_UNCONNECTED;
  wire NLW_inst_tck_2_UNCONNECTED;
  wire NLW_inst_tck_3_UNCONNECTED;
  wire NLW_inst_tck_4_UNCONNECTED;
  wire NLW_inst_tck_5_UNCONNECTED;
  wire NLW_inst_tck_6_UNCONNECTED;
  wire NLW_inst_tck_7_UNCONNECTED;
  wire NLW_inst_tck_8_UNCONNECTED;
  wire NLW_inst_tck_9_UNCONNECTED;
  wire NLW_inst_tdi_0_UNCONNECTED;
  wire NLW_inst_tdi_1_UNCONNECTED;
  wire NLW_inst_tdi_10_UNCONNECTED;
  wire NLW_inst_tdi_11_UNCONNECTED;
  wire NLW_inst_tdi_12_UNCONNECTED;
  wire NLW_inst_tdi_13_UNCONNECTED;
  wire NLW_inst_tdi_14_UNCONNECTED;
  wire NLW_inst_tdi_15_UNCONNECTED;
  wire NLW_inst_tdi_2_UNCONNECTED;
  wire NLW_inst_tdi_3_UNCONNECTED;
  wire NLW_inst_tdi_4_UNCONNECTED;
  wire NLW_inst_tdi_5_UNCONNECTED;
  wire NLW_inst_tdi_6_UNCONNECTED;
  wire NLW_inst_tdi_7_UNCONNECTED;
  wire NLW_inst_tdi_8_UNCONNECTED;
  wire NLW_inst_tdi_9_UNCONNECTED;
  wire NLW_inst_tdo_UNCONNECTED;
  wire NLW_inst_tms_0_UNCONNECTED;
  wire NLW_inst_tms_1_UNCONNECTED;
  wire NLW_inst_tms_10_UNCONNECTED;
  wire NLW_inst_tms_11_UNCONNECTED;
  wire NLW_inst_tms_12_UNCONNECTED;
  wire NLW_inst_tms_13_UNCONNECTED;
  wire NLW_inst_tms_14_UNCONNECTED;
  wire NLW_inst_tms_15_UNCONNECTED;
  wire NLW_inst_tms_2_UNCONNECTED;
  wire NLW_inst_tms_3_UNCONNECTED;
  wire NLW_inst_tms_4_UNCONNECTED;
  wire NLW_inst_tms_5_UNCONNECTED;
  wire NLW_inst_tms_6_UNCONNECTED;
  wire NLW_inst_tms_7_UNCONNECTED;
  wire NLW_inst_tms_8_UNCONNECTED;
  wire NLW_inst_tms_9_UNCONNECTED;
  wire NLW_inst_update_0_UNCONNECTED;
  wire NLW_inst_update_1_UNCONNECTED;
  wire NLW_inst_update_10_UNCONNECTED;
  wire NLW_inst_update_11_UNCONNECTED;
  wire NLW_inst_update_12_UNCONNECTED;
  wire NLW_inst_update_13_UNCONNECTED;
  wire NLW_inst_update_14_UNCONNECTED;
  wire NLW_inst_update_15_UNCONNECTED;
  wire NLW_inst_update_2_UNCONNECTED;
  wire NLW_inst_update_3_UNCONNECTED;
  wire NLW_inst_update_4_UNCONNECTED;
  wire NLW_inst_update_5_UNCONNECTED;
  wire NLW_inst_update_6_UNCONNECTED;
  wire NLW_inst_update_7_UNCONNECTED;
  wire NLW_inst_update_8_UNCONNECTED;
  wire NLW_inst_update_9_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_0_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_1_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_10_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_11_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_12_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_13_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_14_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_15_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_2_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_3_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_4_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_5_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_6_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_7_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_8_UNCONNECTED;
  wire [31:0]NLW_inst_bscanid_9_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport100_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport101_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport102_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport103_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport104_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport105_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport106_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport107_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport108_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport109_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport10_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport110_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport111_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport112_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport113_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport114_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport115_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport116_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport117_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport118_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport119_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport11_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport120_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport121_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport122_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport123_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport124_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport125_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport126_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport127_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport128_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport129_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport12_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport130_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport131_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport132_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport133_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport134_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport135_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport136_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport137_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport138_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport139_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport13_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport140_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport141_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport142_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport143_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport144_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport145_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport146_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport147_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport148_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport149_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport14_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport150_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport151_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport152_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport153_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport154_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport155_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport156_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport157_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport158_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport159_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport15_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport160_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport161_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport162_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport163_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport164_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport165_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport166_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport167_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport168_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport169_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport16_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport170_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport171_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport172_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport173_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport174_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport175_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport176_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport177_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport178_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport179_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport17_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport180_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport181_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport182_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport183_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport184_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport185_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport186_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport187_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport188_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport189_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport18_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport190_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport191_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport192_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport193_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport194_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport195_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport196_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport197_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport198_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport199_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport19_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport1_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport200_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport201_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport202_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport203_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport204_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport205_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport206_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport207_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport208_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport209_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport20_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport210_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport211_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport212_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport213_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport214_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport215_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport216_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport217_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport218_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport219_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport21_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport220_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport221_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport222_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport223_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport224_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport225_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport226_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport227_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport228_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport229_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport22_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport230_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport231_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport232_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport233_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport234_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport235_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport236_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport237_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport238_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport239_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport23_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport240_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport241_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport242_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport243_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport244_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport245_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport246_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport247_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport248_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport249_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport24_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport250_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport251_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport252_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport253_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport254_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport255_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport25_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport26_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport27_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport28_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport29_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport2_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport30_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport31_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport32_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport33_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport34_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport35_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport36_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport37_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport38_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport39_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport3_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport40_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport41_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport42_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport43_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport44_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport45_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport46_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport47_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport48_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport49_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport4_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport50_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport51_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport52_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport53_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport54_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport55_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport56_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport57_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport58_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport59_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport5_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport60_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport61_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport62_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport63_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport64_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport65_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport66_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport67_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport68_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport69_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport6_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport70_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport71_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport72_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport73_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport74_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport75_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport76_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport77_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport78_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport79_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport7_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport80_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport81_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport82_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport83_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport84_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport85_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport86_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport87_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport88_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport89_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport8_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport90_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport91_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport92_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport93_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport94_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport95_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport96_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport97_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport98_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport99_o_UNCONNECTED;
  wire [0:0]NLW_inst_sl_iport9_o_UNCONNECTED;

  (* C_BSCANID = "32'b00000100100100000000001000100000" *) 
  (* C_BSCAN_MODE = "0" *) 
  (* C_BSCAN_MODE_WITH_CORE = "0" *) 
  (* C_BUILD_REVISION = "0" *) 
  (* C_CLKFBOUT_MULT_F = "10.000000" *) 
  (* C_CLKOUT0_DIVIDE_F = "10.000000" *) 
  (* C_CLK_INPUT_FREQ_HZ = "32'b00010001111000011010001100000000" *) 
  (* C_CORE_MAJOR_VER = "1" *) 
  (* C_CORE_MINOR_ALPHA_VER = "97" *) 
  (* C_CORE_MINOR_VER = "0" *) 
  (* C_CORE_TYPE = "1" *) 
  (* C_DCLK_HAS_RESET = "0" *) 
  (* C_DIVCLK_DIVIDE = "3" *) 
  (* C_ENABLE_CLK_DIVIDER = "0" *) 
  (* C_EN_BSCANID_VEC = "0" *) 
  (* C_EN_INT_SIM = "1" *) 
  (* C_FIFO_STYLE = "SUBCORE" *) 
  (* C_MAJOR_VERSION = "14" *) 
  (* C_MINOR_VERSION = "1" *) 
  (* C_NUM_BSCAN_MASTER_PORTS = "0" *) 
  (* C_TWO_PRIM_MODE = "0" *) 
  (* C_USER_SCAN_CHAIN = "1" *) 
  (* C_USER_SCAN_CHAIN1 = "1" *) 
  (* C_USE_BUFR = "0" *) 
  (* C_USE_EXT_BSCAN = "0" *) 
  (* C_USE_STARTUP_CLK = "0" *) 
  (* C_XDEVICEFAMILY = "zynq" *) 
  (* C_XSDB_NUM_SLAVES = "1" *) 
  (* C_XSDB_PERIOD_FRC = "0" *) 
  (* C_XSDB_PERIOD_INT = "10" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  xsdbm_v3_0_0_xsdbm inst
       (.bscanid(NLW_inst_bscanid_UNCONNECTED[31:0]),
        .bscanid_0(NLW_inst_bscanid_0_UNCONNECTED[31:0]),
        .bscanid_1(NLW_inst_bscanid_1_UNCONNECTED[31:0]),
        .bscanid_10(NLW_inst_bscanid_10_UNCONNECTED[31:0]),
        .bscanid_11(NLW_inst_bscanid_11_UNCONNECTED[31:0]),
        .bscanid_12(NLW_inst_bscanid_12_UNCONNECTED[31:0]),
        .bscanid_13(NLW_inst_bscanid_13_UNCONNECTED[31:0]),
        .bscanid_14(NLW_inst_bscanid_14_UNCONNECTED[31:0]),
        .bscanid_15(NLW_inst_bscanid_15_UNCONNECTED[31:0]),
        .bscanid_2(NLW_inst_bscanid_2_UNCONNECTED[31:0]),
        .bscanid_3(NLW_inst_bscanid_3_UNCONNECTED[31:0]),
        .bscanid_4(NLW_inst_bscanid_4_UNCONNECTED[31:0]),
        .bscanid_5(NLW_inst_bscanid_5_UNCONNECTED[31:0]),
        .bscanid_6(NLW_inst_bscanid_6_UNCONNECTED[31:0]),
        .bscanid_7(NLW_inst_bscanid_7_UNCONNECTED[31:0]),
        .bscanid_8(NLW_inst_bscanid_8_UNCONNECTED[31:0]),
        .bscanid_9(NLW_inst_bscanid_9_UNCONNECTED[31:0]),
        .bscanid_en(1'b0),
        .bscanid_en_0(NLW_inst_bscanid_en_0_UNCONNECTED),
        .bscanid_en_1(NLW_inst_bscanid_en_1_UNCONNECTED),
        .bscanid_en_10(NLW_inst_bscanid_en_10_UNCONNECTED),
        .bscanid_en_11(NLW_inst_bscanid_en_11_UNCONNECTED),
        .bscanid_en_12(NLW_inst_bscanid_en_12_UNCONNECTED),
        .bscanid_en_13(NLW_inst_bscanid_en_13_UNCONNECTED),
        .bscanid_en_14(NLW_inst_bscanid_en_14_UNCONNECTED),
        .bscanid_en_15(NLW_inst_bscanid_en_15_UNCONNECTED),
        .bscanid_en_2(NLW_inst_bscanid_en_2_UNCONNECTED),
        .bscanid_en_3(NLW_inst_bscanid_en_3_UNCONNECTED),
        .bscanid_en_4(NLW_inst_bscanid_en_4_UNCONNECTED),
        .bscanid_en_5(NLW_inst_bscanid_en_5_UNCONNECTED),
        .bscanid_en_6(NLW_inst_bscanid_en_6_UNCONNECTED),
        .bscanid_en_7(NLW_inst_bscanid_en_7_UNCONNECTED),
        .bscanid_en_8(NLW_inst_bscanid_en_8_UNCONNECTED),
        .bscanid_en_9(NLW_inst_bscanid_en_9_UNCONNECTED),
        .capture(1'b0),
        .capture_0(NLW_inst_capture_0_UNCONNECTED),
        .capture_1(NLW_inst_capture_1_UNCONNECTED),
        .capture_10(NLW_inst_capture_10_UNCONNECTED),
        .capture_11(NLW_inst_capture_11_UNCONNECTED),
        .capture_12(NLW_inst_capture_12_UNCONNECTED),
        .capture_13(NLW_inst_capture_13_UNCONNECTED),
        .capture_14(NLW_inst_capture_14_UNCONNECTED),
        .capture_15(NLW_inst_capture_15_UNCONNECTED),
        .capture_2(NLW_inst_capture_2_UNCONNECTED),
        .capture_3(NLW_inst_capture_3_UNCONNECTED),
        .capture_4(NLW_inst_capture_4_UNCONNECTED),
        .capture_5(NLW_inst_capture_5_UNCONNECTED),
        .capture_6(NLW_inst_capture_6_UNCONNECTED),
        .capture_7(NLW_inst_capture_7_UNCONNECTED),
        .capture_8(NLW_inst_capture_8_UNCONNECTED),
        .capture_9(NLW_inst_capture_9_UNCONNECTED),
        .clk(clk),
        .drck(1'b0),
        .drck_0(NLW_inst_drck_0_UNCONNECTED),
        .drck_1(NLW_inst_drck_1_UNCONNECTED),
        .drck_10(NLW_inst_drck_10_UNCONNECTED),
        .drck_11(NLW_inst_drck_11_UNCONNECTED),
        .drck_12(NLW_inst_drck_12_UNCONNECTED),
        .drck_13(NLW_inst_drck_13_UNCONNECTED),
        .drck_14(NLW_inst_drck_14_UNCONNECTED),
        .drck_15(NLW_inst_drck_15_UNCONNECTED),
        .drck_2(NLW_inst_drck_2_UNCONNECTED),
        .drck_3(NLW_inst_drck_3_UNCONNECTED),
        .drck_4(NLW_inst_drck_4_UNCONNECTED),
        .drck_5(NLW_inst_drck_5_UNCONNECTED),
        .drck_6(NLW_inst_drck_6_UNCONNECTED),
        .drck_7(NLW_inst_drck_7_UNCONNECTED),
        .drck_8(NLW_inst_drck_8_UNCONNECTED),
        .drck_9(NLW_inst_drck_9_UNCONNECTED),
        .reset(1'b0),
        .reset_0(NLW_inst_reset_0_UNCONNECTED),
        .reset_1(NLW_inst_reset_1_UNCONNECTED),
        .reset_10(NLW_inst_reset_10_UNCONNECTED),
        .reset_11(NLW_inst_reset_11_UNCONNECTED),
        .reset_12(NLW_inst_reset_12_UNCONNECTED),
        .reset_13(NLW_inst_reset_13_UNCONNECTED),
        .reset_14(NLW_inst_reset_14_UNCONNECTED),
        .reset_15(NLW_inst_reset_15_UNCONNECTED),
        .reset_2(NLW_inst_reset_2_UNCONNECTED),
        .reset_3(NLW_inst_reset_3_UNCONNECTED),
        .reset_4(NLW_inst_reset_4_UNCONNECTED),
        .reset_5(NLW_inst_reset_5_UNCONNECTED),
        .reset_6(NLW_inst_reset_6_UNCONNECTED),
        .reset_7(NLW_inst_reset_7_UNCONNECTED),
        .reset_8(NLW_inst_reset_8_UNCONNECTED),
        .reset_9(NLW_inst_reset_9_UNCONNECTED),
        .runtest(1'b0),
        .runtest_0(NLW_inst_runtest_0_UNCONNECTED),
        .runtest_1(NLW_inst_runtest_1_UNCONNECTED),
        .runtest_10(NLW_inst_runtest_10_UNCONNECTED),
        .runtest_11(NLW_inst_runtest_11_UNCONNECTED),
        .runtest_12(NLW_inst_runtest_12_UNCONNECTED),
        .runtest_13(NLW_inst_runtest_13_UNCONNECTED),
        .runtest_14(NLW_inst_runtest_14_UNCONNECTED),
        .runtest_15(NLW_inst_runtest_15_UNCONNECTED),
        .runtest_2(NLW_inst_runtest_2_UNCONNECTED),
        .runtest_3(NLW_inst_runtest_3_UNCONNECTED),
        .runtest_4(NLW_inst_runtest_4_UNCONNECTED),
        .runtest_5(NLW_inst_runtest_5_UNCONNECTED),
        .runtest_6(NLW_inst_runtest_6_UNCONNECTED),
        .runtest_7(NLW_inst_runtest_7_UNCONNECTED),
        .runtest_8(NLW_inst_runtest_8_UNCONNECTED),
        .runtest_9(NLW_inst_runtest_9_UNCONNECTED),
        .sel(1'b0),
        .sel_0(NLW_inst_sel_0_UNCONNECTED),
        .sel_1(NLW_inst_sel_1_UNCONNECTED),
        .sel_10(NLW_inst_sel_10_UNCONNECTED),
        .sel_11(NLW_inst_sel_11_UNCONNECTED),
        .sel_12(NLW_inst_sel_12_UNCONNECTED),
        .sel_13(NLW_inst_sel_13_UNCONNECTED),
        .sel_14(NLW_inst_sel_14_UNCONNECTED),
        .sel_15(NLW_inst_sel_15_UNCONNECTED),
        .sel_2(NLW_inst_sel_2_UNCONNECTED),
        .sel_3(NLW_inst_sel_3_UNCONNECTED),
        .sel_4(NLW_inst_sel_4_UNCONNECTED),
        .sel_5(NLW_inst_sel_5_UNCONNECTED),
        .sel_6(NLW_inst_sel_6_UNCONNECTED),
        .sel_7(NLW_inst_sel_7_UNCONNECTED),
        .sel_8(NLW_inst_sel_8_UNCONNECTED),
        .sel_9(NLW_inst_sel_9_UNCONNECTED),
        .shift(1'b0),
        .shift_0(NLW_inst_shift_0_UNCONNECTED),
        .shift_1(NLW_inst_shift_1_UNCONNECTED),
        .shift_10(NLW_inst_shift_10_UNCONNECTED),
        .shift_11(NLW_inst_shift_11_UNCONNECTED),
        .shift_12(NLW_inst_shift_12_UNCONNECTED),
        .shift_13(NLW_inst_shift_13_UNCONNECTED),
        .shift_14(NLW_inst_shift_14_UNCONNECTED),
        .shift_15(NLW_inst_shift_15_UNCONNECTED),
        .shift_2(NLW_inst_shift_2_UNCONNECTED),
        .shift_3(NLW_inst_shift_3_UNCONNECTED),
        .shift_4(NLW_inst_shift_4_UNCONNECTED),
        .shift_5(NLW_inst_shift_5_UNCONNECTED),
        .shift_6(NLW_inst_shift_6_UNCONNECTED),
        .shift_7(NLW_inst_shift_7_UNCONNECTED),
        .shift_8(NLW_inst_shift_8_UNCONNECTED),
        .shift_9(NLW_inst_shift_9_UNCONNECTED),
        .sl_iport0_o(sl_iport0_o),
        .sl_iport100_o(NLW_inst_sl_iport100_o_UNCONNECTED[0]),
        .sl_iport101_o(NLW_inst_sl_iport101_o_UNCONNECTED[0]),
        .sl_iport102_o(NLW_inst_sl_iport102_o_UNCONNECTED[0]),
        .sl_iport103_o(NLW_inst_sl_iport103_o_UNCONNECTED[0]),
        .sl_iport104_o(NLW_inst_sl_iport104_o_UNCONNECTED[0]),
        .sl_iport105_o(NLW_inst_sl_iport105_o_UNCONNECTED[0]),
        .sl_iport106_o(NLW_inst_sl_iport106_o_UNCONNECTED[0]),
        .sl_iport107_o(NLW_inst_sl_iport107_o_UNCONNECTED[0]),
        .sl_iport108_o(NLW_inst_sl_iport108_o_UNCONNECTED[0]),
        .sl_iport109_o(NLW_inst_sl_iport109_o_UNCONNECTED[0]),
        .sl_iport10_o(NLW_inst_sl_iport10_o_UNCONNECTED[0]),
        .sl_iport110_o(NLW_inst_sl_iport110_o_UNCONNECTED[0]),
        .sl_iport111_o(NLW_inst_sl_iport111_o_UNCONNECTED[0]),
        .sl_iport112_o(NLW_inst_sl_iport112_o_UNCONNECTED[0]),
        .sl_iport113_o(NLW_inst_sl_iport113_o_UNCONNECTED[0]),
        .sl_iport114_o(NLW_inst_sl_iport114_o_UNCONNECTED[0]),
        .sl_iport115_o(NLW_inst_sl_iport115_o_UNCONNECTED[0]),
        .sl_iport116_o(NLW_inst_sl_iport116_o_UNCONNECTED[0]),
        .sl_iport117_o(NLW_inst_sl_iport117_o_UNCONNECTED[0]),
        .sl_iport118_o(NLW_inst_sl_iport118_o_UNCONNECTED[0]),
        .sl_iport119_o(NLW_inst_sl_iport119_o_UNCONNECTED[0]),
        .sl_iport11_o(NLW_inst_sl_iport11_o_UNCONNECTED[0]),
        .sl_iport120_o(NLW_inst_sl_iport120_o_UNCONNECTED[0]),
        .sl_iport121_o(NLW_inst_sl_iport121_o_UNCONNECTED[0]),
        .sl_iport122_o(NLW_inst_sl_iport122_o_UNCONNECTED[0]),
        .sl_iport123_o(NLW_inst_sl_iport123_o_UNCONNECTED[0]),
        .sl_iport124_o(NLW_inst_sl_iport124_o_UNCONNECTED[0]),
        .sl_iport125_o(NLW_inst_sl_iport125_o_UNCONNECTED[0]),
        .sl_iport126_o(NLW_inst_sl_iport126_o_UNCONNECTED[0]),
        .sl_iport127_o(NLW_inst_sl_iport127_o_UNCONNECTED[0]),
        .sl_iport128_o(NLW_inst_sl_iport128_o_UNCONNECTED[0]),
        .sl_iport129_o(NLW_inst_sl_iport129_o_UNCONNECTED[0]),
        .sl_iport12_o(NLW_inst_sl_iport12_o_UNCONNECTED[0]),
        .sl_iport130_o(NLW_inst_sl_iport130_o_UNCONNECTED[0]),
        .sl_iport131_o(NLW_inst_sl_iport131_o_UNCONNECTED[0]),
        .sl_iport132_o(NLW_inst_sl_iport132_o_UNCONNECTED[0]),
        .sl_iport133_o(NLW_inst_sl_iport133_o_UNCONNECTED[0]),
        .sl_iport134_o(NLW_inst_sl_iport134_o_UNCONNECTED[0]),
        .sl_iport135_o(NLW_inst_sl_iport135_o_UNCONNECTED[0]),
        .sl_iport136_o(NLW_inst_sl_iport136_o_UNCONNECTED[0]),
        .sl_iport137_o(NLW_inst_sl_iport137_o_UNCONNECTED[0]),
        .sl_iport138_o(NLW_inst_sl_iport138_o_UNCONNECTED[0]),
        .sl_iport139_o(NLW_inst_sl_iport139_o_UNCONNECTED[0]),
        .sl_iport13_o(NLW_inst_sl_iport13_o_UNCONNECTED[0]),
        .sl_iport140_o(NLW_inst_sl_iport140_o_UNCONNECTED[0]),
        .sl_iport141_o(NLW_inst_sl_iport141_o_UNCONNECTED[0]),
        .sl_iport142_o(NLW_inst_sl_iport142_o_UNCONNECTED[0]),
        .sl_iport143_o(NLW_inst_sl_iport143_o_UNCONNECTED[0]),
        .sl_iport144_o(NLW_inst_sl_iport144_o_UNCONNECTED[0]),
        .sl_iport145_o(NLW_inst_sl_iport145_o_UNCONNECTED[0]),
        .sl_iport146_o(NLW_inst_sl_iport146_o_UNCONNECTED[0]),
        .sl_iport147_o(NLW_inst_sl_iport147_o_UNCONNECTED[0]),
        .sl_iport148_o(NLW_inst_sl_iport148_o_UNCONNECTED[0]),
        .sl_iport149_o(NLW_inst_sl_iport149_o_UNCONNECTED[0]),
        .sl_iport14_o(NLW_inst_sl_iport14_o_UNCONNECTED[0]),
        .sl_iport150_o(NLW_inst_sl_iport150_o_UNCONNECTED[0]),
        .sl_iport151_o(NLW_inst_sl_iport151_o_UNCONNECTED[0]),
        .sl_iport152_o(NLW_inst_sl_iport152_o_UNCONNECTED[0]),
        .sl_iport153_o(NLW_inst_sl_iport153_o_UNCONNECTED[0]),
        .sl_iport154_o(NLW_inst_sl_iport154_o_UNCONNECTED[0]),
        .sl_iport155_o(NLW_inst_sl_iport155_o_UNCONNECTED[0]),
        .sl_iport156_o(NLW_inst_sl_iport156_o_UNCONNECTED[0]),
        .sl_iport157_o(NLW_inst_sl_iport157_o_UNCONNECTED[0]),
        .sl_iport158_o(NLW_inst_sl_iport158_o_UNCONNECTED[0]),
        .sl_iport159_o(NLW_inst_sl_iport159_o_UNCONNECTED[0]),
        .sl_iport15_o(NLW_inst_sl_iport15_o_UNCONNECTED[0]),
        .sl_iport160_o(NLW_inst_sl_iport160_o_UNCONNECTED[0]),
        .sl_iport161_o(NLW_inst_sl_iport161_o_UNCONNECTED[0]),
        .sl_iport162_o(NLW_inst_sl_iport162_o_UNCONNECTED[0]),
        .sl_iport163_o(NLW_inst_sl_iport163_o_UNCONNECTED[0]),
        .sl_iport164_o(NLW_inst_sl_iport164_o_UNCONNECTED[0]),
        .sl_iport165_o(NLW_inst_sl_iport165_o_UNCONNECTED[0]),
        .sl_iport166_o(NLW_inst_sl_iport166_o_UNCONNECTED[0]),
        .sl_iport167_o(NLW_inst_sl_iport167_o_UNCONNECTED[0]),
        .sl_iport168_o(NLW_inst_sl_iport168_o_UNCONNECTED[0]),
        .sl_iport169_o(NLW_inst_sl_iport169_o_UNCONNECTED[0]),
        .sl_iport16_o(NLW_inst_sl_iport16_o_UNCONNECTED[0]),
        .sl_iport170_o(NLW_inst_sl_iport170_o_UNCONNECTED[0]),
        .sl_iport171_o(NLW_inst_sl_iport171_o_UNCONNECTED[0]),
        .sl_iport172_o(NLW_inst_sl_iport172_o_UNCONNECTED[0]),
        .sl_iport173_o(NLW_inst_sl_iport173_o_UNCONNECTED[0]),
        .sl_iport174_o(NLW_inst_sl_iport174_o_UNCONNECTED[0]),
        .sl_iport175_o(NLW_inst_sl_iport175_o_UNCONNECTED[0]),
        .sl_iport176_o(NLW_inst_sl_iport176_o_UNCONNECTED[0]),
        .sl_iport177_o(NLW_inst_sl_iport177_o_UNCONNECTED[0]),
        .sl_iport178_o(NLW_inst_sl_iport178_o_UNCONNECTED[0]),
        .sl_iport179_o(NLW_inst_sl_iport179_o_UNCONNECTED[0]),
        .sl_iport17_o(NLW_inst_sl_iport17_o_UNCONNECTED[0]),
        .sl_iport180_o(NLW_inst_sl_iport180_o_UNCONNECTED[0]),
        .sl_iport181_o(NLW_inst_sl_iport181_o_UNCONNECTED[0]),
        .sl_iport182_o(NLW_inst_sl_iport182_o_UNCONNECTED[0]),
        .sl_iport183_o(NLW_inst_sl_iport183_o_UNCONNECTED[0]),
        .sl_iport184_o(NLW_inst_sl_iport184_o_UNCONNECTED[0]),
        .sl_iport185_o(NLW_inst_sl_iport185_o_UNCONNECTED[0]),
        .sl_iport186_o(NLW_inst_sl_iport186_o_UNCONNECTED[0]),
        .sl_iport187_o(NLW_inst_sl_iport187_o_UNCONNECTED[0]),
        .sl_iport188_o(NLW_inst_sl_iport188_o_UNCONNECTED[0]),
        .sl_iport189_o(NLW_inst_sl_iport189_o_UNCONNECTED[0]),
        .sl_iport18_o(NLW_inst_sl_iport18_o_UNCONNECTED[0]),
        .sl_iport190_o(NLW_inst_sl_iport190_o_UNCONNECTED[0]),
        .sl_iport191_o(NLW_inst_sl_iport191_o_UNCONNECTED[0]),
        .sl_iport192_o(NLW_inst_sl_iport192_o_UNCONNECTED[0]),
        .sl_iport193_o(NLW_inst_sl_iport193_o_UNCONNECTED[0]),
        .sl_iport194_o(NLW_inst_sl_iport194_o_UNCONNECTED[0]),
        .sl_iport195_o(NLW_inst_sl_iport195_o_UNCONNECTED[0]),
        .sl_iport196_o(NLW_inst_sl_iport196_o_UNCONNECTED[0]),
        .sl_iport197_o(NLW_inst_sl_iport197_o_UNCONNECTED[0]),
        .sl_iport198_o(NLW_inst_sl_iport198_o_UNCONNECTED[0]),
        .sl_iport199_o(NLW_inst_sl_iport199_o_UNCONNECTED[0]),
        .sl_iport19_o(NLW_inst_sl_iport19_o_UNCONNECTED[0]),
        .sl_iport1_o(NLW_inst_sl_iport1_o_UNCONNECTED[0]),
        .sl_iport200_o(NLW_inst_sl_iport200_o_UNCONNECTED[0]),
        .sl_iport201_o(NLW_inst_sl_iport201_o_UNCONNECTED[0]),
        .sl_iport202_o(NLW_inst_sl_iport202_o_UNCONNECTED[0]),
        .sl_iport203_o(NLW_inst_sl_iport203_o_UNCONNECTED[0]),
        .sl_iport204_o(NLW_inst_sl_iport204_o_UNCONNECTED[0]),
        .sl_iport205_o(NLW_inst_sl_iport205_o_UNCONNECTED[0]),
        .sl_iport206_o(NLW_inst_sl_iport206_o_UNCONNECTED[0]),
        .sl_iport207_o(NLW_inst_sl_iport207_o_UNCONNECTED[0]),
        .sl_iport208_o(NLW_inst_sl_iport208_o_UNCONNECTED[0]),
        .sl_iport209_o(NLW_inst_sl_iport209_o_UNCONNECTED[0]),
        .sl_iport20_o(NLW_inst_sl_iport20_o_UNCONNECTED[0]),
        .sl_iport210_o(NLW_inst_sl_iport210_o_UNCONNECTED[0]),
        .sl_iport211_o(NLW_inst_sl_iport211_o_UNCONNECTED[0]),
        .sl_iport212_o(NLW_inst_sl_iport212_o_UNCONNECTED[0]),
        .sl_iport213_o(NLW_inst_sl_iport213_o_UNCONNECTED[0]),
        .sl_iport214_o(NLW_inst_sl_iport214_o_UNCONNECTED[0]),
        .sl_iport215_o(NLW_inst_sl_iport215_o_UNCONNECTED[0]),
        .sl_iport216_o(NLW_inst_sl_iport216_o_UNCONNECTED[0]),
        .sl_iport217_o(NLW_inst_sl_iport217_o_UNCONNECTED[0]),
        .sl_iport218_o(NLW_inst_sl_iport218_o_UNCONNECTED[0]),
        .sl_iport219_o(NLW_inst_sl_iport219_o_UNCONNECTED[0]),
        .sl_iport21_o(NLW_inst_sl_iport21_o_UNCONNECTED[0]),
        .sl_iport220_o(NLW_inst_sl_iport220_o_UNCONNECTED[0]),
        .sl_iport221_o(NLW_inst_sl_iport221_o_UNCONNECTED[0]),
        .sl_iport222_o(NLW_inst_sl_iport222_o_UNCONNECTED[0]),
        .sl_iport223_o(NLW_inst_sl_iport223_o_UNCONNECTED[0]),
        .sl_iport224_o(NLW_inst_sl_iport224_o_UNCONNECTED[0]),
        .sl_iport225_o(NLW_inst_sl_iport225_o_UNCONNECTED[0]),
        .sl_iport226_o(NLW_inst_sl_iport226_o_UNCONNECTED[0]),
        .sl_iport227_o(NLW_inst_sl_iport227_o_UNCONNECTED[0]),
        .sl_iport228_o(NLW_inst_sl_iport228_o_UNCONNECTED[0]),
        .sl_iport229_o(NLW_inst_sl_iport229_o_UNCONNECTED[0]),
        .sl_iport22_o(NLW_inst_sl_iport22_o_UNCONNECTED[0]),
        .sl_iport230_o(NLW_inst_sl_iport230_o_UNCONNECTED[0]),
        .sl_iport231_o(NLW_inst_sl_iport231_o_UNCONNECTED[0]),
        .sl_iport232_o(NLW_inst_sl_iport232_o_UNCONNECTED[0]),
        .sl_iport233_o(NLW_inst_sl_iport233_o_UNCONNECTED[0]),
        .sl_iport234_o(NLW_inst_sl_iport234_o_UNCONNECTED[0]),
        .sl_iport235_o(NLW_inst_sl_iport235_o_UNCONNECTED[0]),
        .sl_iport236_o(NLW_inst_sl_iport236_o_UNCONNECTED[0]),
        .sl_iport237_o(NLW_inst_sl_iport237_o_UNCONNECTED[0]),
        .sl_iport238_o(NLW_inst_sl_iport238_o_UNCONNECTED[0]),
        .sl_iport239_o(NLW_inst_sl_iport239_o_UNCONNECTED[0]),
        .sl_iport23_o(NLW_inst_sl_iport23_o_UNCONNECTED[0]),
        .sl_iport240_o(NLW_inst_sl_iport240_o_UNCONNECTED[0]),
        .sl_iport241_o(NLW_inst_sl_iport241_o_UNCONNECTED[0]),
        .sl_iport242_o(NLW_inst_sl_iport242_o_UNCONNECTED[0]),
        .sl_iport243_o(NLW_inst_sl_iport243_o_UNCONNECTED[0]),
        .sl_iport244_o(NLW_inst_sl_iport244_o_UNCONNECTED[0]),
        .sl_iport245_o(NLW_inst_sl_iport245_o_UNCONNECTED[0]),
        .sl_iport246_o(NLW_inst_sl_iport246_o_UNCONNECTED[0]),
        .sl_iport247_o(NLW_inst_sl_iport247_o_UNCONNECTED[0]),
        .sl_iport248_o(NLW_inst_sl_iport248_o_UNCONNECTED[0]),
        .sl_iport249_o(NLW_inst_sl_iport249_o_UNCONNECTED[0]),
        .sl_iport24_o(NLW_inst_sl_iport24_o_UNCONNECTED[0]),
        .sl_iport250_o(NLW_inst_sl_iport250_o_UNCONNECTED[0]),
        .sl_iport251_o(NLW_inst_sl_iport251_o_UNCONNECTED[0]),
        .sl_iport252_o(NLW_inst_sl_iport252_o_UNCONNECTED[0]),
        .sl_iport253_o(NLW_inst_sl_iport253_o_UNCONNECTED[0]),
        .sl_iport254_o(NLW_inst_sl_iport254_o_UNCONNECTED[0]),
        .sl_iport255_o(NLW_inst_sl_iport255_o_UNCONNECTED[0]),
        .sl_iport25_o(NLW_inst_sl_iport25_o_UNCONNECTED[0]),
        .sl_iport26_o(NLW_inst_sl_iport26_o_UNCONNECTED[0]),
        .sl_iport27_o(NLW_inst_sl_iport27_o_UNCONNECTED[0]),
        .sl_iport28_o(NLW_inst_sl_iport28_o_UNCONNECTED[0]),
        .sl_iport29_o(NLW_inst_sl_iport29_o_UNCONNECTED[0]),
        .sl_iport2_o(NLW_inst_sl_iport2_o_UNCONNECTED[0]),
        .sl_iport30_o(NLW_inst_sl_iport30_o_UNCONNECTED[0]),
        .sl_iport31_o(NLW_inst_sl_iport31_o_UNCONNECTED[0]),
        .sl_iport32_o(NLW_inst_sl_iport32_o_UNCONNECTED[0]),
        .sl_iport33_o(NLW_inst_sl_iport33_o_UNCONNECTED[0]),
        .sl_iport34_o(NLW_inst_sl_iport34_o_UNCONNECTED[0]),
        .sl_iport35_o(NLW_inst_sl_iport35_o_UNCONNECTED[0]),
        .sl_iport36_o(NLW_inst_sl_iport36_o_UNCONNECTED[0]),
        .sl_iport37_o(NLW_inst_sl_iport37_o_UNCONNECTED[0]),
        .sl_iport38_o(NLW_inst_sl_iport38_o_UNCONNECTED[0]),
        .sl_iport39_o(NLW_inst_sl_iport39_o_UNCONNECTED[0]),
        .sl_iport3_o(NLW_inst_sl_iport3_o_UNCONNECTED[0]),
        .sl_iport40_o(NLW_inst_sl_iport40_o_UNCONNECTED[0]),
        .sl_iport41_o(NLW_inst_sl_iport41_o_UNCONNECTED[0]),
        .sl_iport42_o(NLW_inst_sl_iport42_o_UNCONNECTED[0]),
        .sl_iport43_o(NLW_inst_sl_iport43_o_UNCONNECTED[0]),
        .sl_iport44_o(NLW_inst_sl_iport44_o_UNCONNECTED[0]),
        .sl_iport45_o(NLW_inst_sl_iport45_o_UNCONNECTED[0]),
        .sl_iport46_o(NLW_inst_sl_iport46_o_UNCONNECTED[0]),
        .sl_iport47_o(NLW_inst_sl_iport47_o_UNCONNECTED[0]),
        .sl_iport48_o(NLW_inst_sl_iport48_o_UNCONNECTED[0]),
        .sl_iport49_o(NLW_inst_sl_iport49_o_UNCONNECTED[0]),
        .sl_iport4_o(NLW_inst_sl_iport4_o_UNCONNECTED[0]),
        .sl_iport50_o(NLW_inst_sl_iport50_o_UNCONNECTED[0]),
        .sl_iport51_o(NLW_inst_sl_iport51_o_UNCONNECTED[0]),
        .sl_iport52_o(NLW_inst_sl_iport52_o_UNCONNECTED[0]),
        .sl_iport53_o(NLW_inst_sl_iport53_o_UNCONNECTED[0]),
        .sl_iport54_o(NLW_inst_sl_iport54_o_UNCONNECTED[0]),
        .sl_iport55_o(NLW_inst_sl_iport55_o_UNCONNECTED[0]),
        .sl_iport56_o(NLW_inst_sl_iport56_o_UNCONNECTED[0]),
        .sl_iport57_o(NLW_inst_sl_iport57_o_UNCONNECTED[0]),
        .sl_iport58_o(NLW_inst_sl_iport58_o_UNCONNECTED[0]),
        .sl_iport59_o(NLW_inst_sl_iport59_o_UNCONNECTED[0]),
        .sl_iport5_o(NLW_inst_sl_iport5_o_UNCONNECTED[0]),
        .sl_iport60_o(NLW_inst_sl_iport60_o_UNCONNECTED[0]),
        .sl_iport61_o(NLW_inst_sl_iport61_o_UNCONNECTED[0]),
        .sl_iport62_o(NLW_inst_sl_iport62_o_UNCONNECTED[0]),
        .sl_iport63_o(NLW_inst_sl_iport63_o_UNCONNECTED[0]),
        .sl_iport64_o(NLW_inst_sl_iport64_o_UNCONNECTED[0]),
        .sl_iport65_o(NLW_inst_sl_iport65_o_UNCONNECTED[0]),
        .sl_iport66_o(NLW_inst_sl_iport66_o_UNCONNECTED[0]),
        .sl_iport67_o(NLW_inst_sl_iport67_o_UNCONNECTED[0]),
        .sl_iport68_o(NLW_inst_sl_iport68_o_UNCONNECTED[0]),
        .sl_iport69_o(NLW_inst_sl_iport69_o_UNCONNECTED[0]),
        .sl_iport6_o(NLW_inst_sl_iport6_o_UNCONNECTED[0]),
        .sl_iport70_o(NLW_inst_sl_iport70_o_UNCONNECTED[0]),
        .sl_iport71_o(NLW_inst_sl_iport71_o_UNCONNECTED[0]),
        .sl_iport72_o(NLW_inst_sl_iport72_o_UNCONNECTED[0]),
        .sl_iport73_o(NLW_inst_sl_iport73_o_UNCONNECTED[0]),
        .sl_iport74_o(NLW_inst_sl_iport74_o_UNCONNECTED[0]),
        .sl_iport75_o(NLW_inst_sl_iport75_o_UNCONNECTED[0]),
        .sl_iport76_o(NLW_inst_sl_iport76_o_UNCONNECTED[0]),
        .sl_iport77_o(NLW_inst_sl_iport77_o_UNCONNECTED[0]),
        .sl_iport78_o(NLW_inst_sl_iport78_o_UNCONNECTED[0]),
        .sl_iport79_o(NLW_inst_sl_iport79_o_UNCONNECTED[0]),
        .sl_iport7_o(NLW_inst_sl_iport7_o_UNCONNECTED[0]),
        .sl_iport80_o(NLW_inst_sl_iport80_o_UNCONNECTED[0]),
        .sl_iport81_o(NLW_inst_sl_iport81_o_UNCONNECTED[0]),
        .sl_iport82_o(NLW_inst_sl_iport82_o_UNCONNECTED[0]),
        .sl_iport83_o(NLW_inst_sl_iport83_o_UNCONNECTED[0]),
        .sl_iport84_o(NLW_inst_sl_iport84_o_UNCONNECTED[0]),
        .sl_iport85_o(NLW_inst_sl_iport85_o_UNCONNECTED[0]),
        .sl_iport86_o(NLW_inst_sl_iport86_o_UNCONNECTED[0]),
        .sl_iport87_o(NLW_inst_sl_iport87_o_UNCONNECTED[0]),
        .sl_iport88_o(NLW_inst_sl_iport88_o_UNCONNECTED[0]),
        .sl_iport89_o(NLW_inst_sl_iport89_o_UNCONNECTED[0]),
        .sl_iport8_o(NLW_inst_sl_iport8_o_UNCONNECTED[0]),
        .sl_iport90_o(NLW_inst_sl_iport90_o_UNCONNECTED[0]),
        .sl_iport91_o(NLW_inst_sl_iport91_o_UNCONNECTED[0]),
        .sl_iport92_o(NLW_inst_sl_iport92_o_UNCONNECTED[0]),
        .sl_iport93_o(NLW_inst_sl_iport93_o_UNCONNECTED[0]),
        .sl_iport94_o(NLW_inst_sl_iport94_o_UNCONNECTED[0]),
        .sl_iport95_o(NLW_inst_sl_iport95_o_UNCONNECTED[0]),
        .sl_iport96_o(NLW_inst_sl_iport96_o_UNCONNECTED[0]),
        .sl_iport97_o(NLW_inst_sl_iport97_o_UNCONNECTED[0]),
        .sl_iport98_o(NLW_inst_sl_iport98_o_UNCONNECTED[0]),
        .sl_iport99_o(NLW_inst_sl_iport99_o_UNCONNECTED[0]),
        .sl_iport9_o(NLW_inst_sl_iport9_o_UNCONNECTED[0]),
        .sl_oport0_i(sl_oport0_i),
        .sl_oport100_i(1'b0),
        .sl_oport101_i(1'b0),
        .sl_oport102_i(1'b0),
        .sl_oport103_i(1'b0),
        .sl_oport104_i(1'b0),
        .sl_oport105_i(1'b0),
        .sl_oport106_i(1'b0),
        .sl_oport107_i(1'b0),
        .sl_oport108_i(1'b0),
        .sl_oport109_i(1'b0),
        .sl_oport10_i(1'b0),
        .sl_oport110_i(1'b0),
        .sl_oport111_i(1'b0),
        .sl_oport112_i(1'b0),
        .sl_oport113_i(1'b0),
        .sl_oport114_i(1'b0),
        .sl_oport115_i(1'b0),
        .sl_oport116_i(1'b0),
        .sl_oport117_i(1'b0),
        .sl_oport118_i(1'b0),
        .sl_oport119_i(1'b0),
        .sl_oport11_i(1'b0),
        .sl_oport120_i(1'b0),
        .sl_oport121_i(1'b0),
        .sl_oport122_i(1'b0),
        .sl_oport123_i(1'b0),
        .sl_oport124_i(1'b0),
        .sl_oport125_i(1'b0),
        .sl_oport126_i(1'b0),
        .sl_oport127_i(1'b0),
        .sl_oport128_i(1'b0),
        .sl_oport129_i(1'b0),
        .sl_oport12_i(1'b0),
        .sl_oport130_i(1'b0),
        .sl_oport131_i(1'b0),
        .sl_oport132_i(1'b0),
        .sl_oport133_i(1'b0),
        .sl_oport134_i(1'b0),
        .sl_oport135_i(1'b0),
        .sl_oport136_i(1'b0),
        .sl_oport137_i(1'b0),
        .sl_oport138_i(1'b0),
        .sl_oport139_i(1'b0),
        .sl_oport13_i(1'b0),
        .sl_oport140_i(1'b0),
        .sl_oport141_i(1'b0),
        .sl_oport142_i(1'b0),
        .sl_oport143_i(1'b0),
        .sl_oport144_i(1'b0),
        .sl_oport145_i(1'b0),
        .sl_oport146_i(1'b0),
        .sl_oport147_i(1'b0),
        .sl_oport148_i(1'b0),
        .sl_oport149_i(1'b0),
        .sl_oport14_i(1'b0),
        .sl_oport150_i(1'b0),
        .sl_oport151_i(1'b0),
        .sl_oport152_i(1'b0),
        .sl_oport153_i(1'b0),
        .sl_oport154_i(1'b0),
        .sl_oport155_i(1'b0),
        .sl_oport156_i(1'b0),
        .sl_oport157_i(1'b0),
        .sl_oport158_i(1'b0),
        .sl_oport159_i(1'b0),
        .sl_oport15_i(1'b0),
        .sl_oport160_i(1'b0),
        .sl_oport161_i(1'b0),
        .sl_oport162_i(1'b0),
        .sl_oport163_i(1'b0),
        .sl_oport164_i(1'b0),
        .sl_oport165_i(1'b0),
        .sl_oport166_i(1'b0),
        .sl_oport167_i(1'b0),
        .sl_oport168_i(1'b0),
        .sl_oport169_i(1'b0),
        .sl_oport16_i(1'b0),
        .sl_oport170_i(1'b0),
        .sl_oport171_i(1'b0),
        .sl_oport172_i(1'b0),
        .sl_oport173_i(1'b0),
        .sl_oport174_i(1'b0),
        .sl_oport175_i(1'b0),
        .sl_oport176_i(1'b0),
        .sl_oport177_i(1'b0),
        .sl_oport178_i(1'b0),
        .sl_oport179_i(1'b0),
        .sl_oport17_i(1'b0),
        .sl_oport180_i(1'b0),
        .sl_oport181_i(1'b0),
        .sl_oport182_i(1'b0),
        .sl_oport183_i(1'b0),
        .sl_oport184_i(1'b0),
        .sl_oport185_i(1'b0),
        .sl_oport186_i(1'b0),
        .sl_oport187_i(1'b0),
        .sl_oport188_i(1'b0),
        .sl_oport189_i(1'b0),
        .sl_oport18_i(1'b0),
        .sl_oport190_i(1'b0),
        .sl_oport191_i(1'b0),
        .sl_oport192_i(1'b0),
        .sl_oport193_i(1'b0),
        .sl_oport194_i(1'b0),
        .sl_oport195_i(1'b0),
        .sl_oport196_i(1'b0),
        .sl_oport197_i(1'b0),
        .sl_oport198_i(1'b0),
        .sl_oport199_i(1'b0),
        .sl_oport19_i(1'b0),
        .sl_oport1_i(1'b0),
        .sl_oport200_i(1'b0),
        .sl_oport201_i(1'b0),
        .sl_oport202_i(1'b0),
        .sl_oport203_i(1'b0),
        .sl_oport204_i(1'b0),
        .sl_oport205_i(1'b0),
        .sl_oport206_i(1'b0),
        .sl_oport207_i(1'b0),
        .sl_oport208_i(1'b0),
        .sl_oport209_i(1'b0),
        .sl_oport20_i(1'b0),
        .sl_oport210_i(1'b0),
        .sl_oport211_i(1'b0),
        .sl_oport212_i(1'b0),
        .sl_oport213_i(1'b0),
        .sl_oport214_i(1'b0),
        .sl_oport215_i(1'b0),
        .sl_oport216_i(1'b0),
        .sl_oport217_i(1'b0),
        .sl_oport218_i(1'b0),
        .sl_oport219_i(1'b0),
        .sl_oport21_i(1'b0),
        .sl_oport220_i(1'b0),
        .sl_oport221_i(1'b0),
        .sl_oport222_i(1'b0),
        .sl_oport223_i(1'b0),
        .sl_oport224_i(1'b0),
        .sl_oport225_i(1'b0),
        .sl_oport226_i(1'b0),
        .sl_oport227_i(1'b0),
        .sl_oport228_i(1'b0),
        .sl_oport229_i(1'b0),
        .sl_oport22_i(1'b0),
        .sl_oport230_i(1'b0),
        .sl_oport231_i(1'b0),
        .sl_oport232_i(1'b0),
        .sl_oport233_i(1'b0),
        .sl_oport234_i(1'b0),
        .sl_oport235_i(1'b0),
        .sl_oport236_i(1'b0),
        .sl_oport237_i(1'b0),
        .sl_oport238_i(1'b0),
        .sl_oport239_i(1'b0),
        .sl_oport23_i(1'b0),
        .sl_oport240_i(1'b0),
        .sl_oport241_i(1'b0),
        .sl_oport242_i(1'b0),
        .sl_oport243_i(1'b0),
        .sl_oport244_i(1'b0),
        .sl_oport245_i(1'b0),
        .sl_oport246_i(1'b0),
        .sl_oport247_i(1'b0),
        .sl_oport248_i(1'b0),
        .sl_oport249_i(1'b0),
        .sl_oport24_i(1'b0),
        .sl_oport250_i(1'b0),
        .sl_oport251_i(1'b0),
        .sl_oport252_i(1'b0),
        .sl_oport253_i(1'b0),
        .sl_oport254_i(1'b0),
        .sl_oport255_i(1'b0),
        .sl_oport25_i(1'b0),
        .sl_oport26_i(1'b0),
        .sl_oport27_i(1'b0),
        .sl_oport28_i(1'b0),
        .sl_oport29_i(1'b0),
        .sl_oport2_i(1'b0),
        .sl_oport30_i(1'b0),
        .sl_oport31_i(1'b0),
        .sl_oport32_i(1'b0),
        .sl_oport33_i(1'b0),
        .sl_oport34_i(1'b0),
        .sl_oport35_i(1'b0),
        .sl_oport36_i(1'b0),
        .sl_oport37_i(1'b0),
        .sl_oport38_i(1'b0),
        .sl_oport39_i(1'b0),
        .sl_oport3_i(1'b0),
        .sl_oport40_i(1'b0),
        .sl_oport41_i(1'b0),
        .sl_oport42_i(1'b0),
        .sl_oport43_i(1'b0),
        .sl_oport44_i(1'b0),
        .sl_oport45_i(1'b0),
        .sl_oport46_i(1'b0),
        .sl_oport47_i(1'b0),
        .sl_oport48_i(1'b0),
        .sl_oport49_i(1'b0),
        .sl_oport4_i(1'b0),
        .sl_oport50_i(1'b0),
        .sl_oport51_i(1'b0),
        .sl_oport52_i(1'b0),
        .sl_oport53_i(1'b0),
        .sl_oport54_i(1'b0),
        .sl_oport55_i(1'b0),
        .sl_oport56_i(1'b0),
        .sl_oport57_i(1'b0),
        .sl_oport58_i(1'b0),
        .sl_oport59_i(1'b0),
        .sl_oport5_i(1'b0),
        .sl_oport60_i(1'b0),
        .sl_oport61_i(1'b0),
        .sl_oport62_i(1'b0),
        .sl_oport63_i(1'b0),
        .sl_oport64_i(1'b0),
        .sl_oport65_i(1'b0),
        .sl_oport66_i(1'b0),
        .sl_oport67_i(1'b0),
        .sl_oport68_i(1'b0),
        .sl_oport69_i(1'b0),
        .sl_oport6_i(1'b0),
        .sl_oport70_i(1'b0),
        .sl_oport71_i(1'b0),
        .sl_oport72_i(1'b0),
        .sl_oport73_i(1'b0),
        .sl_oport74_i(1'b0),
        .sl_oport75_i(1'b0),
        .sl_oport76_i(1'b0),
        .sl_oport77_i(1'b0),
        .sl_oport78_i(1'b0),
        .sl_oport79_i(1'b0),
        .sl_oport7_i(1'b0),
        .sl_oport80_i(1'b0),
        .sl_oport81_i(1'b0),
        .sl_oport82_i(1'b0),
        .sl_oport83_i(1'b0),
        .sl_oport84_i(1'b0),
        .sl_oport85_i(1'b0),
        .sl_oport86_i(1'b0),
        .sl_oport87_i(1'b0),
        .sl_oport88_i(1'b0),
        .sl_oport89_i(1'b0),
        .sl_oport8_i(1'b0),
        .sl_oport90_i(1'b0),
        .sl_oport91_i(1'b0),
        .sl_oport92_i(1'b0),
        .sl_oport93_i(1'b0),
        .sl_oport94_i(1'b0),
        .sl_oport95_i(1'b0),
        .sl_oport96_i(1'b0),
        .sl_oport97_i(1'b0),
        .sl_oport98_i(1'b0),
        .sl_oport99_i(1'b0),
        .sl_oport9_i(1'b0),
        .tck(1'b0),
        .tck_0(NLW_inst_tck_0_UNCONNECTED),
        .tck_1(NLW_inst_tck_1_UNCONNECTED),
        .tck_10(NLW_inst_tck_10_UNCONNECTED),
        .tck_11(NLW_inst_tck_11_UNCONNECTED),
        .tck_12(NLW_inst_tck_12_UNCONNECTED),
        .tck_13(NLW_inst_tck_13_UNCONNECTED),
        .tck_14(NLW_inst_tck_14_UNCONNECTED),
        .tck_15(NLW_inst_tck_15_UNCONNECTED),
        .tck_2(NLW_inst_tck_2_UNCONNECTED),
        .tck_3(NLW_inst_tck_3_UNCONNECTED),
        .tck_4(NLW_inst_tck_4_UNCONNECTED),
        .tck_5(NLW_inst_tck_5_UNCONNECTED),
        .tck_6(NLW_inst_tck_6_UNCONNECTED),
        .tck_7(NLW_inst_tck_7_UNCONNECTED),
        .tck_8(NLW_inst_tck_8_UNCONNECTED),
        .tck_9(NLW_inst_tck_9_UNCONNECTED),
        .tdi(1'b0),
        .tdi_0(NLW_inst_tdi_0_UNCONNECTED),
        .tdi_1(NLW_inst_tdi_1_UNCONNECTED),
        .tdi_10(NLW_inst_tdi_10_UNCONNECTED),
        .tdi_11(NLW_inst_tdi_11_UNCONNECTED),
        .tdi_12(NLW_inst_tdi_12_UNCONNECTED),
        .tdi_13(NLW_inst_tdi_13_UNCONNECTED),
        .tdi_14(NLW_inst_tdi_14_UNCONNECTED),
        .tdi_15(NLW_inst_tdi_15_UNCONNECTED),
        .tdi_2(NLW_inst_tdi_2_UNCONNECTED),
        .tdi_3(NLW_inst_tdi_3_UNCONNECTED),
        .tdi_4(NLW_inst_tdi_4_UNCONNECTED),
        .tdi_5(NLW_inst_tdi_5_UNCONNECTED),
        .tdi_6(NLW_inst_tdi_6_UNCONNECTED),
        .tdi_7(NLW_inst_tdi_7_UNCONNECTED),
        .tdi_8(NLW_inst_tdi_8_UNCONNECTED),
        .tdi_9(NLW_inst_tdi_9_UNCONNECTED),
        .tdo(NLW_inst_tdo_UNCONNECTED),
        .tdo_0(1'b0),
        .tdo_1(1'b0),
        .tdo_10(1'b0),
        .tdo_11(1'b0),
        .tdo_12(1'b0),
        .tdo_13(1'b0),
        .tdo_14(1'b0),
        .tdo_15(1'b0),
        .tdo_2(1'b0),
        .tdo_3(1'b0),
        .tdo_4(1'b0),
        .tdo_5(1'b0),
        .tdo_6(1'b0),
        .tdo_7(1'b0),
        .tdo_8(1'b0),
        .tdo_9(1'b0),
        .tms(1'b0),
        .tms_0(NLW_inst_tms_0_UNCONNECTED),
        .tms_1(NLW_inst_tms_1_UNCONNECTED),
        .tms_10(NLW_inst_tms_10_UNCONNECTED),
        .tms_11(NLW_inst_tms_11_UNCONNECTED),
        .tms_12(NLW_inst_tms_12_UNCONNECTED),
        .tms_13(NLW_inst_tms_13_UNCONNECTED),
        .tms_14(NLW_inst_tms_14_UNCONNECTED),
        .tms_15(NLW_inst_tms_15_UNCONNECTED),
        .tms_2(NLW_inst_tms_2_UNCONNECTED),
        .tms_3(NLW_inst_tms_3_UNCONNECTED),
        .tms_4(NLW_inst_tms_4_UNCONNECTED),
        .tms_5(NLW_inst_tms_5_UNCONNECTED),
        .tms_6(NLW_inst_tms_6_UNCONNECTED),
        .tms_7(NLW_inst_tms_7_UNCONNECTED),
        .tms_8(NLW_inst_tms_8_UNCONNECTED),
        .tms_9(NLW_inst_tms_9_UNCONNECTED),
        .update(1'b0),
        .update_0(NLW_inst_update_0_UNCONNECTED),
        .update_1(NLW_inst_update_1_UNCONNECTED),
        .update_10(NLW_inst_update_10_UNCONNECTED),
        .update_11(NLW_inst_update_11_UNCONNECTED),
        .update_12(NLW_inst_update_12_UNCONNECTED),
        .update_13(NLW_inst_update_13_UNCONNECTED),
        .update_14(NLW_inst_update_14_UNCONNECTED),
        .update_15(NLW_inst_update_15_UNCONNECTED),
        .update_2(NLW_inst_update_2_UNCONNECTED),
        .update_3(NLW_inst_update_3_UNCONNECTED),
        .update_4(NLW_inst_update_4_UNCONNECTED),
        .update_5(NLW_inst_update_5_UNCONNECTED),
        .update_6(NLW_inst_update_6_UNCONNECTED),
        .update_7(NLW_inst_update_7_UNCONNECTED),
        .update_8(NLW_inst_update_8_UNCONNECTED),
        .update_9(NLW_inst_update_9_UNCONNECTED));
endmodule

module dmem
   (EN,
    rd_clk,
    wr_clk,
    E,
    Q,
    din,
    dout,
    \gpr1.dout_i_reg[1]_0 );
  input EN;
  input rd_clk;
  input wr_clk;
  input [0:0]E;
  input [3:0]Q;
  input [15:0]din;
  output [15:0]dout;
  input [3:0]\gpr1.dout_i_reg[1]_0 ;

  wire [0:0]E;
  wire EN;
  wire [3:0]Q;
  wire [15:0]din;
  wire [15:0]dout;
  wire [15:0]dout_i0;
  wire [3:0]\gpr1.dout_i_reg[1]_0 ;
  wire rd_clk;
  wire wr_clk;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_12_15_DOC_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_12_15_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED;

  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gdm.dm_gen.dm/RAM" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD342 RAM_reg_0_15_0_5
       (.ADDRA({1'b0,Q}),
        .ADDRB({1'b0,Q}),
        .ADDRC({1'b0,Q}),
        .ADDRD({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(dout_i0[1:0]),
        .DOB(dout_i0[3:2]),
        .DOC(dout_i0[5:4]),
        .DOD(NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gdm.dm_gen.dm/RAM" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "15" *) 
  RAM32M_HD343 RAM_reg_0_15_12_15
       (.ADDRA({1'b0,Q}),
        .ADDRB({1'b0,Q}),
        .ADDRC({1'b0,Q}),
        .ADDRD({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .DIA(din[13:12]),
        .DIB(din[15:14]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(dout_i0[13:12]),
        .DOB(dout_i0[15:14]),
        .DOC(NLW_RAM_reg_0_15_12_15_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_RAM_reg_0_15_12_15_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gdm.dm_gen.dm/RAM" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD344 RAM_reg_0_15_6_11
       (.ADDRA({1'b0,Q}),
        .ADDRB({1'b0,Q}),
        .ADDRC({1'b0,Q}),
        .ADDRD({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(dout_i0[7:6]),
        .DOB(dout_i0[9:8]),
        .DOC(dout_i0[11:10]),
        .DOD(NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[0]),
        .Q(dout[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[10]),
        .Q(dout[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[11]),
        .Q(dout[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[12]),
        .Q(dout[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[13]),
        .Q(dout[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[14]),
        .Q(dout[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[15]),
        .Q(dout[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[1]),
        .Q(dout[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[2]),
        .Q(dout[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[3]),
        .Q(dout[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[4]),
        .Q(dout[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[5]),
        .Q(dout[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[6]),
        .Q(dout[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[7]),
        .Q(dout[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[8]),
        .Q(dout[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i0[9]),
        .Q(dout[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module dmem_13
   (EN,
    rd_clk,
    wr_clk,
    din,
    dout_i,
    \gpr1.dout_i_reg[0]_0 ,
    \gpr1.dout_i_reg[1]_0 ,
    \gpr1.dout_i_reg[1]_1 );
  input EN;
  input rd_clk;
  input wr_clk;
  input [15:0]din;
  output [15:0]dout_i;
  input [0:0]\gpr1.dout_i_reg[0]_0 ;
  input [3:0]\gpr1.dout_i_reg[1]_0 ;
  input [3:0]\gpr1.dout_i_reg[1]_1 ;

  wire EN;
  wire [15:0]din;
  wire [15:0]dout_i;
  wire [15:0]dout_i0;
  wire [0:0]\gpr1.dout_i_reg[0]_0 ;
  wire [3:0]\gpr1.dout_i_reg[1]_0 ;
  wire [3:0]\gpr1.dout_i_reg[1]_1 ;
  wire rd_clk;
  wire wr_clk;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_12_15_DOC_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_12_15_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED;

  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gdm.dm_gen.dm/RAM" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_UNIQ_BASE_ RAM_reg_0_15_0_5
       (.ADDRA({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRB({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRC({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRD({1'b0,\gpr1.dout_i_reg[1]_1 }),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(dout_i0[1:0]),
        .DOB(dout_i0[3:2]),
        .DOC(dout_i0[5:4]),
        .DOD(NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gdm.dm_gen.dm/RAM" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "15" *) 
  RAM32M_HD340 RAM_reg_0_15_12_15
       (.ADDRA({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRB({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRC({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRD({1'b0,\gpr1.dout_i_reg[1]_1 }),
        .DIA(din[13:12]),
        .DIB(din[15:14]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(dout_i0[13:12]),
        .DOB(dout_i0[15:14]),
        .DOC(NLW_RAM_reg_0_15_12_15_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_RAM_reg_0_15_12_15_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gdm.dm_gen.dm/RAM" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD341 RAM_reg_0_15_6_11
       (.ADDRA({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRB({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRC({1'b0,\gpr1.dout_i_reg[1]_0 }),
        .ADDRD({1'b0,\gpr1.dout_i_reg[1]_1 }),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(dout_i0[7:6]),
        .DOB(dout_i0[9:8]),
        .DOC(dout_i0[11:10]),
        .DOD(NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[0]),
        .Q(dout_i[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[10]),
        .Q(dout_i[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[11]),
        .Q(dout_i[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[12]),
        .Q(dout_i[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[13]),
        .Q(dout_i[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[14]),
        .Q(dout_i[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[15]),
        .Q(dout_i[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[1]),
        .Q(dout_i[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[2]),
        .Q(dout_i[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[3]),
        .Q(dout_i[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[4]),
        .Q(dout_i[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[5]),
        .Q(dout_i[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[6]),
        .Q(dout_i[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[7]),
        .Q(dout_i[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[8]),
        .Q(dout_i[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(\gpr1.dout_i_reg[0]_0 ),
        .D(dout_i0[9]),
        .Q(dout_i[9]),
        .R(1'b0));
endmodule

module fifo_generator_ramfifo
   (empty,
    full,
    overflow,
    rd_clk,
    rd_en,
    rst,
    underflow,
    wr_clk,
    wr_en,
    din,
    dout);
  output empty;
  output full;
  output overflow;
  input rd_clk;
  input rd_en;
  input rst;
  output underflow;
  input wr_clk;
  input wr_en;
  input [15:0]din;
  output [15:0]dout;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_7 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_8 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_9 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire overflow;
  wire ram_rd_en_i;
  wire ram_wr_en;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_pntr;
  wire [2:1]rd_rst_i;
  wire rst;
  wire rst_full_ff_i;
  wire underflow;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr;
  wire [3:0]wr_pntr_plus1;
  wire [3:0]wr_pntr_plus2;
  wire [3:0]wr_pntr_rd;
  wire [1:1]wr_rst_i;

  clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.AR(rst_full_ff_i),
        .D({\gntv_or_sync_fifo.gl0.rd_n_7 ,\gntv_or_sync_fifo.gl0.rd_n_8 ,\gntv_or_sync_fifo.gl0.rd_n_9 }),
        .Q(wr_pntr_plus1),
        .\Q_reg_reg[0] (rd_rst_i[1]),
        .\gnxpm_cdc.rd_pntr_gc_reg[3]_0 (rd_pntr[3]),
        .\gnxpm_cdc.wr_pntr_bin_reg[3]_0 (wr_pntr_rd),
        .\gnxpm_cdc.wr_pntr_gc_reg[3]_0 (wr_pntr),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_full_fb_i_reg_0(wr_pntr_plus2),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.AR(rd_rst_i[2]),
        .D({\gntv_or_sync_fifo.gl0.rd_n_7 ,\gntv_or_sync_fifo.gl0.rd_n_8 ,\gntv_or_sync_fifo.gl0.rd_n_9 }),
        .E(ram_rd_en_i),
        .Q(rd_pntr),
        .empty(empty),
        .ram_empty_i_reg(wr_pntr_rd),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .underflow(underflow));
  wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.E(ram_wr_en),
        .Q(wr_pntr_plus2),
        .full(full),
        .\gic0.gc0.count_d1_reg[3] (wr_pntr_plus1),
        .\gic0.gc0.count_d2_reg[3] (wr_pntr),
        .\gic0.gc0.count_reg[0] ({wr_rst_i,rst_full_ff_i}),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .overflow(overflow),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  memory \gntv_or_sync_fifo.mem 
       (.E(ram_rd_en_i),
        .EN(ram_wr_en),
        .Q(rd_pntr),
        .din(din),
        .dout(dout),
        .\gpr1.dout_i_reg[1] (wr_pntr),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  reset_blk_ramfifo rstblk
       (.\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 (rd_rst_i),
        .out({wr_rst_i,rst_full_ff_i}),
        .rd_clk(rd_clk),
        .rst(rst),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module fifo_generator_ramfifo__parameterized0
   (empty,
    full,
    overflow,
    rd_clk,
    rd_en,
    rst,
    underflow,
    valid,
    wr_clk,
    wr_en,
    din,
    dout);
  output empty;
  output full;
  output overflow;
  input rd_clk;
  input rd_en;
  input rst;
  output underflow;
  output valid;
  input wr_clk;
  input wr_en;
  input [15:0]din;
  output [15:0]dout;

  wire [15:0]din;
  wire [15:0]dout;
  wire dout_i0;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_10 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_8 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_9 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire overflow;
  wire ram_rd_en_i;
  wire ram_wr_en;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_pntr;
  wire [2:0]rd_pntr_plus1;
  wire [2:0]rd_rst_i;
  wire rst;
  wire rst_full_ff_i;
  wire underflow;
  wire valid;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr;
  wire [3:0]wr_pntr_plus1;
  wire [3:0]wr_pntr_plus2;
  wire [3:0]wr_pntr_rd;
  wire [1:1]wr_rst_i;

  clk_x_pntrs_7 \gntv_or_sync_fifo.gcx.clkx 
       (.AR(rst_full_ff_i),
        .D({\gntv_or_sync_fifo.gl0.rd_n_8 ,\gntv_or_sync_fifo.gl0.rd_n_9 ,\gntv_or_sync_fifo.gl0.rd_n_10 }),
        .Q(wr_pntr_rd),
        .\Q_reg_reg[0] (rd_rst_i[1]),
        .\gnxpm_cdc.rd_pntr_gc_reg[3]_0 (rd_pntr[3]),
        .\gnxpm_cdc.wr_pntr_bin_reg[2]_0 (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\gnxpm_cdc.wr_pntr_gc_reg[3]_0 (wr_pntr),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_empty_i_reg(rd_pntr_plus1),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .ram_full_fb_i_reg_0(wr_pntr_plus1),
        .ram_full_fb_i_reg_1(wr_pntr_plus2),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  rd_logic__parameterized0 \gntv_or_sync_fifo.gl0.rd 
       (.D({\gntv_or_sync_fifo.gl0.rd_n_8 ,\gntv_or_sync_fifo.gl0.rd_n_9 ,\gntv_or_sync_fifo.gl0.rd_n_10 }),
        .E(ram_rd_en_i),
        .Q(wr_pntr_rd),
        .empty(empty),
        .\gc0.count_d1_reg[3] (rd_pntr),
        .\gc0.count_reg[2] (rd_pntr_plus1),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] (dout_i0),
        .out({rd_rst_i[2],rd_rst_i[0]}),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .underflow(underflow),
        .valid(valid));
  wr_logic__parameterized0 \gntv_or_sync_fifo.gl0.wr 
       (.E(ram_wr_en),
        .Q(wr_pntr_plus2),
        .full(full),
        .\gic0.gc0.count_d1_reg[3] (wr_pntr_plus1),
        .\gic0.gc0.count_d2_reg[3] (wr_pntr),
        .\gic0.gc0.count_reg[0] ({wr_rst_i,rst_full_ff_i}),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .overflow(overflow),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  memory__parameterized0 \gntv_or_sync_fifo.mem 
       (.E(dout_i0),
        .EN(ram_wr_en),
        .din(din),
        .dout(dout),
        .\gpr1.dout_i_reg[0] (ram_rd_en_i),
        .\gpr1.dout_i_reg[1] (rd_pntr),
        .\gpr1.dout_i_reg[1]_0 (wr_pntr),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  reset_blk_ramfifo_8 rstblk
       (.\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 (rd_rst_i),
        .out({wr_rst_i,rst_full_ff_i}),
        .rd_clk(rd_clk),
        .rst(rst),
        .wr_clk(wr_clk));
endmodule

module fifo_generator_top
   (empty,
    full,
    overflow,
    rd_clk,
    rd_en,
    rst,
    underflow,
    wr_clk,
    wr_en,
    din,
    dout);
  output empty;
  output full;
  output overflow;
  input rd_clk;
  input rd_en;
  input rst;
  output underflow;
  input wr_clk;
  input wr_en;
  input [15:0]din;
  output [15:0]dout;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire underflow;
  wire wr_clk;
  wire wr_en;

  fifo_generator_ramfifo \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .overflow(overflow),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .underflow(underflow),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module fifo_generator_top__parameterized0
   (empty,
    full,
    overflow,
    rd_clk,
    rd_en,
    rst,
    underflow,
    valid,
    wr_clk,
    wr_en,
    din,
    dout);
  output empty;
  output full;
  output overflow;
  input rd_clk;
  input rd_en;
  input rst;
  output underflow;
  output valid;
  input wr_clk;
  input wr_en;
  input [15:0]din;
  output [15:0]dout;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire underflow;
  wire valid;
  wire wr_clk;
  wire wr_en;

  fifo_generator_ramfifo__parameterized0 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .overflow(overflow),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .underflow(underflow),
        .valid(valid),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "4" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "2" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "0" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "4" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "16" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "16" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "1" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "1" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "0" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "13" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "12" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "4" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "0" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "4" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) 
module fifo_generator_v13_1_4
   (almost_empty,
    almost_full,
    axi_ar_dbiterr,
    axi_ar_injectdbiterr,
    axi_ar_injectsbiterr,
    axi_ar_overflow,
    axi_ar_prog_empty,
    axi_ar_prog_full,
    axi_ar_sbiterr,
    axi_ar_underflow,
    axi_aw_dbiterr,
    axi_aw_injectdbiterr,
    axi_aw_injectsbiterr,
    axi_aw_overflow,
    axi_aw_prog_empty,
    axi_aw_prog_full,
    axi_aw_sbiterr,
    axi_aw_underflow,
    axi_b_dbiterr,
    axi_b_injectdbiterr,
    axi_b_injectsbiterr,
    axi_b_overflow,
    axi_b_prog_empty,
    axi_b_prog_full,
    axi_b_sbiterr,
    axi_b_underflow,
    axi_r_dbiterr,
    axi_r_injectdbiterr,
    axi_r_injectsbiterr,
    axi_r_overflow,
    axi_r_prog_empty,
    axi_r_prog_full,
    axi_r_sbiterr,
    axi_r_underflow,
    axi_w_dbiterr,
    axi_w_injectdbiterr,
    axi_w_injectsbiterr,
    axi_w_overflow,
    axi_w_prog_empty,
    axi_w_prog_full,
    axi_w_sbiterr,
    axi_w_underflow,
    axis_dbiterr,
    axis_injectdbiterr,
    axis_injectsbiterr,
    axis_overflow,
    axis_prog_empty,
    axis_prog_full,
    axis_sbiterr,
    axis_underflow,
    backup,
    backup_marker,
    clk,
    dbiterr,
    empty,
    full,
    injectdbiterr,
    injectsbiterr,
    int_clk,
    m_aclk,
    m_aclk_en,
    m_axi_arready,
    m_axi_arvalid,
    m_axi_awready,
    m_axi_awvalid,
    m_axi_bready,
    m_axi_bvalid,
    m_axi_rlast,
    m_axi_rready,
    m_axi_rvalid,
    m_axi_wlast,
    m_axi_wready,
    m_axi_wvalid,
    m_axis_tlast,
    m_axis_tready,
    m_axis_tvalid,
    overflow,
    prog_empty,
    prog_full,
    rd_clk,
    rd_en,
    rd_rst,
    rd_rst_busy,
    rst,
    s_aclk,
    s_aclk_en,
    s_aresetn,
    s_axi_arready,
    s_axi_arvalid,
    s_axi_awready,
    s_axi_awvalid,
    s_axi_bready,
    s_axi_bvalid,
    s_axi_rlast,
    s_axi_rready,
    s_axi_rvalid,
    s_axi_wlast,
    s_axi_wready,
    s_axi_wvalid,
    s_axis_tlast,
    s_axis_tready,
    s_axis_tvalid,
    sbiterr,
    sleep,
    srst,
    underflow,
    valid,
    wr_ack,
    wr_clk,
    wr_en,
    wr_rst,
    wr_rst_busy,
    axi_ar_data_count,
    axi_ar_prog_empty_thresh,
    axi_ar_prog_full_thresh,
    axi_ar_rd_data_count,
    axi_ar_wr_data_count,
    axi_aw_data_count,
    axi_aw_prog_empty_thresh,
    axi_aw_prog_full_thresh,
    axi_aw_rd_data_count,
    axi_aw_wr_data_count,
    axi_b_data_count,
    axi_b_prog_empty_thresh,
    axi_b_prog_full_thresh,
    axi_b_rd_data_count,
    axi_b_wr_data_count,
    axi_r_data_count,
    axi_r_prog_empty_thresh,
    axi_r_prog_full_thresh,
    axi_r_rd_data_count,
    axi_r_wr_data_count,
    axi_w_data_count,
    axi_w_prog_empty_thresh,
    axi_w_prog_full_thresh,
    axi_w_rd_data_count,
    axi_w_wr_data_count,
    axis_data_count,
    axis_prog_empty_thresh,
    axis_prog_full_thresh,
    axis_rd_data_count,
    axis_wr_data_count,
    data_count,
    din,
    dout,
    m_axi_araddr,
    m_axi_arburst,
    m_axi_arcache,
    m_axi_arid,
    m_axi_arlen,
    m_axi_arlock,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_arsize,
    m_axi_aruser,
    m_axi_awaddr,
    m_axi_awburst,
    m_axi_awcache,
    m_axi_awid,
    m_axi_awlen,
    m_axi_awlock,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awsize,
    m_axi_awuser,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_rdata,
    m_axi_rid,
    m_axi_rresp,
    m_axi_ruser,
    m_axi_wdata,
    m_axi_wid,
    m_axi_wstrb,
    m_axi_wuser,
    m_axis_tdata,
    m_axis_tdest,
    m_axis_tid,
    m_axis_tkeep,
    m_axis_tstrb,
    m_axis_tuser,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    rd_data_count,
    s_axi_araddr,
    s_axi_arburst,
    s_axi_arcache,
    s_axi_arid,
    s_axi_arlen,
    s_axi_arlock,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_arsize,
    s_axi_aruser,
    s_axi_awaddr,
    s_axi_awburst,
    s_axi_awcache,
    s_axi_awid,
    s_axi_awlen,
    s_axi_awlock,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awsize,
    s_axi_awuser,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_rdata,
    s_axi_rid,
    s_axi_rresp,
    s_axi_ruser,
    s_axi_wdata,
    s_axi_wid,
    s_axi_wstrb,
    s_axi_wuser,
    s_axis_tdata,
    s_axis_tdest,
    s_axis_tid,
    s_axis_tkeep,
    s_axis_tstrb,
    s_axis_tuser,
    wr_data_count);
  output almost_empty;
  output almost_full;
  output axi_ar_dbiterr;
  input axi_ar_injectdbiterr;
  input axi_ar_injectsbiterr;
  output axi_ar_overflow;
  output axi_ar_prog_empty;
  output axi_ar_prog_full;
  output axi_ar_sbiterr;
  output axi_ar_underflow;
  output axi_aw_dbiterr;
  input axi_aw_injectdbiterr;
  input axi_aw_injectsbiterr;
  output axi_aw_overflow;
  output axi_aw_prog_empty;
  output axi_aw_prog_full;
  output axi_aw_sbiterr;
  output axi_aw_underflow;
  output axi_b_dbiterr;
  input axi_b_injectdbiterr;
  input axi_b_injectsbiterr;
  output axi_b_overflow;
  output axi_b_prog_empty;
  output axi_b_prog_full;
  output axi_b_sbiterr;
  output axi_b_underflow;
  output axi_r_dbiterr;
  input axi_r_injectdbiterr;
  input axi_r_injectsbiterr;
  output axi_r_overflow;
  output axi_r_prog_empty;
  output axi_r_prog_full;
  output axi_r_sbiterr;
  output axi_r_underflow;
  output axi_w_dbiterr;
  input axi_w_injectdbiterr;
  input axi_w_injectsbiterr;
  output axi_w_overflow;
  output axi_w_prog_empty;
  output axi_w_prog_full;
  output axi_w_sbiterr;
  output axi_w_underflow;
  output axis_dbiterr;
  input axis_injectdbiterr;
  input axis_injectsbiterr;
  output axis_overflow;
  output axis_prog_empty;
  output axis_prog_full;
  output axis_sbiterr;
  output axis_underflow;
  input backup;
  input backup_marker;
  input clk;
  output dbiterr;
  output empty;
  output full;
  input injectdbiterr;
  input injectsbiterr;
  input int_clk;
  input m_aclk;
  input m_aclk_en;
  input m_axi_arready;
  output m_axi_arvalid;
  input m_axi_awready;
  output m_axi_awvalid;
  output m_axi_bready;
  input m_axi_bvalid;
  input m_axi_rlast;
  output m_axi_rready;
  input m_axi_rvalid;
  output m_axi_wlast;
  input m_axi_wready;
  output m_axi_wvalid;
  output m_axis_tlast;
  input m_axis_tready;
  output m_axis_tvalid;
  output overflow;
  output prog_empty;
  output prog_full;
  input rd_clk;
  input rd_en;
  input rd_rst;
  output rd_rst_busy;
  input rst;
  input s_aclk;
  input s_aclk_en;
  input s_aresetn;
  output s_axi_arready;
  input s_axi_arvalid;
  output s_axi_awready;
  input s_axi_awvalid;
  input s_axi_bready;
  output s_axi_bvalid;
  output s_axi_rlast;
  input s_axi_rready;
  output s_axi_rvalid;
  input s_axi_wlast;
  output s_axi_wready;
  input s_axi_wvalid;
  input s_axis_tlast;
  output s_axis_tready;
  input s_axis_tvalid;
  output sbiterr;
  input sleep;
  input srst;
  output underflow;
  output valid;
  output wr_ack;
  input wr_clk;
  input wr_en;
  input wr_rst;
  output wr_rst_busy;
  output [4:0]axi_ar_data_count;
  input [3:0]axi_ar_prog_empty_thresh;
  input [3:0]axi_ar_prog_full_thresh;
  output [4:0]axi_ar_rd_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_aw_data_count;
  input [3:0]axi_aw_prog_empty_thresh;
  input [3:0]axi_aw_prog_full_thresh;
  output [4:0]axi_aw_rd_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_b_data_count;
  input [3:0]axi_b_prog_empty_thresh;
  input [3:0]axi_b_prog_full_thresh;
  output [4:0]axi_b_rd_data_count;
  output [4:0]axi_b_wr_data_count;
  output [10:0]axi_r_data_count;
  input [9:0]axi_r_prog_empty_thresh;
  input [9:0]axi_r_prog_full_thresh;
  output [10:0]axi_r_rd_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_w_data_count;
  input [9:0]axi_w_prog_empty_thresh;
  input [9:0]axi_w_prog_full_thresh;
  output [10:0]axi_w_rd_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axis_data_count;
  input [9:0]axis_prog_empty_thresh;
  input [9:0]axis_prog_full_thresh;
  output [10:0]axis_rd_data_count;
  output [10:0]axis_wr_data_count;
  output [3:0]data_count;
  input [15:0]din;
  output [15:0]dout;
  output [31:0]m_axi_araddr;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arcache;
  output [3:0]m_axi_arid;
  output [7:0]m_axi_arlen;
  output [1:0]m_axi_arlock;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [2:0]m_axi_arsize;
  output [0:0]m_axi_aruser;
  output [31:0]m_axi_awaddr;
  output [1:0]m_axi_awburst;
  output [3:0]m_axi_awcache;
  output [3:0]m_axi_awid;
  output [7:0]m_axi_awlen;
  output [1:0]m_axi_awlock;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [2:0]m_axi_awsize;
  output [0:0]m_axi_awuser;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input [63:0]m_axi_rdata;
  input [3:0]m_axi_rid;
  input [1:0]m_axi_rresp;
  input [0:0]m_axi_ruser;
  output [63:0]m_axi_wdata;
  output [3:0]m_axi_wid;
  output [7:0]m_axi_wstrb;
  output [0:0]m_axi_wuser;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tdest;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tkeep;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tuser;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  output [3:0]rd_data_count;
  input [31:0]s_axi_araddr;
  input [1:0]s_axi_arburst;
  input [3:0]s_axi_arcache;
  input [3:0]s_axi_arid;
  input [7:0]s_axi_arlen;
  input [1:0]s_axi_arlock;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [2:0]s_axi_arsize;
  input [0:0]s_axi_aruser;
  input [31:0]s_axi_awaddr;
  input [1:0]s_axi_awburst;
  input [3:0]s_axi_awcache;
  input [3:0]s_axi_awid;
  input [7:0]s_axi_awlen;
  input [1:0]s_axi_awlock;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [2:0]s_axi_awsize;
  input [0:0]s_axi_awuser;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output [63:0]s_axi_rdata;
  output [3:0]s_axi_rid;
  output [1:0]s_axi_rresp;
  output [0:0]s_axi_ruser;
  input [63:0]s_axi_wdata;
  input [3:0]s_axi_wid;
  input [7:0]s_axi_wstrb;
  input [0:0]s_axi_wuser;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tdest;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tkeep;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tuser;
  output [3:0]wr_data_count;

  wire \<const0> ;
  wire \<const1> ;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire underflow;
  wire wr_clk;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  fifo_generator_v13_1_4_synth inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .overflow(overflow),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .underflow(underflow),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "4" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "2" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "0" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "4" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "16" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "16" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "1" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "1" *) (* C_HAS_VALID = "1" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "0" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "4" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "0" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "4" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_1_4" *) 
module fifo_generator_v13_1_4__parameterized0
   (almost_empty,
    almost_full,
    axi_ar_dbiterr,
    axi_ar_injectdbiterr,
    axi_ar_injectsbiterr,
    axi_ar_overflow,
    axi_ar_prog_empty,
    axi_ar_prog_full,
    axi_ar_sbiterr,
    axi_ar_underflow,
    axi_aw_dbiterr,
    axi_aw_injectdbiterr,
    axi_aw_injectsbiterr,
    axi_aw_overflow,
    axi_aw_prog_empty,
    axi_aw_prog_full,
    axi_aw_sbiterr,
    axi_aw_underflow,
    axi_b_dbiterr,
    axi_b_injectdbiterr,
    axi_b_injectsbiterr,
    axi_b_overflow,
    axi_b_prog_empty,
    axi_b_prog_full,
    axi_b_sbiterr,
    axi_b_underflow,
    axi_r_dbiterr,
    axi_r_injectdbiterr,
    axi_r_injectsbiterr,
    axi_r_overflow,
    axi_r_prog_empty,
    axi_r_prog_full,
    axi_r_sbiterr,
    axi_r_underflow,
    axi_w_dbiterr,
    axi_w_injectdbiterr,
    axi_w_injectsbiterr,
    axi_w_overflow,
    axi_w_prog_empty,
    axi_w_prog_full,
    axi_w_sbiterr,
    axi_w_underflow,
    axis_dbiterr,
    axis_injectdbiterr,
    axis_injectsbiterr,
    axis_overflow,
    axis_prog_empty,
    axis_prog_full,
    axis_sbiterr,
    axis_underflow,
    backup,
    backup_marker,
    clk,
    dbiterr,
    empty,
    full,
    injectdbiterr,
    injectsbiterr,
    int_clk,
    m_aclk,
    m_aclk_en,
    m_axi_arready,
    m_axi_arvalid,
    m_axi_awready,
    m_axi_awvalid,
    m_axi_bready,
    m_axi_bvalid,
    m_axi_rlast,
    m_axi_rready,
    m_axi_rvalid,
    m_axi_wlast,
    m_axi_wready,
    m_axi_wvalid,
    m_axis_tlast,
    m_axis_tready,
    m_axis_tvalid,
    overflow,
    prog_empty,
    prog_full,
    rd_clk,
    rd_en,
    rd_rst,
    rd_rst_busy,
    rst,
    s_aclk,
    s_aclk_en,
    s_aresetn,
    s_axi_arready,
    s_axi_arvalid,
    s_axi_awready,
    s_axi_awvalid,
    s_axi_bready,
    s_axi_bvalid,
    s_axi_rlast,
    s_axi_rready,
    s_axi_rvalid,
    s_axi_wlast,
    s_axi_wready,
    s_axi_wvalid,
    s_axis_tlast,
    s_axis_tready,
    s_axis_tvalid,
    sbiterr,
    sleep,
    srst,
    underflow,
    valid,
    wr_ack,
    wr_clk,
    wr_en,
    wr_rst,
    wr_rst_busy,
    axi_ar_data_count,
    axi_ar_prog_empty_thresh,
    axi_ar_prog_full_thresh,
    axi_ar_rd_data_count,
    axi_ar_wr_data_count,
    axi_aw_data_count,
    axi_aw_prog_empty_thresh,
    axi_aw_prog_full_thresh,
    axi_aw_rd_data_count,
    axi_aw_wr_data_count,
    axi_b_data_count,
    axi_b_prog_empty_thresh,
    axi_b_prog_full_thresh,
    axi_b_rd_data_count,
    axi_b_wr_data_count,
    axi_r_data_count,
    axi_r_prog_empty_thresh,
    axi_r_prog_full_thresh,
    axi_r_rd_data_count,
    axi_r_wr_data_count,
    axi_w_data_count,
    axi_w_prog_empty_thresh,
    axi_w_prog_full_thresh,
    axi_w_rd_data_count,
    axi_w_wr_data_count,
    axis_data_count,
    axis_prog_empty_thresh,
    axis_prog_full_thresh,
    axis_rd_data_count,
    axis_wr_data_count,
    data_count,
    din,
    dout,
    m_axi_araddr,
    m_axi_arburst,
    m_axi_arcache,
    m_axi_arid,
    m_axi_arlen,
    m_axi_arlock,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_arsize,
    m_axi_aruser,
    m_axi_awaddr,
    m_axi_awburst,
    m_axi_awcache,
    m_axi_awid,
    m_axi_awlen,
    m_axi_awlock,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awsize,
    m_axi_awuser,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_rdata,
    m_axi_rid,
    m_axi_rresp,
    m_axi_ruser,
    m_axi_wdata,
    m_axi_wid,
    m_axi_wstrb,
    m_axi_wuser,
    m_axis_tdata,
    m_axis_tdest,
    m_axis_tid,
    m_axis_tkeep,
    m_axis_tstrb,
    m_axis_tuser,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    rd_data_count,
    s_axi_araddr,
    s_axi_arburst,
    s_axi_arcache,
    s_axi_arid,
    s_axi_arlen,
    s_axi_arlock,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_arsize,
    s_axi_aruser,
    s_axi_awaddr,
    s_axi_awburst,
    s_axi_awcache,
    s_axi_awid,
    s_axi_awlen,
    s_axi_awlock,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awsize,
    s_axi_awuser,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_rdata,
    s_axi_rid,
    s_axi_rresp,
    s_axi_ruser,
    s_axi_wdata,
    s_axi_wid,
    s_axi_wstrb,
    s_axi_wuser,
    s_axis_tdata,
    s_axis_tdest,
    s_axis_tid,
    s_axis_tkeep,
    s_axis_tstrb,
    s_axis_tuser,
    wr_data_count);
  output almost_empty;
  output almost_full;
  output axi_ar_dbiterr;
  input axi_ar_injectdbiterr;
  input axi_ar_injectsbiterr;
  output axi_ar_overflow;
  output axi_ar_prog_empty;
  output axi_ar_prog_full;
  output axi_ar_sbiterr;
  output axi_ar_underflow;
  output axi_aw_dbiterr;
  input axi_aw_injectdbiterr;
  input axi_aw_injectsbiterr;
  output axi_aw_overflow;
  output axi_aw_prog_empty;
  output axi_aw_prog_full;
  output axi_aw_sbiterr;
  output axi_aw_underflow;
  output axi_b_dbiterr;
  input axi_b_injectdbiterr;
  input axi_b_injectsbiterr;
  output axi_b_overflow;
  output axi_b_prog_empty;
  output axi_b_prog_full;
  output axi_b_sbiterr;
  output axi_b_underflow;
  output axi_r_dbiterr;
  input axi_r_injectdbiterr;
  input axi_r_injectsbiterr;
  output axi_r_overflow;
  output axi_r_prog_empty;
  output axi_r_prog_full;
  output axi_r_sbiterr;
  output axi_r_underflow;
  output axi_w_dbiterr;
  input axi_w_injectdbiterr;
  input axi_w_injectsbiterr;
  output axi_w_overflow;
  output axi_w_prog_empty;
  output axi_w_prog_full;
  output axi_w_sbiterr;
  output axi_w_underflow;
  output axis_dbiterr;
  input axis_injectdbiterr;
  input axis_injectsbiterr;
  output axis_overflow;
  output axis_prog_empty;
  output axis_prog_full;
  output axis_sbiterr;
  output axis_underflow;
  input backup;
  input backup_marker;
  input clk;
  output dbiterr;
  output empty;
  output full;
  input injectdbiterr;
  input injectsbiterr;
  input int_clk;
  input m_aclk;
  input m_aclk_en;
  input m_axi_arready;
  output m_axi_arvalid;
  input m_axi_awready;
  output m_axi_awvalid;
  output m_axi_bready;
  input m_axi_bvalid;
  input m_axi_rlast;
  output m_axi_rready;
  input m_axi_rvalid;
  output m_axi_wlast;
  input m_axi_wready;
  output m_axi_wvalid;
  output m_axis_tlast;
  input m_axis_tready;
  output m_axis_tvalid;
  output overflow;
  output prog_empty;
  output prog_full;
  input rd_clk;
  input rd_en;
  input rd_rst;
  output rd_rst_busy;
  input rst;
  input s_aclk;
  input s_aclk_en;
  input s_aresetn;
  output s_axi_arready;
  input s_axi_arvalid;
  output s_axi_awready;
  input s_axi_awvalid;
  input s_axi_bready;
  output s_axi_bvalid;
  output s_axi_rlast;
  input s_axi_rready;
  output s_axi_rvalid;
  input s_axi_wlast;
  output s_axi_wready;
  input s_axi_wvalid;
  input s_axis_tlast;
  output s_axis_tready;
  input s_axis_tvalid;
  output sbiterr;
  input sleep;
  input srst;
  output underflow;
  output valid;
  output wr_ack;
  input wr_clk;
  input wr_en;
  input wr_rst;
  output wr_rst_busy;
  output [4:0]axi_ar_data_count;
  input [3:0]axi_ar_prog_empty_thresh;
  input [3:0]axi_ar_prog_full_thresh;
  output [4:0]axi_ar_rd_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_aw_data_count;
  input [3:0]axi_aw_prog_empty_thresh;
  input [3:0]axi_aw_prog_full_thresh;
  output [4:0]axi_aw_rd_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_b_data_count;
  input [3:0]axi_b_prog_empty_thresh;
  input [3:0]axi_b_prog_full_thresh;
  output [4:0]axi_b_rd_data_count;
  output [4:0]axi_b_wr_data_count;
  output [10:0]axi_r_data_count;
  input [9:0]axi_r_prog_empty_thresh;
  input [9:0]axi_r_prog_full_thresh;
  output [10:0]axi_r_rd_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_w_data_count;
  input [9:0]axi_w_prog_empty_thresh;
  input [9:0]axi_w_prog_full_thresh;
  output [10:0]axi_w_rd_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axis_data_count;
  input [9:0]axis_prog_empty_thresh;
  input [9:0]axis_prog_full_thresh;
  output [10:0]axis_rd_data_count;
  output [10:0]axis_wr_data_count;
  output [3:0]data_count;
  input [15:0]din;
  output [15:0]dout;
  output [31:0]m_axi_araddr;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arcache;
  output [3:0]m_axi_arid;
  output [7:0]m_axi_arlen;
  output [1:0]m_axi_arlock;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [2:0]m_axi_arsize;
  output [0:0]m_axi_aruser;
  output [31:0]m_axi_awaddr;
  output [1:0]m_axi_awburst;
  output [3:0]m_axi_awcache;
  output [3:0]m_axi_awid;
  output [7:0]m_axi_awlen;
  output [1:0]m_axi_awlock;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [2:0]m_axi_awsize;
  output [0:0]m_axi_awuser;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input [63:0]m_axi_rdata;
  input [3:0]m_axi_rid;
  input [1:0]m_axi_rresp;
  input [0:0]m_axi_ruser;
  output [63:0]m_axi_wdata;
  output [3:0]m_axi_wid;
  output [7:0]m_axi_wstrb;
  output [0:0]m_axi_wuser;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tdest;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tkeep;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tuser;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  output [3:0]rd_data_count;
  input [31:0]s_axi_araddr;
  input [1:0]s_axi_arburst;
  input [3:0]s_axi_arcache;
  input [3:0]s_axi_arid;
  input [7:0]s_axi_arlen;
  input [1:0]s_axi_arlock;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [2:0]s_axi_arsize;
  input [0:0]s_axi_aruser;
  input [31:0]s_axi_awaddr;
  input [1:0]s_axi_awburst;
  input [3:0]s_axi_awcache;
  input [3:0]s_axi_awid;
  input [7:0]s_axi_awlen;
  input [1:0]s_axi_awlock;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [2:0]s_axi_awsize;
  input [0:0]s_axi_awuser;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output [63:0]s_axi_rdata;
  output [3:0]s_axi_rid;
  output [1:0]s_axi_rresp;
  output [0:0]s_axi_ruser;
  input [63:0]s_axi_wdata;
  input [3:0]s_axi_wid;
  input [7:0]s_axi_wstrb;
  input [0:0]s_axi_wuser;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tdest;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tkeep;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tuser;
  output [3:0]wr_data_count;

  wire \<const0> ;
  wire \<const1> ;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire underflow;
  wire valid;
  wire wr_clk;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  fifo_generator_v13_1_4_synth__parameterized0 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .overflow(overflow),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .underflow(underflow),
        .valid(valid),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

module fifo_generator_v13_1_4_synth
   (empty,
    full,
    overflow,
    rd_clk,
    rd_en,
    rst,
    underflow,
    wr_clk,
    wr_en,
    din,
    dout);
  output empty;
  output full;
  output overflow;
  input rd_clk;
  input rd_en;
  input rst;
  output underflow;
  input wr_clk;
  input wr_en;
  input [15:0]din;
  output [15:0]dout;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire underflow;
  wire wr_clk;
  wire wr_en;

  fifo_generator_top \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .overflow(overflow),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .underflow(underflow),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_1_4_synth" *) 
module fifo_generator_v13_1_4_synth__parameterized0
   (empty,
    full,
    overflow,
    rd_clk,
    rd_en,
    rst,
    underflow,
    valid,
    wr_clk,
    wr_en,
    din,
    dout);
  output empty;
  output full;
  output overflow;
  input rd_clk;
  input rd_en;
  input rst;
  output underflow;
  output valid;
  input wr_clk;
  input wr_en;
  input [15:0]din;
  output [15:0]dout;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire underflow;
  wire valid;
  wire wr_clk;
  wire wr_en;

  fifo_generator_top__parameterized0 \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .overflow(overflow),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .underflow(underflow),
        .valid(valid),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

module ltlib_v1_0_0_bscan
   (UPDATE,
    in0,
    s_bscan_capture,
    s_bscan_reset,
    s_bscan_runtest,
    s_bscan_sel,
    s_bscan_shift,
    s_bscan_tdi,
    s_bscan_tdo,
    s_bscan_tms,
    tck_bs);
  output UPDATE;
  output in0;
  output s_bscan_capture;
  output s_bscan_reset;
  output s_bscan_runtest;
  output s_bscan_sel;
  output s_bscan_shift;
  output s_bscan_tdi;
  input s_bscan_tdo;
  output s_bscan_tms;
  output tck_bs;

  wire UPDATE;
  wire in0;
  wire s_bscan_capture;
  wire s_bscan_reset;
  wire s_bscan_runtest;
  wire s_bscan_sel;
  wire s_bscan_shift;
  wire s_bscan_tdi;
  wire s_bscan_tdo;
  wire s_bscan_tms;
  wire tck_bs;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BSCANE2 #(
    .DISABLE_JTAG("FALSE"),
    .JTAG_CHAIN(1)) 
    \SERIES7_BSCAN.bscan_inst 
       (.CAPTURE(s_bscan_capture),
        .DRCK(in0),
        .RESET(s_bscan_reset),
        .RUNTEST(s_bscan_runtest),
        .SEL(s_bscan_sel),
        .SHIFT(s_bscan_shift),
        .TCK(tck_bs),
        .TDI(s_bscan_tdi),
        .TDO(s_bscan_tdo),
        .TMS(s_bscan_tms),
        .UPDATE(UPDATE));
endmodule

module memory
   (EN,
    rd_clk,
    wr_clk,
    E,
    Q,
    din,
    dout,
    \gpr1.dout_i_reg[1] );
  input EN;
  input rd_clk;
  input wr_clk;
  input [0:0]E;
  input [3:0]Q;
  input [15:0]din;
  output [15:0]dout;
  input [3:0]\gpr1.dout_i_reg[1] ;

  wire [0:0]E;
  wire EN;
  wire [3:0]Q;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire rd_clk;
  wire wr_clk;

  dmem \gdm.dm_gen.dm 
       (.E(E),
        .EN(EN),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gpr1.dout_i_reg[1]_0 (\gpr1.dout_i_reg[1] ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module memory__parameterized0
   (EN,
    rd_clk,
    wr_clk,
    E,
    din,
    dout,
    \gpr1.dout_i_reg[0] ,
    \gpr1.dout_i_reg[1] ,
    \gpr1.dout_i_reg[1]_0 );
  input EN;
  input rd_clk;
  input wr_clk;
  input [0:0]E;
  input [15:0]din;
  output [15:0]dout;
  input [0:0]\gpr1.dout_i_reg[0] ;
  input [3:0]\gpr1.dout_i_reg[1] ;
  input [3:0]\gpr1.dout_i_reg[1]_0 ;

  wire [0:0]E;
  wire EN;
  wire [15:0]din;
  wire [15:0]dout;
  wire [15:0]dout_i;
  wire [0:0]\gpr1.dout_i_reg[0] ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire [3:0]\gpr1.dout_i_reg[1]_0 ;
  wire rd_clk;
  wire wr_clk;

  dmem_13 \gdm.dm_gen.dm 
       (.EN(EN),
        .din(din),
        .dout_i(dout_i),
        .\gpr1.dout_i_reg[0]_0 (\gpr1.dout_i_reg[0] ),
        .\gpr1.dout_i_reg[1]_0 (\gpr1.dout_i_reg[1] ),
        .\gpr1.dout_i_reg[1]_1 (\gpr1.dout_i_reg[1]_0 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[0]),
        .Q(dout[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[10]),
        .Q(dout[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[11]),
        .Q(dout[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[12]),
        .Q(dout[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[13]),
        .Q(dout[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[14]),
        .Q(dout[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[15]),
        .Q(dout[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[1]),
        .Q(dout[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[2]),
        .Q(dout[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[3]),
        .Q(dout[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[4]),
        .Q(dout[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[5]),
        .Q(dout[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[6]),
        .Q(dout[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[7]),
        .Q(dout[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[8]),
        .Q(dout[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(E),
        .D(dout_i[9]),
        .Q(dout[9]),
        .R(1'b0));
endmodule

module rd_bin_cntr
   (ma_wr_pop_r_reg,
    out,
    rd_clk,
    rd_en,
    AR,
    D,
    E,
    Q,
    ram_empty_i_reg);
  output ma_wr_pop_r_reg;
  input out;
  input rd_clk;
  input rd_en;
  input [0:0]AR;
  output [2:0]D;
  input [0:0]E;
  output [3:0]Q;
  input [3:0]ram_empty_i_reg;

  wire [0:0]AR;
  wire [2:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire ma_wr_pop_r_reg;
  wire out;
  wire [3:0]plusOp;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_i_4_n_0;
  wire ram_empty_i_i_5_n_0;
  wire [3:0]ram_empty_i_reg;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[3]),
        .Q(Q[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(rd_pntr_plus1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_gc[0]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(D[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_gc[1]_i_1 
       (.I0(Q[2]),
        .I1(Q[1]),
        .O(D[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_gc[2]_i_1 
       (.I0(Q[3]),
        .I1(Q[2]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    ram_empty_i_i_1
       (.I0(ram_empty_i_i_2_n_0),
        .I1(ram_empty_i_i_3_n_0),
        .I2(rd_en),
        .I3(out),
        .I4(ram_empty_i_i_4_n_0),
        .I5(ram_empty_i_i_5_n_0),
        .O(ma_wr_pop_r_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_2
       (.I0(Q[2]),
        .I1(ram_empty_i_reg[2]),
        .I2(Q[3]),
        .I3(ram_empty_i_reg[3]),
        .O(ram_empty_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_3
       (.I0(Q[0]),
        .I1(ram_empty_i_reg[0]),
        .I2(Q[1]),
        .I3(ram_empty_i_reg[1]),
        .O(ram_empty_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_4
       (.I0(rd_pntr_plus1[0]),
        .I1(ram_empty_i_reg[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(ram_empty_i_reg[1]),
        .O(ram_empty_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_5
       (.I0(rd_pntr_plus1[2]),
        .I1(ram_empty_i_reg[2]),
        .I2(rd_pntr_plus1[3]),
        .I3(ram_empty_i_reg[3]),
        .O(ram_empty_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module rd_bin_cntr_18
   (\gc0.count_d1_reg[2]_0 ,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    rd_clk,
    D,
    E,
    Q,
    \gc0.count_d1_reg[3]_0 ,
    out,
    ram_empty_i_reg_1);
  output \gc0.count_d1_reg[2]_0 ;
  input ram_empty_i_reg;
  input ram_empty_i_reg_0;
  input rd_clk;
  output [2:0]D;
  input [0:0]E;
  output [3:0]Q;
  output [3:0]\gc0.count_d1_reg[3]_0 ;
  input [0:0]out;
  input [3:0]ram_empty_i_reg_1;

  wire [2:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire \gc0.count_d1_reg[2]_0 ;
  wire [3:0]\gc0.count_d1_reg[3]_0 ;
  wire [0:0]out;
  wire [3:0]plusOp;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire [3:0]ram_empty_i_reg_1;
  wire rd_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* \PinAttr:I2:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* \PinAttr:I0:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(out),
        .D(Q[0]),
        .Q(\gc0.count_d1_reg[3]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(out),
        .D(Q[1]),
        .Q(\gc0.count_d1_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(out),
        .D(Q[2]),
        .Q(\gc0.count_d1_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(out),
        .D(Q[3]),
        .Q(\gc0.count_d1_reg[3]_0 [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(out),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(out),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(out),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(out),
        .D(plusOp[3]),
        .Q(Q[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_gc[0]_i_1 
       (.I0(\gc0.count_d1_reg[3]_0 [1]),
        .I1(\gc0.count_d1_reg[3]_0 [0]),
        .O(D[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_gc[1]_i_1 
       (.I0(\gc0.count_d1_reg[3]_0 [2]),
        .I1(\gc0.count_d1_reg[3]_0 [1]),
        .O(D[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_gc[2]_i_1 
       (.I0(\gc0.count_d1_reg[3]_0 [3]),
        .I1(\gc0.count_d1_reg[3]_0 [2]),
        .O(D[2]));
  LUT4 #(
    .INIT(16'hF888)) 
    ram_empty_i_i_1
       (.I0(ram_empty_i_i_2_n_0),
        .I1(ram_empty_i_i_3_n_0),
        .I2(ram_empty_i_reg),
        .I3(ram_empty_i_reg_0),
        .O(\gc0.count_d1_reg[2]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_2
       (.I0(\gc0.count_d1_reg[3]_0 [2]),
        .I1(ram_empty_i_reg_1[2]),
        .I2(\gc0.count_d1_reg[3]_0 [3]),
        .I3(ram_empty_i_reg_1[3]),
        .O(ram_empty_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_3
       (.I0(\gc0.count_d1_reg[3]_0 [0]),
        .I1(ram_empty_i_reg_1[0]),
        .I2(\gc0.count_d1_reg[3]_0 [1]),
        .I3(ram_empty_i_reg_1[1]),
        .O(ram_empty_i_i_3_n_0));
endmodule

module rd_fwft
   (empty,
    \gpregsm1.curr_fwft_state_reg[1]_0 ,
    \gpregsm1.curr_fwft_state_reg[1]_1 ,
    rd_clk,
    rd_en,
    underflow_i0,
    valid,
    E,
    Q,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ,
    out,
    ram_empty_i_reg);
  output empty;
  output \gpregsm1.curr_fwft_state_reg[1]_0 ;
  input \gpregsm1.curr_fwft_state_reg[1]_1 ;
  input rd_clk;
  input rd_en;
  output underflow_i0;
  output valid;
  output [0:0]E;
  input [0:0]Q;
  output [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ;
  input [1:0]out;
  input [0:0]ram_empty_i_reg;

  wire [0:0]E;
  wire [0:0]Q;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire \gpregsm1.curr_fwft_state_reg[1]_0 ;
  wire \gpregsm1.curr_fwft_state_reg[1]_1 ;
  wire [1:0]next_fwft_state;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ;
  wire [1:0]out;
  wire [0:0]ram_empty_i_reg;
  wire rd_clk;
  wire rd_en;
  wire underflow_i0;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  assign valid = user_valid;
  LUT5 #(
    .INIT(32'hEF80EB00)) 
    aempty_fwft_fb_i_i_1
       (.I0(\gpregsm1.curr_fwft_state_reg[1]_1 ),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(aempty_fwft_fb_i),
        .I4(rd_en),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(out[1]),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(out[1]),
        .Q(aempty_fwft_i));
  (* \PinAttr:I0:HOLD_DETOUR  = "177" *) 
  LUT4 #(
    .INIT(16'hBA22)) 
    empty_fwft_fb_i_i_1
       (.I0(empty_fwft_fb_i),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(curr_fwft_state[0]),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(out[1]),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hBA22)) 
    empty_fwft_fb_o_i_i_1
       (.I0(empty_fwft_fb_o_i),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(curr_fwft_state[0]),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(out[1]),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(out[1]),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h00DF)) 
    \gc0.count_d1[3]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(\gpregsm1.curr_fwft_state_reg[1]_1 ),
        .O(E));
  LUT4 #(
    .INIT(16'h4404)) 
    \goreg_dm.dout_i[15]_i_1 
       (.I0(out[0]),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(rd_en),
        .O(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ));
  LUT3 #(
    .INIT(8'hAE)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(\gpregsm1.curr_fwft_state_reg[1]_1 ),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(out[1]),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(out[1]),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(out[1]),
        .D(next_fwft_state[0]),
        .Q(user_valid));
  LUT2 #(
    .INIT(4'h8)) 
    \guf.guf1.underflow_i_i_1 
       (.I0(empty_fwft_i),
        .I1(rd_en),
        .O(underflow_i0));
  LUT6 #(
    .INIT(64'h00DF0000000000DF)) 
    ram_empty_i_i_5
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(\gpregsm1.curr_fwft_state_reg[1]_1 ),
        .I4(Q),
        .I5(ram_empty_i_reg),
        .O(\gpregsm1.curr_fwft_state_reg[1]_0 ));
endmodule

module rd_handshaking_flags
   (\guf.guf1.underflow_i_reg_0 ,
    rd_clk,
    underflow);
  input \guf.guf1.underflow_i_reg_0 ;
  input rd_clk;
  output underflow;

  wire \guf.guf1.underflow_i_reg_0 ;
  wire rd_clk;
  wire underflow;

  FDRE #(
    .INIT(1'b0)) 
    \guf.guf1.underflow_i_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\guf.guf1.underflow_i_reg_0 ),
        .Q(underflow),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_handshaking_flags" *) 
module rd_handshaking_flags__parameterized0
   (rd_clk,
    underflow,
    underflow_i0);
  input rd_clk;
  output underflow;
  input underflow_i0;

  wire rd_clk;
  wire underflow;
  wire underflow_i0;

  FDRE #(
    .INIT(1'b0)) 
    \guf.guf1.underflow_i_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(underflow_i0),
        .Q(underflow),
        .R(1'b0));
endmodule

module rd_logic
   (empty,
    rd_clk,
    rd_en,
    underflow,
    AR,
    D,
    E,
    Q,
    ram_empty_i_reg);
  output empty;
  input rd_clk;
  input rd_en;
  output underflow;
  input [0:0]AR;
  output [2:0]D;
  output [0:0]E;
  output [3:0]Q;
  input [3:0]ram_empty_i_reg;

  wire [0:0]AR;
  wire [2:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire empty;
  wire empty_fb_i;
  wire \gras.rsts_n_3 ;
  wire [3:0]ram_empty_i_reg;
  wire rd_clk;
  wire rd_en;
  wire rpntr_n_0;
  wire underflow;

  rd_status_flags_as \gras.rsts 
       (.AR(AR),
        .E(E),
        .empty(empty),
        .out(empty_fb_i),
        .ram_empty_i_reg_0(\gras.rsts_n_3 ),
        .ram_empty_i_reg_1(rpntr_n_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  rd_handshaking_flags \grhf.rhf 
       (.\guf.guf1.underflow_i_reg_0 (\gras.rsts_n_3 ),
        .rd_clk(rd_clk),
        .underflow(underflow));
  rd_bin_cntr rpntr
       (.AR(AR),
        .D(D),
        .E(E),
        .Q(Q),
        .ma_wr_pop_r_reg(rpntr_n_0),
        .out(empty_fb_i),
        .ram_empty_i_reg(ram_empty_i_reg),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module rd_logic__parameterized0
   (empty,
    ram_empty_i_reg,
    rd_clk,
    rd_en,
    underflow,
    valid,
    D,
    E,
    Q,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[2] ,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ,
    out);
  output empty;
  input ram_empty_i_reg;
  input rd_clk;
  input rd_en;
  output underflow;
  output valid;
  output [2:0]D;
  output [0:0]E;
  input [3:0]Q;
  output [3:0]\gc0.count_d1_reg[3] ;
  output [2:0]\gc0.count_reg[2] ;
  output [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ;
  input [1:0]out;

  wire [2:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire empty;
  wire empty_fb_i;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire \gr1.gr1_int.rfwft_n_2 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ;
  wire [1:0]out;
  wire ram_empty_i_reg;
  wire rd_clk;
  wire rd_en;
  wire [3:3]rd_pntr_plus1;
  wire rpntr_n_0;
  wire underflow;
  wire underflow_i0;
  wire valid;

  rd_fwft \gr1.gr1_int.rfwft 
       (.E(E),
        .Q(Q[3]),
        .empty(empty),
        .\gpregsm1.curr_fwft_state_reg[1]_0 (\gr1.gr1_int.rfwft_n_2 ),
        .\gpregsm1.curr_fwft_state_reg[1]_1 (empty_fb_i),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .out(out),
        .ram_empty_i_reg(rd_pntr_plus1),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .underflow_i0(underflow_i0),
        .valid(valid));
  rd_status_flags_as_17 \gras.rsts 
       (.out(empty_fb_i),
        .ram_empty_fb_i_reg_0(out[1]),
        .ram_empty_i_reg_0(rpntr_n_0),
        .rd_clk(rd_clk));
  rd_handshaking_flags__parameterized0 \grhf.rhf 
       (.rd_clk(rd_clk),
        .underflow(underflow),
        .underflow_i0(underflow_i0));
  rd_bin_cntr_18 rpntr
       (.D(D),
        .E(E),
        .Q({rd_pntr_plus1,\gc0.count_reg[2] }),
        .\gc0.count_d1_reg[2]_0 (rpntr_n_0),
        .\gc0.count_d1_reg[3]_0 (\gc0.count_d1_reg[3] ),
        .out(out[1]),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_empty_i_reg_0(\gr1.gr1_int.rfwft_n_2 ),
        .ram_empty_i_reg_1(Q),
        .rd_clk(rd_clk));
endmodule

module rd_status_flags_as
   (empty,
    out,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    rd_clk,
    rd_en,
    AR,
    E);
  output empty;
  output out;
  output ram_empty_i_reg_0;
  input ram_empty_i_reg_1;
  input rd_clk;
  input rd_en;
  input [0:0]AR;
  output [0:0]E;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gpr1.dout_i[15]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  LUT2 #(
    .INIT(4'h8)) 
    \guf.guf1.underflow_i_i_1 
       (.I0(ram_empty_i),
        .I1(rd_en),
        .O(ram_empty_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_i_reg_1),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_i_reg_1),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module rd_status_flags_as_17
   (out,
    ram_empty_i_reg_0,
    rd_clk,
    ram_empty_fb_i_reg_0);
  output out;
  input ram_empty_i_reg_0;
  input rd_clk;
  input [0:0]ram_empty_fb_i_reg_0;

  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire [0:0]ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_empty_i_reg_0;
  wire rd_clk;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_i_reg_0),
        .PRE(ram_empty_fb_i_reg_0),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_i_reg_0),
        .PRE(ram_empty_fb_i_reg_0),
        .Q(ram_empty_i));
endmodule

module reset_blk_ramfifo
   (rd_clk,
    rst,
    wr_clk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 ,
    out);
  input rd_clk;
  input rst;
  input wr_clk;
  output [1:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 ;
  output [1:0]out;

  wire \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst_n_1 ;
  wire \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst_n_1 ;
  wire rd_clk;
  wire rd_rst_asreg;
  wire rd_rst_comb;
  (* DONT_TOUCH *) wire [2:0]rd_rst_reg;
  wire \rrst_reg[1]_0 ;
  wire rst;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_rd_reg1;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_rd_reg2;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_wr_reg1;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_wr_reg2;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_comb;
  (* DONT_TOUCH *) wire [2:0]wr_rst_reg;
  wire \wrst_reg[1]_1 ;

  assign \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 [1:0] = rd_rst_reg[2:1];
  assign out[1:0] = wr_rst_reg[1:0];
  synchronizer_ff \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst 
       (.in0(rd_rst_asreg),
        .\ngwrdrst.grst.g7serrst.rd_rst_asreg_reg (\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst_n_1 ),
        .out(\rrst_reg[1]_0 ),
        .rd_clk(rd_clk));
  synchronizer_ff_1 \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst 
       (.in0(wr_rst_asreg),
        .\ngwrdrst.grst.g7serrst.wr_rst_asreg_reg (\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst_n_1 ),
        .out(\wrst_reg[1]_1 ),
        .wr_clk(wr_clk));
  synchronizer_ff_2 \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[2].rrst_inst 
       (.AS(rd_rst_comb),
        .in0(rd_rst_asreg),
        .out(\rrst_reg[1]_0 ),
        .rd_clk(rd_clk));
  synchronizer_ff_3 \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[2].wrst_inst 
       (.AS(wr_rst_comb),
        .in0(wr_rst_asreg),
        .out(\wrst_reg[1]_1 ),
        .wr_clk(wr_clk));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst_n_1 ),
        .PRE(rst_rd_reg2),
        .Q(rd_rst_asreg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rd_rst_comb),
        .Q(rd_rst_reg[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rd_rst_comb),
        .Q(rd_rst_reg[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rd_rst_comb),
        .Q(rd_rst_reg[2]));
  initial assign \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_rd_reg1));
  initial assign \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rst_rd_reg1),
        .PRE(rst),
        .Q(rst_rd_reg2));
  initial assign \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_wr_reg1));
  initial assign \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_wr_reg1),
        .PRE(rst),
        .Q(rst_wr_reg2));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst_n_1 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_asreg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(wr_rst_comb),
        .Q(wr_rst_reg[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(wr_rst_comb),
        .Q(wr_rst_reg[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(wr_rst_comb),
        .Q(wr_rst_reg[2]));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module reset_blk_ramfifo_8
   (rd_clk,
    rst,
    wr_clk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 ,
    out);
  input rd_clk;
  input rst;
  input wr_clk;
  output [2:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 ;
  output [1:0]out;

  wire \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst_n_1 ;
  wire \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst_n_1 ;
  wire rd_clk;
  wire rd_rst_asreg;
  wire rd_rst_comb;
  (* DONT_TOUCH *) wire [2:0]rd_rst_reg;
  wire \rrst_reg[1]_0 ;
  wire rst;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_rd_reg1;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_rd_reg2;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_wr_reg1;
  (* async_reg = "true" *) (* msgon = "false" *) wire rst_wr_reg2;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_comb;
  (* DONT_TOUCH *) wire [2:0]wr_rst_reg;
  wire \wrst_reg[1]_1 ;

  assign \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2]_0 [2:0] = rd_rst_reg;
  assign out[1:0] = wr_rst_reg[1:0];
  synchronizer_ff_9 \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst 
       (.in0(rd_rst_asreg),
        .\ngwrdrst.grst.g7serrst.rd_rst_asreg_reg (\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst_n_1 ),
        .out(\rrst_reg[1]_0 ),
        .rd_clk(rd_clk));
  synchronizer_ff_10 \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst 
       (.in0(wr_rst_asreg),
        .\ngwrdrst.grst.g7serrst.wr_rst_asreg_reg (\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst_n_1 ),
        .out(\wrst_reg[1]_1 ),
        .wr_clk(wr_clk));
  synchronizer_ff_11 \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[2].rrst_inst 
       (.AS(rd_rst_comb),
        .in0(rd_rst_asreg),
        .out(\rrst_reg[1]_0 ),
        .rd_clk(rd_clk));
  synchronizer_ff_12 \ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[2].wrst_inst 
       (.AS(wr_rst_comb),
        .in0(wr_rst_asreg),
        .out(\wrst_reg[1]_1 ),
        .wr_clk(wr_clk));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].rrst_inst_n_1 ),
        .PRE(rst_rd_reg2),
        .Q(rd_rst_asreg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rd_rst_comb),
        .Q(rd_rst_reg[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rd_rst_comb),
        .Q(rd_rst_reg[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rd_rst_comb),
        .Q(rd_rst_reg[2]));
  initial assign \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_rd_reg1));
  initial assign \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rst_rd_reg1),
        .PRE(rst),
        .Q(rst_rd_reg2));
  initial assign \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_wr_reg1));
  initial assign \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "false" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_wr_reg1),
        .PRE(rst),
        .Q(rst_wr_reg2));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gwrrd_rst_sync_stage[1].wrst_inst_n_1 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_asreg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(wr_rst_comb),
        .Q(wr_rst_reg[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(wr_rst_comb),
        .Q(wr_rst_reg[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(wr_rst_comb),
        .Q(wr_rst_reg[2]));
endmodule

module synchronizer_ff
   (\ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ,
    out,
    rd_clk,
    in0);
  output \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ;
  output out;
  input rd_clk;
  input [0:0]in0;

  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ;
  wire rd_clk;

  assign out = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(in0),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(\ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff_1
   (\ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ,
    out,
    wr_clk,
    in0);
  output \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ;
  output out;
  input wr_clk;
  input [0:0]in0;

  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ;
  wire wr_clk;

  assign out = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(in0),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(\ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff_10
   (\ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ,
    out,
    wr_clk,
    in0);
  output \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ;
  output out;
  input wr_clk;
  input [0:0]in0;

  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ;
  wire wr_clk;

  assign out = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(in0),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(\ngwrdrst.grst.g7serrst.wr_rst_asreg_reg ));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff_11
   (out,
    rd_clk,
    AS,
    in0);
  input out;
  input rd_clk;
  output [0:0]AS;
  input [0:0]in0;

  wire [0:0]AS;
  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire out;
  wire rd_clk;

  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(out),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(AS));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff_12
   (out,
    wr_clk,
    AS,
    in0);
  input out;
  input wr_clk;
  output [0:0]AS;
  input [0:0]in0;

  wire [0:0]AS;
  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire out;
  wire wr_clk;

  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(out),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(AS));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff_2
   (out,
    rd_clk,
    AS,
    in0);
  input out;
  input rd_clk;
  output [0:0]AS;
  input [0:0]in0;

  wire [0:0]AS;
  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire out;
  wire rd_clk;

  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(out),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(AS));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff_3
   (out,
    wr_clk,
    AS,
    in0);
  input out;
  input wr_clk;
  output [0:0]AS;
  input [0:0]in0;

  wire [0:0]AS;
  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire out;
  wire wr_clk;

  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(out),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(AS));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff_9
   (\ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ,
    out,
    rd_clk,
    in0);
  output \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ;
  output out;
  input rd_clk;
  input [0:0]in0;

  (* async_reg = "true" *) (* msgon = "true" *) wire Q_reg;
  wire [0:0]in0;
  wire \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ;
  wire rd_clk;

  assign out = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(in0),
        .Q(Q_reg),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_i_1 
       (.I0(in0),
        .I1(Q_reg),
        .O(\ngwrdrst.grst.g7serrst.rd_rst_asreg_reg ));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0
   (rd_clk,
    D,
    Q,
    \Q_reg_reg[0]_0 );
  input rd_clk;
  output [3:0]D;
  input [3:0]Q;
  input [0:0]\Q_reg_reg[0]_0 ;

  wire [3:0]Q;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire [0:0]\Q_reg_reg[0]_0 ;
  wire rd_clk;

  assign D[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[3]),
        .Q(Q_reg[3]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0_19
   (rd_clk,
    D,
    Q,
    \Q_reg_reg[0]_0 );
  input rd_clk;
  output [3:0]D;
  input [3:0]Q;
  input [0:0]\Q_reg_reg[0]_0 ;

  wire [3:0]Q;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire [0:0]\Q_reg_reg[0]_0 ;
  wire rd_clk;

  assign D[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(Q[3]),
        .Q(Q_reg[3]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0_20
   (wr_clk,
    AR,
    D,
    Q);
  input wr_clk;
  input [0:0]AR;
  output [3:0]D;
  input [3:0]Q;

  wire [0:0]AR;
  wire [3:0]Q;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire wr_clk;

  assign D[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[3]),
        .Q(Q_reg[3]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0_21
   (rd_clk,
    D,
    \Q_reg_reg[0]_0 ,
    \Q_reg_reg[3]_0 ,
    out);
  input rd_clk;
  output [0:0]D;
  input [0:0]\Q_reg_reg[0]_0 ;
  input [3:0]\Q_reg_reg[3]_0 ;
  output [3:0]out;

  wire [0:0]D;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire [0:0]\Q_reg_reg[0]_0 ;
  wire [3:0]\Q_reg_reg[3]_0 ;
  wire rd_clk;

  assign out[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [3]),
        .Q(Q_reg[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_bin[2]_i_1 
       (.I0(Q_reg[3]),
        .I1(Q_reg[2]),
        .O(D));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0_22
   (wr_clk,
    AR,
    D,
    \Q_reg_reg[3]_0 ,
    out);
  input wr_clk;
  input [0:0]AR;
  output [0:0]D;
  input [3:0]\Q_reg_reg[3]_0 ;
  output [3:0]out;

  wire [0:0]AR;
  wire [0:0]D;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire [3:0]\Q_reg_reg[3]_0 ;
  wire wr_clk;

  assign out[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [3]),
        .Q(Q_reg[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_bin[2]_i_1 
       (.I0(Q_reg[3]),
        .I1(Q_reg[2]),
        .O(D));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0_4
   (wr_clk,
    AR,
    D,
    Q);
  input wr_clk;
  input [0:0]AR;
  output [3:0]D;
  input [3:0]Q;

  wire [0:0]AR;
  wire [3:0]Q;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire wr_clk;

  assign D[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(Q[3]),
        .Q(Q_reg[3]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0_5
   (rd_clk,
    D,
    \Q_reg_reg[0]_0 ,
    \Q_reg_reg[3]_0 ,
    out);
  input rd_clk;
  output [0:0]D;
  input [0:0]\Q_reg_reg[0]_0 ;
  input [3:0]\Q_reg_reg[3]_0 ;
  output [3:0]out;

  wire [0:0]D;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire [0:0]\Q_reg_reg[0]_0 ;
  wire [3:0]\Q_reg_reg[3]_0 ;
  wire rd_clk;

  assign out[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\Q_reg_reg[0]_0 ),
        .D(\Q_reg_reg[3]_0 [3]),
        .Q(Q_reg[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.wr_pntr_bin[2]_i_1 
       (.I0(Q_reg[3]),
        .I1(Q_reg[2]),
        .O(D));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module synchronizer_ff__parameterized0_6
   (wr_clk,
    AR,
    D,
    \Q_reg_reg[3]_0 ,
    out);
  input wr_clk;
  input [0:0]AR;
  output [0:0]D;
  input [3:0]\Q_reg_reg[3]_0 ;
  output [3:0]out;

  wire [0:0]AR;
  wire [0:0]D;
  (* async_reg = "true" *) (* msgon = "true" *) wire [3:0]Q_reg;
  wire [3:0]\Q_reg_reg[3]_0 ;
  wire wr_clk;

  assign out[3:0] = Q_reg;
  initial assign \Q_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [0]),
        .Q(Q_reg[0]));
  initial assign \Q_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [1]),
        .Q(Q_reg[1]));
  initial assign \Q_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [2]),
        .Q(Q_reg[2]));
  initial assign \Q_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\Q_reg_reg[3]_0 [3]),
        .Q(Q_reg[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \gnxpm_cdc.rd_pntr_bin[2]_i_1 
       (.I0(Q_reg[3]),
        .I1(Q_reg[2]),
        .O(D));
endmodule

module wr_bin_cntr
   (wr_clk,
    E,
    Q,
    \gic0.gc0.count_d1_reg[3]_0 ,
    \gic0.gc0.count_d2_reg[3]_0 ,
    \gic0.gc0.count_reg[0]_0 );
  input wr_clk;
  input [0:0]E;
  output [3:0]Q;
  output [3:0]\gic0.gc0.count_d1_reg[3]_0 ;
  output [3:0]\gic0.gc0.count_d2_reg[3]_0 ;
  input [0:0]\gic0.gc0.count_reg[0]_0 ;

  wire [0:0]E;
  wire [3:0]Q;
  wire [3:0]\gic0.gc0.count_d1_reg[3]_0 ;
  wire [3:0]\gic0.gc0.count_d2_reg[3]_0 ;
  wire [0:0]\gic0.gc0.count_reg[0]_0 ;
  wire [3:0]plusOp__0;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* \PinAttr:I2:HOLD_DETOUR  = "189" *) 
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* \PinAttr:I2:HOLD_DETOUR  = "189" *) 
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .PRE(\gic0.gc0.count_reg[0]_0 ),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(Q[1]),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(Q[2]),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(Q[3]),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [0]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [1]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [2]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [3]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(plusOp__0[0]),
        .Q(Q[0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .PRE(\gic0.gc0.count_reg[0]_0 ),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(plusOp__0[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(plusOp__0[3]),
        .Q(Q[3]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module wr_bin_cntr_16
   (wr_clk,
    E,
    Q,
    \gic0.gc0.count_d1_reg[3]_0 ,
    \gic0.gc0.count_d2_reg[3]_0 ,
    \gic0.gc0.count_reg[0]_0 );
  input wr_clk;
  input [0:0]E;
  output [3:0]Q;
  output [3:0]\gic0.gc0.count_d1_reg[3]_0 ;
  output [3:0]\gic0.gc0.count_d2_reg[3]_0 ;
  input [0:0]\gic0.gc0.count_reg[0]_0 ;

  wire [0:0]E;
  wire [3:0]Q;
  wire [3:0]\gic0.gc0.count_d1_reg[3]_0 ;
  wire [3:0]\gic0.gc0.count_d2_reg[3]_0 ;
  wire [0:0]\gic0.gc0.count_reg[0]_0 ;
  wire [3:0]plusOp__0;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .PRE(\gic0.gc0.count_reg[0]_0 ),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(Q[1]),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(Q[2]),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(Q[3]),
        .Q(\gic0.gc0.count_d1_reg[3]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [0]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [1]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [2]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(\gic0.gc0.count_d1_reg[3]_0 [3]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(plusOp__0[0]),
        .Q(Q[0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .PRE(\gic0.gc0.count_reg[0]_0 ),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(plusOp__0[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\gic0.gc0.count_reg[0]_0 ),
        .D(plusOp__0[3]),
        .Q(Q[3]));
endmodule

module wr_handshaking_flags
   (\gof.gof1.overflow_i_reg_0 ,
    overflow,
    wr_clk);
  input \gof.gof1.overflow_i_reg_0 ;
  output overflow;
  input wr_clk;

  wire \gof.gof1.overflow_i_reg_0 ;
  wire overflow;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    \gof.gof1.overflow_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gof.gof1.overflow_i_reg_0 ),
        .Q(overflow),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_handshaking_flags" *) 
module wr_handshaking_flags_15
   (\gof.gof1.overflow_i_reg_0 ,
    overflow,
    wr_clk);
  input \gof.gof1.overflow_i_reg_0 ;
  output overflow;
  input wr_clk;

  wire \gof.gof1.overflow_i_reg_0 ;
  wire overflow;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    \gof.gof1.overflow_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gof.gof1.overflow_i_reg_0 ),
        .Q(overflow),
        .R(1'b0));
endmodule

module wr_logic
   (full,
    out,
    overflow,
    ram_full_fb_i_reg,
    wr_clk,
    wr_en,
    E,
    Q,
    \gic0.gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    \gic0.gc0.count_reg[0] );
  output full;
  output out;
  output overflow;
  input ram_full_fb_i_reg;
  input wr_clk;
  input wr_en;
  output [0:0]E;
  output [3:0]Q;
  output [3:0]\gic0.gc0.count_d1_reg[3] ;
  output [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [1:0]\gic0.gc0.count_reg[0] ;

  wire [0:0]E;
  wire [3:0]Q;
  wire full;
  wire [3:0]\gic0.gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire [1:0]\gic0.gc0.count_reg[0] ;
  wire \gwas.wsts_n_2 ;
  wire out;
  wire overflow;
  wire ram_full_fb_i_reg;
  wire wr_clk;
  wire wr_en;

  wr_status_flags_as \gwas.wsts 
       (.E(E),
        .full(full),
        .out(out),
        .ram_full_fb_i_reg_0(\gwas.wsts_n_2 ),
        .ram_full_fb_i_reg_1(ram_full_fb_i_reg),
        .ram_full_fb_i_reg_2(\gic0.gc0.count_reg[0] [0]),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  wr_handshaking_flags \gwhf.whf 
       (.\gof.gof1.overflow_i_reg_0 (\gwas.wsts_n_2 ),
        .overflow(overflow),
        .wr_clk(wr_clk));
  wr_bin_cntr wpntr
       (.E(E),
        .Q(Q),
        .\gic0.gc0.count_d1_reg[3]_0 (\gic0.gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3]_0 (\gic0.gc0.count_d2_reg[3] ),
        .\gic0.gc0.count_reg[0]_0 (\gic0.gc0.count_reg[0] [1]),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module wr_logic__parameterized0
   (full,
    out,
    overflow,
    ram_full_fb_i_reg,
    wr_clk,
    wr_en,
    E,
    Q,
    \gic0.gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    \gic0.gc0.count_reg[0] );
  output full;
  output out;
  output overflow;
  input ram_full_fb_i_reg;
  input wr_clk;
  input wr_en;
  output [0:0]E;
  output [3:0]Q;
  output [3:0]\gic0.gc0.count_d1_reg[3] ;
  output [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [1:0]\gic0.gc0.count_reg[0] ;

  wire [0:0]E;
  wire [3:0]Q;
  wire full;
  wire [3:0]\gic0.gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire [1:0]\gic0.gc0.count_reg[0] ;
  wire \gwas.wsts_n_2 ;
  wire out;
  wire overflow;
  wire ram_full_fb_i_reg;
  wire wr_clk;
  wire wr_en;

  wr_status_flags_as_14 \gwas.wsts 
       (.E(E),
        .full(full),
        .out(out),
        .ram_full_fb_i_reg_0(\gwas.wsts_n_2 ),
        .ram_full_fb_i_reg_1(ram_full_fb_i_reg),
        .ram_full_fb_i_reg_2(\gic0.gc0.count_reg[0] [0]),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  wr_handshaking_flags_15 \gwhf.whf 
       (.\gof.gof1.overflow_i_reg_0 (\gwas.wsts_n_2 ),
        .overflow(overflow),
        .wr_clk(wr_clk));
  wr_bin_cntr_16 wpntr
       (.E(E),
        .Q(Q),
        .\gic0.gc0.count_d1_reg[3]_0 (\gic0.gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3]_0 (\gic0.gc0.count_d2_reg[3] ),
        .\gic0.gc0.count_reg[0]_0 (\gic0.gc0.count_reg[0] [1]),
        .wr_clk(wr_clk));
endmodule

module wr_status_flags_as
   (full,
    out,
    ram_full_fb_i_reg_0,
    ram_full_fb_i_reg_1,
    wr_clk,
    wr_en,
    E,
    ram_full_fb_i_reg_2);
  output full;
  output out;
  output ram_full_fb_i_reg_0;
  input ram_full_fb_i_reg_1;
  input wr_clk;
  input wr_en;
  output [0:0]E;
  input [0:0]ram_full_fb_i_reg_2;

  wire [0:0]E;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  wire ram_full_fb_i_reg_1;
  wire [0:0]ram_full_fb_i_reg_2;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gic0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT2 #(
    .INIT(4'h8)) 
    \gof.gof1.overflow_i_i_1 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(ram_full_fb_i_reg_2),
        .D(ram_full_fb_i_reg_1),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(ram_full_fb_i_reg_2),
        .D(ram_full_fb_i_reg_1),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module wr_status_flags_as_14
   (full,
    out,
    ram_full_fb_i_reg_0,
    ram_full_fb_i_reg_1,
    wr_clk,
    wr_en,
    E,
    ram_full_fb_i_reg_2);
  output full;
  output out;
  output ram_full_fb_i_reg_0;
  input ram_full_fb_i_reg_1;
  input wr_clk;
  input wr_en;
  output [0:0]E;
  input [0:0]ram_full_fb_i_reg_2;

  wire [0:0]E;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  wire ram_full_fb_i_reg_1;
  wire [0:0]ram_full_fb_i_reg_2;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gic0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT2 #(
    .INIT(4'h8)) 
    \gof.gof1.overflow_i_i_1 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(ram_full_fb_i_reg_2),
        .D(ram_full_fb_i_reg_1),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(ram_full_fb_i_reg_2),
        .D(ram_full_fb_i_reg_1),
        .Q(ram_full_i));
endmodule

module xsdbm_v3_0_0_addr_ctl
   (addr_in_rdy_last,
    addr_in_rdy_rise_edge,
    addr_in_rdy_rise_edge0,
    \addr_reg[0]_0 ,
    clk,
    addr_in_rdy_last_reg_0,
    \addr_reg[16]_0 ,
    out,
    sl_iport0_o);
  output addr_in_rdy_last;
  output addr_in_rdy_rise_edge;
  input addr_in_rdy_rise_edge0;
  input \addr_reg[0]_0 ;
  input clk;
  input [0:0]addr_in_rdy_last_reg_0;
  input [16:0]\addr_reg[16]_0 ;
  input [0:0]out;
  output [16:0]sl_iport0_o;

  wire \addr[11]_i_2_n_0 ;
  wire \addr[11]_i_3_n_0 ;
  wire \addr[11]_i_4_n_0 ;
  wire \addr[11]_i_5_n_0 ;
  wire \addr[15]_i_2_n_0 ;
  wire \addr[15]_i_3_n_0 ;
  wire \addr[15]_i_4_n_0 ;
  wire \addr[15]_i_5_n_0 ;
  wire \addr[16]_i_3_n_0 ;
  wire \addr[3]_i_2_n_0 ;
  wire \addr[3]_i_3_n_0 ;
  wire \addr[3]_i_4_n_0 ;
  wire \addr[3]_i_5_n_0 ;
  wire \addr[3]_i_6_n_0 ;
  wire \addr[7]_i_2_n_0 ;
  wire \addr[7]_i_3_n_0 ;
  wire \addr[7]_i_4_n_0 ;
  wire \addr[7]_i_5_n_0 ;
  wire addr_in_rdy_last;
  wire [0:0]addr_in_rdy_last_reg_0;
  wire addr_in_rdy_rise_edge;
  wire addr_in_rdy_rise_edge0;
  wire \addr_reg[0]_0 ;
  wire \addr_reg[11]_i_1_n_0 ;
  wire \addr_reg[11]_i_1_n_4 ;
  wire \addr_reg[11]_i_1_n_5 ;
  wire \addr_reg[11]_i_1_n_6 ;
  wire \addr_reg[11]_i_1_n_7 ;
  wire \addr_reg[15]_i_1_n_0 ;
  wire \addr_reg[15]_i_1_n_4 ;
  wire \addr_reg[15]_i_1_n_5 ;
  wire \addr_reg[15]_i_1_n_6 ;
  wire \addr_reg[15]_i_1_n_7 ;
  wire [16:0]\addr_reg[16]_0 ;
  wire \addr_reg[16]_i_2_n_7 ;
  wire \addr_reg[3]_i_1_n_0 ;
  wire \addr_reg[3]_i_1_n_4 ;
  wire \addr_reg[3]_i_1_n_5 ;
  wire \addr_reg[3]_i_1_n_6 ;
  wire \addr_reg[3]_i_1_n_7 ;
  wire \addr_reg[7]_i_1_n_0 ;
  wire \addr_reg[7]_i_1_n_4 ;
  wire \addr_reg[7]_i_1_n_5 ;
  wire \addr_reg[7]_i_1_n_6 ;
  wire \addr_reg[7]_i_1_n_7 ;
  wire clk;
  wire [0:0]out;
  wire [16:0]sl_iport0_o;
  wire [2:0]\NLW_addr_reg[11]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_addr_reg[15]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_addr_reg[16]_i_2_CO_UNCONNECTED ;
  wire [3:1]\NLW_addr_reg[16]_i_2_O_UNCONNECTED ;
  wire [2:0]\NLW_addr_reg[3]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_addr_reg[7]_i_1_CO_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hB8)) 
    \addr[11]_i_2 
       (.I0(\addr_reg[16]_0 [11]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[11]),
        .O(\addr[11]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[11]_i_3 
       (.I0(\addr_reg[16]_0 [10]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[10]),
        .O(\addr[11]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[11]_i_4 
       (.I0(\addr_reg[16]_0 [9]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[9]),
        .O(\addr[11]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[11]_i_5 
       (.I0(\addr_reg[16]_0 [8]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[8]),
        .O(\addr[11]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[15]_i_2 
       (.I0(\addr_reg[16]_0 [15]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[15]),
        .O(\addr[15]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[15]_i_3 
       (.I0(\addr_reg[16]_0 [14]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[14]),
        .O(\addr[15]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[15]_i_4 
       (.I0(\addr_reg[16]_0 [13]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[13]),
        .O(\addr[15]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[15]_i_5 
       (.I0(\addr_reg[16]_0 [12]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[12]),
        .O(\addr[15]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[16]_i_3 
       (.I0(\addr_reg[16]_0 [16]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[16]),
        .O(\addr[16]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[3]_i_2 
       (.I0(\addr_reg[16]_0 [0]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[0]),
        .O(\addr[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[3]_i_3 
       (.I0(\addr_reg[16]_0 [3]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[3]),
        .O(\addr[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[3]_i_4 
       (.I0(\addr_reg[16]_0 [2]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[2]),
        .O(\addr[3]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[3]_i_5 
       (.I0(\addr_reg[16]_0 [1]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[1]),
        .O(\addr[3]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \addr[3]_i_6 
       (.I0(sl_iport0_o[0]),
        .I1(\addr_reg[16]_0 [0]),
        .I2(addr_in_rdy_rise_edge),
        .O(\addr[3]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[7]_i_2 
       (.I0(\addr_reg[16]_0 [7]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[7]),
        .O(\addr[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[7]_i_3 
       (.I0(\addr_reg[16]_0 [6]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[6]),
        .O(\addr[7]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[7]_i_4 
       (.I0(\addr_reg[16]_0 [5]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[5]),
        .O(\addr[7]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \addr[7]_i_5 
       (.I0(\addr_reg[16]_0 [4]),
        .I1(addr_in_rdy_rise_edge),
        .I2(sl_iport0_o[4]),
        .O(\addr[7]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    addr_in_rdy_last_reg
       (.C(clk),
        .CE(1'b1),
        .D(addr_in_rdy_last_reg_0),
        .Q(addr_in_rdy_last),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    addr_in_rdy_rise_edge_reg
       (.C(clk),
        .CE(1'b1),
        .D(addr_in_rdy_rise_edge0),
        .Q(addr_in_rdy_rise_edge),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[0] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[3]_i_1_n_7 ),
        .Q(sl_iport0_o[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[10] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[11]_i_1_n_5 ),
        .Q(sl_iport0_o[10]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[11] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[11]_i_1_n_4 ),
        .Q(sl_iport0_o[11]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \addr_reg[11]_i_1 
       (.CI(\addr_reg[7]_i_1_n_0 ),
        .CO({\addr_reg[11]_i_1_n_0 ,\NLW_addr_reg[11]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\addr_reg[11]_i_1_n_4 ,\addr_reg[11]_i_1_n_5 ,\addr_reg[11]_i_1_n_6 ,\addr_reg[11]_i_1_n_7 }),
        .S({\addr[11]_i_2_n_0 ,\addr[11]_i_3_n_0 ,\addr[11]_i_4_n_0 ,\addr[11]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[12] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[15]_i_1_n_7 ),
        .Q(sl_iport0_o[12]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[13] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[15]_i_1_n_6 ),
        .Q(sl_iport0_o[13]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[14] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[15]_i_1_n_5 ),
        .Q(sl_iport0_o[14]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[15] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[15]_i_1_n_4 ),
        .Q(sl_iport0_o[15]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \addr_reg[15]_i_1 
       (.CI(\addr_reg[11]_i_1_n_0 ),
        .CO({\addr_reg[15]_i_1_n_0 ,\NLW_addr_reg[15]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\addr_reg[15]_i_1_n_4 ,\addr_reg[15]_i_1_n_5 ,\addr_reg[15]_i_1_n_6 ,\addr_reg[15]_i_1_n_7 }),
        .S({\addr[15]_i_2_n_0 ,\addr[15]_i_3_n_0 ,\addr[15]_i_4_n_0 ,\addr[15]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[16] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[16]_i_2_n_7 ),
        .Q(sl_iport0_o[16]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \addr_reg[16]_i_2 
       (.CI(\addr_reg[15]_i_1_n_0 ),
        .CO(\NLW_addr_reg[16]_i_2_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_addr_reg[16]_i_2_O_UNCONNECTED [3:1],\addr_reg[16]_i_2_n_7 }),
        .S({1'b0,1'b0,1'b0,\addr[16]_i_3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[1] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[3]_i_1_n_6 ),
        .Q(sl_iport0_o[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[2] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[3]_i_1_n_5 ),
        .Q(sl_iport0_o[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[3] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[3]_i_1_n_4 ),
        .Q(sl_iport0_o[3]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \addr_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\addr_reg[3]_i_1_n_0 ,\NLW_addr_reg[3]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,\addr[3]_i_2_n_0 }),
        .O({\addr_reg[3]_i_1_n_4 ,\addr_reg[3]_i_1_n_5 ,\addr_reg[3]_i_1_n_6 ,\addr_reg[3]_i_1_n_7 }),
        .S({\addr[3]_i_3_n_0 ,\addr[3]_i_4_n_0 ,\addr[3]_i_5_n_0 ,\addr[3]_i_6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[4] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[7]_i_1_n_7 ),
        .Q(sl_iport0_o[4]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[5] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[7]_i_1_n_6 ),
        .Q(sl_iport0_o[5]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[6] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[7]_i_1_n_5 ),
        .Q(sl_iport0_o[6]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[7] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[7]_i_1_n_4 ),
        .Q(sl_iport0_o[7]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \addr_reg[7]_i_1 
       (.CI(\addr_reg[3]_i_1_n_0 ),
        .CO({\addr_reg[7]_i_1_n_0 ,\NLW_addr_reg[7]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\addr_reg[7]_i_1_n_4 ,\addr_reg[7]_i_1_n_5 ,\addr_reg[7]_i_1_n_6 ,\addr_reg[7]_i_1_n_7 }),
        .S({\addr[7]_i_2_n_0 ,\addr[7]_i_3_n_0 ,\addr[7]_i_4_n_0 ,\addr[7]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[8] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[11]_i_1_n_7 ),
        .Q(sl_iport0_o[8]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[9] 
       (.C(clk),
        .CE(\addr_reg[0]_0 ),
        .D(\addr_reg[11]_i_1_n_6 ),
        .Q(sl_iport0_o[9]),
        .R(out));
endmodule

(* ERROR = "7" *) (* FORWARD = "4" *) (* IDLE = "0" *) 
(* PORTS = "1" *) (* PORT_SELECT = "3" *) (* SWITCH_SELECT = "2" *) 
(* XILINX_JEP106_ID = "12'b000001001001" *) (* dont_touch = "true" *) 
module xsdbm_v3_0_0_bscan_switch
   (m_bscan_bscanid_en,
    s_bscan_capture,
    s_bscan_drck,
    s_bscan_reset,
    s_bscan_runtest,
    s_bscan_sel,
    s_bscan_shift,
    s_bscan_tck,
    s_bscan_tdi,
    s_bscan_tdo,
    s_bscan_tms,
    s_bscan_update,
    s_bscanid_en,
    m_bscan_capture,
    m_bscan_drck,
    m_bscan_reset,
    m_bscan_runtest,
    m_bscan_sel,
    m_bscan_shift,
    m_bscan_tck,
    m_bscan_tdi,
    m_bscan_tdo,
    m_bscan_tms,
    m_bscan_update);
  output m_bscan_bscanid_en;
  input s_bscan_capture;
  input s_bscan_drck;
  input s_bscan_reset;
  input s_bscan_runtest;
  input s_bscan_sel;
  input s_bscan_shift;
  input s_bscan_tck;
  input s_bscan_tdi;
  output s_bscan_tdo;
  input s_bscan_tms;
  input s_bscan_update;
  input s_bscanid_en;
  output [0:0]m_bscan_capture;
  output [0:0]m_bscan_drck;
  output [0:0]m_bscan_reset;
  output [0:0]m_bscan_runtest;
  output [0:0]m_bscan_sel;
  output [0:0]m_bscan_shift;
  output [0:0]m_bscan_tck;
  output [0:0]m_bscan_tdi;
  input [0:0]m_bscan_tdo;
  output [0:0]m_bscan_tms;
  output [0:0]m_bscan_update;

  wire [0:0]bscanid;
  wire \bscanid[0]_i_1_n_0 ;
  wire \bscanid[10]_i_1_n_0 ;
  wire \bscanid[11]_i_1_n_0 ;
  wire \bscanid[12]_i_1_n_0 ;
  wire \bscanid[13]_i_1_n_0 ;
  wire \bscanid[14]_i_1_n_0 ;
  wire \bscanid[15]_i_1_n_0 ;
  wire \bscanid[16]_i_1_n_0 ;
  wire \bscanid[17]_i_1_n_0 ;
  wire \bscanid[18]_i_1_n_0 ;
  wire \bscanid[19]_i_1_n_0 ;
  wire \bscanid[1]_i_1_n_0 ;
  wire \bscanid[20]_i_1_n_0 ;
  wire \bscanid[21]_i_1_n_0 ;
  wire \bscanid[22]_i_1_n_0 ;
  wire \bscanid[23]_i_1_n_0 ;
  wire \bscanid[24]_i_1_n_0 ;
  wire \bscanid[25]_i_1_n_0 ;
  wire \bscanid[26]_i_1_n_0 ;
  wire \bscanid[27]_i_1_n_0 ;
  wire \bscanid[28]_i_1_n_0 ;
  wire \bscanid[29]_i_1_n_0 ;
  wire \bscanid[2]_i_1_n_0 ;
  wire \bscanid[30]_i_1_n_0 ;
  wire \bscanid[31]_i_1_n_0 ;
  wire \bscanid[31]_i_2_n_0 ;
  wire \bscanid[3]_i_1_n_0 ;
  wire \bscanid[4]_i_1_n_0 ;
  wire \bscanid[5]_i_1_n_0 ;
  wire \bscanid[6]_i_1_n_0 ;
  wire \bscanid[7]_i_1_n_0 ;
  wire \bscanid[8]_i_1_n_0 ;
  wire \bscanid[9]_i_1_n_0 ;
  wire [31:1]bscanid__0;
  (* DONT_TOUCH *) wire count_flag;
  wire count_flag_i_1_n_0;
  wire count_flag_i_2_n_0;
  (* DONT_TOUCH *) wire [7:0]counter;
  wire \counter[0]_i_2_n_0 ;
  wire \counter[5]_i_2_n_0 ;
  wire \counter[7]_i_1_n_0 ;
  wire [5:0]counter__0;
  (* DONT_TOUCH *) wire [31:0]curid;
  (* DONT_TOUCH *) wire [1:0]id_state;
  wire \id_state[1]_i_1_n_0 ;
  wire m_bscan_bscanid_en;
  wire [0:0]m_bscan_capture;
  wire [0:0]m_bscan_drck;
  wire \m_bscan_drck[0]_INST_0_i_1_n_0 ;
  wire [0:0]m_bscan_runtest;
  wire [0:0]m_bscan_sel;
  wire [0:0]m_bscan_shift;
  wire [0:0]m_bscan_tdo;
  wire [1:1]p_0_in__0;
  wire [28:28]p_1_in__0;
  (* DONT_TOUCH *) wire [5:0]portno;
  (* DONT_TOUCH *) wire [5:0]portno_temp;
  wire \portno_temp[0]_i_1_n_0 ;
  wire \portno_temp[1]_i_1_n_0 ;
  wire \portno_temp[2]_i_1_n_0 ;
  wire \portno_temp[3]_i_1_n_0 ;
  wire \portno_temp[4]_i_1_n_0 ;
  wire \portno_temp[5]_i_1_n_0 ;
  wire \portno_temp[5]_i_2_n_0 ;
  wire s_bscan_capture;
  wire s_bscan_drck;
  wire s_bscan_reset;
  wire s_bscan_runtest;
  wire s_bscan_sel;
  wire s_bscan_shift;
  wire s_bscan_tck;
  wire s_bscan_tdi;
  wire s_bscan_tdo;
  wire s_bscan_tdo_INST_0_i_1_n_0;
  wire s_bscan_tdo_INST_0_i_2_n_0;
  wire s_bscan_tms;
  wire s_bscan_update;
  wire s_bscanid_en;
  (* DONT_TOUCH *) wire [31:0]shiftreg;
  wire \shiftreg[0]_i_1_n_0 ;
  wire \shiftreg[10]_i_1_n_0 ;
  wire \shiftreg[11]_i_1_n_0 ;
  wire \shiftreg[12]_i_1_n_0 ;
  wire \shiftreg[13]_i_1_n_0 ;
  wire \shiftreg[14]_i_1_n_0 ;
  wire \shiftreg[15]_i_1_n_0 ;
  wire \shiftreg[16]_i_1_n_0 ;
  wire \shiftreg[17]_i_1_n_0 ;
  wire \shiftreg[18]_i_1_n_0 ;
  wire \shiftreg[19]_i_1_n_0 ;
  wire \shiftreg[1]_i_1_n_0 ;
  wire \shiftreg[20]_i_1_n_0 ;
  wire \shiftreg[21]_i_1_n_0 ;
  wire \shiftreg[22]_i_1_n_0 ;
  wire \shiftreg[23]_i_1_n_0 ;
  wire \shiftreg[24]_i_1_n_0 ;
  wire \shiftreg[25]_i_1_n_0 ;
  wire \shiftreg[26]_i_1_n_0 ;
  wire \shiftreg[27]_i_1_n_0 ;
  wire \shiftreg[28]_i_1_n_0 ;
  wire \shiftreg[29]_i_1_n_0 ;
  wire \shiftreg[2]_i_1_n_0 ;
  wire \shiftreg[30]_i_1_n_0 ;
  wire \shiftreg[31]_i_1_n_0 ;
  wire \shiftreg[31]_i_2_n_0 ;
  wire \shiftreg[3]_i_1_n_0 ;
  wire \shiftreg[4]_i_1_n_0 ;
  wire \shiftreg[5]_i_1_n_0 ;
  wire \shiftreg[6]_i_1_n_0 ;
  wire \shiftreg[7]_i_1_n_0 ;
  wire \shiftreg[8]_i_1_n_0 ;
  wire \shiftreg[9]_i_1_n_0 ;
  (* DONT_TOUCH *) wire [2:0]state;
  (* DONT_TOUCH *) wire [2:0]state_temp;
  wire \state_temp[0]_i_10_n_0 ;
  wire \state_temp[0]_i_11_n_0 ;
  wire \state_temp[0]_i_12_n_0 ;
  wire \state_temp[0]_i_1_n_0 ;
  wire \state_temp[0]_i_2_n_0 ;
  wire \state_temp[0]_i_5_n_0 ;
  wire \state_temp[0]_i_6_n_0 ;
  wire \state_temp[0]_i_7_n_0 ;
  wire \state_temp[0]_i_8_n_0 ;
  wire \state_temp[0]_i_9_n_0 ;
  wire \state_temp[1]_i_1_n_0 ;
  wire \state_temp[1]_i_2_n_0 ;
  wire \state_temp[2]_i_1_n_0 ;
  wire \state_temp[2]_i_2_n_0 ;
  wire \state_temp[2]_i_3_n_0 ;
  wire \state_temp[2]_i_4_n_0 ;
  wire \state_temp_reg[0]_i_3_n_0 ;
  wire \state_temp_reg[0]_i_4_n_0 ;
  (* DONT_TOUCH *) wire [31:0]temp_curid;
  wire \temp_curid[28]_i_1_n_0 ;
  wire \temp_curid[31]_i_1_n_0 ;
  wire [2:0]\NLW_state_temp_reg[0]_i_3_CO_UNCONNECTED ;
  wire [3:0]\NLW_state_temp_reg[0]_i_3_O_UNCONNECTED ;
  wire [2:0]\NLW_state_temp_reg[0]_i_4_CO_UNCONNECTED ;
  wire [3:0]\NLW_state_temp_reg[0]_i_4_O_UNCONNECTED ;

  assign m_bscan_reset[0] = s_bscan_reset;
  assign m_bscan_tck[0] = s_bscan_tck;
  assign m_bscan_tdi[0] = s_bscan_tdi;
  assign m_bscan_tms[0] = s_bscan_tms;
  assign m_bscan_update[0] = s_bscan_update;
  LUT2 #(
    .INIT(4'hB)) 
    \bscanid[0]_i_1 
       (.I0(bscanid__0[1]),
        .I1(id_state[0]),
        .O(\bscanid[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[10]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[11]),
        .O(\bscanid[10]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[11]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[12]),
        .O(\bscanid[11]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[12]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[13]),
        .O(\bscanid[12]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[13]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[14]),
        .O(\bscanid[13]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[14]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[15]),
        .O(\bscanid[14]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[15]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[16]),
        .O(\bscanid[15]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[16]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[17]),
        .O(\bscanid[16]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[17]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[18]),
        .O(\bscanid[17]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[18]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[19]),
        .O(\bscanid[18]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[19]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[20]),
        .O(\bscanid[19]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[1]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[2]),
        .O(\bscanid[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \bscanid[20]_i_1 
       (.I0(bscanid__0[21]),
        .I1(id_state[0]),
        .O(\bscanid[20]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[21]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[22]),
        .O(\bscanid[21]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[22]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[23]),
        .O(\bscanid[22]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \bscanid[23]_i_1 
       (.I0(bscanid__0[24]),
        .I1(id_state[0]),
        .O(\bscanid[23]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[24]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[25]),
        .O(\bscanid[24]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[25]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[26]),
        .O(\bscanid[25]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \bscanid[26]_i_1 
       (.I0(bscanid__0[27]),
        .I1(id_state[0]),
        .O(\bscanid[26]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[27]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[28]),
        .O(\bscanid[27]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[28]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[29]),
        .O(\bscanid[28]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[29]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[30]),
        .O(\bscanid[29]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[2]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[3]),
        .O(\bscanid[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[30]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[31]),
        .O(\bscanid[30]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h45)) 
    \bscanid[31]_i_1 
       (.I0(id_state[1]),
        .I1(s_bscanid_en),
        .I2(id_state[0]),
        .O(\bscanid[31]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[31]_i_2 
       (.I0(id_state[0]),
        .I1(s_bscan_tdi),
        .O(\bscanid[31]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[3]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[4]),
        .O(\bscanid[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[4]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[5]),
        .O(\bscanid[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[5]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[6]),
        .O(\bscanid[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[6]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[7]),
        .O(\bscanid[6]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[7]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[8]),
        .O(\bscanid[7]_i_1_n_0 ));
  (* \PinAttr:I0:HOLD_DETOUR  = "155" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \bscanid[8]_i_1 
       (.I0(bscanid__0[9]),
        .I1(id_state[0]),
        .O(\bscanid[8]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \bscanid[9]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid__0[10]),
        .O(\bscanid[9]_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \bscanid_reg[0] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[0]_i_1_n_0 ),
        .Q(bscanid),
        .S(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[10] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[10]_i_1_n_0 ),
        .Q(bscanid__0[10]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[11] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[11]_i_1_n_0 ),
        .Q(bscanid__0[11]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[12] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[12]_i_1_n_0 ),
        .Q(bscanid__0[12]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[13] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[13]_i_1_n_0 ),
        .Q(bscanid__0[13]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[14] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[14]_i_1_n_0 ),
        .Q(bscanid__0[14]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[15] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[15]_i_1_n_0 ),
        .Q(bscanid__0[15]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[16] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[16]_i_1_n_0 ),
        .Q(bscanid__0[16]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[17] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[17]_i_1_n_0 ),
        .Q(bscanid__0[17]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[18] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[18]_i_1_n_0 ),
        .Q(bscanid__0[18]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[19] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[19]_i_1_n_0 ),
        .Q(bscanid__0[19]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[1] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[1]_i_1_n_0 ),
        .Q(bscanid__0[1]),
        .R(s_bscan_reset));
  FDSE #(
    .INIT(1'b1)) 
    \bscanid_reg[20] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[20]_i_1_n_0 ),
        .Q(bscanid__0[20]),
        .S(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[21] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[21]_i_1_n_0 ),
        .Q(bscanid__0[21]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[22] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[22]_i_1_n_0 ),
        .Q(bscanid__0[22]),
        .R(s_bscan_reset));
  FDSE #(
    .INIT(1'b1)) 
    \bscanid_reg[23] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[23]_i_1_n_0 ),
        .Q(bscanid__0[23]),
        .S(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[24] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[24]_i_1_n_0 ),
        .Q(bscanid__0[24]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[25] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[25]_i_1_n_0 ),
        .Q(bscanid__0[25]),
        .R(s_bscan_reset));
  FDSE #(
    .INIT(1'b1)) 
    \bscanid_reg[26] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[26]_i_1_n_0 ),
        .Q(bscanid__0[26]),
        .S(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[27] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[27]_i_1_n_0 ),
        .Q(bscanid__0[27]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[28] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[28]_i_1_n_0 ),
        .Q(bscanid__0[28]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[29] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[29]_i_1_n_0 ),
        .Q(bscanid__0[29]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[2] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[2]_i_1_n_0 ),
        .Q(bscanid__0[2]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[30] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[30]_i_1_n_0 ),
        .Q(bscanid__0[30]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[31] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[31]_i_2_n_0 ),
        .Q(bscanid__0[31]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[3] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[3]_i_1_n_0 ),
        .Q(bscanid__0[3]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[4] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[4]_i_1_n_0 ),
        .Q(bscanid__0[4]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[5] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[5]_i_1_n_0 ),
        .Q(bscanid__0[5]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[6] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[6]_i_1_n_0 ),
        .Q(bscanid__0[6]),
        .R(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[7] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[7]_i_1_n_0 ),
        .Q(bscanid__0[7]),
        .R(s_bscan_reset));
  FDSE #(
    .INIT(1'b1)) 
    \bscanid_reg[8] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[8]_i_1_n_0 ),
        .Q(bscanid__0[8]),
        .S(s_bscan_reset));
  FDRE #(
    .INIT(1'b0)) 
    \bscanid_reg[9] 
       (.C(s_bscan_tck),
        .CE(\bscanid[31]_i_1_n_0 ),
        .D(\bscanid[9]_i_1_n_0 ),
        .Q(bscanid__0[9]),
        .R(s_bscan_reset));
  LUT6 #(
    .INIT(64'h00000000FFFF4000)) 
    count_flag_i_1
       (.I0(count_flag_i_2_n_0),
        .I1(counter[5]),
        .I2(counter[0]),
        .I3(\counter[0]_i_2_n_0 ),
        .I4(count_flag),
        .I5(s_bscan_tdo_INST_0_i_1_n_0),
        .O(count_flag_i_1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    count_flag_i_2
       (.I0(counter[7]),
        .I1(counter[6]),
        .O(count_flag_i_2_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    count_flag_reg
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(count_flag_i_1_n_0),
        .Q(count_flag),
        .R(s_bscan_reset));
  LUT6 #(
    .INIT(64'hFFFFFFF40000000B)) 
    \counter[0]_i_1 
       (.I0(\counter[0]_i_2_n_0 ),
        .I1(counter[5]),
        .I2(counter[7]),
        .I3(counter[6]),
        .I4(s_bscan_tdo_INST_0_i_1_n_0),
        .I5(counter[0]),
        .O(counter__0[0]));
  LUT4 #(
    .INIT(16'h0001)) 
    \counter[0]_i_2 
       (.I0(counter[3]),
        .I1(counter[4]),
        .I2(counter[1]),
        .I3(counter[2]),
        .O(\counter[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \counter[1]_i_1 
       (.I0(counter[1]),
        .I1(\counter[5]_i_2_n_0 ),
        .O(counter__0[1]));
  LUT3 #(
    .INIT(8'h6A)) 
    \counter[2]_i_1 
       (.I0(counter[2]),
        .I1(\counter[5]_i_2_n_0 ),
        .I2(counter[1]),
        .O(counter__0[2]));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \counter[3]_i_1 
       (.I0(counter[3]),
        .I1(counter[1]),
        .I2(\counter[5]_i_2_n_0 ),
        .I3(counter[2]),
        .O(counter__0[3]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \counter[4]_i_1 
       (.I0(counter[4]),
        .I1(counter[2]),
        .I2(\counter[5]_i_2_n_0 ),
        .I3(counter[1]),
        .I4(counter[3]),
        .O(counter__0[4]));
  LUT6 #(
    .INIT(64'hEAAAAAAAAAAAAAAA)) 
    \counter[5]_i_1 
       (.I0(counter[5]),
        .I1(counter[3]),
        .I2(counter[1]),
        .I3(\counter[5]_i_2_n_0 ),
        .I4(counter[2]),
        .I5(counter[4]),
        .O(counter__0[5]));
  LUT6 #(
    .INIT(64'h0002000200000002)) 
    \counter[5]_i_2 
       (.I0(counter[0]),
        .I1(s_bscan_tdo_INST_0_i_1_n_0),
        .I2(counter[6]),
        .I3(counter[7]),
        .I4(counter[5]),
        .I5(\counter[0]_i_2_n_0 ),
        .O(\counter[5]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFBFF)) 
    \counter[7]_i_1 
       (.I0(s_bscan_reset),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter__0[0]),
        .Q(counter[0]),
        .R(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter__0[1]),
        .Q(counter[1]),
        .R(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter__0[2]),
        .Q(counter[2]),
        .R(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter__0[3]),
        .Q(counter[3]),
        .R(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter__0[4]),
        .Q(counter[4]),
        .R(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[5] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter__0[5]),
        .Q(counter[5]),
        .R(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[6] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter[6]),
        .Q(counter[6]),
        .R(\counter[7]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[7] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(counter[7]),
        .Q(counter[7]),
        .R(\counter[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_1
       (.I0(temp_curid[31]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[31]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_10
       (.I0(temp_curid[22]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[22]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_11
       (.I0(temp_curid[21]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[21]));
  LUT4 #(
    .INIT(16'hFBFF)) 
    curid_inferred_i_12
       (.I0(temp_curid[20]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[20]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_13
       (.I0(temp_curid[19]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[19]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_14
       (.I0(temp_curid[18]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[18]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_15
       (.I0(temp_curid[17]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[17]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_16
       (.I0(temp_curid[16]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[16]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_17
       (.I0(temp_curid[15]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[15]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_18
       (.I0(temp_curid[14]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[14]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_19
       (.I0(temp_curid[13]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[13]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_2
       (.I0(temp_curid[30]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[30]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_20
       (.I0(temp_curid[12]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[12]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_21
       (.I0(temp_curid[11]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[11]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_22
       (.I0(temp_curid[10]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[10]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_23
       (.I0(temp_curid[9]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[9]));
  LUT4 #(
    .INIT(16'hFBFF)) 
    curid_inferred_i_24
       (.I0(temp_curid[8]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[8]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_25
       (.I0(temp_curid[7]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[7]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_26
       (.I0(temp_curid[6]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[6]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_27
       (.I0(temp_curid[5]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[5]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_28
       (.I0(temp_curid[4]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[4]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_29
       (.I0(temp_curid[3]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[3]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_3
       (.I0(temp_curid[29]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[29]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_30
       (.I0(temp_curid[2]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[2]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_31
       (.I0(temp_curid[1]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[1]));
  LUT4 #(
    .INIT(16'hFBFF)) 
    curid_inferred_i_32
       (.I0(temp_curid[0]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[0]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_4
       (.I0(temp_curid[28]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[28]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_5
       (.I0(temp_curid[27]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[27]));
  LUT4 #(
    .INIT(16'hFBFF)) 
    curid_inferred_i_6
       (.I0(temp_curid[26]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[26]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_7
       (.I0(temp_curid[25]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[25]));
  LUT4 #(
    .INIT(16'h0800)) 
    curid_inferred_i_8
       (.I0(temp_curid[24]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[24]));
  LUT4 #(
    .INIT(16'hFBFF)) 
    curid_inferred_i_9
       (.I0(temp_curid[23]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .O(curid[23]));
  LUT1 #(
    .INIT(2'h1)) 
    \id_state[1]_i_1 
       (.I0(id_state[1]),
        .O(\id_state[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h84)) 
    \id_state[1]_i_2 
       (.I0(id_state[0]),
        .I1(id_state[1]),
        .I2(s_bscanid_en),
        .O(p_0_in__0));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "iSTATE:00,iSTATE0:01" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \id_state_reg[0] 
       (.C(s_bscan_tck),
        .CE(\id_state[1]_i_1_n_0 ),
        .D(s_bscanid_en),
        .Q(id_state[0]),
        .R(s_bscan_reset));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "iSTATE:00,iSTATE0:01" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \id_state_reg[1] 
       (.C(s_bscan_tck),
        .CE(\id_state[1]_i_1_n_0 ),
        .D(p_0_in__0),
        .Q(id_state[1]),
        .R(s_bscan_reset));
  LUT5 #(
    .INIT(32'h00E00000)) 
    m_bscan_bscanid_en_INST_0
       (.I0(s_bscan_shift),
        .I1(s_bscan_capture),
        .I2(state[0]),
        .I3(state[2]),
        .I4(state[1]),
        .O(m_bscan_bscanid_en));
  LUT5 #(
    .INIT(32'h00100000)) 
    \m_bscan_capture[0]_INST_0 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(\m_bscan_drck[0]_INST_0_i_1_n_0 ),
        .I4(s_bscan_capture),
        .O(m_bscan_capture));
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \m_bscan_drck[0]_INST_0 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(\m_bscan_drck[0]_INST_0_i_1_n_0 ),
        .I4(s_bscan_drck),
        .O(m_bscan_drck));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \m_bscan_drck[0]_INST_0_i_1 
       (.I0(portno[3]),
        .I1(portno[2]),
        .I2(portno[0]),
        .I3(portno[1]),
        .I4(portno[4]),
        .I5(portno[5]),
        .O(\m_bscan_drck[0]_INST_0_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00100000)) 
    \m_bscan_runtest[0]_INST_0 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(\m_bscan_drck[0]_INST_0_i_1_n_0 ),
        .I4(s_bscan_runtest),
        .O(m_bscan_runtest));
  LUT4 #(
    .INIT(16'h0010)) 
    \m_bscan_sel[0]_INST_0 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(\m_bscan_drck[0]_INST_0_i_1_n_0 ),
        .O(m_bscan_sel));
  LUT5 #(
    .INIT(32'h00100000)) 
    \m_bscan_shift[0]_INST_0 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(\m_bscan_drck[0]_INST_0_i_1_n_0 ),
        .I4(s_bscan_shift),
        .O(m_bscan_shift));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_reg[0] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(portno_temp[0]),
        .Q(portno[0]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_reg[1] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(portno_temp[1]),
        .Q(portno[1]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_reg[2] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(portno_temp[2]),
        .Q(portno[2]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_reg[3] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(portno_temp[3]),
        .Q(portno[3]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_reg[4] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(portno_temp[4]),
        .Q(portno[4]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_reg[5] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(portno_temp[5]),
        .Q(portno[5]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \portno_temp[0]_i_1 
       (.I0(portno_temp[0]),
        .I1(\portno_temp[5]_i_2_n_0 ),
        .I2(shiftreg[0]),
        .O(\portno_temp[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \portno_temp[1]_i_1 
       (.I0(portno_temp[1]),
        .I1(\portno_temp[5]_i_2_n_0 ),
        .I2(shiftreg[1]),
        .O(\portno_temp[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \portno_temp[2]_i_1 
       (.I0(portno_temp[2]),
        .I1(\portno_temp[5]_i_2_n_0 ),
        .I2(shiftreg[2]),
        .O(\portno_temp[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \portno_temp[3]_i_1 
       (.I0(portno_temp[3]),
        .I1(\portno_temp[5]_i_2_n_0 ),
        .I2(shiftreg[3]),
        .O(\portno_temp[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \portno_temp[4]_i_1 
       (.I0(portno_temp[4]),
        .I1(\portno_temp[5]_i_2_n_0 ),
        .I2(shiftreg[4]),
        .O(\portno_temp[4]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \portno_temp[5]_i_1 
       (.I0(portno_temp[5]),
        .I1(\portno_temp[5]_i_2_n_0 ),
        .I2(shiftreg[5]),
        .O(\portno_temp[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    \portno_temp[5]_i_2 
       (.I0(state[0]),
        .I1(\state_temp_reg[0]_i_3_n_0 ),
        .I2(state[1]),
        .I3(state[2]),
        .I4(s_bscan_update),
        .O(\portno_temp[5]_i_2_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_temp_reg[0] 
       (.C(s_bscan_tck),
        .CE(s_bscan_sel),
        .D(\portno_temp[0]_i_1_n_0 ),
        .Q(portno_temp[0]),
        .R(s_bscan_reset));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_temp_reg[1] 
       (.C(s_bscan_tck),
        .CE(s_bscan_sel),
        .D(\portno_temp[1]_i_1_n_0 ),
        .Q(portno_temp[1]),
        .R(s_bscan_reset));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_temp_reg[2] 
       (.C(s_bscan_tck),
        .CE(s_bscan_sel),
        .D(\portno_temp[2]_i_1_n_0 ),
        .Q(portno_temp[2]),
        .R(s_bscan_reset));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_temp_reg[3] 
       (.C(s_bscan_tck),
        .CE(s_bscan_sel),
        .D(\portno_temp[3]_i_1_n_0 ),
        .Q(portno_temp[3]),
        .R(s_bscan_reset));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_temp_reg[4] 
       (.C(s_bscan_tck),
        .CE(s_bscan_sel),
        .D(\portno_temp[4]_i_1_n_0 ),
        .Q(portno_temp[4]),
        .R(s_bscan_reset));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \portno_temp_reg[5] 
       (.C(s_bscan_tck),
        .CE(s_bscan_sel),
        .D(\portno_temp[5]_i_1_n_0 ),
        .Q(portno_temp[5]),
        .R(s_bscan_reset));
  LUT6 #(
    .INIT(64'hBBBBB8BB8888B888)) 
    s_bscan_tdo_INST_0
       (.I0(bscanid),
        .I1(s_bscanid_en),
        .I2(shiftreg[0]),
        .I3(s_bscan_tdo_INST_0_i_1_n_0),
        .I4(s_bscan_tdo_INST_0_i_2_n_0),
        .I5(m_bscan_tdo),
        .O(s_bscan_tdo));
  LUT3 #(
    .INIT(8'hDF)) 
    s_bscan_tdo_INST_0_i_1
       (.I0(state[1]),
        .I1(state[2]),
        .I2(state[0]),
        .O(s_bscan_tdo_INST_0_i_1_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    s_bscan_tdo_INST_0_i_2
       (.I0(state[2]),
        .I1(state[0]),
        .I2(state[1]),
        .O(s_bscan_tdo_INST_0_i_2_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[0]_i_1 
       (.I0(curid[0]),
        .I1(s_bscan_capture),
        .I2(shiftreg[1]),
        .I3(s_bscan_shift),
        .I4(shiftreg[0]),
        .O(\shiftreg[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[10]_i_1 
       (.I0(curid[10]),
        .I1(s_bscan_capture),
        .I2(shiftreg[11]),
        .I3(s_bscan_shift),
        .I4(shiftreg[10]),
        .O(\shiftreg[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[11]_i_1 
       (.I0(curid[11]),
        .I1(s_bscan_capture),
        .I2(shiftreg[12]),
        .I3(s_bscan_shift),
        .I4(shiftreg[11]),
        .O(\shiftreg[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[12]_i_1 
       (.I0(curid[12]),
        .I1(s_bscan_capture),
        .I2(shiftreg[13]),
        .I3(s_bscan_shift),
        .I4(shiftreg[12]),
        .O(\shiftreg[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[13]_i_1 
       (.I0(curid[13]),
        .I1(s_bscan_capture),
        .I2(shiftreg[14]),
        .I3(s_bscan_shift),
        .I4(shiftreg[13]),
        .O(\shiftreg[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[14]_i_1 
       (.I0(curid[14]),
        .I1(s_bscan_capture),
        .I2(shiftreg[15]),
        .I3(s_bscan_shift),
        .I4(shiftreg[14]),
        .O(\shiftreg[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[15]_i_1 
       (.I0(curid[15]),
        .I1(s_bscan_capture),
        .I2(shiftreg[16]),
        .I3(s_bscan_shift),
        .I4(shiftreg[15]),
        .O(\shiftreg[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[16]_i_1 
       (.I0(curid[16]),
        .I1(s_bscan_capture),
        .I2(shiftreg[17]),
        .I3(s_bscan_shift),
        .I4(shiftreg[16]),
        .O(\shiftreg[16]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[17]_i_1 
       (.I0(curid[17]),
        .I1(s_bscan_capture),
        .I2(shiftreg[18]),
        .I3(s_bscan_shift),
        .I4(shiftreg[17]),
        .O(\shiftreg[17]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[18]_i_1 
       (.I0(curid[18]),
        .I1(s_bscan_capture),
        .I2(shiftreg[19]),
        .I3(s_bscan_shift),
        .I4(shiftreg[18]),
        .O(\shiftreg[18]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[19]_i_1 
       (.I0(curid[19]),
        .I1(s_bscan_capture),
        .I2(shiftreg[20]),
        .I3(s_bscan_shift),
        .I4(shiftreg[19]),
        .O(\shiftreg[19]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[1]_i_1 
       (.I0(curid[1]),
        .I1(s_bscan_capture),
        .I2(shiftreg[2]),
        .I3(s_bscan_shift),
        .I4(shiftreg[1]),
        .O(\shiftreg[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[20]_i_1 
       (.I0(curid[20]),
        .I1(s_bscan_capture),
        .I2(shiftreg[21]),
        .I3(s_bscan_shift),
        .I4(shiftreg[20]),
        .O(\shiftreg[20]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[21]_i_1 
       (.I0(curid[21]),
        .I1(s_bscan_capture),
        .I2(shiftreg[22]),
        .I3(s_bscan_shift),
        .I4(shiftreg[21]),
        .O(\shiftreg[21]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[22]_i_1 
       (.I0(curid[22]),
        .I1(s_bscan_capture),
        .I2(shiftreg[23]),
        .I3(s_bscan_shift),
        .I4(shiftreg[22]),
        .O(\shiftreg[22]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[23]_i_1 
       (.I0(curid[23]),
        .I1(s_bscan_capture),
        .I2(shiftreg[24]),
        .I3(s_bscan_shift),
        .I4(shiftreg[23]),
        .O(\shiftreg[23]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[24]_i_1 
       (.I0(curid[24]),
        .I1(s_bscan_capture),
        .I2(shiftreg[25]),
        .I3(s_bscan_shift),
        .I4(shiftreg[24]),
        .O(\shiftreg[24]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[25]_i_1 
       (.I0(curid[25]),
        .I1(s_bscan_capture),
        .I2(shiftreg[26]),
        .I3(s_bscan_shift),
        .I4(shiftreg[25]),
        .O(\shiftreg[25]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[26]_i_1 
       (.I0(curid[26]),
        .I1(s_bscan_capture),
        .I2(shiftreg[27]),
        .I3(s_bscan_shift),
        .I4(shiftreg[26]),
        .O(\shiftreg[26]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[27]_i_1 
       (.I0(curid[27]),
        .I1(s_bscan_capture),
        .I2(shiftreg[28]),
        .I3(s_bscan_shift),
        .I4(shiftreg[27]),
        .O(\shiftreg[27]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[28]_i_1 
       (.I0(curid[28]),
        .I1(s_bscan_capture),
        .I2(shiftreg[29]),
        .I3(s_bscan_shift),
        .I4(shiftreg[28]),
        .O(\shiftreg[28]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[29]_i_1 
       (.I0(curid[29]),
        .I1(s_bscan_capture),
        .I2(shiftreg[30]),
        .I3(s_bscan_shift),
        .I4(shiftreg[29]),
        .O(\shiftreg[29]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[2]_i_1 
       (.I0(curid[2]),
        .I1(s_bscan_capture),
        .I2(shiftreg[3]),
        .I3(s_bscan_shift),
        .I4(shiftreg[2]),
        .O(\shiftreg[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[30]_i_1 
       (.I0(curid[30]),
        .I1(s_bscan_capture),
        .I2(shiftreg[31]),
        .I3(s_bscan_shift),
        .I4(shiftreg[30]),
        .O(\shiftreg[30]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEAAAAAAA)) 
    \shiftreg[31]_i_1 
       (.I0(s_bscan_reset),
        .I1(s_bscan_capture),
        .I2(state[1]),
        .I3(state[0]),
        .I4(state[2]),
        .O(\shiftreg[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[31]_i_2 
       (.I0(curid[31]),
        .I1(s_bscan_capture),
        .I2(s_bscan_tdi),
        .I3(s_bscan_shift),
        .I4(shiftreg[31]),
        .O(\shiftreg[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[3]_i_1 
       (.I0(curid[3]),
        .I1(s_bscan_capture),
        .I2(shiftreg[4]),
        .I3(s_bscan_shift),
        .I4(shiftreg[3]),
        .O(\shiftreg[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[4]_i_1 
       (.I0(curid[4]),
        .I1(s_bscan_capture),
        .I2(shiftreg[5]),
        .I3(s_bscan_shift),
        .I4(shiftreg[4]),
        .O(\shiftreg[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[5]_i_1 
       (.I0(curid[5]),
        .I1(s_bscan_capture),
        .I2(shiftreg[6]),
        .I3(s_bscan_shift),
        .I4(shiftreg[5]),
        .O(\shiftreg[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[6]_i_1 
       (.I0(curid[6]),
        .I1(s_bscan_capture),
        .I2(shiftreg[7]),
        .I3(s_bscan_shift),
        .I4(shiftreg[6]),
        .O(\shiftreg[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[7]_i_1 
       (.I0(curid[7]),
        .I1(s_bscan_capture),
        .I2(shiftreg[8]),
        .I3(s_bscan_shift),
        .I4(shiftreg[7]),
        .O(\shiftreg[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[8]_i_1 
       (.I0(curid[8]),
        .I1(s_bscan_capture),
        .I2(shiftreg[9]),
        .I3(s_bscan_shift),
        .I4(shiftreg[8]),
        .O(\shiftreg[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \shiftreg[9]_i_1 
       (.I0(curid[9]),
        .I1(s_bscan_capture),
        .I2(shiftreg[10]),
        .I3(s_bscan_shift),
        .I4(shiftreg[9]),
        .O(\shiftreg[9]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[0] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[0]_i_1_n_0 ),
        .Q(shiftreg[0]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[10] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[10]_i_1_n_0 ),
        .Q(shiftreg[10]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[11] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[11]_i_1_n_0 ),
        .Q(shiftreg[11]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[12] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[12]_i_1_n_0 ),
        .Q(shiftreg[12]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[13] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[13]_i_1_n_0 ),
        .Q(shiftreg[13]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[14] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[14]_i_1_n_0 ),
        .Q(shiftreg[14]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[15] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[15]_i_1_n_0 ),
        .Q(shiftreg[15]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[16] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[16]_i_1_n_0 ),
        .Q(shiftreg[16]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[17] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[17]_i_1_n_0 ),
        .Q(shiftreg[17]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[18] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[18]_i_1_n_0 ),
        .Q(shiftreg[18]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[19] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[19]_i_1_n_0 ),
        .Q(shiftreg[19]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[1] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[1]_i_1_n_0 ),
        .Q(shiftreg[1]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[20] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[20]_i_1_n_0 ),
        .Q(shiftreg[20]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[21] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[21]_i_1_n_0 ),
        .Q(shiftreg[21]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[22] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[22]_i_1_n_0 ),
        .Q(shiftreg[22]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[23] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[23]_i_1_n_0 ),
        .Q(shiftreg[23]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[24] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[24]_i_1_n_0 ),
        .Q(shiftreg[24]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[25] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[25]_i_1_n_0 ),
        .Q(shiftreg[25]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[26] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[26]_i_1_n_0 ),
        .Q(shiftreg[26]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[27] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[27]_i_1_n_0 ),
        .Q(shiftreg[27]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[28] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[28]_i_1_n_0 ),
        .Q(shiftreg[28]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[29] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[29]_i_1_n_0 ),
        .Q(shiftreg[29]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[2] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[2]_i_1_n_0 ),
        .Q(shiftreg[2]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[30] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[30]_i_1_n_0 ),
        .Q(shiftreg[30]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[31] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[31]_i_2_n_0 ),
        .Q(shiftreg[31]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[3] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[3]_i_1_n_0 ),
        .Q(shiftreg[3]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[4] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[4]_i_1_n_0 ),
        .Q(shiftreg[4]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[5] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[5]_i_1_n_0 ),
        .Q(shiftreg[5]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[6] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[6]_i_1_n_0 ),
        .Q(shiftreg[6]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[7] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[7]_i_1_n_0 ),
        .Q(shiftreg[7]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[8] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[8]_i_1_n_0 ),
        .Q(shiftreg[8]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \shiftreg_reg[9] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\shiftreg[9]_i_1_n_0 ),
        .Q(shiftreg[9]),
        .R(\shiftreg[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(state_temp[0]),
        .Q(state[0]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(state_temp[1]),
        .Q(state[1]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(state_temp[2]),
        .Q(state[2]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AA2A002A)) 
    \state_temp[0]_i_1 
       (.I0(\state_temp[0]_i_2_n_0 ),
        .I1(state[0]),
        .I2(\state_temp_reg[0]_i_3_n_0 ),
        .I3(\state_temp[2]_i_3_n_0 ),
        .I4(state_temp[0]),
        .I5(\state_temp[2]_i_4_n_0 ),
        .O(\state_temp[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_10 
       (.I0(shiftreg[14]),
        .I1(curid[14]),
        .I2(shiftreg[15]),
        .I3(curid[15]),
        .I4(curid[16]),
        .I5(shiftreg[16]),
        .O(\state_temp[0]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_11 
       (.I0(shiftreg[13]),
        .I1(curid[13]),
        .I2(shiftreg[11]),
        .I3(curid[11]),
        .I4(curid[12]),
        .I5(shiftreg[12]),
        .O(\state_temp[0]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_12 
       (.I0(shiftreg[10]),
        .I1(curid[10]),
        .I2(shiftreg[8]),
        .I3(curid[8]),
        .I4(curid[9]),
        .I5(shiftreg[9]),
        .O(\state_temp[0]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF7FFFFFF)) 
    \state_temp[0]_i_2 
       (.I0(\state_temp_reg[0]_i_3_n_0 ),
        .I1(state[1]),
        .I2(state[2]),
        .I3(s_bscan_update),
        .I4(shiftreg[7]),
        .I5(\state_temp[2]_i_2_n_0 ),
        .O(\state_temp[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_5 
       (.I0(shiftreg[29]),
        .I1(curid[29]),
        .I2(shiftreg[30]),
        .I3(curid[30]),
        .I4(curid[31]),
        .I5(shiftreg[31]),
        .O(\state_temp[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_6 
       (.I0(shiftreg[28]),
        .I1(curid[28]),
        .I2(shiftreg[26]),
        .I3(curid[26]),
        .I4(curid[27]),
        .I5(shiftreg[27]),
        .O(\state_temp[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_7 
       (.I0(shiftreg[23]),
        .I1(curid[23]),
        .I2(shiftreg[24]),
        .I3(curid[24]),
        .I4(curid[25]),
        .I5(shiftreg[25]),
        .O(\state_temp[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_8 
       (.I0(shiftreg[20]),
        .I1(curid[20]),
        .I2(shiftreg[21]),
        .I3(curid[21]),
        .I4(curid[22]),
        .I5(shiftreg[22]),
        .O(\state_temp[0]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \state_temp[0]_i_9 
       (.I0(shiftreg[17]),
        .I1(curid[17]),
        .I2(shiftreg[18]),
        .I3(curid[18]),
        .I4(curid[19]),
        .I5(shiftreg[19]),
        .O(\state_temp[0]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h0000000444444444)) 
    \state_temp[1]_i_1 
       (.I0(s_bscan_reset),
        .I1(s_bscan_sel),
        .I2(state[1]),
        .I3(state[2]),
        .I4(state[0]),
        .I5(\state_temp[1]_i_2_n_0 ),
        .O(\state_temp[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3333AFAA33330000)) 
    \state_temp[1]_i_2 
       (.I0(state[0]),
        .I1(state_temp[1]),
        .I2(\state_temp[2]_i_2_n_0 ),
        .I3(shiftreg[7]),
        .I4(\state_temp[2]_i_3_n_0 ),
        .I5(\state_temp_reg[0]_i_3_n_0 ),
        .O(\state_temp[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FEFE00FE)) 
    \state_temp[2]_i_1 
       (.I0(shiftreg[7]),
        .I1(\state_temp[2]_i_2_n_0 ),
        .I2(\portno_temp[5]_i_2_n_0 ),
        .I3(\state_temp[2]_i_3_n_0 ),
        .I4(state_temp[2]),
        .I5(\state_temp[2]_i_4_n_0 ),
        .O(\state_temp[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \state_temp[2]_i_2 
       (.I0(shiftreg[5]),
        .I1(shiftreg[4]),
        .I2(shiftreg[0]),
        .I3(shiftreg[2]),
        .I4(shiftreg[1]),
        .I5(shiftreg[3]),
        .O(\state_temp[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hDF)) 
    \state_temp[2]_i_3 
       (.I0(state[1]),
        .I1(state[2]),
        .I2(s_bscan_update),
        .O(\state_temp[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFF01FFFF)) 
    \state_temp[2]_i_4 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(s_bscan_reset),
        .I4(s_bscan_sel),
        .O(\state_temp[2]_i_4_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_temp_reg[0] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\state_temp[0]_i_1_n_0 ),
        .Q(state_temp[0]),
        .R(1'b0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \state_temp_reg[0]_i_3 
       (.CI(\state_temp_reg[0]_i_4_n_0 ),
        .CO({\state_temp_reg[0]_i_3_n_0 ,\NLW_state_temp_reg[0]_i_3_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_state_temp_reg[0]_i_3_O_UNCONNECTED [3:0]),
        .S({\state_temp[0]_i_5_n_0 ,\state_temp[0]_i_6_n_0 ,\state_temp[0]_i_7_n_0 ,\state_temp[0]_i_8_n_0 }));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \state_temp_reg[0]_i_4 
       (.CI(1'b0),
        .CO({\state_temp_reg[0]_i_4_n_0 ,\NLW_state_temp_reg[0]_i_4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_state_temp_reg[0]_i_4_O_UNCONNECTED [3:0]),
        .S({\state_temp[0]_i_9_n_0 ,\state_temp[0]_i_10_n_0 ,\state_temp[0]_i_11_n_0 ,\state_temp[0]_i_12_n_0 }));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_temp_reg[1] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\state_temp[1]_i_1_n_0 ),
        .Q(state_temp[1]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_temp_reg[2] 
       (.C(s_bscan_tck),
        .CE(1'b1),
        .D(\state_temp[2]_i_1_n_0 ),
        .Q(state_temp[2]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hDFFFDFDF)) 
    \temp_curid[28]_i_1 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(count_flag),
        .I4(s_bscan_shift),
        .O(\temp_curid[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    \temp_curid[28]_i_2 
       (.I0(count_flag),
        .I1(s_bscan_shift),
        .I2(state[1]),
        .I3(state[2]),
        .I4(state[0]),
        .I5(temp_curid[29]),
        .O(p_1_in__0));
  LUT3 #(
    .INIT(8'hDF)) 
    \temp_curid[31]_i_1 
       (.I0(state[1]),
        .I1(state[2]),
        .I2(state[0]),
        .O(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[0] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[1]),
        .Q(temp_curid[0]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[10] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[11]),
        .Q(temp_curid[10]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[11] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[12]),
        .Q(temp_curid[11]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[12] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[13]),
        .Q(temp_curid[12]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[13] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[14]),
        .Q(temp_curid[13]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[14] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[15]),
        .Q(temp_curid[14]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[15] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[16]),
        .Q(temp_curid[15]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[16] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[17]),
        .Q(temp_curid[16]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[17] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[18]),
        .Q(temp_curid[17]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[18] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[19]),
        .Q(temp_curid[18]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[19] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[20]),
        .Q(temp_curid[19]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[1] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[2]),
        .Q(temp_curid[1]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[20] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[21]),
        .Q(temp_curid[20]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[21] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[22]),
        .Q(temp_curid[21]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[22] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[23]),
        .Q(temp_curid[22]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[23] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[24]),
        .Q(temp_curid[23]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[24] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[25]),
        .Q(temp_curid[24]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[25] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[26]),
        .Q(temp_curid[25]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[26] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[27]),
        .Q(temp_curid[26]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[27] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[28]),
        .Q(temp_curid[27]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[28] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(p_1_in__0),
        .Q(temp_curid[28]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[29] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[30]),
        .Q(temp_curid[29]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[2] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[3]),
        .Q(temp_curid[2]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[30] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[31]),
        .Q(temp_curid[30]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[31] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(m_bscan_tdo),
        .Q(temp_curid[31]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[3] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[4]),
        .Q(temp_curid[3]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[4] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[5]),
        .Q(temp_curid[4]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[5] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[6]),
        .Q(temp_curid[5]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[6] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[7]),
        .Q(temp_curid[6]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[7] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[8]),
        .Q(temp_curid[7]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[8] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[9]),
        .Q(temp_curid[8]),
        .R(\temp_curid[31]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \temp_curid_reg[9] 
       (.C(s_bscan_tck),
        .CE(\temp_curid[28]_i_1_n_0 ),
        .D(temp_curid[10]),
        .Q(temp_curid[9]),
        .R(\temp_curid[31]_i_1_n_0 ));
endmodule

module xsdbm_v3_0_0_burst_wdlen_ctl
   (burst_wd_in_rdy_last,
    burst_wd_in_rdy_rise_edge,
    burst_wd_in_rdy_rise_edge0,
    \burst_wd_reg[16]_0 ,
    clk,
    dec_wdc,
    dec_wdc_r_reg,
    wdc_eq_zero,
    wdc_eq_zero_reg_0,
    burst_wd_in_rdy_last_reg_0,
    out,
    wdc_eq_zero_reg_1);
  output burst_wd_in_rdy_last;
  output burst_wd_in_rdy_rise_edge;
  input burst_wd_in_rdy_rise_edge0;
  input \burst_wd_reg[16]_0 ;
  input clk;
  input dec_wdc;
  output dec_wdc_r_reg;
  output wdc_eq_zero;
  input wdc_eq_zero_reg_0;
  input [0:0]burst_wd_in_rdy_last_reg_0;
  input [0:0]out;
  input [17:0]wdc_eq_zero_reg_1;

  wire \burst_wd[0]_i_10_n_0 ;
  wire \burst_wd[0]_i_3_n_0 ;
  wire \burst_wd[0]_i_4_n_0 ;
  wire \burst_wd[0]_i_5_n_0 ;
  wire \burst_wd[0]_i_6_n_0 ;
  wire \burst_wd[0]_i_7_n_0 ;
  wire \burst_wd[0]_i_8_n_0 ;
  wire \burst_wd[0]_i_9_n_0 ;
  wire \burst_wd[12]_i_2_n_0 ;
  wire \burst_wd[12]_i_3_n_0 ;
  wire \burst_wd[12]_i_4_n_0 ;
  wire \burst_wd[12]_i_5_n_0 ;
  wire \burst_wd[12]_i_6_n_0 ;
  wire \burst_wd[12]_i_7_n_0 ;
  wire \burst_wd[12]_i_8_n_0 ;
  wire \burst_wd[12]_i_9_n_0 ;
  wire \burst_wd[16]_i_2_n_0 ;
  wire \burst_wd[4]_i_2_n_0 ;
  wire \burst_wd[4]_i_3_n_0 ;
  wire \burst_wd[4]_i_4_n_0 ;
  wire \burst_wd[4]_i_5_n_0 ;
  wire \burst_wd[4]_i_6_n_0 ;
  wire \burst_wd[4]_i_7_n_0 ;
  wire \burst_wd[4]_i_8_n_0 ;
  wire \burst_wd[4]_i_9_n_0 ;
  wire \burst_wd[8]_i_2_n_0 ;
  wire \burst_wd[8]_i_3_n_0 ;
  wire \burst_wd[8]_i_4_n_0 ;
  wire \burst_wd[8]_i_5_n_0 ;
  wire \burst_wd[8]_i_6_n_0 ;
  wire \burst_wd[8]_i_7_n_0 ;
  wire \burst_wd[8]_i_8_n_0 ;
  wire \burst_wd[8]_i_9_n_0 ;
  wire burst_wd_in_rdy_last;
  wire [0:0]burst_wd_in_rdy_last_reg_0;
  wire burst_wd_in_rdy_rise_edge;
  wire burst_wd_in_rdy_rise_edge0;
  wire [16:0]burst_wd_reg;
  wire \burst_wd_reg[0]_i_2_n_0 ;
  wire \burst_wd_reg[0]_i_2_n_4 ;
  wire \burst_wd_reg[0]_i_2_n_5 ;
  wire \burst_wd_reg[0]_i_2_n_6 ;
  wire \burst_wd_reg[0]_i_2_n_7 ;
  wire \burst_wd_reg[12]_i_1_n_0 ;
  wire \burst_wd_reg[12]_i_1_n_4 ;
  wire \burst_wd_reg[12]_i_1_n_5 ;
  wire \burst_wd_reg[12]_i_1_n_6 ;
  wire \burst_wd_reg[12]_i_1_n_7 ;
  wire \burst_wd_reg[16]_0 ;
  wire \burst_wd_reg[16]_i_1_n_7 ;
  wire \burst_wd_reg[4]_i_1_n_0 ;
  wire \burst_wd_reg[4]_i_1_n_4 ;
  wire \burst_wd_reg[4]_i_1_n_5 ;
  wire \burst_wd_reg[4]_i_1_n_6 ;
  wire \burst_wd_reg[4]_i_1_n_7 ;
  wire \burst_wd_reg[8]_i_1_n_0 ;
  wire \burst_wd_reg[8]_i_1_n_4 ;
  wire \burst_wd_reg[8]_i_1_n_5 ;
  wire \burst_wd_reg[8]_i_1_n_6 ;
  wire \burst_wd_reg[8]_i_1_n_7 ;
  wire clk;
  wire dec_wdc;
  wire dec_wdc_r_reg;
  wire [0:0]out;
  wire wdc_eq_zero;
  wire wdc_eq_zero_i_10_n_0;
  wire wdc_eq_zero_i_11_n_0;
  wire wdc_eq_zero_i_6_n_0;
  wire wdc_eq_zero_i_7_n_0;
  wire wdc_eq_zero_reg_0;
  wire [17:0]wdc_eq_zero_reg_1;
  wire [2:0]\NLW_burst_wd_reg[0]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_burst_wd_reg[12]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_burst_wd_reg[16]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_burst_wd_reg[16]_i_1_O_UNCONNECTED ;
  wire [2:0]\NLW_burst_wd_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_burst_wd_reg[8]_i_1_CO_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[0]_i_10 
       (.I0(burst_wd_reg[0]),
        .I1(wdc_eq_zero_reg_1[0]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[0]_i_10_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[0]_i_3 
       (.I0(wdc_eq_zero_reg_1[3]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[3]),
        .O(\burst_wd[0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[0]_i_4 
       (.I0(wdc_eq_zero_reg_1[2]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[2]),
        .O(\burst_wd[0]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[0]_i_5 
       (.I0(wdc_eq_zero_reg_1[1]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[1]),
        .O(\burst_wd[0]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[0]_i_6 
       (.I0(wdc_eq_zero_reg_1[0]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[0]),
        .O(\burst_wd[0]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[0]_i_7 
       (.I0(burst_wd_reg[3]),
        .I1(wdc_eq_zero_reg_1[3]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[0]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[0]_i_8 
       (.I0(burst_wd_reg[2]),
        .I1(wdc_eq_zero_reg_1[2]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[0]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[0]_i_9 
       (.I0(burst_wd_reg[1]),
        .I1(wdc_eq_zero_reg_1[1]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[0]_i_9_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[12]_i_2 
       (.I0(wdc_eq_zero_reg_1[15]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[15]),
        .O(\burst_wd[12]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[12]_i_3 
       (.I0(wdc_eq_zero_reg_1[14]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[14]),
        .O(\burst_wd[12]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[12]_i_4 
       (.I0(wdc_eq_zero_reg_1[13]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[13]),
        .O(\burst_wd[12]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[12]_i_5 
       (.I0(wdc_eq_zero_reg_1[12]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[12]),
        .O(\burst_wd[12]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[12]_i_6 
       (.I0(burst_wd_reg[15]),
        .I1(wdc_eq_zero_reg_1[15]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[12]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[12]_i_7 
       (.I0(burst_wd_reg[14]),
        .I1(wdc_eq_zero_reg_1[14]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[12]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[12]_i_8 
       (.I0(burst_wd_reg[13]),
        .I1(wdc_eq_zero_reg_1[13]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[12]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[12]_i_9 
       (.I0(burst_wd_reg[12]),
        .I1(wdc_eq_zero_reg_1[12]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[12]_i_9_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[16]_i_2 
       (.I0(burst_wd_reg[16]),
        .I1(wdc_eq_zero_reg_1[16]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[16]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[4]_i_2 
       (.I0(wdc_eq_zero_reg_1[7]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[7]),
        .O(\burst_wd[4]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[4]_i_3 
       (.I0(wdc_eq_zero_reg_1[6]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[6]),
        .O(\burst_wd[4]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[4]_i_4 
       (.I0(wdc_eq_zero_reg_1[5]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[5]),
        .O(\burst_wd[4]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[4]_i_5 
       (.I0(wdc_eq_zero_reg_1[4]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[4]),
        .O(\burst_wd[4]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[4]_i_6 
       (.I0(burst_wd_reg[7]),
        .I1(wdc_eq_zero_reg_1[7]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[4]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[4]_i_7 
       (.I0(burst_wd_reg[6]),
        .I1(wdc_eq_zero_reg_1[6]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[4]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[4]_i_8 
       (.I0(burst_wd_reg[5]),
        .I1(wdc_eq_zero_reg_1[5]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[4]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[4]_i_9 
       (.I0(burst_wd_reg[4]),
        .I1(wdc_eq_zero_reg_1[4]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[4]_i_9_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[8]_i_2 
       (.I0(wdc_eq_zero_reg_1[11]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[11]),
        .O(\burst_wd[8]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[8]_i_3 
       (.I0(wdc_eq_zero_reg_1[10]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[10]),
        .O(\burst_wd[8]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[8]_i_4 
       (.I0(wdc_eq_zero_reg_1[9]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[9]),
        .O(\burst_wd[8]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \burst_wd[8]_i_5 
       (.I0(wdc_eq_zero_reg_1[8]),
        .I1(burst_wd_in_rdy_rise_edge),
        .I2(burst_wd_reg[8]),
        .O(\burst_wd[8]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[8]_i_6 
       (.I0(burst_wd_reg[11]),
        .I1(wdc_eq_zero_reg_1[11]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[8]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[8]_i_7 
       (.I0(burst_wd_reg[10]),
        .I1(wdc_eq_zero_reg_1[10]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[8]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[8]_i_8 
       (.I0(burst_wd_reg[9]),
        .I1(wdc_eq_zero_reg_1[9]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[8]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'hC5)) 
    \burst_wd[8]_i_9 
       (.I0(burst_wd_reg[8]),
        .I1(wdc_eq_zero_reg_1[8]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(\burst_wd[8]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    burst_wd_in_rdy_last_reg
       (.C(clk),
        .CE(1'b1),
        .D(burst_wd_in_rdy_last_reg_0),
        .Q(burst_wd_in_rdy_last),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    burst_wd_in_rdy_rise_edge_reg
       (.C(clk),
        .CE(1'b1),
        .D(burst_wd_in_rdy_rise_edge0),
        .Q(burst_wd_in_rdy_rise_edge),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[0] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[0]_i_2_n_7 ),
        .Q(burst_wd_reg[0]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \burst_wd_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\burst_wd_reg[0]_i_2_n_0 ,\NLW_burst_wd_reg[0]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\burst_wd[0]_i_3_n_0 ,\burst_wd[0]_i_4_n_0 ,\burst_wd[0]_i_5_n_0 ,\burst_wd[0]_i_6_n_0 }),
        .O({\burst_wd_reg[0]_i_2_n_4 ,\burst_wd_reg[0]_i_2_n_5 ,\burst_wd_reg[0]_i_2_n_6 ,\burst_wd_reg[0]_i_2_n_7 }),
        .S({\burst_wd[0]_i_7_n_0 ,\burst_wd[0]_i_8_n_0 ,\burst_wd[0]_i_9_n_0 ,\burst_wd[0]_i_10_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[10] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[8]_i_1_n_5 ),
        .Q(burst_wd_reg[10]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[11] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[8]_i_1_n_4 ),
        .Q(burst_wd_reg[11]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[12] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[12]_i_1_n_7 ),
        .Q(burst_wd_reg[12]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \burst_wd_reg[12]_i_1 
       (.CI(\burst_wd_reg[8]_i_1_n_0 ),
        .CO({\burst_wd_reg[12]_i_1_n_0 ,\NLW_burst_wd_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\burst_wd[12]_i_2_n_0 ,\burst_wd[12]_i_3_n_0 ,\burst_wd[12]_i_4_n_0 ,\burst_wd[12]_i_5_n_0 }),
        .O({\burst_wd_reg[12]_i_1_n_4 ,\burst_wd_reg[12]_i_1_n_5 ,\burst_wd_reg[12]_i_1_n_6 ,\burst_wd_reg[12]_i_1_n_7 }),
        .S({\burst_wd[12]_i_6_n_0 ,\burst_wd[12]_i_7_n_0 ,\burst_wd[12]_i_8_n_0 ,\burst_wd[12]_i_9_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[13] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[12]_i_1_n_6 ),
        .Q(burst_wd_reg[13]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[14] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[12]_i_1_n_5 ),
        .Q(burst_wd_reg[14]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[15] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[12]_i_1_n_4 ),
        .Q(burst_wd_reg[15]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[16] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[16]_i_1_n_7 ),
        .Q(burst_wd_reg[16]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \burst_wd_reg[16]_i_1 
       (.CI(\burst_wd_reg[12]_i_1_n_0 ),
        .CO(\NLW_burst_wd_reg[16]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_burst_wd_reg[16]_i_1_O_UNCONNECTED [3:1],\burst_wd_reg[16]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,\burst_wd[16]_i_2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[1] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[0]_i_2_n_6 ),
        .Q(burst_wd_reg[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[2] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[0]_i_2_n_5 ),
        .Q(burst_wd_reg[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[3] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[0]_i_2_n_4 ),
        .Q(burst_wd_reg[3]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[4] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[4]_i_1_n_7 ),
        .Q(burst_wd_reg[4]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \burst_wd_reg[4]_i_1 
       (.CI(\burst_wd_reg[0]_i_2_n_0 ),
        .CO({\burst_wd_reg[4]_i_1_n_0 ,\NLW_burst_wd_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\burst_wd[4]_i_2_n_0 ,\burst_wd[4]_i_3_n_0 ,\burst_wd[4]_i_4_n_0 ,\burst_wd[4]_i_5_n_0 }),
        .O({\burst_wd_reg[4]_i_1_n_4 ,\burst_wd_reg[4]_i_1_n_5 ,\burst_wd_reg[4]_i_1_n_6 ,\burst_wd_reg[4]_i_1_n_7 }),
        .S({\burst_wd[4]_i_6_n_0 ,\burst_wd[4]_i_7_n_0 ,\burst_wd[4]_i_8_n_0 ,\burst_wd[4]_i_9_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[5] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[4]_i_1_n_6 ),
        .Q(burst_wd_reg[5]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[6] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[4]_i_1_n_5 ),
        .Q(burst_wd_reg[6]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[7] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[4]_i_1_n_4 ),
        .Q(burst_wd_reg[7]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[8] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[8]_i_1_n_7 ),
        .Q(burst_wd_reg[8]),
        .R(out));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \burst_wd_reg[8]_i_1 
       (.CI(\burst_wd_reg[4]_i_1_n_0 ),
        .CO({\burst_wd_reg[8]_i_1_n_0 ,\NLW_burst_wd_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\burst_wd[8]_i_2_n_0 ,\burst_wd[8]_i_3_n_0 ,\burst_wd[8]_i_4_n_0 ,\burst_wd[8]_i_5_n_0 }),
        .O({\burst_wd_reg[8]_i_1_n_4 ,\burst_wd_reg[8]_i_1_n_5 ,\burst_wd_reg[8]_i_1_n_6 ,\burst_wd_reg[8]_i_1_n_7 }),
        .S({\burst_wd[8]_i_6_n_0 ,\burst_wd[8]_i_7_n_0 ,\burst_wd[8]_i_8_n_0 ,\burst_wd[8]_i_9_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \burst_wd_reg[9] 
       (.C(clk),
        .CE(\burst_wd_reg[16]_0 ),
        .D(\burst_wd_reg[8]_i_1_n_6 ),
        .Q(burst_wd_reg[9]),
        .R(out));
  LUT4 #(
    .INIT(16'h0001)) 
    wdc_eq_zero_i_10
       (.I0(burst_wd_reg[11]),
        .I1(burst_wd_reg[10]),
        .I2(burst_wd_reg[9]),
        .I3(burst_wd_reg[8]),
        .O(wdc_eq_zero_i_10_n_0));
  LUT4 #(
    .INIT(16'h0004)) 
    wdc_eq_zero_i_11
       (.I0(burst_wd_reg[1]),
        .I1(burst_wd_reg[0]),
        .I2(burst_wd_reg[3]),
        .I3(burst_wd_reg[2]),
        .O(wdc_eq_zero_i_11_n_0));
  LUT6 #(
    .INIT(64'h88888FFF88888000)) 
    wdc_eq_zero_i_2
       (.I0(wdc_eq_zero_i_6_n_0),
        .I1(wdc_eq_zero_i_7_n_0),
        .I2(dec_wdc),
        .I3(wdc_eq_zero_reg_1[17]),
        .I4(burst_wd_in_rdy_rise_edge),
        .I5(wdc_eq_zero),
        .O(dec_wdc_r_reg));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    wdc_eq_zero_i_6
       (.I0(wdc_eq_zero_i_10_n_0),
        .I1(burst_wd_reg[7]),
        .I2(burst_wd_reg[6]),
        .I3(burst_wd_reg[5]),
        .I4(burst_wd_reg[4]),
        .I5(wdc_eq_zero_i_11_n_0),
        .O(wdc_eq_zero_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    wdc_eq_zero_i_7
       (.I0(burst_wd_reg[12]),
        .I1(burst_wd_reg[13]),
        .I2(burst_wd_reg[14]),
        .I3(burst_wd_reg[15]),
        .I4(burst_wd_in_rdy_rise_edge),
        .I5(burst_wd_reg[16]),
        .O(wdc_eq_zero_i_7_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wdc_eq_zero_reg
       (.C(clk),
        .CE(1'b1),
        .D(wdc_eq_zero_reg_0),
        .Q(wdc_eq_zero),
        .R(1'b0));
endmodule

module xsdbm_v3_0_0_bus_ctl
   (EMPTY_O,
    FULL_O,
    RD_EN_I,
    WR_EN_I,
    abort_rd_edge,
    addr_in_rdy_rise_edge,
    burst_wd_in_rdy_rise_edge,
    clk,
    \current_state_reg[1]_0 ,
    dec_wdc,
    dec_wdc_r_reg_0,
    inc_addr_r_reg_0,
    ma_rd_req,
    sl_drdy,
    sl_dwe_r0__0,
    wdc_eq_zero,
    \G_NEG_EDGE.flag_reg ,
    \G_NEG_EDGE.flag_reg_0 ,
    \addr_reg[0] ,
    in_write_mode_reg_0,
    out,
    \sl_berr_r_reg[0]_0 ,
    sl_iport0_o);
  input EMPTY_O;
  input FULL_O;
  output RD_EN_I;
  output WR_EN_I;
  output abort_rd_edge;
  input addr_in_rdy_rise_edge;
  input burst_wd_in_rdy_rise_edge;
  input clk;
  input \current_state_reg[1]_0 ;
  output dec_wdc;
  output dec_wdc_r_reg_0;
  output inc_addr_r_reg_0;
  input ma_rd_req;
  input sl_drdy;
  input sl_dwe_r0__0;
  input wdc_eq_zero;
  input [0:0]\G_NEG_EDGE.flag_reg ;
  input [0:0]\G_NEG_EDGE.flag_reg_0 ;
  input [1:0]\addr_reg[0] ;
  output [3:0]in_write_mode_reg_0;
  input [1:0]out;
  output [2:0]\sl_berr_r_reg[0]_0 ;
  output [2:0]sl_iport0_o;

  wire EMPTY_O;
  wire FULL_O;
  wire [0:0]\G_NEG_EDGE.flag_reg ;
  wire [0:0]\G_NEG_EDGE.flag_reg_0 ;
  wire RD_EN_I;
  wire U_RD_ABORT_FLAG_n_1;
  wire U_RD_ABORT_FLAG_n_2;
  wire U_RD_REQ_FLAG_n_1;
  wire U_RD_REQ_FLAG_n_3;
  wire U_TIMER_n_10;
  wire U_TIMER_n_11;
  wire U_TIMER_n_12;
  wire U_TIMER_n_13;
  wire U_TIMER_n_14;
  wire U_TIMER_n_15;
  wire U_TIMER_n_16;
  wire U_TIMER_n_17;
  wire U_TIMER_n_18;
  wire U_TIMER_n_19;
  wire U_TIMER_n_20;
  wire U_TIMER_n_21;
  wire U_TIMER_n_22;
  wire U_TIMER_n_4;
  wire U_TIMER_n_5;
  wire U_TIMER_n_6;
  wire U_TIMER_n_7;
  wire U_TIMER_n_8;
  wire U_TIMER_n_9;
  wire WR_EN_I;
  wire abort_rd_edge;
  wire ack_timeout;
  wire active_sl_den_mask;
  wire addr_in_rdy_rise_edge;
  wire [1:0]\addr_reg[0] ;
  wire auto_sl_drdy;
  wire burst_wd_in_rdy_rise_edge;
  wire clk;
  wire clr_abort_rd;
  wire clr_rd_req;
  wire [4:0]current_state;
  wire \current_state[0]_i_2_n_0 ;
  wire \current_state[1]_i_3_n_0 ;
  wire \current_state[1]_i_4_n_0 ;
  wire \current_state[1]_i_6_n_0 ;
  wire \current_state[3]_i_2_n_0 ;
  wire \current_state_reg[1]_0 ;
  wire dec_wdc;
  wire dec_wdc_r_reg_0;
  wire [3:0]in_write_mode_reg_0;
  wire inc_addr;
  wire inc_addr_r_reg_0;
  wire ma_rd_req;
  wire [4:0]next_state;
  wire [1:0]out;
  wire rd_req_edge;
  wire [2:0]\sl_berr_r_reg[0]_0 ;
  wire \sl_den_r[0]_i_6_n_0 ;
  wire sl_drdy;
  wire sl_dwe_r0__0;
  wire [2:0]sl_iport0_o;
  wire timer_rst;
  wire wdc_eq_zero;

  LUT3 #(
    .INIT(8'hE0)) 
    \SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_1 
       (.I0(auto_sl_drdy),
        .I1(sl_drdy),
        .I2(in_write_mode_reg_0[0]),
        .O(WR_EN_I));
  xsdbm_v3_0_0_bus_ctl_flg__parameterized0 U_RD_ABORT_FLAG
       (.FULL_O(FULL_O),
        .\G_NEG_EDGE.flag_reg_0 (abort_rd_edge),
        .\G_NEG_EDGE.flag_reg_1 (U_RD_REQ_FLAG_n_1),
        .Q(current_state[2:0]),
        .ack_timeout(ack_timeout),
        .clk(clk),
        .clr_abort_rd(clr_abort_rd),
        .\ctl_reg_reg[17] (U_RD_ABORT_FLAG_n_1),
        .\current_state_reg[2] (\addr_reg[0] [0]),
        .wdc_eq_zero(wdc_eq_zero),
        .wdc_eq_zero_reg(U_RD_ABORT_FLAG_n_2));
  xsdbm_v3_0_0_bus_ctl_flg U_RD_REQ_FLAG
       (.EMPTY_O(EMPTY_O),
        .\G_NEG_EDGE.flag_reg (\G_NEG_EDGE.flag_reg ),
        .\G_NEG_EDGE.flag_reg_0 (\G_NEG_EDGE.flag_reg_0 ),
        .\G_NEG_EDGE.flag_reg_1 (in_write_mode_reg_0[2:1]),
        .Q(current_state),
        .abort_rd_edge(abort_rd_edge),
        .clk(clk),
        .clr_rd_req(clr_rd_req),
        .\current_state_reg[2] (U_RD_REQ_FLAG_n_3),
        .\current_state_reg[2]_0 (U_RD_ABORT_FLAG_n_1),
        .\current_state_reg[2]_1 (U_TIMER_n_22),
        .last_flag_reg_0(U_RD_REQ_FLAG_n_1),
        .ma_rd_req(ma_rd_req),
        .next_state(next_state[2]),
        .rd_req_edge(rd_req_edge));
  xsdbm_v3_0_0_bus_ctl_cnt U_TIMER
       (.EMPTY_O(EMPTY_O),
        .FULL_O(FULL_O),
        .Q(current_state),
        .RD_EN_I(RD_EN_I),
        .SR(timer_rst),
        .abort_rd_edge(abort_rd_edge),
        .ack_timeout(ack_timeout),
        .active_sl_den_mask(active_sl_den_mask),
        .\active_sl_den_mask_reg[0] (U_TIMER_n_7),
        .\active_sl_den_mask_reg[0]_0 (U_TIMER_n_13),
        .auto_sl_drdy(auto_sl_drdy),
        .auto_sl_drdy_reg(U_TIMER_n_10),
        .clk(clk),
        .clr_abort_rd(clr_abort_rd),
        .clr_abort_rd_reg(U_TIMER_n_9),
        .clr_rd_req(clr_rd_req),
        .clr_rd_req_reg(U_TIMER_n_8),
        .\ctl_reg_reg[1] (U_TIMER_n_17),
        .\current_state[2]_i_2 (\addr_reg[0] [0]),
        .\current_state_reg[0] (\current_state[0]_i_2_n_0 ),
        .\current_state_reg[1] (U_TIMER_n_22),
        .\current_state_reg[1]_0 (\current_state[1]_i_3_n_0 ),
        .\current_state_reg[1]_1 (\current_state[1]_i_4_n_0 ),
        .\current_state_reg[1]_2 (\current_state[1]_i_6_n_0 ),
        .\current_state_reg[1]_3 (\current_state_reg[1]_0 ),
        .\current_state_reg[3] (\current_state[3]_i_2_n_0 ),
        .dec_wdc(dec_wdc),
        .dec_wdc_r_reg(U_TIMER_n_12),
        .in_idle_mode_reg(U_TIMER_n_4),
        .in_idle_mode_reg_0({next_state[4],next_state[2]}),
        .in_normal_mode_reg(U_TIMER_n_18),
        .in_read_mode_reg(U_TIMER_n_5),
        .in_write_mode_reg(U_TIMER_n_6),
        .in_write_mode_reg_0(in_write_mode_reg_0),
        .inc_addr(inc_addr),
        .inc_addr_r_reg(U_TIMER_n_11),
        .\ma_err_r_reg[0] (U_TIMER_n_19),
        .\ma_err_r_reg[1] (U_TIMER_n_20),
        .ma_wr_pop_r_reg(U_TIMER_n_16),
        .next_state({next_state[3],next_state[1:0]}),
        .out(out[1]),
        .rd_req_edge(rd_req_edge),
        .\sl_berr_r_reg[0] (\sl_berr_r_reg[0]_0 ),
        .\sl_den_r[0]_i_2_0 (U_RD_ABORT_FLAG_n_2),
        .\sl_den_r_reg[0] (U_TIMER_n_14),
        .\sl_den_r_reg[0]_0 (U_RD_REQ_FLAG_n_3),
        .\sl_den_r_reg[0]_1 (\sl_den_r[0]_i_6_n_0 ),
        .sl_drdy(sl_drdy),
        .sl_dwe_r0__0(sl_dwe_r0__0),
        .\sl_dwe_r_reg[0] (U_TIMER_n_15),
        .sl_iport0_o(sl_iport0_o),
        .timer_rst_reg(U_TIMER_n_21),
        .wdc_eq_zero(wdc_eq_zero));
  FDCE #(
    .INIT(1'b0)) 
    \active_sl_den_mask_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_13),
        .Q(active_sl_den_mask));
  LUT3 #(
    .INIT(8'hF8)) 
    \addr[16]_i_1 
       (.I0(inc_addr),
        .I1(\addr_reg[0] [1]),
        .I2(addr_in_rdy_rise_edge),
        .O(inc_addr_r_reg_0));
  FDCE #(
    .INIT(1'b0)) 
    auto_sl_drdy_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_10),
        .Q(auto_sl_drdy));
  LUT3 #(
    .INIT(8'hF8)) 
    \burst_wd[0]_i_1 
       (.I0(dec_wdc),
        .I1(\addr_reg[0] [0]),
        .I2(burst_wd_in_rdy_rise_edge),
        .O(dec_wdc_r_reg_0));
  FDCE #(
    .INIT(1'b0)) 
    clr_abort_rd_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_9),
        .Q(clr_abort_rd));
  FDCE #(
    .INIT(1'b0)) 
    clr_rd_req_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_8),
        .Q(clr_rd_req));
  LUT3 #(
    .INIT(8'h4F)) 
    \current_state[0]_i_2 
       (.I0(current_state[3]),
        .I1(current_state[2]),
        .I2(current_state[4]),
        .O(\current_state[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \current_state[1]_i_3 
       (.I0(current_state[3]),
        .I1(current_state[4]),
        .O(\current_state[1]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h4)) 
    \current_state[1]_i_4 
       (.I0(current_state[4]),
        .I1(current_state[3]),
        .O(\current_state[1]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h8808)) 
    \current_state[1]_i_6 
       (.I0(current_state[1]),
        .I1(current_state[4]),
        .I2(current_state[2]),
        .I3(current_state[3]),
        .O(\current_state[1]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h0A0AABAA)) 
    \current_state[3]_i_2 
       (.I0(current_state[3]),
        .I1(EMPTY_O),
        .I2(current_state[0]),
        .I3(current_state[1]),
        .I4(current_state[2]),
        .O(\current_state[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFCCCCCC4CCCCCCCC)) 
    \current_state[4]_i_1 
       (.I0(EMPTY_O),
        .I1(current_state[4]),
        .I2(current_state[2]),
        .I3(current_state[3]),
        .I4(current_state[0]),
        .I5(current_state[1]),
        .O(next_state[4]));
  FDCE #(
    .INIT(1'b0)) 
    \current_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(next_state[0]),
        .Q(current_state[0]));
  FDCE #(
    .INIT(1'b0)) 
    \current_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(next_state[1]),
        .Q(current_state[1]));
  FDCE #(
    .INIT(1'b0)) 
    \current_state_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(next_state[2]),
        .Q(current_state[2]));
  FDCE #(
    .INIT(1'b0)) 
    \current_state_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(next_state[3]),
        .Q(current_state[3]));
  FDCE #(
    .INIT(1'b0)) 
    \current_state_reg[4] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(next_state[4]),
        .Q(current_state[4]));
  FDCE #(
    .INIT(1'b0)) 
    dec_wdc_r_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_12),
        .Q(dec_wdc));
  FDCE #(
    .INIT(1'b0)) 
    in_idle_mode_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_4),
        .Q(in_write_mode_reg_0[1]));
  FDCE #(
    .INIT(1'b0)) 
    in_normal_mode_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_18),
        .Q(in_write_mode_reg_0[0]));
  FDCE #(
    .INIT(1'b0)) 
    in_read_mode_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_5),
        .Q(in_write_mode_reg_0[2]));
  FDCE #(
    .INIT(1'b0)) 
    in_write_mode_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_6),
        .Q(in_write_mode_reg_0[3]));
  FDCE #(
    .INIT(1'b0)) 
    inc_addr_r_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_11),
        .Q(inc_addr));
  FDCE #(
    .INIT(1'b0)) 
    \ma_err_r_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_19),
        .Q(\sl_berr_r_reg[0]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \ma_err_r_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_20),
        .Q(\sl_berr_r_reg[0]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    ma_wr_pop_r_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_16),
        .Q(RD_EN_I));
  FDCE #(
    .INIT(1'b0)) 
    \sl_berr_r_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_7),
        .Q(\sl_berr_r_reg[0]_0 [2]));
  LUT3 #(
    .INIT(8'h40)) 
    \sl_den_r[0]_i_6 
       (.I0(current_state[3]),
        .I1(current_state[4]),
        .I2(current_state[2]),
        .O(\sl_den_r[0]_i_6_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \sl_den_r_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_14),
        .Q(sl_iport0_o[1]));
  FDCE #(
    .INIT(1'b0)) 
    \sl_dwe_r_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_15),
        .Q(sl_iport0_o[2]));
  FDCE #(
    .INIT(1'b0)) 
    \sl_rst_r_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(out[0]),
        .D(U_TIMER_n_17),
        .Q(sl_iport0_o[0]));
  FDPE #(
    .INIT(1'b1)) 
    timer_rst_reg
       (.C(clk),
        .CE(1'b1),
        .D(U_TIMER_n_21),
        .PRE(out[0]),
        .Q(timer_rst));
endmodule

module xsdbm_v3_0_0_bus_ctl_cnt
   (EMPTY_O,
    FULL_O,
    RD_EN_I,
    abort_rd_edge,
    ack_timeout,
    active_sl_den_mask,
    \active_sl_den_mask_reg[0] ,
    \active_sl_den_mask_reg[0]_0 ,
    auto_sl_drdy,
    auto_sl_drdy_reg,
    clk,
    clr_abort_rd,
    clr_abort_rd_reg,
    clr_rd_req,
    clr_rd_req_reg,
    \ctl_reg_reg[1] ,
    \current_state_reg[0] ,
    \current_state_reg[1] ,
    \current_state_reg[1]_0 ,
    \current_state_reg[1]_1 ,
    \current_state_reg[1]_2 ,
    \current_state_reg[1]_3 ,
    \current_state_reg[3] ,
    dec_wdc,
    dec_wdc_r_reg,
    in_idle_mode_reg,
    in_normal_mode_reg,
    in_read_mode_reg,
    in_write_mode_reg,
    inc_addr,
    inc_addr_r_reg,
    \ma_err_r_reg[0] ,
    \ma_err_r_reg[1] ,
    ma_wr_pop_r_reg,
    rd_req_edge,
    \sl_den_r[0]_i_2_0 ,
    \sl_den_r_reg[0] ,
    \sl_den_r_reg[0]_0 ,
    \sl_den_r_reg[0]_1 ,
    sl_drdy,
    sl_dwe_r0__0,
    \sl_dwe_r_reg[0] ,
    timer_rst_reg,
    wdc_eq_zero,
    Q,
    SR,
    \current_state[2]_i_2 ,
    in_idle_mode_reg_0,
    in_write_mode_reg_0,
    next_state,
    out,
    \sl_berr_r_reg[0] ,
    sl_iport0_o);
  input EMPTY_O;
  input FULL_O;
  input RD_EN_I;
  input abort_rd_edge;
  output ack_timeout;
  input active_sl_den_mask;
  output \active_sl_den_mask_reg[0] ;
  output \active_sl_den_mask_reg[0]_0 ;
  input auto_sl_drdy;
  output auto_sl_drdy_reg;
  input clk;
  input clr_abort_rd;
  output clr_abort_rd_reg;
  input clr_rd_req;
  output clr_rd_req_reg;
  output \ctl_reg_reg[1] ;
  input \current_state_reg[0] ;
  output \current_state_reg[1] ;
  input \current_state_reg[1]_0 ;
  input \current_state_reg[1]_1 ;
  input \current_state_reg[1]_2 ;
  input \current_state_reg[1]_3 ;
  input \current_state_reg[3] ;
  input dec_wdc;
  output dec_wdc_r_reg;
  output in_idle_mode_reg;
  output in_normal_mode_reg;
  output in_read_mode_reg;
  output in_write_mode_reg;
  input inc_addr;
  output inc_addr_r_reg;
  output \ma_err_r_reg[0] ;
  output \ma_err_r_reg[1] ;
  output ma_wr_pop_r_reg;
  input rd_req_edge;
  input \sl_den_r[0]_i_2_0 ;
  output \sl_den_r_reg[0] ;
  input \sl_den_r_reg[0]_0 ;
  input \sl_den_r_reg[0]_1 ;
  input sl_drdy;
  input sl_dwe_r0__0;
  output \sl_dwe_r_reg[0] ;
  output timer_rst_reg;
  input wdc_eq_zero;
  input [4:0]Q;
  input [0:0]SR;
  input [0:0]\current_state[2]_i_2 ;
  input [1:0]in_idle_mode_reg_0;
  input [3:0]in_write_mode_reg_0;
  output [2:0]next_state;
  input [0:0]out;
  input [2:0]\sl_berr_r_reg[0] ;
  input [2:0]sl_iport0_o;

  wire EMPTY_O;
  wire FULL_O;
  wire [4:0]Q;
  wire RD_EN_I;
  wire [0:0]SR;
  wire abort_rd_edge;
  wire ack_timeout;
  wire active_sl_den_mask;
  wire \active_sl_den_mask[0]_i_2_n_0 ;
  wire \active_sl_den_mask_reg[0] ;
  wire \active_sl_den_mask_reg[0]_0 ;
  wire auto_sl_drdy;
  wire auto_sl_drdy_reg;
  wire clk;
  wire clr_abort_rd;
  wire clr_abort_rd_reg;
  wire clr_rd_req;
  wire clr_rd_req_reg;
  wire \count[6]_i_2_n_0 ;
  wire [6:0]count_reg;
  wire \ctl_reg_reg[1] ;
  wire \current_state[0]_i_3_n_0 ;
  wire \current_state[0]_i_4_n_0 ;
  wire \current_state[0]_i_5_n_0 ;
  wire \current_state[0]_i_6_n_0 ;
  wire \current_state[1]_i_10_n_0 ;
  wire \current_state[1]_i_2_n_0 ;
  wire \current_state[1]_i_5_n_0 ;
  wire \current_state[1]_i_7_n_0 ;
  wire \current_state[1]_i_9_n_0 ;
  wire [0:0]\current_state[2]_i_2 ;
  wire \current_state[3]_i_3_n_0 ;
  wire \current_state_reg[0] ;
  wire \current_state_reg[1] ;
  wire \current_state_reg[1]_0 ;
  wire \current_state_reg[1]_1 ;
  wire \current_state_reg[1]_2 ;
  wire \current_state_reg[1]_3 ;
  wire \current_state_reg[3] ;
  wire dec_wdc;
  wire dec_wdc_r_reg;
  wire g0_b0__0_n_0;
  wire g0_b0__1_n_0;
  wire g0_b0__2_n_0;
  wire g0_b0__3_n_0;
  wire g0_b0__4_n_0;
  wire g0_b0__5_n_0;
  wire g0_b0__6_n_0;
  wire g0_b0__7_n_0;
  wire g0_b0__8_n_0;
  wire in_idle_mode_reg;
  wire [1:0]in_idle_mode_reg_0;
  wire in_normal_mode_reg;
  wire in_read_mode_reg;
  wire in_write_mode_reg;
  wire [3:0]in_write_mode_reg_0;
  wire inc_addr;
  wire inc_addr_r_reg;
  wire \ma_err_r_reg[0] ;
  wire \ma_err_r_reg[1] ;
  wire ma_wr_pop_r_reg;
  wire [2:0]next_state;
  wire [0:0]out;
  wire [6:0]p_0_in__2;
  wire rd_req_edge;
  wire [2:0]\sl_berr_r_reg[0] ;
  wire \sl_den_r[0]_i_2_0 ;
  wire \sl_den_r[0]_i_2_n_0 ;
  wire \sl_den_r[0]_i_3_n_0 ;
  wire \sl_den_r[0]_i_5_n_0 ;
  wire \sl_den_r[0]_i_7_n_0 ;
  wire \sl_den_r[0]_i_9_n_0 ;
  wire \sl_den_r_reg[0] ;
  wire \sl_den_r_reg[0]_0 ;
  wire \sl_den_r_reg[0]_1 ;
  wire sl_drdy;
  wire sl_dwe_r0__0;
  wire \sl_dwe_r_reg[0] ;
  wire [2:0]sl_iport0_o;
  wire \sl_rst_r[0]_i_2_n_0 ;
  wire timeout_i_1_n_0;
  wire timeout_i_2_n_0;
  wire timer_rst_reg;
  wire wdc_eq_zero;

  LUT6 #(
    .INIT(64'hFECBFFFF02080000)) 
    \active_sl_den_mask[0]_i_1 
       (.I0(sl_dwe_r0__0),
        .I1(in_idle_mode_reg_0[0]),
        .I2(next_state[1]),
        .I3(in_idle_mode_reg_0[1]),
        .I4(\active_sl_den_mask[0]_i_2_n_0 ),
        .I5(active_sl_den_mask),
        .O(\active_sl_den_mask_reg[0]_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \active_sl_den_mask[0]_i_2 
       (.I0(next_state[2]),
        .I1(\current_state[0]_i_4_n_0 ),
        .I2(\sl_den_r[0]_i_7_n_0 ),
        .O(\active_sl_den_mask[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    auto_sl_drdy_i_1
       (.I0(g0_b0__2_n_0),
        .I1(g0_b0__1_n_0),
        .I2(auto_sl_drdy),
        .O(auto_sl_drdy_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFB00002000)) 
    clr_abort_rd_i_1
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .I5(clr_abort_rd),
        .O(clr_abort_rd_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFB00002002)) 
    clr_rd_req_i_1
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .I5(clr_rd_req),
        .O(clr_rd_req_reg));
  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(count_reg[0]),
        .O(p_0_in__2[0]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count[1]_i_1 
       (.I0(count_reg[0]),
        .I1(count_reg[1]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count[2]_i_1 
       (.I0(count_reg[0]),
        .I1(count_reg[1]),
        .I2(count_reg[2]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count[3]_i_1 
       (.I0(count_reg[1]),
        .I1(count_reg[0]),
        .I2(count_reg[2]),
        .I3(count_reg[3]),
        .O(p_0_in__2[3]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count[4]_i_1 
       (.I0(count_reg[2]),
        .I1(count_reg[0]),
        .I2(count_reg[1]),
        .I3(count_reg[3]),
        .I4(count_reg[4]),
        .O(p_0_in__2[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count[5]_i_1 
       (.I0(count_reg[3]),
        .I1(count_reg[1]),
        .I2(count_reg[0]),
        .I3(count_reg[2]),
        .I4(count_reg[4]),
        .I5(count_reg[5]),
        .O(p_0_in__2[5]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count[6]_i_1 
       (.I0(count_reg[4]),
        .I1(count_reg[2]),
        .I2(\count[6]_i_2_n_0 ),
        .I3(count_reg[3]),
        .I4(count_reg[5]),
        .I5(count_reg[6]),
        .O(p_0_in__2[6]));
  LUT2 #(
    .INIT(4'h8)) 
    \count[6]_i_2 
       (.I0(count_reg[1]),
        .I1(count_reg[0]),
        .O(\count[6]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(p_0_in__2[0]),
        .Q(count_reg[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(p_0_in__2[1]),
        .Q(count_reg[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(p_0_in__2[2]),
        .Q(count_reg[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(p_0_in__2[3]),
        .Q(count_reg[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(1'b1),
        .D(p_0_in__2[4]),
        .Q(count_reg[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(1'b1),
        .D(p_0_in__2[5]),
        .Q(count_reg[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(1'b1),
        .D(p_0_in__2[6]),
        .Q(count_reg[6]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFF23220100)) 
    \current_state[0]_i_1 
       (.I0(\current_state_reg[0] ),
        .I1(\current_state_reg[1]_0 ),
        .I2(Q[1]),
        .I3(\current_state[0]_i_3_n_0 ),
        .I4(Q[0]),
        .I5(\current_state[0]_i_4_n_0 ),
        .O(next_state[0]));
  LUT4 #(
    .INIT(16'h888F)) 
    \current_state[0]_i_3 
       (.I0(ack_timeout),
        .I1(Q[0]),
        .I2(auto_sl_drdy),
        .I3(sl_drdy),
        .O(\current_state[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hCCAA00F0)) 
    \current_state[0]_i_4 
       (.I0(\current_state[0]_i_5_n_0 ),
        .I1(Q[0]),
        .I2(\current_state[0]_i_6_n_0 ),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(\current_state[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0F5F0FFF0F5F00CF)) 
    \current_state[0]_i_5 
       (.I0(ack_timeout),
        .I1(wdc_eq_zero),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(abort_rd_edge),
        .O(\current_state[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h41CF41FF41C341F3)) 
    \current_state[0]_i_6 
       (.I0(ack_timeout),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(EMPTY_O),
        .I5(FULL_O),
        .O(\current_state[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEAAA)) 
    \current_state[1]_i_1 
       (.I0(\current_state[1]_i_2_n_0 ),
        .I1(\current_state_reg[1]_0 ),
        .I2(\current_state_reg[1]_1 ),
        .I3(\current_state[1]_i_5_n_0 ),
        .I4(\current_state_reg[1]_2 ),
        .I5(\current_state[1]_i_7_n_0 ),
        .O(next_state[1]));
  LUT6 #(
    .INIT(64'h00000000FF3FAA00)) 
    \current_state[1]_i_10 
       (.I0(ack_timeout),
        .I1(rd_req_edge),
        .I2(EMPTY_O),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(\current_state[1]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h00000000F0F0EFE0)) 
    \current_state[1]_i_2 
       (.I0(EMPTY_O),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\current_state[3]_i_3_n_0 ),
        .I4(\current_state_reg[0] ),
        .I5(\current_state_reg[1]_0 ),
        .O(\current_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00AAFF3000AAF000)) 
    \current_state[1]_i_5 
       (.I0(\current_state[0]_i_3_n_0 ),
        .I1(wdc_eq_zero),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(\current_state_reg[1]_3 ),
        .O(\current_state[1]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h55115000)) 
    \current_state[1]_i_7 
       (.I0(Q[3]),
        .I1(Q[4]),
        .I2(\current_state[1]_i_9_n_0 ),
        .I3(Q[2]),
        .I4(\current_state[1]_i_10_n_0 ),
        .O(\current_state[1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h00030303FFFF5555)) 
    \current_state[1]_i_9 
       (.I0(FULL_O),
        .I1(auto_sl_drdy),
        .I2(sl_drdy),
        .I3(ack_timeout),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\current_state[1]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h555557FF57FF57FF)) 
    \current_state[2]_i_4 
       (.I0(Q[1]),
        .I1(auto_sl_drdy),
        .I2(sl_drdy),
        .I3(\current_state[2]_i_2 ),
        .I4(Q[0]),
        .I5(ack_timeout),
        .O(\current_state_reg[1] ));
  LUT6 #(
    .INIT(64'hFF00AAEAFF00AAAA)) 
    \current_state[3]_i_1 
       (.I0(\current_state_reg[3] ),
        .I1(\current_state[3]_i_3_n_0 ),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .I5(Q[2]),
        .O(next_state[2]));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \current_state[3]_i_3 
       (.I0(auto_sl_drdy),
        .I1(sl_drdy),
        .I2(ack_timeout),
        .I3(Q[0]),
        .O(\current_state[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    dec_wdc_r_i_1
       (.I0(g0_b0__6_n_0),
        .I1(g0_b0__5_n_0),
        .I2(dec_wdc),
        .O(dec_wdc_r_reg));
  LUT6 #(
    .INIT(64'hFFFBDDF700004100)) 
    g0_b0
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .I5(\sl_berr_r_reg[0] [0]),
        .O(\ma_err_r_reg[0] ));
  LUT5 #(
    .INIT(32'h000C6308)) 
    g0_b0__0
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__0_n_0));
  LUT5 #(
    .INIT(32'h000C6314)) 
    g0_b0__1
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__1_n_0));
  LUT5 #(
    .INIT(32'h00084100)) 
    g0_b0__2
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__2_n_0));
  LUT5 #(
    .INIT(32'h00073EC4)) 
    g0_b0__3
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__3_n_0));
  LUT5 #(
    .INIT(32'h00040200)) 
    g0_b0__4
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__4_n_0));
  LUT5 #(
    .INIT(32'h00070EC4)) 
    g0_b0__5
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__5_n_0));
  LUT5 #(
    .INIT(32'h00010440)) 
    g0_b0__6
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__6_n_0));
  LUT5 #(
    .INIT(32'h00076FC4)) 
    g0_b0__7
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__7_n_0));
  LUT5 #(
    .INIT(32'h00070014)) 
    g0_b0__8
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .O(g0_b0__8_n_0));
  LUT6 #(
    .INIT(64'hFFFDF77D00010444)) 
    g0_b0__9
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .I5(SR),
        .O(timer_rst_reg));
  LUT6 #(
    .INIT(64'hFFFBDDF700080000)) 
    g0_b1
       (.I0(next_state[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[2]),
        .I4(in_idle_mode_reg_0[1]),
        .I5(\sl_berr_r_reg[0] [1]),
        .O(\ma_err_r_reg[1] ));
  LUT6 #(
    .INIT(64'hFFFEFFEB00000100)) 
    in_idle_mode_i_1
       (.I0(next_state[2]),
        .I1(next_state[0]),
        .I2(in_idle_mode_reg_0[1]),
        .I3(next_state[1]),
        .I4(in_idle_mode_reg_0[0]),
        .I5(in_write_mode_reg_0[1]),
        .O(in_idle_mode_reg));
  LUT6 #(
    .INIT(64'hFFFFFEFF00010000)) 
    in_normal_mode_i_1
       (.I0(next_state[2]),
        .I1(in_idle_mode_reg_0[1]),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[0]),
        .I4(next_state[1]),
        .I5(in_write_mode_reg_0[0]),
        .O(in_normal_mode_reg));
  LUT6 #(
    .INIT(64'hFFFFFEFF00010000)) 
    in_read_mode_i_1
       (.I0(next_state[2]),
        .I1(in_idle_mode_reg_0[1]),
        .I2(next_state[0]),
        .I3(next_state[1]),
        .I4(in_idle_mode_reg_0[0]),
        .I5(in_write_mode_reg_0[2]),
        .O(in_read_mode_reg));
  LUT6 #(
    .INIT(64'hFFFFFEFF00000010)) 
    in_write_mode_i_1
       (.I0(next_state[2]),
        .I1(next_state[0]),
        .I2(in_idle_mode_reg_0[1]),
        .I3(next_state[1]),
        .I4(in_idle_mode_reg_0[0]),
        .I5(in_write_mode_reg_0[3]),
        .O(in_write_mode_reg));
  LUT3 #(
    .INIT(8'hB8)) 
    inc_addr_r_i_1
       (.I0(g0_b0__4_n_0),
        .I1(g0_b0__3_n_0),
        .I2(inc_addr),
        .O(inc_addr_r_reg));
  LUT6 #(
    .INIT(64'hFFFFFFEB08000000)) 
    ma_wr_pop_r_i_1
       (.I0(in_idle_mode_reg_0[0]),
        .I1(next_state[1]),
        .I2(in_idle_mode_reg_0[1]),
        .I3(next_state[0]),
        .I4(next_state[2]),
        .I5(RD_EN_I),
        .O(ma_wr_pop_r_reg));
  LUT6 #(
    .INIT(64'hB800FFFFB8000000)) 
    \sl_berr_r[0]_i_1 
       (.I0(in_idle_mode_reg_0[1]),
        .I1(next_state[0]),
        .I2(next_state[2]),
        .I3(active_sl_den_mask),
        .I4(g0_b0__0_n_0),
        .I5(\sl_berr_r_reg[0] [2]),
        .O(\active_sl_den_mask_reg[0] ));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \sl_den_r[0]_i_1 
       (.I0(\sl_den_r[0]_i_2_n_0 ),
        .I1(next_state[0]),
        .I2(next_state[1]),
        .I3(\sl_den_r[0]_i_3_n_0 ),
        .I4(g0_b0__7_n_0),
        .I5(sl_iport0_o[1]),
        .O(\sl_den_r_reg[0] ));
  LUT6 #(
    .INIT(64'h5555666A00000000)) 
    \sl_den_r[0]_i_2 
       (.I0(next_state[2]),
        .I1(\current_state_reg[1]_0 ),
        .I2(\sl_den_r_reg[0]_0 ),
        .I3(\sl_den_r[0]_i_5_n_0 ),
        .I4(\sl_den_r_reg[0]_1 ),
        .I5(active_sl_den_mask),
        .O(\sl_den_r[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0100)) 
    \sl_den_r[0]_i_3 
       (.I0(\sl_den_r[0]_i_7_n_0 ),
        .I1(\current_state[0]_i_4_n_0 ),
        .I2(next_state[2]),
        .I3(sl_dwe_r0__0),
        .O(\sl_den_r[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h2220)) 
    \sl_den_r[0]_i_5 
       (.I0(Q[3]),
        .I1(Q[4]),
        .I2(\sl_den_r[0]_i_9_n_0 ),
        .I3(\sl_den_r[0]_i_2_0 ),
        .O(\sl_den_r[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AA000C00)) 
    \sl_den_r[0]_i_7 
       (.I0(Q[0]),
        .I1(\current_state[0]_i_3_n_0 ),
        .I2(Q[1]),
        .I3(Q[4]),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(\sl_den_r[0]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h08000803)) 
    \sl_den_r[0]_i_9 
       (.I0(ack_timeout),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(\current_state[2]_i_2 ),
        .O(\sl_den_r[0]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h0040FFFF00400000)) 
    \sl_dwe_r[0]_i_1 
       (.I0(next_state[0]),
        .I1(in_idle_mode_reg_0[1]),
        .I2(sl_dwe_r0__0),
        .I3(next_state[1]),
        .I4(g0_b0__8_n_0),
        .I5(sl_iport0_o[2]),
        .O(\sl_dwe_r_reg[0] ));
  LUT6 #(
    .INIT(64'hFFF3FBFF00000800)) 
    \sl_rst_r[0]_i_1 
       (.I0(out),
        .I1(\sl_rst_r[0]_i_2_n_0 ),
        .I2(in_idle_mode_reg_0[0]),
        .I3(next_state[0]),
        .I4(next_state[1]),
        .I5(sl_iport0_o[0]),
        .O(\ctl_reg_reg[1] ));
  LUT2 #(
    .INIT(4'h1)) 
    \sl_rst_r[0]_i_2 
       (.I0(in_idle_mode_reg_0[1]),
        .I1(next_state[2]),
        .O(\sl_rst_r[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    timeout_i_1
       (.I0(timeout_i_2_n_0),
        .I1(count_reg[2]),
        .I2(count_reg[3]),
        .I3(count_reg[4]),
        .O(timeout_i_1_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    timeout_i_2
       (.I0(count_reg[0]),
        .I1(count_reg[1]),
        .I2(count_reg[6]),
        .I3(count_reg[5]),
        .O(timeout_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    timeout_reg
       (.C(clk),
        .CE(1'b1),
        .D(timeout_i_1_n_0),
        .Q(ack_timeout),
        .R(SR));
endmodule

module xsdbm_v3_0_0_bus_ctl_flg
   (EMPTY_O,
    abort_rd_edge,
    clk,
    clr_rd_req,
    \current_state_reg[2] ,
    \current_state_reg[2]_0 ,
    \current_state_reg[2]_1 ,
    last_flag_reg_0,
    ma_rd_req,
    rd_req_edge,
    \G_NEG_EDGE.flag_reg ,
    \G_NEG_EDGE.flag_reg_0 ,
    \G_NEG_EDGE.flag_reg_1 ,
    Q,
    next_state);
  input EMPTY_O;
  input abort_rd_edge;
  input clk;
  input clr_rd_req;
  output \current_state_reg[2] ;
  input \current_state_reg[2]_0 ;
  input \current_state_reg[2]_1 ;
  output last_flag_reg_0;
  input ma_rd_req;
  output rd_req_edge;
  input [0:0]\G_NEG_EDGE.flag_reg ;
  input [0:0]\G_NEG_EDGE.flag_reg_0 ;
  input [1:0]\G_NEG_EDGE.flag_reg_1 ;
  input [4:0]Q;
  output [0:0]next_state;

  wire EMPTY_O;
  wire [0:0]\G_NEG_EDGE.flag_reg ;
  wire [0:0]\G_NEG_EDGE.flag_reg_0 ;
  wire [1:0]\G_NEG_EDGE.flag_reg_1 ;
  wire \G_POS_EDGE.flag_i_1_n_0 ;
  wire [4:0]Q;
  wire \U_RD_ABORT_FLAG/last_flag ;
  wire abort_rd_edge;
  wire clk;
  wire clr_rd_req;
  wire \current_state[2]_i_2_n_0 ;
  wire \current_state_reg[2] ;
  wire \current_state_reg[2]_0 ;
  wire \current_state_reg[2]_1 ;
  wire last_flag_reg_0;
  wire ma_rd_req;
  wire [0:0]next_state;
  wire rd_req_edge;
  wire \sl_den_r[0]_i_8_n_0 ;

  LUT5 #(
    .INIT(32'hFFFF8A00)) 
    \G_NEG_EDGE.flag_i_1 
       (.I0(\U_RD_ABORT_FLAG/last_flag ),
        .I1(\G_NEG_EDGE.flag_reg ),
        .I2(\G_NEG_EDGE.flag_reg_0 ),
        .I3(\G_NEG_EDGE.flag_reg_1 [1]),
        .I4(abort_rd_edge),
        .O(last_flag_reg_0));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \G_POS_EDGE.flag_i_1 
       (.I0(\G_NEG_EDGE.flag_reg ),
        .I1(\G_NEG_EDGE.flag_reg_0 ),
        .I2(\U_RD_ABORT_FLAG/last_flag ),
        .I3(\G_NEG_EDGE.flag_reg_1 [0]),
        .I4(rd_req_edge),
        .O(\G_POS_EDGE.flag_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \G_POS_EDGE.flag_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(clr_rd_req),
        .D(\G_POS_EDGE.flag_i_1_n_0 ),
        .Q(rd_req_edge));
  LUT5 #(
    .INIT(32'hF0CCF0AA)) 
    \current_state[2]_i_1 
       (.I0(\current_state[2]_i_2_n_0 ),
        .I1(\current_state_reg[2]_0 ),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(next_state));
  LUT6 #(
    .INIT(64'hFFFF220200002202)) 
    \current_state[2]_i_2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(EMPTY_O),
        .I3(rd_req_edge),
        .I4(Q[2]),
        .I5(\current_state_reg[2]_1 ),
        .O(\current_state[2]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    last_flag_reg
       (.C(clk),
        .CE(1'b1),
        .D(ma_rd_req),
        .Q(\U_RD_ABORT_FLAG/last_flag ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hCC00C8EA)) 
    \sl_den_r[0]_i_4 
       (.I0(\sl_den_r[0]_i_8_n_0 ),
        .I1(Q[2]),
        .I2(\current_state_reg[2]_1 ),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(\current_state_reg[2] ));
  LUT5 #(
    .INIT(32'h00000B00)) 
    \sl_den_r[0]_i_8 
       (.I0(rd_req_edge),
        .I1(EMPTY_O),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(\sl_den_r[0]_i_8_n_0 ));
endmodule

(* ORIG_REF_NAME = "xsdbm_v3_0_0_bus_ctl_flg" *) 
module xsdbm_v3_0_0_bus_ctl_flg__parameterized0
   (FULL_O,
    \G_NEG_EDGE.flag_reg_0 ,
    \G_NEG_EDGE.flag_reg_1 ,
    ack_timeout,
    clk,
    clr_abort_rd,
    \ctl_reg_reg[17] ,
    wdc_eq_zero,
    wdc_eq_zero_reg,
    Q,
    \current_state_reg[2] );
  input FULL_O;
  output \G_NEG_EDGE.flag_reg_0 ;
  input \G_NEG_EDGE.flag_reg_1 ;
  input ack_timeout;
  input clk;
  input clr_abort_rd;
  output \ctl_reg_reg[17] ;
  input wdc_eq_zero;
  output wdc_eq_zero_reg;
  input [2:0]Q;
  input [0:0]\current_state_reg[2] ;

  wire FULL_O;
  wire \G_NEG_EDGE.flag_reg_0 ;
  wire \G_NEG_EDGE.flag_reg_1 ;
  wire [2:0]Q;
  wire ack_timeout;
  wire clk;
  wire clr_abort_rd;
  wire \ctl_reg_reg[17] ;
  wire [0:0]\current_state_reg[2] ;
  wire wdc_eq_zero;
  wire wdc_eq_zero_reg;

  FDCE #(
    .INIT(1'b0)) 
    \G_NEG_EDGE.flag_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(clr_abort_rd),
        .D(\G_NEG_EDGE.flag_reg_1 ),
        .Q(\G_NEG_EDGE.flag_reg_0 ));
  LUT6 #(
    .INIT(64'hAAFAAAABAAAAAAAB)) 
    \current_state[2]_i_3 
       (.I0(wdc_eq_zero_reg),
        .I1(\current_state_reg[2] ),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(ack_timeout),
        .O(\ctl_reg_reg[17] ));
  LUT6 #(
    .INIT(64'h0000000000FCFE00)) 
    \current_state[2]_i_5 
       (.I0(wdc_eq_zero),
        .I1(FULL_O),
        .I2(\G_NEG_EDGE.flag_reg_0 ),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(wdc_eq_zero_reg));
endmodule

module xsdbm_v3_0_0_bus_mstr2sl_if
   (clk,
    sl_drdy,
    Q,
    sl_oport0_i);
  input clk;
  output sl_drdy;
  output [15:0]Q;
  input [16:0]sl_oport0_i;

  wire [15:0]Q;
  wire clk;
  wire sl_drdy;
  wire [16:0]sl_oport0_i;

  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[1]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[10] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[11]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[11] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[12]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[12] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[13]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[13] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[14]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[14] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[15]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[15] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[16]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[2]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[3]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[4]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[4] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[5]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[5] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[6]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[6] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[7]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[7] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[8]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[8] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[9]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MA_RD_DIN_O_reg[9] 
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[10]),
        .Q(Q[9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    SL_DRDY_O_reg
       (.C(clk),
        .CE(1'b1),
        .D(sl_oport0_i[0]),
        .Q(sl_drdy),
        .R(1'b0));
endmodule

module xsdbm_v3_0_0_cmd_decode
   (SYNC_reg,
    iDATA_CMD,
    \iTARGET_reg[14]_0 ,
    \iTARGET_reg[15]_0 ,
    \iTARGET_reg[6]_0 ,
    \iTARGET_reg[9]_0 ,
    \iTARGET_reg[9]_1 ,
    \iTARGET_reg[9]_2 ,
    \iTARGET_reg[9]_3 ,
    iTDO_VEC_15,
    \icn_cmd_en_reg[7] ,
    \icn_cmd_en_reg[7]_0 ,
    D,
    Q,
    SR,
    m_bscan_tck);
  output SYNC_reg;
  input iDATA_CMD;
  output \iTARGET_reg[14]_0 ;
  output \iTARGET_reg[15]_0 ;
  input \iTARGET_reg[6]_0 ;
  output \iTARGET_reg[9]_0 ;
  output \iTARGET_reg[9]_1 ;
  output \iTARGET_reg[9]_2 ;
  output \iTARGET_reg[9]_3 ;
  input iTDO_VEC_15;
  input \icn_cmd_en_reg[7] ;
  input \icn_cmd_en_reg[7]_0 ;
  input [0:0]D;
  output [3:0]Q;
  output [0:0]SR;
  input [0:0]m_bscan_tck;

  wire [0:0]D;
  wire [3:0]Q;
  wire [0:0]SR;
  wire SYNC_reg;
  wire [1:0]iCOMMAND_GRP;
  wire [1:0]iCORE_ID;
  wire iDATA_CMD;
  wire iSEL_n;
  wire \iSTAT_CNT[5]_i_3_n_0 ;
  wire \iSTAT_CNT[5]_i_4_n_0 ;
  wire iTARGET_CE;
  wire \iTARGET_reg[14]_0 ;
  wire \iTARGET_reg[15]_0 ;
  wire \iTARGET_reg[6]_0 ;
  wire \iTARGET_reg[9]_0 ;
  wire \iTARGET_reg[9]_1 ;
  wire \iTARGET_reg[9]_2 ;
  wire \iTARGET_reg[9]_3 ;
  wire iTDO_VEC_15;
  wire \icn_cmd_en[7]_i_3_n_0 ;
  wire \icn_cmd_en_reg[7] ;
  wire \icn_cmd_en_reg[7]_0 ;
  wire [0:0]m_bscan_tck;
  wire [1:0]sel0;

  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \iSTAT_CNT[5]_i_1 
       (.I0(\iSTAT_CNT[5]_i_3_n_0 ),
        .I1(iCORE_ID[0]),
        .I2(iCORE_ID[1]),
        .I3(Q[2]),
        .I4(\iSTAT_CNT[5]_i_4_n_0 ),
        .O(SR));
  LUT5 #(
    .INIT(32'h00000010)) 
    \iSTAT_CNT[5]_i_3 
       (.I0(iCOMMAND_GRP[1]),
        .I1(iCOMMAND_GRP[0]),
        .I2(Q[3]),
        .I3(sel0[0]),
        .I4(sel0[1]),
        .O(\iSTAT_CNT[5]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0040)) 
    \iSTAT_CNT[5]_i_4 
       (.I0(Q[0]),
        .I1(\icn_cmd_en_reg[7] ),
        .I2(\icn_cmd_en_reg[7]_0 ),
        .I3(Q[1]),
        .O(\iSTAT_CNT[5]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \iTARGET[15]_i_1 
       (.I0(\icn_cmd_en_reg[7] ),
        .I1(iDATA_CMD),
        .O(iTARGET_CE));
  LUT1 #(
    .INIT(2'h1)) 
    \iTARGET[15]_i_2 
       (.I0(\iTARGET_reg[6]_0 ),
        .O(iSEL_n));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[10] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(Q[1]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[11] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(iCORE_ID[0]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[12] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(iCORE_ID[1]),
        .Q(iCORE_ID[0]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[13] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(Q[2]),
        .Q(iCORE_ID[1]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[14] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(Q[3]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[15] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(D),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[6] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(iCOMMAND_GRP[1]),
        .Q(iCOMMAND_GRP[0]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[7] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(sel0[0]),
        .Q(iCOMMAND_GRP[1]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[8] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(sel0[1]),
        .Q(sel0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \iTARGET_reg[9] 
       (.C(m_bscan_tck),
        .CE(iTARGET_CE),
        .CLR(iSEL_n),
        .D(Q[0]),
        .Q(sel0[1]));
  LUT3 #(
    .INIT(8'h81)) 
    iTDO_i_2
       (.I0(Q[2]),
        .I1(iCORE_ID[1]),
        .I2(iCORE_ID[0]),
        .O(\iTARGET_reg[14]_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    iTDO_i_3
       (.I0(Q[3]),
        .I1(iTDO_VEC_15),
        .I2(Q[2]),
        .O(\iTARGET_reg[15]_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \icn_cmd_en[4]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(\icn_cmd_en[7]_i_3_n_0 ),
        .O(\iTARGET_reg[9]_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \icn_cmd_en[5]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(\icn_cmd_en[7]_i_3_n_0 ),
        .O(\iTARGET_reg[9]_2 ));
  LUT3 #(
    .INIT(8'h04)) 
    \icn_cmd_en[6]_i_1 
       (.I0(\icn_cmd_en[7]_i_3_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .O(\iTARGET_reg[9]_1 ));
  LUT4 #(
    .INIT(16'hF7FF)) 
    \icn_cmd_en[7]_i_1 
       (.I0(\icn_cmd_en_reg[7] ),
        .I1(\icn_cmd_en_reg[7]_0 ),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(SYNC_reg));
  LUT3 #(
    .INIT(8'h08)) 
    \icn_cmd_en[7]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(\icn_cmd_en[7]_i_3_n_0 ),
        .O(\iTARGET_reg[9]_3 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \icn_cmd_en[7]_i_3 
       (.I0(Q[2]),
        .I1(iCORE_ID[1]),
        .I2(iCORE_ID[0]),
        .I3(iCOMMAND_GRP[0]),
        .I4(iCOMMAND_GRP[1]),
        .I5(Q[3]),
        .O(\icn_cmd_en[7]_i_3_n_0 ));
endmodule

module xsdbm_v3_0_0_ctl_reg
   (ICN_CMD_EN_I,
    clk,
    D,
    \ctl_reg_reg[1]_0 ,
    m_bscan_tck,
    out);
  input ICN_CMD_EN_I;
  input clk;
  input [0:0]D;
  output [1:0]\ctl_reg_reg[1]_0 ;
  input [0:0]m_bscan_tck;
  output [0:0]out;

  wire [0:0]D;
  wire ICN_CMD_EN_I;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]ctl_reg;
  wire \ctl_reg[1]_i_1_n_0 ;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_1;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_2;
  (* DONT_TOUCH *) wire ctl_reg_en_temp;
  (* DONT_TOUCH *) wire icn_cmd_din_temp;
  (* DONT_TOUCH *) wire icn_cmd_en_temp;
  wire [0:0]m_bscan_tck;
  (* async_reg = "true" *) wire [1:0]shift_reg_in;

  assign \ctl_reg_reg[1]_0 [1:0] = ctl_reg;
  assign out[0] = shift_reg_in[0];
  LUT2 #(
    .INIT(4'h8)) 
    \ctl_reg[1]_i_1 
       (.I0(ctl_reg_en_temp),
        .I1(ctl_reg_en_2[0]),
        .O(\ctl_reg[1]_i_1_n_0 ));
  initial assign \ctl_reg_en_1_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(ctl_reg_en_1[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_1_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_1[0]),
        .Q(ctl_reg_en_1[1]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_temp),
        .Q(ctl_reg_en_2[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_2[0]),
        .Q(ctl_reg_en_2[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    ctl_reg_en_temp_inferred_i_1
       (.I0(ctl_reg_en_1[1]),
        .O(ctl_reg_en_temp));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[0] 
       (.C(clk),
        .CE(\ctl_reg[1]_i_1_n_0 ),
        .D(shift_reg_in[0]),
        .Q(ctl_reg[0]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[1] 
       (.C(clk),
        .CE(\ctl_reg[1]_i_1_n_0 ),
        .D(shift_reg_in[1]),
        .Q(ctl_reg[1]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(D),
        .Q(icn_cmd_din_temp),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_en_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(ICN_CMD_EN_I),
        .Q(icn_cmd_en_temp),
        .R(1'b0));
  initial assign \shift_reg_in_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[1]),
        .Q(shift_reg_in[0]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(icn_cmd_din_temp),
        .Q(shift_reg_in[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xsdbm_v3_0_0_ctl_reg" *) 
module xsdbm_v3_0_0_ctl_reg__parameterized0
   (burst_wd_in_rdy_last,
    burst_wd_in_rdy_rise_edge,
    burst_wd_in_rdy_rise_edge0,
    clk,
    \ctl_reg_reg[0]_0 ,
    icn_cmd_en_temp_reg_0,
    sl_dwe_r0__0,
    wdc_eq_zero_reg,
    D,
    SR,
    \ctl_reg_en_2_reg[1]_0 ,
    \ctl_reg_reg[18]_0 ,
    icn_cmd_din_temp_reg_0,
    m_bscan_tck,
    out);
  input burst_wd_in_rdy_last;
  input burst_wd_in_rdy_rise_edge;
  output burst_wd_in_rdy_rise_edge0;
  input clk;
  output \ctl_reg_reg[0]_0 ;
  input icn_cmd_en_temp_reg_0;
  output sl_dwe_r0__0;
  input wdc_eq_zero_reg;
  output [0:0]D;
  input [0:0]SR;
  output [0:0]\ctl_reg_en_2_reg[1]_0 ;
  output [18:0]\ctl_reg_reg[18]_0 ;
  input [0:0]icn_cmd_din_temp_reg_0;
  input [0:0]m_bscan_tck;
  input [0:0]out;

  wire [0:0]SR;
  wire burst_wd_in_rdy_last;
  wire burst_wd_in_rdy_rise_edge;
  wire burst_wd_in_rdy_rise_edge0;
  wire clk;
  (* DONT_TOUCH *) wire [27:0]ctl_reg;
  wire \ctl_reg[27]_i_1_n_0 ;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_1;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_2;
  (* DONT_TOUCH *) wire ctl_reg_en_temp;
  wire \ctl_reg_reg[0]_0 ;
  (* DONT_TOUCH *) wire icn_cmd_din_temp;
  wire [0:0]icn_cmd_din_temp_reg_0;
  (* DONT_TOUCH *) wire icn_cmd_en_temp;
  wire icn_cmd_en_temp_reg_0;
  wire [0:0]m_bscan_tck;
  wire [0:0]out;
  (* async_reg = "true" *) wire [27:0]shift_reg_in;
  wire sl_dwe_r0__0;
  wire \sl_dwe_r[0]_i_3_n_0 ;
  wire wdc_eq_zero_i_3_n_0;
  wire wdc_eq_zero_i_4_n_0;
  wire wdc_eq_zero_i_5_n_0;
  wire wdc_eq_zero_i_8_n_0;
  wire wdc_eq_zero_i_9_n_0;
  wire wdc_eq_zero_reg;

  assign D[0] = shift_reg_in[0];
  assign \ctl_reg_en_2_reg[1]_0 [0] = ctl_reg_en_2[1];
  assign \ctl_reg_reg[18]_0 [18:0] = ctl_reg[18:0];
  LUT2 #(
    .INIT(4'h2)) 
    burst_wd_in_rdy_rise_edge_i_1
       (.I0(ctl_reg_en_2[1]),
        .I1(burst_wd_in_rdy_last),
        .O(burst_wd_in_rdy_rise_edge0));
  LUT2 #(
    .INIT(4'h8)) 
    \ctl_reg[27]_i_1 
       (.I0(ctl_reg_en_temp),
        .I1(ctl_reg_en_2[0]),
        .O(\ctl_reg[27]_i_1_n_0 ));
  initial assign \ctl_reg_en_1_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(ctl_reg_en_1[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_1_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_1[0]),
        .Q(ctl_reg_en_1[1]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_temp),
        .Q(ctl_reg_en_2[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_2[0]),
        .Q(ctl_reg_en_2[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    ctl_reg_en_temp_inferred_i_1__0
       (.I0(ctl_reg_en_1[1]),
        .O(ctl_reg_en_temp));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[0] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[0]),
        .Q(ctl_reg[0]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[10] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[10]),
        .Q(ctl_reg[10]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[11] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[11]),
        .Q(ctl_reg[11]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[12] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[12]),
        .Q(ctl_reg[12]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[13] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[13]),
        .Q(ctl_reg[13]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[14] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[14]),
        .Q(ctl_reg[14]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[15] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[15]),
        .Q(ctl_reg[15]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[16] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[16]),
        .Q(ctl_reg[16]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[17] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[17]),
        .Q(ctl_reg[17]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[18] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[18]),
        .Q(ctl_reg[18]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[19] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[19]),
        .Q(ctl_reg[19]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[1] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[1]),
        .Q(ctl_reg[1]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[20] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[20]),
        .Q(ctl_reg[20]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[21] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[21]),
        .Q(ctl_reg[21]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[22] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[22]),
        .Q(ctl_reg[22]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[23] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[23]),
        .Q(ctl_reg[23]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[24] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[24]),
        .Q(ctl_reg[24]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[25] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[25]),
        .Q(ctl_reg[25]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[26] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[26]),
        .Q(ctl_reg[26]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[27] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[27]),
        .Q(ctl_reg[27]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[2] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[2]),
        .Q(ctl_reg[2]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[3] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[3]),
        .Q(ctl_reg[3]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[4] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[4]),
        .Q(ctl_reg[4]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[5] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[5]),
        .Q(ctl_reg[5]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[6] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[6]),
        .Q(ctl_reg[6]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[7] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[7]),
        .Q(ctl_reg[7]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[8] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[8]),
        .Q(ctl_reg[8]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[9] 
       (.C(clk),
        .CE(\ctl_reg[27]_i_1_n_0 ),
        .D(shift_reg_in[9]),
        .Q(ctl_reg[9]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_din_temp_reg_0),
        .Q(icn_cmd_din_temp),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_en_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp_reg_0),
        .Q(icn_cmd_en_temp),
        .R(1'b0));
  initial assign \shift_reg_in_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[1]),
        .Q(shift_reg_in[0]),
        .R(SR));
  initial assign \shift_reg_in_reg[10] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[10] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[11]),
        .Q(shift_reg_in[10]),
        .R(SR));
  initial assign \shift_reg_in_reg[11] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[11] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[12]),
        .Q(shift_reg_in[11]),
        .R(SR));
  initial assign \shift_reg_in_reg[12] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[12] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[13]),
        .Q(shift_reg_in[12]),
        .R(SR));
  initial assign \shift_reg_in_reg[13] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[13] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[14]),
        .Q(shift_reg_in[13]),
        .R(SR));
  initial assign \shift_reg_in_reg[14] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[14] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[15]),
        .Q(shift_reg_in[14]),
        .R(SR));
  initial assign \shift_reg_in_reg[15] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[15] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[16]),
        .Q(shift_reg_in[15]),
        .R(SR));
  initial assign \shift_reg_in_reg[16] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[16] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[17]),
        .Q(shift_reg_in[16]),
        .R(SR));
  initial assign \shift_reg_in_reg[17] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[17] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[18]),
        .Q(shift_reg_in[17]),
        .R(SR));
  initial assign \shift_reg_in_reg[18] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[18] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[19]),
        .Q(shift_reg_in[18]),
        .R(SR));
  initial assign \shift_reg_in_reg[19] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[19] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[20]),
        .Q(shift_reg_in[19]),
        .R(SR));
  initial assign \shift_reg_in_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[2]),
        .Q(shift_reg_in[1]),
        .R(SR));
  initial assign \shift_reg_in_reg[20] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[20] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[21]),
        .Q(shift_reg_in[20]),
        .R(SR));
  initial assign \shift_reg_in_reg[21] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[21] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[22]),
        .Q(shift_reg_in[21]),
        .R(SR));
  initial assign \shift_reg_in_reg[22] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[22] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[23]),
        .Q(shift_reg_in[22]),
        .R(SR));
  initial assign \shift_reg_in_reg[23] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[23] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[24]),
        .Q(shift_reg_in[23]),
        .R(SR));
  initial assign \shift_reg_in_reg[24] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[24] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[25]),
        .Q(shift_reg_in[24]),
        .R(SR));
  initial assign \shift_reg_in_reg[25] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[25] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[26]),
        .Q(shift_reg_in[25]),
        .R(SR));
  initial assign \shift_reg_in_reg[26] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[26] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[27]),
        .Q(shift_reg_in[26]),
        .R(SR));
  initial assign \shift_reg_in_reg[27] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[27] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(icn_cmd_din_temp),
        .Q(shift_reg_in[27]),
        .R(SR));
  initial assign \shift_reg_in_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[3]),
        .Q(shift_reg_in[2]),
        .R(SR));
  initial assign \shift_reg_in_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[3] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[4]),
        .Q(shift_reg_in[3]),
        .R(SR));
  initial assign \shift_reg_in_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[4] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[5]),
        .Q(shift_reg_in[4]),
        .R(SR));
  initial assign \shift_reg_in_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[5] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[6]),
        .Q(shift_reg_in[5]),
        .R(SR));
  initial assign \shift_reg_in_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[6] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[7]),
        .Q(shift_reg_in[6]),
        .R(SR));
  initial assign \shift_reg_in_reg[7] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[7] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[8]),
        .Q(shift_reg_in[7]),
        .R(SR));
  initial assign \shift_reg_in_reg[8] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[8] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[9]),
        .Q(shift_reg_in[8]),
        .R(SR));
  initial assign \shift_reg_in_reg[9] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[9] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[10]),
        .Q(shift_reg_in[9]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000002)) 
    \sl_dwe_r[0]_i_2 
       (.I0(\sl_dwe_r[0]_i_3_n_0 ),
        .I1(ctl_reg[27]),
        .I2(ctl_reg[26]),
        .I3(ctl_reg[25]),
        .I4(ctl_reg[24]),
        .I5(ctl_reg[19]),
        .O(sl_dwe_r0__0));
  LUT4 #(
    .INIT(16'h0001)) 
    \sl_dwe_r[0]_i_3 
       (.I0(ctl_reg[21]),
        .I1(ctl_reg[20]),
        .I2(ctl_reg[23]),
        .I3(ctl_reg[22]),
        .O(\sl_dwe_r[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFEEEEEEE)) 
    wdc_eq_zero_i_1
       (.I0(out),
        .I1(wdc_eq_zero_reg),
        .I2(wdc_eq_zero_i_3_n_0),
        .I3(wdc_eq_zero_i_4_n_0),
        .I4(wdc_eq_zero_i_5_n_0),
        .O(\ctl_reg_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    wdc_eq_zero_i_3
       (.I0(wdc_eq_zero_i_8_n_0),
        .I1(ctl_reg[0]),
        .I2(burst_wd_in_rdy_rise_edge),
        .I3(ctl_reg[2]),
        .I4(ctl_reg[1]),
        .I5(wdc_eq_zero_i_9_n_0),
        .O(wdc_eq_zero_i_3_n_0));
  LUT6 #(
    .INIT(64'h0045004500000045)) 
    wdc_eq_zero_i_4
       (.I0(ctl_reg[5]),
        .I1(ctl_reg[4]),
        .I2(ctl_reg[3]),
        .I3(ctl_reg[8]),
        .I4(ctl_reg[6]),
        .I5(ctl_reg[7]),
        .O(wdc_eq_zero_i_4_n_0));
  LUT6 #(
    .INIT(64'h0045004500000045)) 
    wdc_eq_zero_i_5
       (.I0(ctl_reg[11]),
        .I1(ctl_reg[10]),
        .I2(ctl_reg[9]),
        .I3(ctl_reg[14]),
        .I4(ctl_reg[12]),
        .I5(ctl_reg[13]),
        .O(wdc_eq_zero_i_5_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    wdc_eq_zero_i_8
       (.I0(ctl_reg[8]),
        .I1(ctl_reg[7]),
        .I2(ctl_reg[5]),
        .I3(ctl_reg[4]),
        .O(wdc_eq_zero_i_8_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    wdc_eq_zero_i_9
       (.I0(ctl_reg[10]),
        .I1(ctl_reg[11]),
        .I2(ctl_reg[13]),
        .I3(ctl_reg[14]),
        .I4(ctl_reg[16]),
        .I5(ctl_reg[15]),
        .O(wdc_eq_zero_i_9_n_0));
endmodule

(* ORIG_REF_NAME = "xsdbm_v3_0_0_ctl_reg" *) 
module xsdbm_v3_0_0_ctl_reg__parameterized1
   (ICN_CMD_EN_I,
    addr_in_rdy_last,
    addr_in_rdy_rise_edge0,
    clk,
    \ctl_reg_reg[0]_0 ,
    iTDO_i_4_0,
    iTDO_next,
    iTDO_reg,
    iTDO_reg_0,
    iTDO_reg_1,
    iTDO_reg_2,
    iTDO_reg_3,
    iTDO_reg_4,
    ma_rd_req,
    p_0_in_0,
    p_1_in1_in,
    D,
    E,
    Q,
    SR,
    \ctl_reg_en_2_reg[1]_0 ,
    \ctl_reg_reg[17]_0 ,
    iTDO_i_4_1,
    icn_cmd_din_temp_reg_0,
    \icn_cmd_en_reg[6] ,
    m_bscan_tck,
    out,
    \shift_reg_in_reg[17]_0 );
  input ICN_CMD_EN_I;
  input addr_in_rdy_last;
  output addr_in_rdy_rise_edge0;
  input clk;
  input \ctl_reg_reg[0]_0 ;
  input iTDO_i_4_0;
  output iTDO_next;
  input iTDO_reg;
  input iTDO_reg_0;
  input iTDO_reg_1;
  input iTDO_reg_2;
  input iTDO_reg_3;
  input iTDO_reg_4;
  output ma_rd_req;
  input p_0_in_0;
  input p_1_in1_in;
  input [0:0]D;
  output [0:0]E;
  input [0:0]Q;
  output [0:0]SR;
  output [0:0]\ctl_reg_en_2_reg[1]_0 ;
  output [17:0]\ctl_reg_reg[17]_0 ;
  input [0:0]iTDO_i_4_1;
  input [0:0]icn_cmd_din_temp_reg_0;
  output [0:0]\icn_cmd_en_reg[6] ;
  input [0:0]m_bscan_tck;
  output [0:0]out;
  output [0:0]\shift_reg_in_reg[17]_0 ;

  wire [0:0]D;
  wire [0:0]E;
  wire ICN_CMD_EN_I;
  wire [0:0]Q;
  wire [0:0]SR;
  wire addr_in_rdy_last;
  wire addr_in_rdy_rise_edge0;
  wire clk;
  (* DONT_TOUCH *) wire [17:0]ctl_reg;
  wire \ctl_reg[17]_i_1_n_0 ;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_1;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_2;
  (* DONT_TOUCH *) wire ctl_reg_en_temp;
  wire \ctl_reg_reg[0]_0 ;
  wire iTDO_i_4_0;
  wire [0:0]iTDO_i_4_1;
  wire iTDO_i_4_n_0;
  wire iTDO_i_8_n_0;
  wire iTDO_next;
  wire iTDO_reg;
  wire iTDO_reg_0;
  wire iTDO_reg_1;
  wire iTDO_reg_2;
  wire iTDO_reg_3;
  wire iTDO_reg_4;
  (* DONT_TOUCH *) wire icn_cmd_din_temp;
  wire [0:0]icn_cmd_din_temp_reg_0;
  wire [0:0]\icn_cmd_en_reg[6] ;
  (* DONT_TOUCH *) wire icn_cmd_en_temp;
  wire [0:0]m_bscan_tck;
  wire ma_rd_req;
  wire p_0_in_0;
  wire p_1_in1_in;
  (* async_reg = "true" *) wire [17:0]shift_reg_in;
  wire [0:0]\shift_reg_in_reg[17]_0 ;

  assign \ctl_reg_en_2_reg[1]_0 [0] = ctl_reg_en_2[1];
  assign \ctl_reg_reg[17]_0 [17:0] = ctl_reg;
  assign out[0] = shift_reg_in[17];
  LUT2 #(
    .INIT(4'h2)) 
    addr_in_rdy_rise_edge_i_1
       (.I0(ctl_reg_en_2[1]),
        .I1(addr_in_rdy_last),
        .O(addr_in_rdy_rise_edge0));
  LUT2 #(
    .INIT(4'h8)) 
    \ctl_reg[17]_i_1 
       (.I0(ctl_reg_en_temp),
        .I1(ctl_reg_en_2[0]),
        .O(\ctl_reg[17]_i_1_n_0 ));
  initial assign \ctl_reg_en_1_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(ctl_reg_en_1[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_1_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_1[0]),
        .Q(ctl_reg_en_1[1]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_temp),
        .Q(ctl_reg_en_2[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_2[0]),
        .Q(ctl_reg_en_2[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    ctl_reg_en_temp_inferred_i_1__1
       (.I0(ctl_reg_en_1[1]),
        .O(ctl_reg_en_temp));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[0] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[0]),
        .Q(ctl_reg[0]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[10] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[10]),
        .Q(ctl_reg[10]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[11] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[11]),
        .Q(ctl_reg[11]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[12] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[12]),
        .Q(ctl_reg[12]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[13] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[13]),
        .Q(ctl_reg[13]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[14] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[14]),
        .Q(ctl_reg[14]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[15] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[15]),
        .Q(ctl_reg[15]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[16] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[16]),
        .Q(ctl_reg[16]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[17] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[17]),
        .Q(ctl_reg[17]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[1] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[1]),
        .Q(ctl_reg[1]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[2] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[2]),
        .Q(ctl_reg[2]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[3] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[3]),
        .Q(ctl_reg[3]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[4] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[4]),
        .Q(ctl_reg[4]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[5] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[5]),
        .Q(ctl_reg[5]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[6] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[6]),
        .Q(ctl_reg[6]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[7] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[7]),
        .Q(ctl_reg[7]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[8] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[8]),
        .Q(ctl_reg[8]),
        .R(\ctl_reg_reg[0]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[9] 
       (.C(clk),
        .CE(\ctl_reg[17]_i_1_n_0 ),
        .D(shift_reg_in[9]),
        .Q(ctl_reg[9]),
        .R(\ctl_reg_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h8888A8AA)) 
    iTDO_i_1
       (.I0(iTDO_reg),
        .I1(iTDO_reg_0),
        .I2(iTDO_i_4_n_0),
        .I3(iTDO_reg_1),
        .I4(iTDO_reg_2),
        .O(iTDO_next));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEEEEEE)) 
    iTDO_i_4
       (.I0(iTDO_reg_3),
        .I1(iTDO_reg_4),
        .I2(shift_reg_in[17]),
        .I3(p_0_in_0),
        .I4(Q),
        .I5(iTDO_i_8_n_0),
        .O(iTDO_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    iTDO_i_8
       (.I0(p_1_in1_in),
        .I1(shift_reg_in[0]),
        .I2(D),
        .I3(iTDO_i_4_0),
        .I4(ICN_CMD_EN_I),
        .I5(iTDO_i_4_1),
        .O(iTDO_i_8_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_din_temp_reg_0),
        .Q(icn_cmd_din_temp),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_en_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_1_in1_in),
        .Q(icn_cmd_en_temp),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    last_flag_i_1
       (.I0(ctl_reg_en_2[1]),
        .I1(ctl_reg[17]),
        .O(ma_rd_req));
  LUT2 #(
    .INIT(4'hB)) 
    \shift_bit_count[3]_i_1 
       (.I0(shift_reg_in[17]),
        .I1(p_0_in_0),
        .O(SR));
  LUT2 #(
    .INIT(4'h7)) 
    \shift_bit_count[3]_i_1__0 
       (.I0(shift_reg_in[17]),
        .I1(p_0_in_0),
        .O(\shift_reg_in_reg[17]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \shift_reg_in[15]_i_1 
       (.I0(p_0_in_0),
        .I1(shift_reg_in[17]),
        .O(E));
  LUT2 #(
    .INIT(4'h8)) 
    \shift_reg_in[15]_i_1__0 
       (.I0(p_0_in_0),
        .I1(shift_reg_in[17]),
        .O(\icn_cmd_en_reg[6] ));
  initial assign \shift_reg_in_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[1]),
        .Q(shift_reg_in[0]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[10] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[10] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[11]),
        .Q(shift_reg_in[10]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[11] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[11] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[12]),
        .Q(shift_reg_in[11]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[12] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[12] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[13]),
        .Q(shift_reg_in[12]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[13] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[13] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[14]),
        .Q(shift_reg_in[13]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[14] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[14] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[15]),
        .Q(shift_reg_in[14]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[15] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[15] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[16]),
        .Q(shift_reg_in[15]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[16] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[16] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[17]),
        .Q(shift_reg_in[16]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[17] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[17] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(icn_cmd_din_temp),
        .Q(shift_reg_in[17]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[2]),
        .Q(shift_reg_in[1]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[3]),
        .Q(shift_reg_in[2]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[3] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[4]),
        .Q(shift_reg_in[3]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[4] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[5]),
        .Q(shift_reg_in[4]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[5] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[6]),
        .Q(shift_reg_in[5]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[6] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[7]),
        .Q(shift_reg_in[6]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[7] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[7] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[8]),
        .Q(shift_reg_in[7]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[8] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[8] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[9]),
        .Q(shift_reg_in[8]),
        .R(\ctl_reg_reg[0]_0 ));
  initial assign \shift_reg_in_reg[9] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[9] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[10]),
        .Q(shift_reg_in[9]),
        .R(\ctl_reg_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "xsdbm_v3_0_0_ctl_reg" *) 
module xsdbm_v3_0_0_ctl_reg__parameterized2
   (clk,
    icn_cmd_en_temp_reg_0,
    out,
    D,
    icn_cmd_din_temp_reg_0,
    m_bscan_tck);
  input clk;
  input icn_cmd_en_temp_reg_0;
  input out;
  output [0:0]D;
  input [0:0]icn_cmd_din_temp_reg_0;
  input [0:0]m_bscan_tck;

  wire clk;
  (* DONT_TOUCH *) wire [2:0]ctl_reg;
  wire \ctl_reg[2]_i_1_n_0 ;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_1;
  (* DONT_TOUCH *) (* RTL_KEEP = "yes" *) (* async_reg = "true" *) wire [1:0]ctl_reg_en_2;
  (* DONT_TOUCH *) wire ctl_reg_en_temp;
  (* DONT_TOUCH *) wire icn_cmd_din_temp;
  wire [0:0]icn_cmd_din_temp_reg_0;
  (* DONT_TOUCH *) wire icn_cmd_en_temp;
  wire icn_cmd_en_temp_reg_0;
  wire [0:0]m_bscan_tck;
  wire out;
  (* async_reg = "true" *) wire [2:0]shift_reg_in;

  assign D[0] = shift_reg_in[0];
  LUT2 #(
    .INIT(4'h8)) 
    \ctl_reg[2]_i_1 
       (.I0(ctl_reg_en_temp),
        .I1(ctl_reg_en_2[0]),
        .O(\ctl_reg[2]_i_1_n_0 ));
  initial assign \ctl_reg_en_1_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(ctl_reg_en_1[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_1_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_1_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_1[0]),
        .Q(ctl_reg_en_1[1]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_temp),
        .Q(ctl_reg_en_2[0]),
        .R(1'b0));
  initial assign \ctl_reg_en_2_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \ctl_reg_en_2_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(ctl_reg_en_2[0]),
        .Q(ctl_reg_en_2[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    ctl_reg_en_temp_inferred_i_1__2
       (.I0(ctl_reg_en_1[1]),
        .O(ctl_reg_en_temp));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[0] 
       (.C(clk),
        .CE(\ctl_reg[2]_i_1_n_0 ),
        .D(shift_reg_in[0]),
        .Q(ctl_reg[0]),
        .R(out));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[1] 
       (.C(clk),
        .CE(\ctl_reg[2]_i_1_n_0 ),
        .D(shift_reg_in[1]),
        .Q(ctl_reg[1]),
        .R(out));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ctl_reg_reg[2] 
       (.C(clk),
        .CE(\ctl_reg[2]_i_1_n_0 ),
        .D(shift_reg_in[2]),
        .Q(ctl_reg[2]),
        .R(out));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_din_temp_reg_0),
        .Q(icn_cmd_din_temp),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_en_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp_reg_0),
        .Q(icn_cmd_en_temp),
        .R(1'b0));
  initial assign \shift_reg_in_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[1]),
        .Q(shift_reg_in[0]),
        .R(out));
  initial assign \shift_reg_in_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(shift_reg_in[2]),
        .Q(shift_reg_in[1]),
        .R(out));
  initial assign \shift_reg_in_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(icn_cmd_din_temp),
        .Q(shift_reg_in[2]),
        .R(out));
endmodule

module xsdbm_v3_0_0_icon
   (SYNC_reg,
    iDATA_CMD_reg_0,
    iSYNC,
    \iTARGET_reg[14] ,
    \iTARGET_reg[15] ,
    \iTARGET_reg[6] ,
    \iTARGET_reg[9] ,
    \iTARGET_reg[9]_0 ,
    \iTARGET_reg[9]_1 ,
    \iTARGET_reg[9]_2 ,
    iTDO_next,
    \icn_cmd_en_reg[7] ,
    in0,
    out,
    D,
    Q,
    m_bscan_tck);
  output SYNC_reg;
  input iDATA_CMD_reg_0;
  output iSYNC;
  output \iTARGET_reg[14] ;
  output \iTARGET_reg[15] ;
  input \iTARGET_reg[6] ;
  output \iTARGET_reg[9] ;
  output \iTARGET_reg[9]_0 ;
  output \iTARGET_reg[9]_1 ;
  output \iTARGET_reg[9]_2 ;
  input iTDO_next;
  input \icn_cmd_en_reg[7] ;
  output in0;
  input out;
  output [0:0]D;
  output [3:0]Q;
  input [0:0]m_bscan_tck;

  wire [0:0]D;
  wire [3:0]Q;
  wire SYNC_reg;
  wire U_CMD_n_0;
  wire iDATA_CMD;
  wire iDATA_CMD_i_1_n_0;
  wire iDATA_CMD_reg_0;
  wire iSYNC;
  wire \iTARGET_reg[14] ;
  wire \iTARGET_reg[15] ;
  wire \iTARGET_reg[6] ;
  wire \iTARGET_reg[9] ;
  wire \iTARGET_reg[9]_0 ;
  wire \iTARGET_reg[9]_1 ;
  wire \iTARGET_reg[9]_2 ;
  wire iTDO_VEC_15;
  wire iTDO_next;
  wire \icn_cmd_en_reg[7] ;
  wire in0;
  wire [0:0]m_bscan_tck;
  wire out;

  xsdbm_v3_0_0_cmd_decode U_CMD
       (.D(D),
        .Q(Q),
        .SR(U_CMD_n_0),
        .SYNC_reg(SYNC_reg),
        .iDATA_CMD(iDATA_CMD),
        .\iTARGET_reg[14]_0 (\iTARGET_reg[14] ),
        .\iTARGET_reg[15]_0 (\iTARGET_reg[15] ),
        .\iTARGET_reg[6]_0 (\iTARGET_reg[6] ),
        .\iTARGET_reg[9]_0 (\iTARGET_reg[9] ),
        .\iTARGET_reg[9]_1 (\iTARGET_reg[9]_0 ),
        .\iTARGET_reg[9]_2 (\iTARGET_reg[9]_1 ),
        .\iTARGET_reg[9]_3 (\iTARGET_reg[9]_2 ),
        .iTDO_VEC_15(iTDO_VEC_15),
        .\icn_cmd_en_reg[7] (\icn_cmd_en_reg[7] ),
        .\icn_cmd_en_reg[7]_0 (iSYNC),
        .m_bscan_tck(m_bscan_tck));
  xsdbm_v3_0_0_stat U_STAT
       (.SR(U_CMD_n_0),
        .iTDO_VEC_15(iTDO_VEC_15),
        .m_bscan_tck(m_bscan_tck));
  xsdbm_v3_0_0_sync U_SYNC
       (.D(D),
        .iDATA_CMD(iDATA_CMD),
        .iSYNC(iSYNC),
        .m_bscan_tck(m_bscan_tck));
  LUT3 #(
    .INIT(8'h60)) 
    iDATA_CMD_i_1
       (.I0(iDATA_CMD),
        .I1(iDATA_CMD_reg_0),
        .I2(\iTARGET_reg[6] ),
        .O(iDATA_CMD_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    iDATA_CMD_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iDATA_CMD_i_1_n_0),
        .Q(iDATA_CMD),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    iTDI_reg_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(out),
        .Q(D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    iTDO_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iTDO_next),
        .Q(in0),
        .R(1'b0));
endmodule

module xsdbm_v3_0_0_icon2xsdb
   (clk,
    iSYNC,
    iTDO_next,
    iTDO_reg,
    iTDO_reg_0,
    \icn_cmd_en_reg[4] ,
    \icn_cmd_en_reg[5] ,
    \icn_cmd_en_reg[6] ,
    \icn_cmd_en_reg[7] ,
    \icn_cmd_en_reg[7]_0 ,
    out,
    D,
    Q,
    icn_cmd_din_reg,
    m_bscan_tck,
    sl_iport0_o,
    sl_oport0_i,
    \stat_reg_reg[2] );
  input clk;
  input iSYNC;
  output iTDO_next;
  input iTDO_reg;
  input iTDO_reg_0;
  input \icn_cmd_en_reg[4] ;
  input \icn_cmd_en_reg[5] ;
  input \icn_cmd_en_reg[6] ;
  input \icn_cmd_en_reg[7] ;
  input \icn_cmd_en_reg[7]_0 ;
  input out;
  output [0:0]D;
  input [3:0]Q;
  input [0:0]icn_cmd_din_reg;
  input [0:0]m_bscan_tck;
  output [35:0]sl_iport0_o;
  input [16:0]sl_oport0_i;
  input [2:0]\stat_reg_reg[2] ;

  wire [0:0]D;
  wire [3:0]Q;
  wire U_ICON_INTERFACE_n_44;
  wire U_ICON_INTERFACE_n_45;
  wire U_XSDB_BURST_WD_LEN_CONTROLLER_n_3;
  wire U_XSDB_BUS_CONTROLLER_n_14;
  wire U_XSDB_BUS_CONTROLLER_n_15;
  wire U_XSDB_BUS_CONTROLLER_n_5;
  wire U_XSDB_BUS_CONTROLLER_n_6;
  wire abort_rd_edge;
  wire [16:0]addr_in;
  wire addr_in_rdy;
  wire addr_in_rdy_last;
  wire addr_in_rdy_rise_edge;
  wire addr_in_rdy_rise_edge0;
  wire addr_inc_en;
  wire burst_en;
  wire burst_wd_in_rdy_last;
  wire burst_wd_in_rdy_rise_edge;
  wire burst_wd_in_rdy_rise_edge0;
  wire [16:0]burst_wd_len_in;
  wire burst_wd_len_in_rdy;
  wire clk;
  wire [17:17]cmd5_reg_dout;
  wire dec_wdc;
  wire iSYNC;
  wire iTDO_next;
  wire iTDO_reg;
  wire iTDO_reg_0;
  wire [0:0]icn_cmd_din_reg;
  wire \icn_cmd_en_reg[4] ;
  wire \icn_cmd_en_reg[5] ;
  wire \icn_cmd_en_reg[6] ;
  wire \icn_cmd_en_reg[7] ;
  wire \icn_cmd_en_reg[7]_0 ;
  wire in_write_mode;
  wire [0:0]m_bscan_tck;
  wire ma_idle_mode;
  wire ma_normal_mode;
  wire [15:0]ma_rd_din;
  wire ma_rd_full;
  wire ma_rd_push;
  wire ma_rd_req;
  wire ma_read_mode;
  wire ma_rst;
  wire ma_wr_empty;
  wire ma_wr_pop;
  wire out;
  wire sl_berr_r;
  wire sl_drdy;
  wire sl_dwe_r0__0;
  wire [35:0]sl_iport0_o;
  wire [16:0]sl_oport0_i;
  wire sl_rst_mask;
  wire [2:0]\stat_reg_reg[2] ;
  wire wdc_eq_zero;

  xsdbm_v3_0_0_if U_ICON_INTERFACE
       (.D(D),
        .EMPTY_O(ma_wr_empty),
        .FULL_O(ma_rd_full),
        .Q(Q),
        .RD_EN_I(ma_wr_pop),
        .WR_EN_I(ma_rd_push),
        .abort_rd_edge(abort_rd_edge),
        .addr_in_rdy_last(addr_in_rdy_last),
        .addr_in_rdy_rise_edge0(addr_in_rdy_rise_edge0),
        .burst_wd_in_rdy_last(burst_wd_in_rdy_last),
        .burst_wd_in_rdy_rise_edge(burst_wd_in_rdy_rise_edge),
        .burst_wd_in_rdy_rise_edge0(burst_wd_in_rdy_rise_edge0),
        .clk(clk),
        .\ctl_reg_en_2_reg[1] (burst_wd_len_in_rdy),
        .\ctl_reg_en_2_reg[1]_0 (addr_in_rdy),
        .\ctl_reg_reg[0] (U_ICON_INTERFACE_n_44),
        .\ctl_reg_reg[17] ({cmd5_reg_dout,addr_in}),
        .\ctl_reg_reg[18] ({addr_inc_en,burst_en,burst_wd_len_in}),
        .\gpr1.dout_i_reg[13] (ma_rd_din),
        .iSYNC(iSYNC),
        .iTDO_next(iTDO_next),
        .iTDO_reg(iTDO_reg),
        .iTDO_reg_0(iTDO_reg_0),
        .icn_cmd_din_reg_0(icn_cmd_din_reg),
        .\icn_cmd_en_reg[0]_0 (out),
        .\icn_cmd_en_reg[4]_0 (\icn_cmd_en_reg[4] ),
        .\icn_cmd_en_reg[5]_0 (\icn_cmd_en_reg[5] ),
        .\icn_cmd_en_reg[6]_0 (\icn_cmd_en_reg[6] ),
        .\icn_cmd_en_reg[7]_0 (\icn_cmd_en_reg[7] ),
        .\icn_cmd_en_reg[7]_1 (\icn_cmd_en_reg[7]_0 ),
        .m_bscan_tck(m_bscan_tck),
        .ma_rd_req(ma_rd_req),
        .out({sl_rst_mask,ma_rst}),
        .ram_full_i_reg(U_ICON_INTERFACE_n_45),
        .sl_dwe_r0__0(sl_dwe_r0__0),
        .sl_iport0_o(sl_iport0_o[35:20]),
        .\stat_reg_reg[2] ({sl_berr_r,U_XSDB_BUS_CONTROLLER_n_5,U_XSDB_BUS_CONTROLLER_n_6}),
        .\stat_reg_reg[2]_0 (\stat_reg_reg[2] ),
        .\stat_reg_reg[3] ({in_write_mode,ma_read_mode,ma_idle_mode,ma_normal_mode}),
        .wdc_eq_zero_reg(U_XSDB_BURST_WD_LEN_CONTROLLER_n_3));
  xsdbm_v3_0_0_addr_ctl U_XSDB_ADDRESS_CONTROLLER
       (.addr_in_rdy_last(addr_in_rdy_last),
        .addr_in_rdy_last_reg_0(addr_in_rdy),
        .addr_in_rdy_rise_edge(addr_in_rdy_rise_edge),
        .addr_in_rdy_rise_edge0(addr_in_rdy_rise_edge0),
        .\addr_reg[0]_0 (U_XSDB_BUS_CONTROLLER_n_14),
        .\addr_reg[16]_0 (addr_in),
        .clk(clk),
        .out(ma_rst),
        .sl_iport0_o(sl_iport0_o[19:3]));
  xsdbm_v3_0_0_burst_wdlen_ctl U_XSDB_BURST_WD_LEN_CONTROLLER
       (.burst_wd_in_rdy_last(burst_wd_in_rdy_last),
        .burst_wd_in_rdy_last_reg_0(burst_wd_len_in_rdy),
        .burst_wd_in_rdy_rise_edge(burst_wd_in_rdy_rise_edge),
        .burst_wd_in_rdy_rise_edge0(burst_wd_in_rdy_rise_edge0),
        .\burst_wd_reg[16]_0 (U_XSDB_BUS_CONTROLLER_n_15),
        .clk(clk),
        .dec_wdc(dec_wdc),
        .dec_wdc_r_reg(U_XSDB_BURST_WD_LEN_CONTROLLER_n_3),
        .out(ma_rst),
        .wdc_eq_zero(wdc_eq_zero),
        .wdc_eq_zero_reg_0(U_ICON_INTERFACE_n_44),
        .wdc_eq_zero_reg_1({burst_en,burst_wd_len_in}));
  xsdbm_v3_0_0_bus_ctl U_XSDB_BUS_CONTROLLER
       (.EMPTY_O(ma_wr_empty),
        .FULL_O(ma_rd_full),
        .\G_NEG_EDGE.flag_reg (cmd5_reg_dout),
        .\G_NEG_EDGE.flag_reg_0 (addr_in_rdy),
        .RD_EN_I(ma_wr_pop),
        .WR_EN_I(ma_rd_push),
        .abort_rd_edge(abort_rd_edge),
        .addr_in_rdy_rise_edge(addr_in_rdy_rise_edge),
        .\addr_reg[0] ({addr_inc_en,burst_en}),
        .burst_wd_in_rdy_rise_edge(burst_wd_in_rdy_rise_edge),
        .clk(clk),
        .\current_state_reg[1]_0 (U_ICON_INTERFACE_n_45),
        .dec_wdc(dec_wdc),
        .dec_wdc_r_reg_0(U_XSDB_BUS_CONTROLLER_n_15),
        .in_write_mode_reg_0({in_write_mode,ma_read_mode,ma_idle_mode,ma_normal_mode}),
        .inc_addr_r_reg_0(U_XSDB_BUS_CONTROLLER_n_14),
        .ma_rd_req(ma_rd_req),
        .out({sl_rst_mask,ma_rst}),
        .\sl_berr_r_reg[0]_0 ({sl_berr_r,U_XSDB_BUS_CONTROLLER_n_5,U_XSDB_BUS_CONTROLLER_n_6}),
        .sl_drdy(sl_drdy),
        .sl_dwe_r0__0(sl_dwe_r0__0),
        .sl_iport0_o(sl_iport0_o[2:0]),
        .wdc_eq_zero(wdc_eq_zero));
  xsdbm_v3_0_0_bus_mstr2sl_if U_XSDB_BUS_MSTR2SL_PORT_IFACE
       (.Q(ma_rd_din),
        .clk(clk),
        .sl_drdy(sl_drdy),
        .sl_oport0_i(sl_oport0_i));
endmodule

module xsdbm_v3_0_0_if
   (EMPTY_O,
    FULL_O,
    RD_EN_I,
    WR_EN_I,
    abort_rd_edge,
    addr_in_rdy_last,
    addr_in_rdy_rise_edge0,
    burst_wd_in_rdy_last,
    burst_wd_in_rdy_rise_edge,
    burst_wd_in_rdy_rise_edge0,
    clk,
    \ctl_reg_reg[0] ,
    iSYNC,
    iTDO_next,
    iTDO_reg,
    iTDO_reg_0,
    \icn_cmd_en_reg[0]_0 ,
    \icn_cmd_en_reg[4]_0 ,
    \icn_cmd_en_reg[5]_0 ,
    \icn_cmd_en_reg[6]_0 ,
    \icn_cmd_en_reg[7]_0 ,
    \icn_cmd_en_reg[7]_1 ,
    ma_rd_req,
    ram_full_i_reg,
    sl_dwe_r0__0,
    wdc_eq_zero_reg,
    D,
    Q,
    \ctl_reg_en_2_reg[1] ,
    \ctl_reg_en_2_reg[1]_0 ,
    \ctl_reg_reg[17] ,
    \ctl_reg_reg[18] ,
    \gpr1.dout_i_reg[13] ,
    icn_cmd_din_reg_0,
    m_bscan_tck,
    out,
    sl_iport0_o,
    \stat_reg_reg[2] ,
    \stat_reg_reg[2]_0 ,
    \stat_reg_reg[3] );
  output EMPTY_O;
  output FULL_O;
  input RD_EN_I;
  input WR_EN_I;
  input abort_rd_edge;
  input addr_in_rdy_last;
  output addr_in_rdy_rise_edge0;
  input burst_wd_in_rdy_last;
  input burst_wd_in_rdy_rise_edge;
  output burst_wd_in_rdy_rise_edge0;
  input clk;
  output \ctl_reg_reg[0] ;
  input iSYNC;
  output iTDO_next;
  input iTDO_reg;
  input iTDO_reg_0;
  input \icn_cmd_en_reg[0]_0 ;
  input \icn_cmd_en_reg[4]_0 ;
  input \icn_cmd_en_reg[5]_0 ;
  input \icn_cmd_en_reg[6]_0 ;
  input \icn_cmd_en_reg[7]_0 ;
  input \icn_cmd_en_reg[7]_1 ;
  output ma_rd_req;
  output ram_full_i_reg;
  output sl_dwe_r0__0;
  input wdc_eq_zero_reg;
  output [0:0]D;
  input [3:0]Q;
  output [0:0]\ctl_reg_en_2_reg[1] ;
  output [0:0]\ctl_reg_en_2_reg[1]_0 ;
  output [17:0]\ctl_reg_reg[17] ;
  output [18:0]\ctl_reg_reg[18] ;
  input [15:0]\gpr1.dout_i_reg[13] ;
  input [0:0]icn_cmd_din_reg_0;
  input [0:0]m_bscan_tck;
  output [1:0]out;
  output [15:0]sl_iport0_o;
  input [2:0]\stat_reg_reg[2] ;
  input [2:0]\stat_reg_reg[2]_0 ;
  input [3:0]\stat_reg_reg[3] ;

  wire [0:0]D;
  wire EMPTY_O;
  wire FULL_O;
  wire ICN_CMD_EN_I;
  wire [3:0]Q;
  wire RD_EN_I;
  wire U_CMD2_n_0;
  wire U_CMD3_n_0;
  wire U_CMD5_n_21;
  wire U_CMD5_n_22;
  wire U_CMD5_n_24;
  wire U_CMD6_RD_n_0;
  wire U_CMD7_STAT_n_0;
  wire U_STATIC_STATUS_n_0;
  wire WR_EN_I;
  wire abort_rd_edge;
  wire addr_in_rdy_last;
  wire addr_in_rdy_rise_edge0;
  wire burst_wd_in_rdy_last;
  wire burst_wd_in_rdy_rise_edge;
  wire burst_wd_in_rdy_rise_edge0;
  wire clk;
  wire [17:17]cmd5_shreg;
  wire [0:0]\ctl_reg_en_2_reg[1] ;
  wire [0:0]\ctl_reg_en_2_reg[1]_0 ;
  wire \ctl_reg_reg[0] ;
  wire [17:0]\ctl_reg_reg[17] ;
  wire [18:0]\ctl_reg_reg[18] ;
  wire datawr_cmd_en;
  wire [15:0]\gpr1.dout_i_reg[13] ;
  wire iSYNC;
  wire iTDO_next;
  wire iTDO_reg;
  wire iTDO_reg_0;
  wire icn_cmd_din;
  wire [0:0]icn_cmd_din_reg_0;
  wire icn_cmd_dout_bus_1;
  wire icn_cmd_dout_bus_4;
  wire icn_cmd_dout_dwr;
  wire icn_cmd_dout_next__0_n_0;
  wire icn_cmd_dout_next__1_n_0;
  wire icn_cmd_dout_next__2_n_0;
  wire icn_cmd_dout_next__3_n_0;
  wire icn_cmd_dout_next_n_0;
  wire \icn_cmd_en[3]_i_1_n_0 ;
  (* async_reg = "true" *) wire icn_cmd_en_5;
  (* async_reg = "true" *) wire icn_cmd_en_5_temp;
  wire \icn_cmd_en_reg[0]_0 ;
  wire \icn_cmd_en_reg[4]_0 ;
  wire \icn_cmd_en_reg[5]_0 ;
  wire \icn_cmd_en_reg[6]_0 ;
  wire \icn_cmd_en_reg[7]_0 ;
  wire \icn_cmd_en_reg[7]_1 ;
  wire \icn_cmd_en_reg_n_0_[0] ;
  wire \icn_cmd_en_reg_n_0_[2] ;
  wire \icn_cmd_en_reg_n_0_[3] ;
  wire \icn_cmd_en_reg_n_0_[4] ;
  wire \icn_cmd_en_reg_n_0_[7] ;
  wire [0:0]m_bscan_tck;
  wire ma_rd_req;
  wire ma_rst;
  (* async_reg = "true" *) wire ma_rst_1;
  (* async_reg = "true" *) wire ma_rst_2;
  wire [1:1]\^out ;
  wire p_0_in_0;
  wire p_1_in1_in;
  wire ram_full_i_reg;
  (* DONT_TOUCH *) wire rddata_rst;
  wire rddata_rst_i;
  wire sl_dwe_r0__0;
  wire [15:0]sl_iport0_o;
  wire [2:0]\stat_reg_reg[2] ;
  wire [2:0]\stat_reg_reg[2]_0 ;
  wire [3:0]\stat_reg_reg[3] ;
  wire wdc_eq_zero_reg;
  (* DONT_TOUCH *) wire wrdata_rst;
  wire wrdata_rst_i;

  assign out[1] = \^out [1];
  assign out[0] = ma_rst;
  xsdbm_v3_0_0_ctl_reg U_CMD1
       (.D(icn_cmd_din),
        .ICN_CMD_EN_I(ICN_CMD_EN_I),
        .clk(clk),
        .\ctl_reg_reg[1]_0 ({\^out ,ma_rst}),
        .m_bscan_tck(m_bscan_tck),
        .out(icn_cmd_dout_bus_1));
  xsdbm_v3_0_0_stat_reg U_CMD2
       (.D(icn_cmd_din),
        .clk(clk),
        .\icn_cmd_en_reg[2] (U_CMD2_n_0),
        .icn_cmd_en_temp_reg_0(\icn_cmd_en_reg_n_0_[2] ),
        .m_bscan_tck(m_bscan_tck),
        .\stat_reg_reg[3]_0 (\stat_reg_reg[3] ));
  xsdbm_v3_0_0_stat_reg__parameterized0 U_CMD3
       (.D(icn_cmd_din),
        .clk(clk),
        .iTDO_i_4(U_CMD2_n_0),
        .iTDO_i_4_0(U_CMD7_STAT_n_0),
        .icn_cmd_en_temp_reg_0(\icn_cmd_en_reg_n_0_[3] ),
        .m_bscan_tck(m_bscan_tck),
        .\shift_reg_in_reg[0]_0 (U_CMD3_n_0),
        .\stat_reg_reg[2]_0 (\stat_reg_reg[2] ));
  xsdbm_v3_0_0_ctl_reg__parameterized0 U_CMD4
       (.D(icn_cmd_dout_bus_4),
        .SR(ma_rst),
        .burst_wd_in_rdy_last(burst_wd_in_rdy_last),
        .burst_wd_in_rdy_rise_edge(burst_wd_in_rdy_rise_edge),
        .burst_wd_in_rdy_rise_edge0(burst_wd_in_rdy_rise_edge0),
        .clk(clk),
        .\ctl_reg_en_2_reg[1]_0 (\ctl_reg_en_2_reg[1] ),
        .\ctl_reg_reg[0]_0 (\ctl_reg_reg[0] ),
        .\ctl_reg_reg[18]_0 (\ctl_reg_reg[18] ),
        .icn_cmd_din_temp_reg_0(icn_cmd_din),
        .icn_cmd_en_temp_reg_0(\icn_cmd_en_reg_n_0_[4] ),
        .m_bscan_tck(m_bscan_tck),
        .out(ma_rst),
        .sl_dwe_r0__0(sl_dwe_r0__0),
        .wdc_eq_zero_reg(wdc_eq_zero_reg));
  xsdbm_v3_0_0_ctl_reg__parameterized1 U_CMD5
       (.D(icn_cmd_dout_bus_4),
        .E(U_CMD5_n_22),
        .ICN_CMD_EN_I(ICN_CMD_EN_I),
        .Q(icn_cmd_dout_dwr),
        .SR(U_CMD5_n_21),
        .addr_in_rdy_last(addr_in_rdy_last),
        .addr_in_rdy_rise_edge0(addr_in_rdy_rise_edge0),
        .clk(clk),
        .\ctl_reg_en_2_reg[1]_0 (\ctl_reg_en_2_reg[1]_0 ),
        .\ctl_reg_reg[0]_0 (ma_rst),
        .\ctl_reg_reg[17]_0 (\ctl_reg_reg[17] ),
        .iTDO_i_4_0(\icn_cmd_en_reg_n_0_[4] ),
        .iTDO_i_4_1(icn_cmd_dout_bus_1),
        .iTDO_next(iTDO_next),
        .iTDO_reg(iTDO_reg),
        .iTDO_reg_0(iTDO_reg_0),
        .iTDO_reg_1(U_STATIC_STATUS_n_0),
        .iTDO_reg_2(icn_cmd_dout_next__3_n_0),
        .iTDO_reg_3(U_CMD6_RD_n_0),
        .iTDO_reg_4(U_CMD3_n_0),
        .icn_cmd_din_temp_reg_0(icn_cmd_din),
        .\icn_cmd_en_reg[6] (datawr_cmd_en),
        .m_bscan_tck(m_bscan_tck),
        .ma_rd_req(ma_rd_req),
        .out(cmd5_shreg),
        .p_0_in_0(p_0_in_0),
        .p_1_in1_in(p_1_in1_in),
        .\shift_reg_in_reg[17]_0 (U_CMD5_n_24));
  xsdbm_v3_0_0_rdreg U_CMD6_RD
       (.E(U_CMD5_n_22),
        .FULL_O(FULL_O),
        .RST_I(rddata_rst),
        .SR(U_CMD5_n_21),
        .WR_EN_I(WR_EN_I),
        .abort_rd_edge(abort_rd_edge),
        .clk(clk),
        .\goreg_dm.dout_i_reg[0] (U_CMD6_RD_n_0),
        .\gpr1.dout_i_reg[13] (\gpr1.dout_i_reg[13] ),
        .m_bscan_tck(m_bscan_tck),
        .out(cmd5_shreg),
        .p_0_in_0(p_0_in_0),
        .ram_full_i_reg(ram_full_i_reg),
        .\shift_reg_in_reg[15]_0 (icn_cmd_din));
  xsdbm_v3_0_0_wrreg U_CMD6_WR
       (.E(datawr_cmd_en),
        .EMPTY_O(EMPTY_O),
        .Q(icn_cmd_dout_dwr),
        .RD_EN_I(RD_EN_I),
        .RST_I(wrdata_rst),
        .SR(U_CMD5_n_24),
        .clk(clk),
        .m_bscan_tck(m_bscan_tck),
        .out(cmd5_shreg),
        .p_0_in_0(p_0_in_0),
        .\shift_reg_in_reg[15]_0 (icn_cmd_din),
        .sl_iport0_o(sl_iport0_o));
  xsdbm_v3_0_0_ctl_reg__parameterized2 U_CMD7_CTL
       (.D(D),
        .clk(clk),
        .icn_cmd_din_temp_reg_0(icn_cmd_din),
        .icn_cmd_en_temp_reg_0(\icn_cmd_en_reg_n_0_[7] ),
        .m_bscan_tck(m_bscan_tck),
        .out(ma_rst));
  xsdbm_v3_0_0_stat_reg__parameterized0_0 U_CMD7_STAT
       (.clk(clk),
        .icn_cmd_din_temp_reg_0(icn_cmd_din),
        .\icn_cmd_en_reg[7] (U_CMD7_STAT_n_0),
        .icn_cmd_en_temp_reg_0(\icn_cmd_en_reg_n_0_[7] ),
        .m_bscan_tck(m_bscan_tck),
        .\stat_reg_reg[2]_0 (\stat_reg_reg[2]_0 ));
  xsdbm_v3_0_0_if_static_status U_STATIC_STATUS
       (.m_bscan_tck(m_bscan_tck),
        .\stat_addr_bit_cnt_reg[0]_0 (\icn_cmd_en_reg_n_0_[0] ),
        .\stat_addr_bit_cnt_reg[6]_0 (U_STATIC_STATUS_n_0));
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_din_reg_0),
        .Q(icn_cmd_din),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0116)) 
    icn_cmd_dout_next
       (.I0(\icn_cmd_en_reg_n_0_[0] ),
        .I1(ICN_CMD_EN_I),
        .I2(\icn_cmd_en_reg_n_0_[2] ),
        .I3(\icn_cmd_en_reg_n_0_[3] ),
        .O(icn_cmd_dout_next_n_0));
  LUT4 #(
    .INIT(16'hFEE8)) 
    icn_cmd_dout_next__0
       (.I0(\icn_cmd_en_reg_n_0_[0] ),
        .I1(ICN_CMD_EN_I),
        .I2(\icn_cmd_en_reg_n_0_[2] ),
        .I3(\icn_cmd_en_reg_n_0_[3] ),
        .O(icn_cmd_dout_next__0_n_0));
  LUT4 #(
    .INIT(16'h0116)) 
    icn_cmd_dout_next__1
       (.I0(\icn_cmd_en_reg_n_0_[4] ),
        .I1(p_1_in1_in),
        .I2(p_0_in_0),
        .I3(\icn_cmd_en_reg_n_0_[7] ),
        .O(icn_cmd_dout_next__1_n_0));
  LUT4 #(
    .INIT(16'hFEE8)) 
    icn_cmd_dout_next__2
       (.I0(\icn_cmd_en_reg_n_0_[4] ),
        .I1(p_1_in1_in),
        .I2(p_0_in_0),
        .I3(\icn_cmd_en_reg_n_0_[7] ),
        .O(icn_cmd_dout_next__2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFED)) 
    icn_cmd_dout_next__3
       (.I0(icn_cmd_dout_next_n_0),
        .I1(icn_cmd_dout_next__0_n_0),
        .I2(icn_cmd_dout_next__1_n_0),
        .I3(icn_cmd_dout_next__2_n_0),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(icn_cmd_dout_next__3_n_0));
  LUT4 #(
    .INIT(16'hFFBF)) 
    \icn_cmd_en[3]_i_1 
       (.I0(Q[1]),
        .I1(iSYNC),
        .I2(\icn_cmd_en_reg[0]_0 ),
        .I3(Q[0]),
        .O(\icn_cmd_en[3]_i_1_n_0 ));
  initial assign icn_cmd_en_5_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    icn_cmd_en_5_reg
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_5_temp),
        .Q(icn_cmd_en_5),
        .R(1'b0));
  initial assign icn_cmd_en_5_temp_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    icn_cmd_en_5_temp_reg
       (.C(clk),
        .CE(1'b1),
        .D(p_1_in1_in),
        .Q(icn_cmd_en_5_temp),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[4]_0 ),
        .Q(\icn_cmd_en_reg_n_0_[0] ),
        .R(\icn_cmd_en[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[5]_0 ),
        .Q(ICN_CMD_EN_I),
        .R(\icn_cmd_en[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[6]_0 ),
        .Q(\icn_cmd_en_reg_n_0_[2] ),
        .R(\icn_cmd_en[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[7]_1 ),
        .Q(\icn_cmd_en_reg_n_0_[3] ),
        .R(\icn_cmd_en[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[4] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[4]_0 ),
        .Q(\icn_cmd_en_reg_n_0_[4] ),
        .R(\icn_cmd_en_reg[7]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[5] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[5]_0 ),
        .Q(p_1_in1_in),
        .R(\icn_cmd_en_reg[7]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[6] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[6]_0 ),
        .Q(p_0_in_0),
        .R(\icn_cmd_en_reg[7]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \icn_cmd_en_reg[7] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\icn_cmd_en_reg[7]_1 ),
        .Q(\icn_cmd_en_reg_n_0_[7] ),
        .R(\icn_cmd_en_reg[7]_0 ));
  initial assign ma_rst_1_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    ma_rst_1_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(ma_rst),
        .Q(ma_rst_1),
        .R(1'b0));
  initial assign ma_rst_2_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    ma_rst_2_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(ma_rst_1),
        .Q(ma_rst_2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    rddata_rst_i_1
       (.I0(icn_cmd_en_5),
        .I1(ma_rst),
        .O(rddata_rst_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    rddata_rst_reg
       (.C(clk),
        .CE(1'b1),
        .D(rddata_rst_i),
        .Q(rddata_rst),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    wrdata_rst_i_1
       (.I0(ma_rst_2),
        .I1(p_1_in1_in),
        .O(wrdata_rst_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    wrdata_rst_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(wrdata_rst_i),
        .Q(wrdata_rst),
        .R(1'b0));
endmodule

module xsdbm_v3_0_0_if_static_status
   (\stat_addr_bit_cnt_reg[0]_0 ,
    \stat_addr_bit_cnt_reg[6]_0 ,
    m_bscan_tck);
  input \stat_addr_bit_cnt_reg[0]_0 ;
  output \stat_addr_bit_cnt_reg[6]_0 ;
  input [0:0]m_bscan_tck;

  wire clear;
  wire iTDO_i_10_n_0;
  wire iTDO_i_11_n_0;
  wire iTDO_i_9_n_0;
  wire [0:0]m_bscan_tck;
  wire [6:1]p_0_in;
  wire \stat_addr_bit_cnt[0]_i_1_n_0 ;
  wire \stat_addr_bit_cnt[6]_i_3_n_0 ;
  wire [6:0]stat_addr_bit_cnt_reg;
  wire \stat_addr_bit_cnt_reg[0]_0 ;
  wire \stat_addr_bit_cnt_reg[6]_0 ;

  LUT6 #(
    .INIT(64'hAAAAAA2AAA2A228A)) 
    iTDO_i_10
       (.I0(stat_addr_bit_cnt_reg[5]),
        .I1(stat_addr_bit_cnt_reg[4]),
        .I2(stat_addr_bit_cnt_reg[3]),
        .I3(stat_addr_bit_cnt_reg[2]),
        .I4(stat_addr_bit_cnt_reg[0]),
        .I5(stat_addr_bit_cnt_reg[1]),
        .O(iTDO_i_10_n_0));
  LUT6 #(
    .INIT(64'h0155555554540154)) 
    iTDO_i_11
       (.I0(stat_addr_bit_cnt_reg[5]),
        .I1(stat_addr_bit_cnt_reg[1]),
        .I2(stat_addr_bit_cnt_reg[0]),
        .I3(stat_addr_bit_cnt_reg[4]),
        .I4(stat_addr_bit_cnt_reg[3]),
        .I5(stat_addr_bit_cnt_reg[2]),
        .O(iTDO_i_11_n_0));
  LUT5 #(
    .INIT(32'h5554FFFF)) 
    iTDO_i_5
       (.I0(iTDO_i_9_n_0),
        .I1(iTDO_i_10_n_0),
        .I2(iTDO_i_11_n_0),
        .I3(stat_addr_bit_cnt_reg[6]),
        .I4(\stat_addr_bit_cnt_reg[0]_0 ),
        .O(\stat_addr_bit_cnt_reg[6]_0 ));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    iTDO_i_9
       (.I0(stat_addr_bit_cnt_reg[3]),
        .I1(stat_addr_bit_cnt_reg[2]),
        .I2(stat_addr_bit_cnt_reg[0]),
        .I3(stat_addr_bit_cnt_reg[6]),
        .I4(stat_addr_bit_cnt_reg[4]),
        .I5(stat_addr_bit_cnt_reg[5]),
        .O(iTDO_i_9_n_0));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \stat_addr_bit_cnt[0]_i_1 
       (.I0(stat_addr_bit_cnt_reg[0]),
        .O(\stat_addr_bit_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \stat_addr_bit_cnt[1]_i_1 
       (.I0(stat_addr_bit_cnt_reg[1]),
        .I1(stat_addr_bit_cnt_reg[0]),
        .O(p_0_in[1]));
  LUT3 #(
    .INIT(8'h6A)) 
    \stat_addr_bit_cnt[2]_i_1 
       (.I0(stat_addr_bit_cnt_reg[2]),
        .I1(stat_addr_bit_cnt_reg[0]),
        .I2(stat_addr_bit_cnt_reg[1]),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \stat_addr_bit_cnt[3]_i_1 
       (.I0(stat_addr_bit_cnt_reg[3]),
        .I1(stat_addr_bit_cnt_reg[2]),
        .I2(stat_addr_bit_cnt_reg[1]),
        .I3(stat_addr_bit_cnt_reg[0]),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \stat_addr_bit_cnt[4]_i_1 
       (.I0(stat_addr_bit_cnt_reg[4]),
        .I1(stat_addr_bit_cnt_reg[0]),
        .I2(stat_addr_bit_cnt_reg[1]),
        .I3(stat_addr_bit_cnt_reg[2]),
        .I4(stat_addr_bit_cnt_reg[3]),
        .O(p_0_in[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \stat_addr_bit_cnt[5]_i_1 
       (.I0(stat_addr_bit_cnt_reg[5]),
        .I1(stat_addr_bit_cnt_reg[4]),
        .I2(stat_addr_bit_cnt_reg[3]),
        .I3(stat_addr_bit_cnt_reg[2]),
        .I4(stat_addr_bit_cnt_reg[1]),
        .I5(stat_addr_bit_cnt_reg[0]),
        .O(p_0_in[5]));
  LUT1 #(
    .INIT(2'h1)) 
    \stat_addr_bit_cnt[6]_i_1 
       (.I0(\stat_addr_bit_cnt_reg[0]_0 ),
        .O(clear));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \stat_addr_bit_cnt[6]_i_2 
       (.I0(stat_addr_bit_cnt_reg[6]),
        .I1(stat_addr_bit_cnt_reg[5]),
        .I2(\stat_addr_bit_cnt[6]_i_3_n_0 ),
        .I3(stat_addr_bit_cnt_reg[2]),
        .I4(stat_addr_bit_cnt_reg[3]),
        .I5(stat_addr_bit_cnt_reg[4]),
        .O(p_0_in[6]));
  LUT2 #(
    .INIT(4'h8)) 
    \stat_addr_bit_cnt[6]_i_3 
       (.I0(stat_addr_bit_cnt_reg[1]),
        .I1(stat_addr_bit_cnt_reg[0]),
        .O(\stat_addr_bit_cnt[6]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \stat_addr_bit_cnt_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\stat_addr_bit_cnt[0]_i_1_n_0 ),
        .Q(stat_addr_bit_cnt_reg[0]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \stat_addr_bit_cnt_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(stat_addr_bit_cnt_reg[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \stat_addr_bit_cnt_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[2]),
        .Q(stat_addr_bit_cnt_reg[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \stat_addr_bit_cnt_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[3]),
        .Q(stat_addr_bit_cnt_reg[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \stat_addr_bit_cnt_reg[4] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[4]),
        .Q(stat_addr_bit_cnt_reg[4]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \stat_addr_bit_cnt_reg[5] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[5]),
        .Q(stat_addr_bit_cnt_reg[5]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \stat_addr_bit_cnt_reg[6] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[6]),
        .Q(stat_addr_bit_cnt_reg[6]),
        .R(clear));
endmodule

module xsdbm_v3_0_0_rdfifo
   (FULL_O,
    RST_I,
    WR_EN_I,
    abort_rd_edge,
    clk,
    \goreg_dm.dout_i_reg[0] ,
    p_0_in_0,
    ram_full_i_reg,
    D,
    Q,
    \gpr1.dout_i_reg[13] ,
    m_bscan_tck,
    out,
    \shift_reg_in_reg[0] );
  output FULL_O;
  input RST_I;
  input WR_EN_I;
  input abort_rd_edge;
  input clk;
  output \goreg_dm.dout_i_reg[0] ;
  input p_0_in_0;
  output ram_full_i_reg;
  output [14:0]D;
  input [15:0]Q;
  input [15:0]\gpr1.dout_i_reg[13] ;
  input [0:0]m_bscan_tck;
  input [0:0]out;
  input [3:0]\shift_reg_in_reg[0] ;

  wire [14:0]D;
  wire FULL_O;
  wire [15:0]Q;
  wire RST_I;
  wire \SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_2_n_0 ;
  wire \SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ;
  wire \SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_n_20 ;
  wire WR_EN_I;
  wire abort_rd_edge;
  (* DONT_TOUCH *) wire clk;
  wire [15:0]fifo_dout;
  wire fifo_rd_valid;
  wire \goreg_dm.dout_i_reg[0] ;
  wire [15:0]\gpr1.dout_i_reg[13] ;
  (* DONT_TOUCH *) wire [0:0]m_bscan_tck;
  wire [0:0]out;
  wire p_0_in_0;
  wire ram_full_i_reg;
  wire [3:0]\shift_reg_in_reg[0] ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_almost_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_almost_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_bready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_rready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wlast_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tlast_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_rd_rst_busy_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_arready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_awready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_bvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rlast_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_wready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axis_tready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_wr_ack_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_wr_rst_busy_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_rd_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_wr_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_rd_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_wr_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_rd_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_wr_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_rd_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_wr_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_rd_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_wr_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_rd_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_wr_data_count_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_data_count_UNCONNECTED ;
  wire [31:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_araddr_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arburst_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arcache_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arid_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arlen_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arlock_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arprot_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arqos_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arregion_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arsize_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_aruser_UNCONNECTED ;
  wire [31:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awaddr_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awburst_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awcache_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awid_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awlen_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awlock_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awprot_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awqos_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awregion_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awsize_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awuser_UNCONNECTED ;
  wire [63:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wdata_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wid_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wstrb_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wuser_UNCONNECTED ;
  wire [63:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tdata_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tdest_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tid_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tkeep_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tstrb_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tuser_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_rd_data_count_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_bid_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_bresp_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_buser_UNCONNECTED ;
  wire [63:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rdata_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rid_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rresp_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_ruser_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_wr_data_count_UNCONNECTED ;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "64" *) 
  (* C_AXIS_TDEST_WIDTH = "4" *) 
  (* C_AXIS_TID_WIDTH = "8" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "4" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "2" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "0" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "4" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "16" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "16" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "0" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "0" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "0" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "1" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "1" *) 
  (* C_HAS_VALID = "1" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "0" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "4" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "0" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "4" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  (* DONT_TOUCH *) 
  fifo_generator_v13_1_4__parameterized0 \SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst 
       (.almost_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_almost_empty_UNCONNECTED ),
        .almost_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_almost_full_UNCONNECTED ),
        .axi_ar_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_data_count_UNCONNECTED [4:0]),
        .axi_ar_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_dbiterr_UNCONNECTED ),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_overflow_UNCONNECTED ),
        .axi_ar_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_prog_empty_UNCONNECTED ),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_prog_full_UNCONNECTED ),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_rd_data_count_UNCONNECTED [4:0]),
        .axi_ar_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_sbiterr_UNCONNECTED ),
        .axi_ar_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_underflow_UNCONNECTED ),
        .axi_ar_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_ar_wr_data_count_UNCONNECTED [4:0]),
        .axi_aw_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_data_count_UNCONNECTED [4:0]),
        .axi_aw_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_dbiterr_UNCONNECTED ),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_overflow_UNCONNECTED ),
        .axi_aw_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_prog_empty_UNCONNECTED ),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_prog_full_UNCONNECTED ),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_rd_data_count_UNCONNECTED [4:0]),
        .axi_aw_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_sbiterr_UNCONNECTED ),
        .axi_aw_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_underflow_UNCONNECTED ),
        .axi_aw_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_aw_wr_data_count_UNCONNECTED [4:0]),
        .axi_b_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_data_count_UNCONNECTED [4:0]),
        .axi_b_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_dbiterr_UNCONNECTED ),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_overflow_UNCONNECTED ),
        .axi_b_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_prog_empty_UNCONNECTED ),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_prog_full_UNCONNECTED ),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_rd_data_count_UNCONNECTED [4:0]),
        .axi_b_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_sbiterr_UNCONNECTED ),
        .axi_b_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_underflow_UNCONNECTED ),
        .axi_b_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_b_wr_data_count_UNCONNECTED [4:0]),
        .axi_r_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_data_count_UNCONNECTED [10:0]),
        .axi_r_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_dbiterr_UNCONNECTED ),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_overflow_UNCONNECTED ),
        .axi_r_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_prog_empty_UNCONNECTED ),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_prog_full_UNCONNECTED ),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_rd_data_count_UNCONNECTED [10:0]),
        .axi_r_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_sbiterr_UNCONNECTED ),
        .axi_r_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_underflow_UNCONNECTED ),
        .axi_r_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_r_wr_data_count_UNCONNECTED [10:0]),
        .axi_w_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_data_count_UNCONNECTED [10:0]),
        .axi_w_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_dbiterr_UNCONNECTED ),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_overflow_UNCONNECTED ),
        .axi_w_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_prog_empty_UNCONNECTED ),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_prog_full_UNCONNECTED ),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_rd_data_count_UNCONNECTED [10:0]),
        .axi_w_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_sbiterr_UNCONNECTED ),
        .axi_w_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_underflow_UNCONNECTED ),
        .axi_w_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axi_w_wr_data_count_UNCONNECTED [10:0]),
        .axis_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_data_count_UNCONNECTED [10:0]),
        .axis_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_dbiterr_UNCONNECTED ),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_overflow_UNCONNECTED ),
        .axis_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_prog_empty_UNCONNECTED ),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_prog_full_UNCONNECTED ),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_rd_data_count_UNCONNECTED [10:0]),
        .axis_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_sbiterr_UNCONNECTED ),
        .axis_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_underflow_UNCONNECTED ),
        .axis_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_axis_wr_data_count_UNCONNECTED [10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_data_count_UNCONNECTED [3:0]),
        .dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_dbiterr_UNCONNECTED ),
        .din(\gpr1.dout_i_reg[13] ),
        .dout(fifo_dout),
        .empty(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_n_20 ),
        .full(FULL_O),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_araddr_UNCONNECTED [31:0]),
        .m_axi_arburst(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arburst_UNCONNECTED [1:0]),
        .m_axi_arcache(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arcache_UNCONNECTED [3:0]),
        .m_axi_arid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arid_UNCONNECTED [3:0]),
        .m_axi_arlen(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arlen_UNCONNECTED [7:0]),
        .m_axi_arlock(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arlock_UNCONNECTED [1:0]),
        .m_axi_arprot(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arprot_UNCONNECTED [2:0]),
        .m_axi_arqos(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arqos_UNCONNECTED [3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arregion_UNCONNECTED [3:0]),
        .m_axi_arsize(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arsize_UNCONNECTED [2:0]),
        .m_axi_aruser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_aruser_UNCONNECTED [0]),
        .m_axi_arvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_arvalid_UNCONNECTED ),
        .m_axi_awaddr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awaddr_UNCONNECTED [31:0]),
        .m_axi_awburst(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awburst_UNCONNECTED [1:0]),
        .m_axi_awcache(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awcache_UNCONNECTED [3:0]),
        .m_axi_awid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awid_UNCONNECTED [3:0]),
        .m_axi_awlen(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awlen_UNCONNECTED [7:0]),
        .m_axi_awlock(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awlock_UNCONNECTED [1:0]),
        .m_axi_awprot(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awprot_UNCONNECTED [2:0]),
        .m_axi_awqos(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awqos_UNCONNECTED [3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awregion_UNCONNECTED [3:0]),
        .m_axi_awsize(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awsize_UNCONNECTED [2:0]),
        .m_axi_awuser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awuser_UNCONNECTED [0]),
        .m_axi_awvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_awvalid_UNCONNECTED ),
        .m_axi_bid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_bready_UNCONNECTED ),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rlast(1'b0),
        .m_axi_rready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_rready_UNCONNECTED ),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wdata_UNCONNECTED [63:0]),
        .m_axi_wid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wid_UNCONNECTED [3:0]),
        .m_axi_wlast(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wlast_UNCONNECTED ),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wstrb_UNCONNECTED [7:0]),
        .m_axi_wuser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wuser_UNCONNECTED [0]),
        .m_axi_wvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axi_wvalid_UNCONNECTED ),
        .m_axis_tdata(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tdata_UNCONNECTED [63:0]),
        .m_axis_tdest(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tdest_UNCONNECTED [3:0]),
        .m_axis_tid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tid_UNCONNECTED [7:0]),
        .m_axis_tkeep(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tkeep_UNCONNECTED [3:0]),
        .m_axis_tlast(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tlast_UNCONNECTED ),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tstrb_UNCONNECTED [3:0]),
        .m_axis_tuser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tuser_UNCONNECTED [3:0]),
        .m_axis_tvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_m_axis_tvalid_UNCONNECTED ),
        .overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_overflow_UNCONNECTED ),
        .prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_prog_empty_UNCONNECTED ),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_prog_full_UNCONNECTED ),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(m_bscan_tck),
        .rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_rd_data_count_UNCONNECTED [3:0]),
        .rd_en(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_2_n_0 ),
        .rd_rst(1'b0),
        .rd_rst_busy(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_rd_rst_busy_UNCONNECTED ),
        .rst(RST_I),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock({1'b0,1'b0}),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_arready_UNCONNECTED ),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock({1'b0,1'b0}),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_awready_UNCONNECTED ),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_bid_UNCONNECTED [3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_bresp_UNCONNECTED [1:0]),
        .s_axi_buser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_buser_UNCONNECTED [0]),
        .s_axi_bvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_bvalid_UNCONNECTED ),
        .s_axi_rdata(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rdata_UNCONNECTED [63:0]),
        .s_axi_rid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rid_UNCONNECTED [3:0]),
        .s_axi_rlast(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rlast_UNCONNECTED ),
        .s_axi_rready(1'b0),
        .s_axi_rresp(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rresp_UNCONNECTED [1:0]),
        .s_axi_ruser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_ruser_UNCONNECTED [0]),
        .s_axi_rvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_rvalid_UNCONNECTED ),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axi_wready_UNCONNECTED ),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tid({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_s_axis_tready_UNCONNECTED ),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_sbiterr_UNCONNECTED ),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_underflow_UNCONNECTED ),
        .valid(fifo_rd_valid),
        .wr_ack(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_wr_ack_UNCONNECTED ),
        .wr_clk(clk),
        .wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_wr_data_count_UNCONNECTED [3:0]),
        .wr_en(WR_EN_I),
        .wr_rst(1'b0),
        .wr_rst_busy(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_wr_rst_busy_UNCONNECTED ));
  LUT3 #(
    .INIT(8'h20)) 
    \SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_2 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .O(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3 
       (.I0(\shift_reg_in_reg[0] [1]),
        .I1(\shift_reg_in_reg[0] [0]),
        .I2(\shift_reg_in_reg[0] [2]),
        .I3(\shift_reg_in_reg[0] [3]),
        .I4(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_n_20 ),
        .I5(fifo_rd_valid),
        .O(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \current_state[1]_i_8 
       (.I0(FULL_O),
        .I1(abort_rd_edge),
        .O(ram_full_i_reg));
  LUT5 #(
    .INIT(32'h08080C00)) 
    iTDO_i_6
       (.I0(fifo_dout[0]),
        .I1(p_0_in_0),
        .I2(out),
        .I3(Q[0]),
        .I4(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .O(\goreg_dm.dout_i_reg[0] ));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[0]_i_1__2 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[1]),
        .I4(Q[1]),
        .O(D[0]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[10]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[11]),
        .I4(Q[11]),
        .O(D[10]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[11]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[12]),
        .I4(Q[12]),
        .O(D[11]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[12]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[13]),
        .I4(Q[13]),
        .O(D[12]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[13]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[14]),
        .I4(Q[14]),
        .O(D[13]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[14]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[15]),
        .I4(Q[15]),
        .O(D[14]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[1]_i_1__2 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[2]),
        .I4(Q[2]),
        .O(D[1]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[2]_i_1__0 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[3]),
        .I4(Q[3]),
        .O(D[2]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[3]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[4]),
        .I4(Q[4]),
        .O(D[3]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[4]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[5]),
        .I4(Q[5]),
        .O(D[4]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[5]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[6]),
        .I4(Q[6]),
        .O(D[5]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[6]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[7]),
        .I4(Q[7]),
        .O(D[6]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[7]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[8]),
        .I4(Q[8]),
        .O(D[7]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[8]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[9]),
        .I4(Q[9]),
        .O(D[8]));
  LUT5 #(
    .INIT(32'hFFDF2000)) 
    \shift_reg_in[9]_i_1 
       (.I0(\SUBCORE_FIFO.xsdbm_v3_0_0_rdfifo_inst_i_3_n_0 ),
        .I1(out),
        .I2(p_0_in_0),
        .I3(fifo_dout[10]),
        .I4(Q[10]),
        .O(D[9]));
endmodule

module xsdbm_v3_0_0_rdreg
   (FULL_O,
    RST_I,
    WR_EN_I,
    abort_rd_edge,
    clk,
    \goreg_dm.dout_i_reg[0] ,
    p_0_in_0,
    ram_full_i_reg,
    E,
    SR,
    \gpr1.dout_i_reg[13] ,
    m_bscan_tck,
    out,
    \shift_reg_in_reg[15]_0 );
  output FULL_O;
  input RST_I;
  input WR_EN_I;
  input abort_rd_edge;
  input clk;
  output \goreg_dm.dout_i_reg[0] ;
  input p_0_in_0;
  output ram_full_i_reg;
  input [0:0]E;
  input [0:0]SR;
  input [15:0]\gpr1.dout_i_reg[13] ;
  input [0:0]m_bscan_tck;
  input [0:0]out;
  input [0:0]\shift_reg_in_reg[15]_0 ;

  wire [0:0]E;
  wire FULL_O;
  wire RST_I;
  wire [0:0]SR;
  wire U_RD_FIFO_n_1;
  wire U_RD_FIFO_n_10;
  wire U_RD_FIFO_n_11;
  wire U_RD_FIFO_n_12;
  wire U_RD_FIFO_n_13;
  wire U_RD_FIFO_n_14;
  wire U_RD_FIFO_n_15;
  wire U_RD_FIFO_n_2;
  wire U_RD_FIFO_n_3;
  wire U_RD_FIFO_n_4;
  wire U_RD_FIFO_n_5;
  wire U_RD_FIFO_n_6;
  wire U_RD_FIFO_n_7;
  wire U_RD_FIFO_n_8;
  wire U_RD_FIFO_n_9;
  wire WR_EN_I;
  wire abort_rd_edge;
  wire clk;
  wire \goreg_dm.dout_i_reg[0] ;
  wire [15:0]\gpr1.dout_i_reg[13] ;
  wire [0:0]m_bscan_tck;
  wire [0:0]out;
  wire p_0_in_0;
  wire [3:0]p_0_in__1;
  wire ram_full_i_reg;
  wire [3:0]shift_bit_count_reg;
  wire [0:0]\shift_reg_in_reg[15]_0 ;
  wire \shift_reg_in_reg_n_0_[0] ;
  wire \shift_reg_in_reg_n_0_[10] ;
  wire \shift_reg_in_reg_n_0_[11] ;
  wire \shift_reg_in_reg_n_0_[12] ;
  wire \shift_reg_in_reg_n_0_[13] ;
  wire \shift_reg_in_reg_n_0_[14] ;
  wire \shift_reg_in_reg_n_0_[15] ;
  wire \shift_reg_in_reg_n_0_[1] ;
  wire \shift_reg_in_reg_n_0_[2] ;
  wire \shift_reg_in_reg_n_0_[3] ;
  wire \shift_reg_in_reg_n_0_[4] ;
  wire \shift_reg_in_reg_n_0_[5] ;
  wire \shift_reg_in_reg_n_0_[6] ;
  wire \shift_reg_in_reg_n_0_[7] ;
  wire \shift_reg_in_reg_n_0_[8] ;
  wire \shift_reg_in_reg_n_0_[9] ;

  xsdbm_v3_0_0_rdfifo U_RD_FIFO
       (.D({U_RD_FIFO_n_1,U_RD_FIFO_n_2,U_RD_FIFO_n_3,U_RD_FIFO_n_4,U_RD_FIFO_n_5,U_RD_FIFO_n_6,U_RD_FIFO_n_7,U_RD_FIFO_n_8,U_RD_FIFO_n_9,U_RD_FIFO_n_10,U_RD_FIFO_n_11,U_RD_FIFO_n_12,U_RD_FIFO_n_13,U_RD_FIFO_n_14,U_RD_FIFO_n_15}),
        .FULL_O(FULL_O),
        .Q({\shift_reg_in_reg_n_0_[15] ,\shift_reg_in_reg_n_0_[14] ,\shift_reg_in_reg_n_0_[13] ,\shift_reg_in_reg_n_0_[12] ,\shift_reg_in_reg_n_0_[11] ,\shift_reg_in_reg_n_0_[10] ,\shift_reg_in_reg_n_0_[9] ,\shift_reg_in_reg_n_0_[8] ,\shift_reg_in_reg_n_0_[7] ,\shift_reg_in_reg_n_0_[6] ,\shift_reg_in_reg_n_0_[5] ,\shift_reg_in_reg_n_0_[4] ,\shift_reg_in_reg_n_0_[3] ,\shift_reg_in_reg_n_0_[2] ,\shift_reg_in_reg_n_0_[1] ,\shift_reg_in_reg_n_0_[0] }),
        .RST_I(RST_I),
        .WR_EN_I(WR_EN_I),
        .abort_rd_edge(abort_rd_edge),
        .clk(clk),
        .\goreg_dm.dout_i_reg[0] (\goreg_dm.dout_i_reg[0] ),
        .\gpr1.dout_i_reg[13] (\gpr1.dout_i_reg[13] ),
        .m_bscan_tck(m_bscan_tck),
        .out(out),
        .p_0_in_0(p_0_in_0),
        .ram_full_i_reg(ram_full_i_reg),
        .\shift_reg_in_reg[0] (shift_bit_count_reg));
  (* \PinAttr:I0:HOLD_DETOUR  = "188" *) 
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \shift_bit_count[0]_i_1__0 
       (.I0(shift_bit_count_reg[0]),
        .O(p_0_in__1[0]));
  (* \PinAttr:I0:HOLD_DETOUR  = "188" *) 
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \shift_bit_count[1]_i_1__0 
       (.I0(shift_bit_count_reg[0]),
        .I1(shift_bit_count_reg[1]),
        .O(p_0_in__1[1]));
  (* \PinAttr:I2:HOLD_DETOUR  = "188" *) 
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \shift_bit_count[2]_i_1__0 
       (.I0(shift_bit_count_reg[2]),
        .I1(shift_bit_count_reg[1]),
        .I2(shift_bit_count_reg[0]),
        .O(p_0_in__1[2]));
  (* \PinAttr:I1:HOLD_DETOUR  = "188" *) 
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \shift_bit_count[3]_i_2__0 
       (.I0(shift_bit_count_reg[3]),
        .I1(shift_bit_count_reg[0]),
        .I2(shift_bit_count_reg[1]),
        .I3(shift_bit_count_reg[2]),
        .O(p_0_in__1[3]));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(shift_bit_count_reg[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(shift_bit_count_reg[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(shift_bit_count_reg[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(shift_bit_count_reg[3]),
        .R(SR));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_15),
        .Q(\shift_reg_in_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[10] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_5),
        .Q(\shift_reg_in_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[11] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_4),
        .Q(\shift_reg_in_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[12] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_3),
        .Q(\shift_reg_in_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[13] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_2),
        .Q(\shift_reg_in_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[14] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_1),
        .Q(\shift_reg_in_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[15] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(\shift_reg_in_reg[15]_0 ),
        .Q(\shift_reg_in_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_14),
        .Q(\shift_reg_in_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_13),
        .Q(\shift_reg_in_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[3] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_12),
        .Q(\shift_reg_in_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[4] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_11),
        .Q(\shift_reg_in_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[5] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_10),
        .Q(\shift_reg_in_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[6] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_9),
        .Q(\shift_reg_in_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[7] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_8),
        .Q(\shift_reg_in_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[8] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_7),
        .Q(\shift_reg_in_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[9] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(U_RD_FIFO_n_6),
        .Q(\shift_reg_in_reg_n_0_[9] ));
endmodule

module xsdbm_v3_0_0_stat
   (iTDO_VEC_15,
    SR,
    m_bscan_tck);
  output iTDO_VEC_15;
  input [0:0]SR;
  input [0:0]m_bscan_tck;

  wire [0:0]SR;
  wire \iSTAT_CNT[0]_i_1_n_0 ;
  wire [5:0]iSTAT_CNT_reg;
  wire iTDO_VEC_15;
  wire iTDO_next;
  wire [0:0]m_bscan_tck;
  wire [5:1]p_0_in;

  LUT6 #(
    .INIT(64'h2000600060009591)) 
    TDO_i_1
       (.I0(iSTAT_CNT_reg[2]),
        .I1(iSTAT_CNT_reg[5]),
        .I2(iSTAT_CNT_reg[4]),
        .I3(iSTAT_CNT_reg[3]),
        .I4(iSTAT_CNT_reg[0]),
        .I5(iSTAT_CNT_reg[1]),
        .O(iTDO_next));
  FDRE #(
    .INIT(1'b0)) 
    TDO_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iTDO_next),
        .Q(iTDO_VEC_15),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \iSTAT_CNT[0]_i_1 
       (.I0(iSTAT_CNT_reg[0]),
        .O(\iSTAT_CNT[0]_i_1_n_0 ));
  (* \PinAttr:I0:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \iSTAT_CNT[1]_i_1 
       (.I0(iSTAT_CNT_reg[1]),
        .I1(iSTAT_CNT_reg[0]),
        .O(p_0_in[1]));
  (* \PinAttr:I2:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \iSTAT_CNT[2]_i_1 
       (.I0(iSTAT_CNT_reg[2]),
        .I1(iSTAT_CNT_reg[0]),
        .I2(iSTAT_CNT_reg[1]),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \iSTAT_CNT[3]_i_1 
       (.I0(iSTAT_CNT_reg[3]),
        .I1(iSTAT_CNT_reg[1]),
        .I2(iSTAT_CNT_reg[0]),
        .I3(iSTAT_CNT_reg[2]),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \iSTAT_CNT[4]_i_1 
       (.I0(iSTAT_CNT_reg[4]),
        .I1(iSTAT_CNT_reg[3]),
        .I2(iSTAT_CNT_reg[2]),
        .I3(iSTAT_CNT_reg[0]),
        .I4(iSTAT_CNT_reg[1]),
        .O(p_0_in[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \iSTAT_CNT[5]_i_2 
       (.I0(iSTAT_CNT_reg[5]),
        .I1(iSTAT_CNT_reg[4]),
        .I2(iSTAT_CNT_reg[1]),
        .I3(iSTAT_CNT_reg[0]),
        .I4(iSTAT_CNT_reg[2]),
        .I5(iSTAT_CNT_reg[3]),
        .O(p_0_in[5]));
  FDRE #(
    .INIT(1'b0)) 
    \iSTAT_CNT_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(\iSTAT_CNT[0]_i_1_n_0 ),
        .Q(iSTAT_CNT_reg[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \iSTAT_CNT_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(iSTAT_CNT_reg[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \iSTAT_CNT_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[2]),
        .Q(iSTAT_CNT_reg[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \iSTAT_CNT_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[3]),
        .Q(iSTAT_CNT_reg[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \iSTAT_CNT_reg[4] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[4]),
        .Q(iSTAT_CNT_reg[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \iSTAT_CNT_reg[5] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in[5]),
        .Q(iSTAT_CNT_reg[5]),
        .R(SR));
endmodule

module xsdbm_v3_0_0_stat_reg
   (clk,
    \icn_cmd_en_reg[2] ,
    icn_cmd_en_temp_reg_0,
    D,
    m_bscan_tck,
    \stat_reg_reg[3]_0 );
  input clk;
  output \icn_cmd_en_reg[2] ;
  input icn_cmd_en_temp_reg_0;
  input [0:0]D;
  input [0:0]m_bscan_tck;
  input [3:0]\stat_reg_reg[3]_0 ;

  wire [0:0]D;
  wire clk;
  wire icn_cmd_din_temp;
  wire \icn_cmd_en_reg[2] ;
  wire icn_cmd_en_temp;
  wire icn_cmd_en_temp_reg_0;
  wire [0:0]m_bscan_tck;
  wire shift_en;
  (* async_reg = "true" *) wire [3:0]shift_reg_in;
  wire \shift_reg_in[0]_i_1_n_0 ;
  wire \shift_reg_in[1]_i_1_n_0 ;
  wire \shift_reg_in[2]_i_1_n_0 ;
  (* async_reg = "true" *) wire [3:0]stat_reg;
  (* async_reg = "true" *) wire [3:0]stat_reg_1;
  (* async_reg = "true" *) wire [3:0]stat_reg_2;
  (* async_reg = "true" *) wire [1:0]stat_reg_ld;
  wire stat_reg_ld_temp;
  wire stat_reg_ld_temp_1;
  wire [3:0]\stat_reg_reg[3]_0 ;

  LUT4 #(
    .INIT(16'hA808)) 
    iTDO_i_12
       (.I0(icn_cmd_en_temp_reg_0),
        .I1(stat_reg_2[0]),
        .I2(shift_en),
        .I3(shift_reg_in[0]),
        .O(\icn_cmd_en_reg[2] ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(D),
        .Q(icn_cmd_din_temp),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_en_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp_reg_0),
        .Q(icn_cmd_en_temp),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    shift_en_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(shift_en),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \shift_reg_in[0]_i_1 
       (.I0(shift_reg_in[1]),
        .I1(shift_en),
        .I2(stat_reg_2[1]),
        .O(\shift_reg_in[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \shift_reg_in[1]_i_1 
       (.I0(shift_reg_in[2]),
        .I1(shift_en),
        .I2(stat_reg_2[2]),
        .O(\shift_reg_in[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \shift_reg_in[2]_i_1 
       (.I0(shift_reg_in[3]),
        .I1(shift_en),
        .I2(stat_reg_2[3]),
        .O(\shift_reg_in[2]_i_1_n_0 ));
  initial assign \shift_reg_in_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(\shift_reg_in[0]_i_1_n_0 ),
        .Q(shift_reg_in[0]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(\shift_reg_in[1]_i_1_n_0 ),
        .Q(shift_reg_in[1]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(\shift_reg_in[2]_i_1_n_0 ),
        .Q(shift_reg_in[2]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[3] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(icn_cmd_din_temp),
        .Q(shift_reg_in[3]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[0]),
        .Q(stat_reg_1[0]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[1]),
        .Q(stat_reg_1[1]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[2]),
        .Q(stat_reg_1[2]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[3]),
        .Q(stat_reg_1[3]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[0]),
        .Q(stat_reg_2[0]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[1]),
        .Q(stat_reg_2[1]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[2]),
        .Q(stat_reg_2[2]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[3]),
        .Q(stat_reg_2[3]),
        .R(1'b0));
  initial assign \stat_reg_ld_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_ld_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(stat_reg_ld[0]),
        .R(1'b0));
  initial assign \stat_reg_ld_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_ld_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(stat_reg_ld[0]),
        .Q(stat_reg_ld[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    stat_reg_ld_temp_1_i_1
       (.I0(stat_reg_ld[1]),
        .O(stat_reg_ld_temp));
  FDRE #(
    .INIT(1'b0)) 
    stat_reg_ld_temp_1_reg
       (.C(clk),
        .CE(1'b1),
        .D(stat_reg_ld_temp),
        .Q(stat_reg_ld_temp_1),
        .R(1'b0));
  initial assign \stat_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[0] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1),
        .D(\stat_reg_reg[3]_0 [0]),
        .Q(stat_reg[0]),
        .R(1'b0));
  initial assign \stat_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[1] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1),
        .D(\stat_reg_reg[3]_0 [1]),
        .Q(stat_reg[1]),
        .R(1'b0));
  initial assign \stat_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[2] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1),
        .D(\stat_reg_reg[3]_0 [2]),
        .Q(stat_reg[2]),
        .R(1'b0));
  initial assign \stat_reg_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[3] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1),
        .D(\stat_reg_reg[3]_0 [3]),
        .Q(stat_reg[3]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xsdbm_v3_0_0_stat_reg" *) 
module xsdbm_v3_0_0_stat_reg__parameterized0
   (clk,
    iTDO_i_4,
    iTDO_i_4_0,
    icn_cmd_en_temp_reg_0,
    \shift_reg_in_reg[0]_0 ,
    D,
    m_bscan_tck,
    \stat_reg_reg[2]_0 );
  input clk;
  input iTDO_i_4;
  input iTDO_i_4_0;
  input icn_cmd_en_temp_reg_0;
  output \shift_reg_in_reg[0]_0 ;
  input [0:0]D;
  input [0:0]m_bscan_tck;
  input [2:0]\stat_reg_reg[2]_0 ;

  wire [0:0]D;
  wire clk;
  wire iTDO_i_4;
  wire iTDO_i_4_0;
  wire icn_cmd_din_temp;
  wire icn_cmd_en_temp;
  wire icn_cmd_en_temp_reg_0;
  wire [0:0]m_bscan_tck;
  wire shift_en;
  (* async_reg = "true" *) wire [2:0]shift_reg_in;
  wire \shift_reg_in[0]_i_1__0_n_0 ;
  wire \shift_reg_in[1]_i_1__0_n_0 ;
  wire \shift_reg_in_reg[0]_0 ;
  (* async_reg = "true" *) wire [2:0]stat_reg;
  (* async_reg = "true" *) wire [2:0]stat_reg_1;
  (* async_reg = "true" *) wire [2:0]stat_reg_2;
  (* async_reg = "true" *) wire [1:0]stat_reg_ld;
  wire stat_reg_ld_temp_1_i_1__0_n_0;
  wire stat_reg_ld_temp_1_reg_n_0;
  wire [2:0]\stat_reg_reg[2]_0 ;

  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFB800)) 
    iTDO_i_7
       (.I0(shift_reg_in[0]),
        .I1(shift_en),
        .I2(stat_reg_2[0]),
        .I3(icn_cmd_en_temp_reg_0),
        .I4(iTDO_i_4),
        .I5(iTDO_i_4_0),
        .O(\shift_reg_in_reg[0]_0 ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(D),
        .Q(icn_cmd_din_temp),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_en_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp_reg_0),
        .Q(icn_cmd_en_temp),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    shift_en_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(shift_en),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \shift_reg_in[0]_i_1__0 
       (.I0(shift_reg_in[1]),
        .I1(shift_en),
        .I2(stat_reg_2[1]),
        .O(\shift_reg_in[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \shift_reg_in[1]_i_1__0 
       (.I0(shift_reg_in[2]),
        .I1(shift_en),
        .I2(stat_reg_2[2]),
        .O(\shift_reg_in[1]_i_1__0_n_0 ));
  initial assign \shift_reg_in_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(\shift_reg_in[0]_i_1__0_n_0 ),
        .Q(shift_reg_in[0]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(\shift_reg_in[1]_i_1__0_n_0 ),
        .Q(shift_reg_in[1]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(icn_cmd_din_temp),
        .Q(shift_reg_in[2]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[0]),
        .Q(stat_reg_1[0]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[1]),
        .Q(stat_reg_1[1]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[2]),
        .Q(stat_reg_1[2]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[0]),
        .Q(stat_reg_2[0]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[1]),
        .Q(stat_reg_2[1]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[2]),
        .Q(stat_reg_2[2]),
        .R(1'b0));
  initial assign \stat_reg_ld_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_ld_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(stat_reg_ld[0]),
        .R(1'b0));
  initial assign \stat_reg_ld_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_ld_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(stat_reg_ld[0]),
        .Q(stat_reg_ld[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    stat_reg_ld_temp_1_i_1__0
       (.I0(stat_reg_ld[1]),
        .O(stat_reg_ld_temp_1_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    stat_reg_ld_temp_1_reg
       (.C(clk),
        .CE(1'b1),
        .D(stat_reg_ld_temp_1_i_1__0_n_0),
        .Q(stat_reg_ld_temp_1_reg_n_0),
        .R(1'b0));
  initial assign \stat_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[0] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1_reg_n_0),
        .D(\stat_reg_reg[2]_0 [0]),
        .Q(stat_reg[0]),
        .R(1'b0));
  initial assign \stat_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[1] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1_reg_n_0),
        .D(\stat_reg_reg[2]_0 [1]),
        .Q(stat_reg[1]),
        .R(1'b0));
  initial assign \stat_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[2] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1_reg_n_0),
        .D(\stat_reg_reg[2]_0 [2]),
        .Q(stat_reg[2]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xsdbm_v3_0_0_stat_reg" *) 
module xsdbm_v3_0_0_stat_reg__parameterized0_0
   (clk,
    \icn_cmd_en_reg[7] ,
    icn_cmd_en_temp_reg_0,
    icn_cmd_din_temp_reg_0,
    m_bscan_tck,
    \stat_reg_reg[2]_0 );
  input clk;
  output \icn_cmd_en_reg[7] ;
  input icn_cmd_en_temp_reg_0;
  input [0:0]icn_cmd_din_temp_reg_0;
  input [0:0]m_bscan_tck;
  input [2:0]\stat_reg_reg[2]_0 ;

  wire clk;
  wire icn_cmd_din_temp;
  wire [0:0]icn_cmd_din_temp_reg_0;
  wire \icn_cmd_en_reg[7] ;
  wire icn_cmd_en_temp;
  wire icn_cmd_en_temp_reg_0;
  wire [0:0]m_bscan_tck;
  wire shift_en;
  (* async_reg = "true" *) wire [2:0]shift_reg_in;
  wire \shift_reg_in[0]_i_1__1_n_0 ;
  wire \shift_reg_in[1]_i_1__1_n_0 ;
  (* async_reg = "true" *) wire [2:0]stat_reg;
  (* async_reg = "true" *) wire [2:0]stat_reg_1;
  (* async_reg = "true" *) wire [2:0]stat_reg_2;
  (* async_reg = "true" *) wire [1:0]stat_reg_ld;
  wire stat_reg_ld_temp_1_i_1__1_n_0;
  wire stat_reg_ld_temp_1_reg_n_0;
  wire [2:0]\stat_reg_reg[2]_0 ;

  LUT4 #(
    .INIT(16'hA808)) 
    iTDO_i_13
       (.I0(icn_cmd_en_temp_reg_0),
        .I1(stat_reg_2[0]),
        .I2(shift_en),
        .I3(shift_reg_in[0]),
        .O(\icn_cmd_en_reg[7] ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_din_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_din_temp_reg_0),
        .Q(icn_cmd_din_temp),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    icn_cmd_en_temp_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp_reg_0),
        .Q(icn_cmd_en_temp),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    shift_en_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(shift_en),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \shift_reg_in[0]_i_1__1 
       (.I0(shift_reg_in[1]),
        .I1(shift_en),
        .I2(stat_reg_2[1]),
        .O(\shift_reg_in[0]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \shift_reg_in[1]_i_1__1 
       (.I0(shift_reg_in[2]),
        .I1(shift_en),
        .I2(stat_reg_2[2]),
        .O(\shift_reg_in[1]_i_1__1_n_0 ));
  initial assign \shift_reg_in_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(\shift_reg_in[0]_i_1__1_n_0 ),
        .Q(shift_reg_in[0]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(\shift_reg_in[1]_i_1__1_n_0 ),
        .Q(shift_reg_in[1]),
        .R(1'b0));
  initial assign \shift_reg_in_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(icn_cmd_en_temp),
        .D(icn_cmd_din_temp),
        .Q(shift_reg_in[2]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[0]),
        .Q(stat_reg_1[0]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[1]),
        .Q(stat_reg_1[1]),
        .R(1'b0));
  initial assign \stat_reg_1_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_1_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg[2]),
        .Q(stat_reg_1[2]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[0]),
        .Q(stat_reg_2[0]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[1]),
        .Q(stat_reg_2[1]),
        .R(1'b0));
  initial assign \stat_reg_2_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_2_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(stat_reg_1[2]),
        .Q(stat_reg_2[2]),
        .R(1'b0));
  initial assign \stat_reg_ld_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_ld_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(icn_cmd_en_temp),
        .Q(stat_reg_ld[0]),
        .R(1'b0));
  initial assign \stat_reg_ld_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_ld_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(stat_reg_ld[0]),
        .Q(stat_reg_ld[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    stat_reg_ld_temp_1_i_1__1
       (.I0(stat_reg_ld[1]),
        .O(stat_reg_ld_temp_1_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    stat_reg_ld_temp_1_reg
       (.C(clk),
        .CE(1'b1),
        .D(stat_reg_ld_temp_1_i_1__1_n_0),
        .Q(stat_reg_ld_temp_1_reg_n_0),
        .R(1'b0));
  initial assign \stat_reg_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[0] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1_reg_n_0),
        .D(\stat_reg_reg[2]_0 [0]),
        .Q(stat_reg[0]),
        .R(1'b0));
  initial assign \stat_reg_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[1] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1_reg_n_0),
        .D(\stat_reg_reg[2]_0 [1]),
        .Q(stat_reg[1]),
        .R(1'b0));
  initial assign \stat_reg_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \stat_reg_reg[2] 
       (.C(clk),
        .CE(stat_reg_ld_temp_1_reg_n_0),
        .D(\stat_reg_reg[2]_0 [2]),
        .Q(stat_reg[2]),
        .R(1'b0));
endmodule

module xsdbm_v3_0_0_sync
   (iDATA_CMD,
    iSYNC,
    D,
    m_bscan_tck);
  input iDATA_CMD;
  output iSYNC;
  input [0:0]D;
  input [0:0]m_bscan_tck;

  wire [0:0]D;
  wire SYNC_i_1_n_0;
  wire iDATA_CMD;
  wire \iGOT_SYNC/i__n_0 ;
  wire iSYNC;
  wire [6:0]iSYNC_WORD;
  wire \iSYNC_WORD[6]_i_1_n_0 ;
  wire [0:0]m_bscan_tck;

  LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
    SYNC_i_1
       (.I0(\iGOT_SYNC/i__n_0 ),
        .I1(iSYNC_WORD[2]),
        .I2(iSYNC_WORD[6]),
        .I3(iSYNC_WORD[4]),
        .I4(iSYNC_WORD[1]),
        .I5(iSYNC),
        .O(SYNC_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_reg
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(SYNC_i_1_n_0),
        .Q(iSYNC),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \iGOT_SYNC/i_ 
       (.I0(iSYNC_WORD[3]),
        .I1(D),
        .I2(iSYNC_WORD[0]),
        .I3(iSYNC_WORD[5]),
        .O(\iGOT_SYNC/i__n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \iSYNC_WORD[6]_i_1 
       (.I0(iDATA_CMD),
        .O(\iSYNC_WORD[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \iSYNC_WORD_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iSYNC_WORD[1]),
        .Q(iSYNC_WORD[0]),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \iSYNC_WORD_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iSYNC_WORD[2]),
        .Q(iSYNC_WORD[1]),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \iSYNC_WORD_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iSYNC_WORD[3]),
        .Q(iSYNC_WORD[2]),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \iSYNC_WORD_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iSYNC_WORD[4]),
        .Q(iSYNC_WORD[3]),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \iSYNC_WORD_reg[4] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iSYNC_WORD[5]),
        .Q(iSYNC_WORD[4]),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \iSYNC_WORD_reg[5] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(iSYNC_WORD[6]),
        .Q(iSYNC_WORD[5]),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \iSYNC_WORD_reg[6] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(D),
        .Q(iSYNC_WORD[6]),
        .R(\iSYNC_WORD[6]_i_1_n_0 ));
endmodule

module xsdbm_v3_0_0_wrfifo
   (EMPTY_O,
    RD_EN_I,
    RST_I,
    clk,
    p_0_in_0,
    DIN_I,
    Q,
    m_bscan_tck,
    out,
    sl_iport0_o);
  output EMPTY_O;
  input RD_EN_I;
  input RST_I;
  input clk;
  input p_0_in_0;
  input [15:0]DIN_I;
  input [3:0]Q;
  input [0:0]m_bscan_tck;
  input [0:0]out;
  output [15:0]sl_iport0_o;

  wire [15:0]DIN_I;
  wire EMPTY_O;
  wire [3:0]Q;
  wire RD_EN_I;
  wire RST_I;
  wire \SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_i_1_n_0 ;
  (* DONT_TOUCH *) wire clk;
  (* DONT_TOUCH *) wire [0:0]m_bscan_tck;
  wire [0:0]out;
  wire p_0_in_0;
  wire [15:0]sl_iport0_o;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_almost_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_almost_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_dbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_bready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_rready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wlast_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tlast_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_overflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_prog_empty_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_prog_full_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_rd_rst_busy_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_arready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_awready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_bvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rlast_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rvalid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_wready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axis_tready_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_sbiterr_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_underflow_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_valid_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_wr_ack_UNCONNECTED ;
  wire \NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_wr_rst_busy_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_rd_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_wr_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_rd_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_wr_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_rd_data_count_UNCONNECTED ;
  wire [4:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_wr_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_rd_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_wr_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_rd_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_wr_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_rd_data_count_UNCONNECTED ;
  wire [10:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_wr_data_count_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_data_count_UNCONNECTED ;
  wire [31:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_araddr_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arburst_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arcache_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arid_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arlen_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arlock_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arprot_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arqos_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arregion_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arsize_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_aruser_UNCONNECTED ;
  wire [31:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awaddr_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awburst_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awcache_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awid_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awlen_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awlock_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awprot_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awqos_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awregion_UNCONNECTED ;
  wire [2:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awsize_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awuser_UNCONNECTED ;
  wire [63:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wdata_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wid_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wstrb_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wuser_UNCONNECTED ;
  wire [63:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tdata_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tdest_UNCONNECTED ;
  wire [7:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tid_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tkeep_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tstrb_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tuser_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_rd_data_count_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_bid_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_bresp_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_buser_UNCONNECTED ;
  wire [63:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rdata_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rid_UNCONNECTED ;
  wire [1:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rresp_UNCONNECTED ;
  wire [0:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_ruser_UNCONNECTED ;
  wire [3:0]\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_wr_data_count_UNCONNECTED ;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "64" *) 
  (* C_AXIS_TDEST_WIDTH = "4" *) 
  (* C_AXIS_TID_WIDTH = "8" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "4" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "2" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "0" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "4" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "16" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "16" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "0" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "0" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "0" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "1" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "1" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "0" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "13" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "12" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "4" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "0" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "4" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  (* DONT_TOUCH *) 
  fifo_generator_v13_1_4 \SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst 
       (.almost_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_almost_empty_UNCONNECTED ),
        .almost_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_almost_full_UNCONNECTED ),
        .axi_ar_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_data_count_UNCONNECTED [4:0]),
        .axi_ar_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_dbiterr_UNCONNECTED ),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_overflow_UNCONNECTED ),
        .axi_ar_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_prog_empty_UNCONNECTED ),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_prog_full_UNCONNECTED ),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_rd_data_count_UNCONNECTED [4:0]),
        .axi_ar_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_sbiterr_UNCONNECTED ),
        .axi_ar_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_underflow_UNCONNECTED ),
        .axi_ar_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_ar_wr_data_count_UNCONNECTED [4:0]),
        .axi_aw_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_data_count_UNCONNECTED [4:0]),
        .axi_aw_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_dbiterr_UNCONNECTED ),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_overflow_UNCONNECTED ),
        .axi_aw_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_prog_empty_UNCONNECTED ),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_prog_full_UNCONNECTED ),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_rd_data_count_UNCONNECTED [4:0]),
        .axi_aw_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_sbiterr_UNCONNECTED ),
        .axi_aw_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_underflow_UNCONNECTED ),
        .axi_aw_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_aw_wr_data_count_UNCONNECTED [4:0]),
        .axi_b_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_data_count_UNCONNECTED [4:0]),
        .axi_b_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_dbiterr_UNCONNECTED ),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_overflow_UNCONNECTED ),
        .axi_b_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_prog_empty_UNCONNECTED ),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_prog_full_UNCONNECTED ),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_rd_data_count_UNCONNECTED [4:0]),
        .axi_b_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_sbiterr_UNCONNECTED ),
        .axi_b_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_underflow_UNCONNECTED ),
        .axi_b_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_b_wr_data_count_UNCONNECTED [4:0]),
        .axi_r_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_data_count_UNCONNECTED [10:0]),
        .axi_r_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_dbiterr_UNCONNECTED ),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_overflow_UNCONNECTED ),
        .axi_r_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_prog_empty_UNCONNECTED ),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_prog_full_UNCONNECTED ),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_rd_data_count_UNCONNECTED [10:0]),
        .axi_r_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_sbiterr_UNCONNECTED ),
        .axi_r_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_underflow_UNCONNECTED ),
        .axi_r_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_r_wr_data_count_UNCONNECTED [10:0]),
        .axi_w_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_data_count_UNCONNECTED [10:0]),
        .axi_w_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_dbiterr_UNCONNECTED ),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_overflow_UNCONNECTED ),
        .axi_w_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_prog_empty_UNCONNECTED ),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_prog_full_UNCONNECTED ),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_rd_data_count_UNCONNECTED [10:0]),
        .axi_w_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_sbiterr_UNCONNECTED ),
        .axi_w_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_underflow_UNCONNECTED ),
        .axi_w_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axi_w_wr_data_count_UNCONNECTED [10:0]),
        .axis_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_data_count_UNCONNECTED [10:0]),
        .axis_dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_dbiterr_UNCONNECTED ),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_overflow_UNCONNECTED ),
        .axis_prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_prog_empty_UNCONNECTED ),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_prog_full_UNCONNECTED ),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_rd_data_count_UNCONNECTED [10:0]),
        .axis_sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_sbiterr_UNCONNECTED ),
        .axis_underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_underflow_UNCONNECTED ),
        .axis_wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_axis_wr_data_count_UNCONNECTED [10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_data_count_UNCONNECTED [3:0]),
        .dbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_dbiterr_UNCONNECTED ),
        .din(DIN_I),
        .dout(sl_iport0_o),
        .empty(EMPTY_O),
        .full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_full_UNCONNECTED ),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_araddr_UNCONNECTED [31:0]),
        .m_axi_arburst(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arburst_UNCONNECTED [1:0]),
        .m_axi_arcache(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arcache_UNCONNECTED [3:0]),
        .m_axi_arid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arid_UNCONNECTED [3:0]),
        .m_axi_arlen(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arlen_UNCONNECTED [7:0]),
        .m_axi_arlock(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arlock_UNCONNECTED [1:0]),
        .m_axi_arprot(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arprot_UNCONNECTED [2:0]),
        .m_axi_arqos(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arqos_UNCONNECTED [3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arregion_UNCONNECTED [3:0]),
        .m_axi_arsize(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arsize_UNCONNECTED [2:0]),
        .m_axi_aruser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_aruser_UNCONNECTED [0]),
        .m_axi_arvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_arvalid_UNCONNECTED ),
        .m_axi_awaddr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awaddr_UNCONNECTED [31:0]),
        .m_axi_awburst(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awburst_UNCONNECTED [1:0]),
        .m_axi_awcache(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awcache_UNCONNECTED [3:0]),
        .m_axi_awid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awid_UNCONNECTED [3:0]),
        .m_axi_awlen(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awlen_UNCONNECTED [7:0]),
        .m_axi_awlock(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awlock_UNCONNECTED [1:0]),
        .m_axi_awprot(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awprot_UNCONNECTED [2:0]),
        .m_axi_awqos(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awqos_UNCONNECTED [3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awregion_UNCONNECTED [3:0]),
        .m_axi_awsize(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awsize_UNCONNECTED [2:0]),
        .m_axi_awuser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awuser_UNCONNECTED [0]),
        .m_axi_awvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_awvalid_UNCONNECTED ),
        .m_axi_bid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_bready_UNCONNECTED ),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rlast(1'b0),
        .m_axi_rready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_rready_UNCONNECTED ),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wdata_UNCONNECTED [63:0]),
        .m_axi_wid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wid_UNCONNECTED [3:0]),
        .m_axi_wlast(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wlast_UNCONNECTED ),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wstrb_UNCONNECTED [7:0]),
        .m_axi_wuser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wuser_UNCONNECTED [0]),
        .m_axi_wvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axi_wvalid_UNCONNECTED ),
        .m_axis_tdata(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tdata_UNCONNECTED [63:0]),
        .m_axis_tdest(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tdest_UNCONNECTED [3:0]),
        .m_axis_tid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tid_UNCONNECTED [7:0]),
        .m_axis_tkeep(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tkeep_UNCONNECTED [3:0]),
        .m_axis_tlast(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tlast_UNCONNECTED ),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tstrb_UNCONNECTED [3:0]),
        .m_axis_tuser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tuser_UNCONNECTED [3:0]),
        .m_axis_tvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_m_axis_tvalid_UNCONNECTED ),
        .overflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_overflow_UNCONNECTED ),
        .prog_empty(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_prog_empty_UNCONNECTED ),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_prog_full_UNCONNECTED ),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(clk),
        .rd_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_rd_data_count_UNCONNECTED [3:0]),
        .rd_en(RD_EN_I),
        .rd_rst(1'b0),
        .rd_rst_busy(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_rd_rst_busy_UNCONNECTED ),
        .rst(RST_I),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock({1'b0,1'b0}),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_arready_UNCONNECTED ),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock({1'b0,1'b0}),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_awready_UNCONNECTED ),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_bid_UNCONNECTED [3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_bresp_UNCONNECTED [1:0]),
        .s_axi_buser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_buser_UNCONNECTED [0]),
        .s_axi_bvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_bvalid_UNCONNECTED ),
        .s_axi_rdata(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rdata_UNCONNECTED [63:0]),
        .s_axi_rid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rid_UNCONNECTED [3:0]),
        .s_axi_rlast(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rlast_UNCONNECTED ),
        .s_axi_rready(1'b0),
        .s_axi_rresp(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rresp_UNCONNECTED [1:0]),
        .s_axi_ruser(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_ruser_UNCONNECTED [0]),
        .s_axi_rvalid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_rvalid_UNCONNECTED ),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axi_wready_UNCONNECTED ),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tid({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_s_axis_tready_UNCONNECTED ),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_sbiterr_UNCONNECTED ),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_underflow_UNCONNECTED ),
        .valid(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_valid_UNCONNECTED ),
        .wr_ack(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_wr_ack_UNCONNECTED ),
        .wr_clk(m_bscan_tck),
        .wr_data_count(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_wr_data_count_UNCONNECTED [3:0]),
        .wr_en(\SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_i_1_n_0 ),
        .wr_rst(1'b0),
        .wr_rst_busy(\NLW_SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_wr_rst_busy_UNCONNECTED ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_i_1 
       (.I0(p_0_in_0),
        .I1(out),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(Q[3]),
        .O(\SUBCORE_FIFO.xsdbm_v3_0_0_wrfifo_inst_i_1_n_0 ));
endmodule

module xsdbm_v3_0_0_wrreg
   (EMPTY_O,
    RD_EN_I,
    RST_I,
    clk,
    p_0_in_0,
    E,
    Q,
    SR,
    m_bscan_tck,
    out,
    \shift_reg_in_reg[15]_0 ,
    sl_iport0_o);
  output EMPTY_O;
  input RD_EN_I;
  input RST_I;
  input clk;
  input p_0_in_0;
  input [0:0]E;
  output [0:0]Q;
  input [0:0]SR;
  input [0:0]m_bscan_tck;
  input [0:0]out;
  input [0:0]\shift_reg_in_reg[15]_0 ;
  output [15:0]sl_iport0_o;

  wire [0:0]E;
  wire EMPTY_O;
  wire [0:0]Q;
  wire RD_EN_I;
  wire RST_I;
  wire [0:0]SR;
  wire clk;
  wire [14:0]fifo_din;
  wire [0:0]m_bscan_tck;
  wire [0:0]out;
  wire p_0_in_0;
  wire [3:0]p_0_in__0;
  wire [3:0]shift_bit_count_reg;
  wire [0:0]\shift_reg_in_reg[15]_0 ;
  wire [15:0]sl_iport0_o;

  xsdbm_v3_0_0_wrfifo U_WR_FIFO
       (.DIN_I({\shift_reg_in_reg[15]_0 ,fifo_din}),
        .EMPTY_O(EMPTY_O),
        .Q(shift_bit_count_reg),
        .RD_EN_I(RD_EN_I),
        .RST_I(RST_I),
        .clk(clk),
        .m_bscan_tck(m_bscan_tck),
        .out(out),
        .p_0_in_0(p_0_in_0),
        .sl_iport0_o(sl_iport0_o));
  (* \PinAttr:I0:HOLD_DETOUR  = "187" *) 
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \shift_bit_count[0]_i_1 
       (.I0(shift_bit_count_reg[0]),
        .O(p_0_in__0[0]));
  (* \PinAttr:I0:HOLD_DETOUR  = "187" *) 
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \shift_bit_count[1]_i_1 
       (.I0(shift_bit_count_reg[0]),
        .I1(shift_bit_count_reg[1]),
        .O(p_0_in__0[1]));
  (* \PinAttr:I2:HOLD_DETOUR  = "187" *) 
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \shift_bit_count[2]_i_1 
       (.I0(shift_bit_count_reg[2]),
        .I1(shift_bit_count_reg[1]),
        .I2(shift_bit_count_reg[0]),
        .O(p_0_in__0[2]));
  (* \PinAttr:I1:HOLD_DETOUR  = "187" *) 
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \shift_bit_count[3]_i_2 
       (.I0(shift_bit_count_reg[3]),
        .I1(shift_bit_count_reg[0]),
        .I2(shift_bit_count_reg[1]),
        .I3(shift_bit_count_reg[2]),
        .O(p_0_in__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[0] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(shift_bit_count_reg[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[1] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(shift_bit_count_reg[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[2] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(shift_bit_count_reg[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \shift_bit_count_reg[3] 
       (.C(m_bscan_tck),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(shift_bit_count_reg[3]),
        .R(SR));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[0] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[0]),
        .Q(Q));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[10] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[10]),
        .Q(fifo_din[9]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[11] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[11]),
        .Q(fifo_din[10]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[12] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[12]),
        .Q(fifo_din[11]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[13] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[13]),
        .Q(fifo_din[12]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[14] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[14]),
        .Q(fifo_din[13]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[15] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(\shift_reg_in_reg[15]_0 ),
        .Q(fifo_din[14]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[1] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[1]),
        .Q(fifo_din[0]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[2] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[2]),
        .Q(fifo_din[1]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[3] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[3]),
        .Q(fifo_din[2]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[4] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[4]),
        .Q(fifo_din[3]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[5] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[5]),
        .Q(fifo_din[4]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[6] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[6]),
        .Q(fifo_din[5]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[7] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[7]),
        .Q(fifo_din[6]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[8] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[8]),
        .Q(fifo_din[7]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_reg_in_reg[9] 
       (.C(m_bscan_tck),
        .CE(E),
        .CLR(RST_I),
        .D(fifo_din[9]),
        .Q(fifo_din[8]));
endmodule

(* C_BSCANID = "32'b00000100100100000000001000100000" *) (* C_BSCAN_MODE = "0" *) (* C_BSCAN_MODE_WITH_CORE = "0" *) 
(* C_BUILD_REVISION = "0" *) (* C_CLKFBOUT_MULT_F = "10.000000" *) (* C_CLKOUT0_DIVIDE_F = "10.000000" *) 
(* C_CLK_INPUT_FREQ_HZ = "32'b00010001111000011010001100000000" *) (* C_CORE_MAJOR_VER = "1" *) (* C_CORE_MINOR_ALPHA_VER = "97" *) 
(* C_CORE_MINOR_VER = "0" *) (* C_CORE_TYPE = "1" *) (* C_DCLK_HAS_RESET = "0" *) 
(* C_DIVCLK_DIVIDE = "3" *) (* C_ENABLE_CLK_DIVIDER = "0" *) (* C_EN_BSCANID_VEC = "0" *) 
(* C_EN_INT_SIM = "1" *) (* C_FIFO_STYLE = "SUBCORE" *) (* C_MAJOR_VERSION = "14" *) 
(* C_MINOR_VERSION = "1" *) (* C_NUM_BSCAN_MASTER_PORTS = "0" *) (* C_TWO_PRIM_MODE = "0" *) 
(* C_USER_SCAN_CHAIN = "1" *) (* C_USER_SCAN_CHAIN1 = "1" *) (* C_USE_BUFR = "0" *) 
(* C_USE_EXT_BSCAN = "0" *) (* C_USE_STARTUP_CLK = "0" *) (* C_XDEVICEFAMILY = "zynq" *) 
(* C_XSDB_NUM_SLAVES = "1" *) (* C_XSDB_PERIOD_FRC = "0" *) (* C_XSDB_PERIOD_INT = "10" *) 
(* dont_touch = "true" *) 
module xsdbm_v3_0_0_xsdbm
   (bscanid_en,
    bscanid_en_0,
    bscanid_en_1,
    bscanid_en_10,
    bscanid_en_11,
    bscanid_en_12,
    bscanid_en_13,
    bscanid_en_14,
    bscanid_en_15,
    bscanid_en_2,
    bscanid_en_3,
    bscanid_en_4,
    bscanid_en_5,
    bscanid_en_6,
    bscanid_en_7,
    bscanid_en_8,
    bscanid_en_9,
    capture,
    capture_0,
    capture_1,
    capture_10,
    capture_11,
    capture_12,
    capture_13,
    capture_14,
    capture_15,
    capture_2,
    capture_3,
    capture_4,
    capture_5,
    capture_6,
    capture_7,
    capture_8,
    capture_9,
    clk,
    drck,
    drck_0,
    drck_1,
    drck_10,
    drck_11,
    drck_12,
    drck_13,
    drck_14,
    drck_15,
    drck_2,
    drck_3,
    drck_4,
    drck_5,
    drck_6,
    drck_7,
    drck_8,
    drck_9,
    reset,
    reset_0,
    reset_1,
    reset_10,
    reset_11,
    reset_12,
    reset_13,
    reset_14,
    reset_15,
    reset_2,
    reset_3,
    reset_4,
    reset_5,
    reset_6,
    reset_7,
    reset_8,
    reset_9,
    runtest,
    runtest_0,
    runtest_1,
    runtest_10,
    runtest_11,
    runtest_12,
    runtest_13,
    runtest_14,
    runtest_15,
    runtest_2,
    runtest_3,
    runtest_4,
    runtest_5,
    runtest_6,
    runtest_7,
    runtest_8,
    runtest_9,
    sel,
    sel_0,
    sel_1,
    sel_10,
    sel_11,
    sel_12,
    sel_13,
    sel_14,
    sel_15,
    sel_2,
    sel_3,
    sel_4,
    sel_5,
    sel_6,
    sel_7,
    sel_8,
    sel_9,
    shift,
    shift_0,
    shift_1,
    shift_10,
    shift_11,
    shift_12,
    shift_13,
    shift_14,
    shift_15,
    shift_2,
    shift_3,
    shift_4,
    shift_5,
    shift_6,
    shift_7,
    shift_8,
    shift_9,
    tck,
    tck_0,
    tck_1,
    tck_10,
    tck_11,
    tck_12,
    tck_13,
    tck_14,
    tck_15,
    tck_2,
    tck_3,
    tck_4,
    tck_5,
    tck_6,
    tck_7,
    tck_8,
    tck_9,
    tdi,
    tdi_0,
    tdi_1,
    tdi_10,
    tdi_11,
    tdi_12,
    tdi_13,
    tdi_14,
    tdi_15,
    tdi_2,
    tdi_3,
    tdi_4,
    tdi_5,
    tdi_6,
    tdi_7,
    tdi_8,
    tdi_9,
    tdo,
    tdo_0,
    tdo_1,
    tdo_10,
    tdo_11,
    tdo_12,
    tdo_13,
    tdo_14,
    tdo_15,
    tdo_2,
    tdo_3,
    tdo_4,
    tdo_5,
    tdo_6,
    tdo_7,
    tdo_8,
    tdo_9,
    tms,
    tms_0,
    tms_1,
    tms_10,
    tms_11,
    tms_12,
    tms_13,
    tms_14,
    tms_15,
    tms_2,
    tms_3,
    tms_4,
    tms_5,
    tms_6,
    tms_7,
    tms_8,
    tms_9,
    update,
    update_0,
    update_1,
    update_10,
    update_11,
    update_12,
    update_13,
    update_14,
    update_15,
    update_2,
    update_3,
    update_4,
    update_5,
    update_6,
    update_7,
    update_8,
    update_9,
    bscanid,
    bscanid_0,
    bscanid_1,
    bscanid_10,
    bscanid_11,
    bscanid_12,
    bscanid_13,
    bscanid_14,
    bscanid_15,
    bscanid_2,
    bscanid_3,
    bscanid_4,
    bscanid_5,
    bscanid_6,
    bscanid_7,
    bscanid_8,
    bscanid_9,
    sl_iport0_o,
    sl_iport100_o,
    sl_iport101_o,
    sl_iport102_o,
    sl_iport103_o,
    sl_iport104_o,
    sl_iport105_o,
    sl_iport106_o,
    sl_iport107_o,
    sl_iport108_o,
    sl_iport109_o,
    sl_iport10_o,
    sl_iport110_o,
    sl_iport111_o,
    sl_iport112_o,
    sl_iport113_o,
    sl_iport114_o,
    sl_iport115_o,
    sl_iport116_o,
    sl_iport117_o,
    sl_iport118_o,
    sl_iport119_o,
    sl_iport11_o,
    sl_iport120_o,
    sl_iport121_o,
    sl_iport122_o,
    sl_iport123_o,
    sl_iport124_o,
    sl_iport125_o,
    sl_iport126_o,
    sl_iport127_o,
    sl_iport128_o,
    sl_iport129_o,
    sl_iport12_o,
    sl_iport130_o,
    sl_iport131_o,
    sl_iport132_o,
    sl_iport133_o,
    sl_iport134_o,
    sl_iport135_o,
    sl_iport136_o,
    sl_iport137_o,
    sl_iport138_o,
    sl_iport139_o,
    sl_iport13_o,
    sl_iport140_o,
    sl_iport141_o,
    sl_iport142_o,
    sl_iport143_o,
    sl_iport144_o,
    sl_iport145_o,
    sl_iport146_o,
    sl_iport147_o,
    sl_iport148_o,
    sl_iport149_o,
    sl_iport14_o,
    sl_iport150_o,
    sl_iport151_o,
    sl_iport152_o,
    sl_iport153_o,
    sl_iport154_o,
    sl_iport155_o,
    sl_iport156_o,
    sl_iport157_o,
    sl_iport158_o,
    sl_iport159_o,
    sl_iport15_o,
    sl_iport160_o,
    sl_iport161_o,
    sl_iport162_o,
    sl_iport163_o,
    sl_iport164_o,
    sl_iport165_o,
    sl_iport166_o,
    sl_iport167_o,
    sl_iport168_o,
    sl_iport169_o,
    sl_iport16_o,
    sl_iport170_o,
    sl_iport171_o,
    sl_iport172_o,
    sl_iport173_o,
    sl_iport174_o,
    sl_iport175_o,
    sl_iport176_o,
    sl_iport177_o,
    sl_iport178_o,
    sl_iport179_o,
    sl_iport17_o,
    sl_iport180_o,
    sl_iport181_o,
    sl_iport182_o,
    sl_iport183_o,
    sl_iport184_o,
    sl_iport185_o,
    sl_iport186_o,
    sl_iport187_o,
    sl_iport188_o,
    sl_iport189_o,
    sl_iport18_o,
    sl_iport190_o,
    sl_iport191_o,
    sl_iport192_o,
    sl_iport193_o,
    sl_iport194_o,
    sl_iport195_o,
    sl_iport196_o,
    sl_iport197_o,
    sl_iport198_o,
    sl_iport199_o,
    sl_iport19_o,
    sl_iport1_o,
    sl_iport200_o,
    sl_iport201_o,
    sl_iport202_o,
    sl_iport203_o,
    sl_iport204_o,
    sl_iport205_o,
    sl_iport206_o,
    sl_iport207_o,
    sl_iport208_o,
    sl_iport209_o,
    sl_iport20_o,
    sl_iport210_o,
    sl_iport211_o,
    sl_iport212_o,
    sl_iport213_o,
    sl_iport214_o,
    sl_iport215_o,
    sl_iport216_o,
    sl_iport217_o,
    sl_iport218_o,
    sl_iport219_o,
    sl_iport21_o,
    sl_iport220_o,
    sl_iport221_o,
    sl_iport222_o,
    sl_iport223_o,
    sl_iport224_o,
    sl_iport225_o,
    sl_iport226_o,
    sl_iport227_o,
    sl_iport228_o,
    sl_iport229_o,
    sl_iport22_o,
    sl_iport230_o,
    sl_iport231_o,
    sl_iport232_o,
    sl_iport233_o,
    sl_iport234_o,
    sl_iport235_o,
    sl_iport236_o,
    sl_iport237_o,
    sl_iport238_o,
    sl_iport239_o,
    sl_iport23_o,
    sl_iport240_o,
    sl_iport241_o,
    sl_iport242_o,
    sl_iport243_o,
    sl_iport244_o,
    sl_iport245_o,
    sl_iport246_o,
    sl_iport247_o,
    sl_iport248_o,
    sl_iport249_o,
    sl_iport24_o,
    sl_iport250_o,
    sl_iport251_o,
    sl_iport252_o,
    sl_iport253_o,
    sl_iport254_o,
    sl_iport255_o,
    sl_iport25_o,
    sl_iport26_o,
    sl_iport27_o,
    sl_iport28_o,
    sl_iport29_o,
    sl_iport2_o,
    sl_iport30_o,
    sl_iport31_o,
    sl_iport32_o,
    sl_iport33_o,
    sl_iport34_o,
    sl_iport35_o,
    sl_iport36_o,
    sl_iport37_o,
    sl_iport38_o,
    sl_iport39_o,
    sl_iport3_o,
    sl_iport40_o,
    sl_iport41_o,
    sl_iport42_o,
    sl_iport43_o,
    sl_iport44_o,
    sl_iport45_o,
    sl_iport46_o,
    sl_iport47_o,
    sl_iport48_o,
    sl_iport49_o,
    sl_iport4_o,
    sl_iport50_o,
    sl_iport51_o,
    sl_iport52_o,
    sl_iport53_o,
    sl_iport54_o,
    sl_iport55_o,
    sl_iport56_o,
    sl_iport57_o,
    sl_iport58_o,
    sl_iport59_o,
    sl_iport5_o,
    sl_iport60_o,
    sl_iport61_o,
    sl_iport62_o,
    sl_iport63_o,
    sl_iport64_o,
    sl_iport65_o,
    sl_iport66_o,
    sl_iport67_o,
    sl_iport68_o,
    sl_iport69_o,
    sl_iport6_o,
    sl_iport70_o,
    sl_iport71_o,
    sl_iport72_o,
    sl_iport73_o,
    sl_iport74_o,
    sl_iport75_o,
    sl_iport76_o,
    sl_iport77_o,
    sl_iport78_o,
    sl_iport79_o,
    sl_iport7_o,
    sl_iport80_o,
    sl_iport81_o,
    sl_iport82_o,
    sl_iport83_o,
    sl_iport84_o,
    sl_iport85_o,
    sl_iport86_o,
    sl_iport87_o,
    sl_iport88_o,
    sl_iport89_o,
    sl_iport8_o,
    sl_iport90_o,
    sl_iport91_o,
    sl_iport92_o,
    sl_iport93_o,
    sl_iport94_o,
    sl_iport95_o,
    sl_iport96_o,
    sl_iport97_o,
    sl_iport98_o,
    sl_iport99_o,
    sl_iport9_o,
    sl_oport0_i,
    sl_oport100_i,
    sl_oport101_i,
    sl_oport102_i,
    sl_oport103_i,
    sl_oport104_i,
    sl_oport105_i,
    sl_oport106_i,
    sl_oport107_i,
    sl_oport108_i,
    sl_oport109_i,
    sl_oport10_i,
    sl_oport110_i,
    sl_oport111_i,
    sl_oport112_i,
    sl_oport113_i,
    sl_oport114_i,
    sl_oport115_i,
    sl_oport116_i,
    sl_oport117_i,
    sl_oport118_i,
    sl_oport119_i,
    sl_oport11_i,
    sl_oport120_i,
    sl_oport121_i,
    sl_oport122_i,
    sl_oport123_i,
    sl_oport124_i,
    sl_oport125_i,
    sl_oport126_i,
    sl_oport127_i,
    sl_oport128_i,
    sl_oport129_i,
    sl_oport12_i,
    sl_oport130_i,
    sl_oport131_i,
    sl_oport132_i,
    sl_oport133_i,
    sl_oport134_i,
    sl_oport135_i,
    sl_oport136_i,
    sl_oport137_i,
    sl_oport138_i,
    sl_oport139_i,
    sl_oport13_i,
    sl_oport140_i,
    sl_oport141_i,
    sl_oport142_i,
    sl_oport143_i,
    sl_oport144_i,
    sl_oport145_i,
    sl_oport146_i,
    sl_oport147_i,
    sl_oport148_i,
    sl_oport149_i,
    sl_oport14_i,
    sl_oport150_i,
    sl_oport151_i,
    sl_oport152_i,
    sl_oport153_i,
    sl_oport154_i,
    sl_oport155_i,
    sl_oport156_i,
    sl_oport157_i,
    sl_oport158_i,
    sl_oport159_i,
    sl_oport15_i,
    sl_oport160_i,
    sl_oport161_i,
    sl_oport162_i,
    sl_oport163_i,
    sl_oport164_i,
    sl_oport165_i,
    sl_oport166_i,
    sl_oport167_i,
    sl_oport168_i,
    sl_oport169_i,
    sl_oport16_i,
    sl_oport170_i,
    sl_oport171_i,
    sl_oport172_i,
    sl_oport173_i,
    sl_oport174_i,
    sl_oport175_i,
    sl_oport176_i,
    sl_oport177_i,
    sl_oport178_i,
    sl_oport179_i,
    sl_oport17_i,
    sl_oport180_i,
    sl_oport181_i,
    sl_oport182_i,
    sl_oport183_i,
    sl_oport184_i,
    sl_oport185_i,
    sl_oport186_i,
    sl_oport187_i,
    sl_oport188_i,
    sl_oport189_i,
    sl_oport18_i,
    sl_oport190_i,
    sl_oport191_i,
    sl_oport192_i,
    sl_oport193_i,
    sl_oport194_i,
    sl_oport195_i,
    sl_oport196_i,
    sl_oport197_i,
    sl_oport198_i,
    sl_oport199_i,
    sl_oport19_i,
    sl_oport1_i,
    sl_oport200_i,
    sl_oport201_i,
    sl_oport202_i,
    sl_oport203_i,
    sl_oport204_i,
    sl_oport205_i,
    sl_oport206_i,
    sl_oport207_i,
    sl_oport208_i,
    sl_oport209_i,
    sl_oport20_i,
    sl_oport210_i,
    sl_oport211_i,
    sl_oport212_i,
    sl_oport213_i,
    sl_oport214_i,
    sl_oport215_i,
    sl_oport216_i,
    sl_oport217_i,
    sl_oport218_i,
    sl_oport219_i,
    sl_oport21_i,
    sl_oport220_i,
    sl_oport221_i,
    sl_oport222_i,
    sl_oport223_i,
    sl_oport224_i,
    sl_oport225_i,
    sl_oport226_i,
    sl_oport227_i,
    sl_oport228_i,
    sl_oport229_i,
    sl_oport22_i,
    sl_oport230_i,
    sl_oport231_i,
    sl_oport232_i,
    sl_oport233_i,
    sl_oport234_i,
    sl_oport235_i,
    sl_oport236_i,
    sl_oport237_i,
    sl_oport238_i,
    sl_oport239_i,
    sl_oport23_i,
    sl_oport240_i,
    sl_oport241_i,
    sl_oport242_i,
    sl_oport243_i,
    sl_oport244_i,
    sl_oport245_i,
    sl_oport246_i,
    sl_oport247_i,
    sl_oport248_i,
    sl_oport249_i,
    sl_oport24_i,
    sl_oport250_i,
    sl_oport251_i,
    sl_oport252_i,
    sl_oport253_i,
    sl_oport254_i,
    sl_oport255_i,
    sl_oport25_i,
    sl_oport26_i,
    sl_oport27_i,
    sl_oport28_i,
    sl_oport29_i,
    sl_oport2_i,
    sl_oport30_i,
    sl_oport31_i,
    sl_oport32_i,
    sl_oport33_i,
    sl_oport34_i,
    sl_oport35_i,
    sl_oport36_i,
    sl_oport37_i,
    sl_oport38_i,
    sl_oport39_i,
    sl_oport3_i,
    sl_oport40_i,
    sl_oport41_i,
    sl_oport42_i,
    sl_oport43_i,
    sl_oport44_i,
    sl_oport45_i,
    sl_oport46_i,
    sl_oport47_i,
    sl_oport48_i,
    sl_oport49_i,
    sl_oport4_i,
    sl_oport50_i,
    sl_oport51_i,
    sl_oport52_i,
    sl_oport53_i,
    sl_oport54_i,
    sl_oport55_i,
    sl_oport56_i,
    sl_oport57_i,
    sl_oport58_i,
    sl_oport59_i,
    sl_oport5_i,
    sl_oport60_i,
    sl_oport61_i,
    sl_oport62_i,
    sl_oport63_i,
    sl_oport64_i,
    sl_oport65_i,
    sl_oport66_i,
    sl_oport67_i,
    sl_oport68_i,
    sl_oport69_i,
    sl_oport6_i,
    sl_oport70_i,
    sl_oport71_i,
    sl_oport72_i,
    sl_oport73_i,
    sl_oport74_i,
    sl_oport75_i,
    sl_oport76_i,
    sl_oport77_i,
    sl_oport78_i,
    sl_oport79_i,
    sl_oport7_i,
    sl_oport80_i,
    sl_oport81_i,
    sl_oport82_i,
    sl_oport83_i,
    sl_oport84_i,
    sl_oport85_i,
    sl_oport86_i,
    sl_oport87_i,
    sl_oport88_i,
    sl_oport89_i,
    sl_oport8_i,
    sl_oport90_i,
    sl_oport91_i,
    sl_oport92_i,
    sl_oport93_i,
    sl_oport94_i,
    sl_oport95_i,
    sl_oport96_i,
    sl_oport97_i,
    sl_oport98_i,
    sl_oport99_i,
    sl_oport9_i);
  input bscanid_en;
  (* BSCAN_SLAVE_INDEX = "0" *) output bscanid_en_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output bscanid_en_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output bscanid_en_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output bscanid_en_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output bscanid_en_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output bscanid_en_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output bscanid_en_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output bscanid_en_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output bscanid_en_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output bscanid_en_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output bscanid_en_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output bscanid_en_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output bscanid_en_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output bscanid_en_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output bscanid_en_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output bscanid_en_9;
  input capture;
  (* BSCAN_SLAVE_INDEX = "0" *) output capture_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output capture_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output capture_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output capture_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output capture_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output capture_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output capture_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output capture_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output capture_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output capture_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output capture_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output capture_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output capture_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output capture_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output capture_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output capture_9;
  input clk;
  input drck;
  (* BSCAN_SLAVE_INDEX = "0" *) output drck_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output drck_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output drck_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output drck_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output drck_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output drck_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output drck_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output drck_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output drck_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output drck_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output drck_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output drck_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output drck_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output drck_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output drck_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output drck_9;
  input reset;
  (* BSCAN_SLAVE_INDEX = "0" *) output reset_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output reset_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output reset_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output reset_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output reset_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output reset_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output reset_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output reset_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output reset_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output reset_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output reset_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output reset_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output reset_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output reset_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output reset_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output reset_9;
  input runtest;
  (* BSCAN_SLAVE_INDEX = "0" *) output runtest_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output runtest_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output runtest_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output runtest_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output runtest_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output runtest_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output runtest_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output runtest_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output runtest_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output runtest_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output runtest_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output runtest_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output runtest_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output runtest_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output runtest_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output runtest_9;
  input sel;
  (* BSCAN_SLAVE_INDEX = "0" *) output sel_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output sel_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output sel_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output sel_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output sel_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output sel_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output sel_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output sel_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output sel_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output sel_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output sel_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output sel_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output sel_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output sel_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output sel_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output sel_9;
  input shift;
  (* BSCAN_SLAVE_INDEX = "0" *) output shift_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output shift_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output shift_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output shift_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output shift_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output shift_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output shift_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output shift_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output shift_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output shift_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output shift_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output shift_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output shift_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output shift_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output shift_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output shift_9;
  input tck;
  (* BSCAN_SLAVE_INDEX = "0" *) output tck_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output tck_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output tck_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output tck_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output tck_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output tck_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output tck_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output tck_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output tck_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output tck_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output tck_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output tck_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output tck_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output tck_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output tck_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output tck_9;
  input tdi;
  (* BSCAN_SLAVE_INDEX = "0" *) output tdi_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output tdi_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output tdi_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output tdi_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output tdi_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output tdi_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output tdi_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output tdi_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output tdi_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output tdi_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output tdi_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output tdi_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output tdi_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output tdi_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output tdi_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output tdi_9;
  output tdo;
  (* BSCAN_SLAVE_INDEX = "0" *) input tdo_0;
  (* BSCAN_SLAVE_INDEX = "1" *) input tdo_1;
  (* BSCAN_SLAVE_INDEX = "10" *) input tdo_10;
  (* BSCAN_SLAVE_INDEX = "11" *) input tdo_11;
  (* BSCAN_SLAVE_INDEX = "12" *) input tdo_12;
  (* BSCAN_SLAVE_INDEX = "13" *) input tdo_13;
  (* BSCAN_SLAVE_INDEX = "14" *) input tdo_14;
  (* BSCAN_SLAVE_INDEX = "15" *) input tdo_15;
  (* BSCAN_SLAVE_INDEX = "2" *) input tdo_2;
  (* BSCAN_SLAVE_INDEX = "3" *) input tdo_3;
  (* BSCAN_SLAVE_INDEX = "4" *) input tdo_4;
  (* BSCAN_SLAVE_INDEX = "5" *) input tdo_5;
  (* BSCAN_SLAVE_INDEX = "6" *) input tdo_6;
  (* BSCAN_SLAVE_INDEX = "7" *) input tdo_7;
  (* BSCAN_SLAVE_INDEX = "8" *) input tdo_8;
  (* BSCAN_SLAVE_INDEX = "9" *) input tdo_9;
  input tms;
  (* BSCAN_SLAVE_INDEX = "0" *) output tms_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output tms_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output tms_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output tms_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output tms_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output tms_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output tms_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output tms_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output tms_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output tms_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output tms_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output tms_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output tms_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output tms_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output tms_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output tms_9;
  input update;
  (* BSCAN_SLAVE_INDEX = "0" *) output update_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output update_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output update_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output update_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output update_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output update_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output update_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output update_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output update_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output update_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output update_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output update_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output update_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output update_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output update_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output update_9;
  output [31:0]bscanid;
  (* BSCAN_SLAVE_INDEX = "0" *) input [31:0]bscanid_0;
  (* BSCAN_SLAVE_INDEX = "1" *) input [31:0]bscanid_1;
  (* BSCAN_SLAVE_INDEX = "10" *) input [31:0]bscanid_10;
  (* BSCAN_SLAVE_INDEX = "11" *) input [31:0]bscanid_11;
  (* BSCAN_SLAVE_INDEX = "12" *) input [31:0]bscanid_12;
  (* BSCAN_SLAVE_INDEX = "13" *) input [31:0]bscanid_13;
  (* BSCAN_SLAVE_INDEX = "14" *) input [31:0]bscanid_14;
  (* BSCAN_SLAVE_INDEX = "15" *) input [31:0]bscanid_15;
  (* BSCAN_SLAVE_INDEX = "2" *) input [31:0]bscanid_2;
  (* BSCAN_SLAVE_INDEX = "3" *) input [31:0]bscanid_3;
  (* BSCAN_SLAVE_INDEX = "4" *) input [31:0]bscanid_4;
  (* BSCAN_SLAVE_INDEX = "5" *) input [31:0]bscanid_5;
  (* BSCAN_SLAVE_INDEX = "6" *) input [31:0]bscanid_6;
  (* BSCAN_SLAVE_INDEX = "7" *) input [31:0]bscanid_7;
  (* BSCAN_SLAVE_INDEX = "8" *) input [31:0]bscanid_8;
  (* BSCAN_SLAVE_INDEX = "9" *) input [31:0]bscanid_9;
  output [36:0]sl_iport0_o;
  output [0:0]sl_iport100_o;
  output [0:0]sl_iport101_o;
  output [0:0]sl_iport102_o;
  output [0:0]sl_iport103_o;
  output [0:0]sl_iport104_o;
  output [0:0]sl_iport105_o;
  output [0:0]sl_iport106_o;
  output [0:0]sl_iport107_o;
  output [0:0]sl_iport108_o;
  output [0:0]sl_iport109_o;
  output [0:0]sl_iport10_o;
  output [0:0]sl_iport110_o;
  output [0:0]sl_iport111_o;
  output [0:0]sl_iport112_o;
  output [0:0]sl_iport113_o;
  output [0:0]sl_iport114_o;
  output [0:0]sl_iport115_o;
  output [0:0]sl_iport116_o;
  output [0:0]sl_iport117_o;
  output [0:0]sl_iport118_o;
  output [0:0]sl_iport119_o;
  output [0:0]sl_iport11_o;
  output [0:0]sl_iport120_o;
  output [0:0]sl_iport121_o;
  output [0:0]sl_iport122_o;
  output [0:0]sl_iport123_o;
  output [0:0]sl_iport124_o;
  output [0:0]sl_iport125_o;
  output [0:0]sl_iport126_o;
  output [0:0]sl_iport127_o;
  output [0:0]sl_iport128_o;
  output [0:0]sl_iport129_o;
  output [0:0]sl_iport12_o;
  output [0:0]sl_iport130_o;
  output [0:0]sl_iport131_o;
  output [0:0]sl_iport132_o;
  output [0:0]sl_iport133_o;
  output [0:0]sl_iport134_o;
  output [0:0]sl_iport135_o;
  output [0:0]sl_iport136_o;
  output [0:0]sl_iport137_o;
  output [0:0]sl_iport138_o;
  output [0:0]sl_iport139_o;
  output [0:0]sl_iport13_o;
  output [0:0]sl_iport140_o;
  output [0:0]sl_iport141_o;
  output [0:0]sl_iport142_o;
  output [0:0]sl_iport143_o;
  output [0:0]sl_iport144_o;
  output [0:0]sl_iport145_o;
  output [0:0]sl_iport146_o;
  output [0:0]sl_iport147_o;
  output [0:0]sl_iport148_o;
  output [0:0]sl_iport149_o;
  output [0:0]sl_iport14_o;
  output [0:0]sl_iport150_o;
  output [0:0]sl_iport151_o;
  output [0:0]sl_iport152_o;
  output [0:0]sl_iport153_o;
  output [0:0]sl_iport154_o;
  output [0:0]sl_iport155_o;
  output [0:0]sl_iport156_o;
  output [0:0]sl_iport157_o;
  output [0:0]sl_iport158_o;
  output [0:0]sl_iport159_o;
  output [0:0]sl_iport15_o;
  output [0:0]sl_iport160_o;
  output [0:0]sl_iport161_o;
  output [0:0]sl_iport162_o;
  output [0:0]sl_iport163_o;
  output [0:0]sl_iport164_o;
  output [0:0]sl_iport165_o;
  output [0:0]sl_iport166_o;
  output [0:0]sl_iport167_o;
  output [0:0]sl_iport168_o;
  output [0:0]sl_iport169_o;
  output [0:0]sl_iport16_o;
  output [0:0]sl_iport170_o;
  output [0:0]sl_iport171_o;
  output [0:0]sl_iport172_o;
  output [0:0]sl_iport173_o;
  output [0:0]sl_iport174_o;
  output [0:0]sl_iport175_o;
  output [0:0]sl_iport176_o;
  output [0:0]sl_iport177_o;
  output [0:0]sl_iport178_o;
  output [0:0]sl_iport179_o;
  output [0:0]sl_iport17_o;
  output [0:0]sl_iport180_o;
  output [0:0]sl_iport181_o;
  output [0:0]sl_iport182_o;
  output [0:0]sl_iport183_o;
  output [0:0]sl_iport184_o;
  output [0:0]sl_iport185_o;
  output [0:0]sl_iport186_o;
  output [0:0]sl_iport187_o;
  output [0:0]sl_iport188_o;
  output [0:0]sl_iport189_o;
  output [0:0]sl_iport18_o;
  output [0:0]sl_iport190_o;
  output [0:0]sl_iport191_o;
  output [0:0]sl_iport192_o;
  output [0:0]sl_iport193_o;
  output [0:0]sl_iport194_o;
  output [0:0]sl_iport195_o;
  output [0:0]sl_iport196_o;
  output [0:0]sl_iport197_o;
  output [0:0]sl_iport198_o;
  output [0:0]sl_iport199_o;
  output [0:0]sl_iport19_o;
  output [0:0]sl_iport1_o;
  output [0:0]sl_iport200_o;
  output [0:0]sl_iport201_o;
  output [0:0]sl_iport202_o;
  output [0:0]sl_iport203_o;
  output [0:0]sl_iport204_o;
  output [0:0]sl_iport205_o;
  output [0:0]sl_iport206_o;
  output [0:0]sl_iport207_o;
  output [0:0]sl_iport208_o;
  output [0:0]sl_iport209_o;
  output [0:0]sl_iport20_o;
  output [0:0]sl_iport210_o;
  output [0:0]sl_iport211_o;
  output [0:0]sl_iport212_o;
  output [0:0]sl_iport213_o;
  output [0:0]sl_iport214_o;
  output [0:0]sl_iport215_o;
  output [0:0]sl_iport216_o;
  output [0:0]sl_iport217_o;
  output [0:0]sl_iport218_o;
  output [0:0]sl_iport219_o;
  output [0:0]sl_iport21_o;
  output [0:0]sl_iport220_o;
  output [0:0]sl_iport221_o;
  output [0:0]sl_iport222_o;
  output [0:0]sl_iport223_o;
  output [0:0]sl_iport224_o;
  output [0:0]sl_iport225_o;
  output [0:0]sl_iport226_o;
  output [0:0]sl_iport227_o;
  output [0:0]sl_iport228_o;
  output [0:0]sl_iport229_o;
  output [0:0]sl_iport22_o;
  output [0:0]sl_iport230_o;
  output [0:0]sl_iport231_o;
  output [0:0]sl_iport232_o;
  output [0:0]sl_iport233_o;
  output [0:0]sl_iport234_o;
  output [0:0]sl_iport235_o;
  output [0:0]sl_iport236_o;
  output [0:0]sl_iport237_o;
  output [0:0]sl_iport238_o;
  output [0:0]sl_iport239_o;
  output [0:0]sl_iport23_o;
  output [0:0]sl_iport240_o;
  output [0:0]sl_iport241_o;
  output [0:0]sl_iport242_o;
  output [0:0]sl_iport243_o;
  output [0:0]sl_iport244_o;
  output [0:0]sl_iport245_o;
  output [0:0]sl_iport246_o;
  output [0:0]sl_iport247_o;
  output [0:0]sl_iport248_o;
  output [0:0]sl_iport249_o;
  output [0:0]sl_iport24_o;
  output [0:0]sl_iport250_o;
  output [0:0]sl_iport251_o;
  output [0:0]sl_iport252_o;
  output [0:0]sl_iport253_o;
  output [0:0]sl_iport254_o;
  output [0:0]sl_iport255_o;
  output [0:0]sl_iport25_o;
  output [0:0]sl_iport26_o;
  output [0:0]sl_iport27_o;
  output [0:0]sl_iport28_o;
  output [0:0]sl_iport29_o;
  output [0:0]sl_iport2_o;
  output [0:0]sl_iport30_o;
  output [0:0]sl_iport31_o;
  output [0:0]sl_iport32_o;
  output [0:0]sl_iport33_o;
  output [0:0]sl_iport34_o;
  output [0:0]sl_iport35_o;
  output [0:0]sl_iport36_o;
  output [0:0]sl_iport37_o;
  output [0:0]sl_iport38_o;
  output [0:0]sl_iport39_o;
  output [0:0]sl_iport3_o;
  output [0:0]sl_iport40_o;
  output [0:0]sl_iport41_o;
  output [0:0]sl_iport42_o;
  output [0:0]sl_iport43_o;
  output [0:0]sl_iport44_o;
  output [0:0]sl_iport45_o;
  output [0:0]sl_iport46_o;
  output [0:0]sl_iport47_o;
  output [0:0]sl_iport48_o;
  output [0:0]sl_iport49_o;
  output [0:0]sl_iport4_o;
  output [0:0]sl_iport50_o;
  output [0:0]sl_iport51_o;
  output [0:0]sl_iport52_o;
  output [0:0]sl_iport53_o;
  output [0:0]sl_iport54_o;
  output [0:0]sl_iport55_o;
  output [0:0]sl_iport56_o;
  output [0:0]sl_iport57_o;
  output [0:0]sl_iport58_o;
  output [0:0]sl_iport59_o;
  output [0:0]sl_iport5_o;
  output [0:0]sl_iport60_o;
  output [0:0]sl_iport61_o;
  output [0:0]sl_iport62_o;
  output [0:0]sl_iport63_o;
  output [0:0]sl_iport64_o;
  output [0:0]sl_iport65_o;
  output [0:0]sl_iport66_o;
  output [0:0]sl_iport67_o;
  output [0:0]sl_iport68_o;
  output [0:0]sl_iport69_o;
  output [0:0]sl_iport6_o;
  output [0:0]sl_iport70_o;
  output [0:0]sl_iport71_o;
  output [0:0]sl_iport72_o;
  output [0:0]sl_iport73_o;
  output [0:0]sl_iport74_o;
  output [0:0]sl_iport75_o;
  output [0:0]sl_iport76_o;
  output [0:0]sl_iport77_o;
  output [0:0]sl_iport78_o;
  output [0:0]sl_iport79_o;
  output [0:0]sl_iport7_o;
  output [0:0]sl_iport80_o;
  output [0:0]sl_iport81_o;
  output [0:0]sl_iport82_o;
  output [0:0]sl_iport83_o;
  output [0:0]sl_iport84_o;
  output [0:0]sl_iport85_o;
  output [0:0]sl_iport86_o;
  output [0:0]sl_iport87_o;
  output [0:0]sl_iport88_o;
  output [0:0]sl_iport89_o;
  output [0:0]sl_iport8_o;
  output [0:0]sl_iport90_o;
  output [0:0]sl_iport91_o;
  output [0:0]sl_iport92_o;
  output [0:0]sl_iport93_o;
  output [0:0]sl_iport94_o;
  output [0:0]sl_iport95_o;
  output [0:0]sl_iport96_o;
  output [0:0]sl_iport97_o;
  output [0:0]sl_iport98_o;
  output [0:0]sl_iport99_o;
  output [0:0]sl_iport9_o;
  input [16:0]sl_oport0_i;
  input [0:0]sl_oport100_i;
  input [0:0]sl_oport101_i;
  input [0:0]sl_oport102_i;
  input [0:0]sl_oport103_i;
  input [0:0]sl_oport104_i;
  input [0:0]sl_oport105_i;
  input [0:0]sl_oport106_i;
  input [0:0]sl_oport107_i;
  input [0:0]sl_oport108_i;
  input [0:0]sl_oport109_i;
  input [0:0]sl_oport10_i;
  input [0:0]sl_oport110_i;
  input [0:0]sl_oport111_i;
  input [0:0]sl_oport112_i;
  input [0:0]sl_oport113_i;
  input [0:0]sl_oport114_i;
  input [0:0]sl_oport115_i;
  input [0:0]sl_oport116_i;
  input [0:0]sl_oport117_i;
  input [0:0]sl_oport118_i;
  input [0:0]sl_oport119_i;
  input [0:0]sl_oport11_i;
  input [0:0]sl_oport120_i;
  input [0:0]sl_oport121_i;
  input [0:0]sl_oport122_i;
  input [0:0]sl_oport123_i;
  input [0:0]sl_oport124_i;
  input [0:0]sl_oport125_i;
  input [0:0]sl_oport126_i;
  input [0:0]sl_oport127_i;
  input [0:0]sl_oport128_i;
  input [0:0]sl_oport129_i;
  input [0:0]sl_oport12_i;
  input [0:0]sl_oport130_i;
  input [0:0]sl_oport131_i;
  input [0:0]sl_oport132_i;
  input [0:0]sl_oport133_i;
  input [0:0]sl_oport134_i;
  input [0:0]sl_oport135_i;
  input [0:0]sl_oport136_i;
  input [0:0]sl_oport137_i;
  input [0:0]sl_oport138_i;
  input [0:0]sl_oport139_i;
  input [0:0]sl_oport13_i;
  input [0:0]sl_oport140_i;
  input [0:0]sl_oport141_i;
  input [0:0]sl_oport142_i;
  input [0:0]sl_oport143_i;
  input [0:0]sl_oport144_i;
  input [0:0]sl_oport145_i;
  input [0:0]sl_oport146_i;
  input [0:0]sl_oport147_i;
  input [0:0]sl_oport148_i;
  input [0:0]sl_oport149_i;
  input [0:0]sl_oport14_i;
  input [0:0]sl_oport150_i;
  input [0:0]sl_oport151_i;
  input [0:0]sl_oport152_i;
  input [0:0]sl_oport153_i;
  input [0:0]sl_oport154_i;
  input [0:0]sl_oport155_i;
  input [0:0]sl_oport156_i;
  input [0:0]sl_oport157_i;
  input [0:0]sl_oport158_i;
  input [0:0]sl_oport159_i;
  input [0:0]sl_oport15_i;
  input [0:0]sl_oport160_i;
  input [0:0]sl_oport161_i;
  input [0:0]sl_oport162_i;
  input [0:0]sl_oport163_i;
  input [0:0]sl_oport164_i;
  input [0:0]sl_oport165_i;
  input [0:0]sl_oport166_i;
  input [0:0]sl_oport167_i;
  input [0:0]sl_oport168_i;
  input [0:0]sl_oport169_i;
  input [0:0]sl_oport16_i;
  input [0:0]sl_oport170_i;
  input [0:0]sl_oport171_i;
  input [0:0]sl_oport172_i;
  input [0:0]sl_oport173_i;
  input [0:0]sl_oport174_i;
  input [0:0]sl_oport175_i;
  input [0:0]sl_oport176_i;
  input [0:0]sl_oport177_i;
  input [0:0]sl_oport178_i;
  input [0:0]sl_oport179_i;
  input [0:0]sl_oport17_i;
  input [0:0]sl_oport180_i;
  input [0:0]sl_oport181_i;
  input [0:0]sl_oport182_i;
  input [0:0]sl_oport183_i;
  input [0:0]sl_oport184_i;
  input [0:0]sl_oport185_i;
  input [0:0]sl_oport186_i;
  input [0:0]sl_oport187_i;
  input [0:0]sl_oport188_i;
  input [0:0]sl_oport189_i;
  input [0:0]sl_oport18_i;
  input [0:0]sl_oport190_i;
  input [0:0]sl_oport191_i;
  input [0:0]sl_oport192_i;
  input [0:0]sl_oport193_i;
  input [0:0]sl_oport194_i;
  input [0:0]sl_oport195_i;
  input [0:0]sl_oport196_i;
  input [0:0]sl_oport197_i;
  input [0:0]sl_oport198_i;
  input [0:0]sl_oport199_i;
  input [0:0]sl_oport19_i;
  input [0:0]sl_oport1_i;
  input [0:0]sl_oport200_i;
  input [0:0]sl_oport201_i;
  input [0:0]sl_oport202_i;
  input [0:0]sl_oport203_i;
  input [0:0]sl_oport204_i;
  input [0:0]sl_oport205_i;
  input [0:0]sl_oport206_i;
  input [0:0]sl_oport207_i;
  input [0:0]sl_oport208_i;
  input [0:0]sl_oport209_i;
  input [0:0]sl_oport20_i;
  input [0:0]sl_oport210_i;
  input [0:0]sl_oport211_i;
  input [0:0]sl_oport212_i;
  input [0:0]sl_oport213_i;
  input [0:0]sl_oport214_i;
  input [0:0]sl_oport215_i;
  input [0:0]sl_oport216_i;
  input [0:0]sl_oport217_i;
  input [0:0]sl_oport218_i;
  input [0:0]sl_oport219_i;
  input [0:0]sl_oport21_i;
  input [0:0]sl_oport220_i;
  input [0:0]sl_oport221_i;
  input [0:0]sl_oport222_i;
  input [0:0]sl_oport223_i;
  input [0:0]sl_oport224_i;
  input [0:0]sl_oport225_i;
  input [0:0]sl_oport226_i;
  input [0:0]sl_oport227_i;
  input [0:0]sl_oport228_i;
  input [0:0]sl_oport229_i;
  input [0:0]sl_oport22_i;
  input [0:0]sl_oport230_i;
  input [0:0]sl_oport231_i;
  input [0:0]sl_oport232_i;
  input [0:0]sl_oport233_i;
  input [0:0]sl_oport234_i;
  input [0:0]sl_oport235_i;
  input [0:0]sl_oport236_i;
  input [0:0]sl_oport237_i;
  input [0:0]sl_oport238_i;
  input [0:0]sl_oport239_i;
  input [0:0]sl_oport23_i;
  input [0:0]sl_oport240_i;
  input [0:0]sl_oport241_i;
  input [0:0]sl_oport242_i;
  input [0:0]sl_oport243_i;
  input [0:0]sl_oport244_i;
  input [0:0]sl_oport245_i;
  input [0:0]sl_oport246_i;
  input [0:0]sl_oport247_i;
  input [0:0]sl_oport248_i;
  input [0:0]sl_oport249_i;
  input [0:0]sl_oport24_i;
  input [0:0]sl_oport250_i;
  input [0:0]sl_oport251_i;
  input [0:0]sl_oport252_i;
  input [0:0]sl_oport253_i;
  input [0:0]sl_oport254_i;
  input [0:0]sl_oport255_i;
  input [0:0]sl_oport25_i;
  input [0:0]sl_oport26_i;
  input [0:0]sl_oport27_i;
  input [0:0]sl_oport28_i;
  input [0:0]sl_oport29_i;
  input [0:0]sl_oport2_i;
  input [0:0]sl_oport30_i;
  input [0:0]sl_oport31_i;
  input [0:0]sl_oport32_i;
  input [0:0]sl_oport33_i;
  input [0:0]sl_oport34_i;
  input [0:0]sl_oport35_i;
  input [0:0]sl_oport36_i;
  input [0:0]sl_oport37_i;
  input [0:0]sl_oport38_i;
  input [0:0]sl_oport39_i;
  input [0:0]sl_oport3_i;
  input [0:0]sl_oport40_i;
  input [0:0]sl_oport41_i;
  input [0:0]sl_oport42_i;
  input [0:0]sl_oport43_i;
  input [0:0]sl_oport44_i;
  input [0:0]sl_oport45_i;
  input [0:0]sl_oport46_i;
  input [0:0]sl_oport47_i;
  input [0:0]sl_oport48_i;
  input [0:0]sl_oport49_i;
  input [0:0]sl_oport4_i;
  input [0:0]sl_oport50_i;
  input [0:0]sl_oport51_i;
  input [0:0]sl_oport52_i;
  input [0:0]sl_oport53_i;
  input [0:0]sl_oport54_i;
  input [0:0]sl_oport55_i;
  input [0:0]sl_oport56_i;
  input [0:0]sl_oport57_i;
  input [0:0]sl_oport58_i;
  input [0:0]sl_oport59_i;
  input [0:0]sl_oport5_i;
  input [0:0]sl_oport60_i;
  input [0:0]sl_oport61_i;
  input [0:0]sl_oport62_i;
  input [0:0]sl_oport63_i;
  input [0:0]sl_oport64_i;
  input [0:0]sl_oport65_i;
  input [0:0]sl_oport66_i;
  input [0:0]sl_oport67_i;
  input [0:0]sl_oport68_i;
  input [0:0]sl_oport69_i;
  input [0:0]sl_oport6_i;
  input [0:0]sl_oport70_i;
  input [0:0]sl_oport71_i;
  input [0:0]sl_oport72_i;
  input [0:0]sl_oport73_i;
  input [0:0]sl_oport74_i;
  input [0:0]sl_oport75_i;
  input [0:0]sl_oport76_i;
  input [0:0]sl_oport77_i;
  input [0:0]sl_oport78_i;
  input [0:0]sl_oport79_i;
  input [0:0]sl_oport7_i;
  input [0:0]sl_oport80_i;
  input [0:0]sl_oport81_i;
  input [0:0]sl_oport82_i;
  input [0:0]sl_oport83_i;
  input [0:0]sl_oport84_i;
  input [0:0]sl_oport85_i;
  input [0:0]sl_oport86_i;
  input [0:0]sl_oport87_i;
  input [0:0]sl_oport88_i;
  input [0:0]sl_oport89_i;
  input [0:0]sl_oport8_i;
  input [0:0]sl_oport90_i;
  input [0:0]sl_oport91_i;
  input [0:0]sl_oport92_i;
  input [0:0]sl_oport93_i;
  input [0:0]sl_oport94_i;
  input [0:0]sl_oport95_i;
  input [0:0]sl_oport96_i;
  input [0:0]sl_oport97_i;
  input [0:0]sl_oport98_i;
  input [0:0]sl_oport99_i;
  input [0:0]sl_oport9_i;

  wire bscanid_en;
  wire capture;
  wire clk;
  wire drck;
  wire reset;
  wire runtest;
  wire sel;
  wire shift;
  wire [36:0]sl_iport0_o;
  wire [16:0]sl_oport0_i;
  wire [0:0]sl_oport100_i;
  wire [0:0]sl_oport101_i;
  wire [0:0]sl_oport102_i;
  wire [0:0]sl_oport103_i;
  wire [0:0]sl_oport104_i;
  wire [0:0]sl_oport105_i;
  wire [0:0]sl_oport106_i;
  wire [0:0]sl_oport107_i;
  wire [0:0]sl_oport108_i;
  wire [0:0]sl_oport109_i;
  wire [0:0]sl_oport10_i;
  wire [0:0]sl_oport110_i;
  wire [0:0]sl_oport111_i;
  wire [0:0]sl_oport112_i;
  wire [0:0]sl_oport113_i;
  wire [0:0]sl_oport114_i;
  wire [0:0]sl_oport115_i;
  wire [0:0]sl_oport116_i;
  wire [0:0]sl_oport117_i;
  wire [0:0]sl_oport118_i;
  wire [0:0]sl_oport119_i;
  wire [0:0]sl_oport11_i;
  wire [0:0]sl_oport120_i;
  wire [0:0]sl_oport121_i;
  wire [0:0]sl_oport122_i;
  wire [0:0]sl_oport123_i;
  wire [0:0]sl_oport124_i;
  wire [0:0]sl_oport125_i;
  wire [0:0]sl_oport126_i;
  wire [0:0]sl_oport127_i;
  wire [0:0]sl_oport128_i;
  wire [0:0]sl_oport129_i;
  wire [0:0]sl_oport12_i;
  wire [0:0]sl_oport130_i;
  wire [0:0]sl_oport131_i;
  wire [0:0]sl_oport132_i;
  wire [0:0]sl_oport133_i;
  wire [0:0]sl_oport134_i;
  wire [0:0]sl_oport135_i;
  wire [0:0]sl_oport136_i;
  wire [0:0]sl_oport137_i;
  wire [0:0]sl_oport138_i;
  wire [0:0]sl_oport139_i;
  wire [0:0]sl_oport13_i;
  wire [0:0]sl_oport140_i;
  wire [0:0]sl_oport141_i;
  wire [0:0]sl_oport142_i;
  wire [0:0]sl_oport143_i;
  wire [0:0]sl_oport144_i;
  wire [0:0]sl_oport145_i;
  wire [0:0]sl_oport146_i;
  wire [0:0]sl_oport147_i;
  wire [0:0]sl_oport148_i;
  wire [0:0]sl_oport149_i;
  wire [0:0]sl_oport14_i;
  wire [0:0]sl_oport150_i;
  wire [0:0]sl_oport151_i;
  wire [0:0]sl_oport152_i;
  wire [0:0]sl_oport153_i;
  wire [0:0]sl_oport154_i;
  wire [0:0]sl_oport155_i;
  wire [0:0]sl_oport156_i;
  wire [0:0]sl_oport157_i;
  wire [0:0]sl_oport158_i;
  wire [0:0]sl_oport159_i;
  wire [0:0]sl_oport15_i;
  wire [0:0]sl_oport160_i;
  wire [0:0]sl_oport161_i;
  wire [0:0]sl_oport162_i;
  wire [0:0]sl_oport163_i;
  wire [0:0]sl_oport164_i;
  wire [0:0]sl_oport165_i;
  wire [0:0]sl_oport166_i;
  wire [0:0]sl_oport167_i;
  wire [0:0]sl_oport168_i;
  wire [0:0]sl_oport169_i;
  wire [0:0]sl_oport16_i;
  wire [0:0]sl_oport170_i;
  wire [0:0]sl_oport171_i;
  wire [0:0]sl_oport172_i;
  wire [0:0]sl_oport173_i;
  wire [0:0]sl_oport174_i;
  wire [0:0]sl_oport175_i;
  wire [0:0]sl_oport176_i;
  wire [0:0]sl_oport177_i;
  wire [0:0]sl_oport178_i;
  wire [0:0]sl_oport179_i;
  wire [0:0]sl_oport17_i;
  wire [0:0]sl_oport180_i;
  wire [0:0]sl_oport181_i;
  wire [0:0]sl_oport182_i;
  wire [0:0]sl_oport183_i;
  wire [0:0]sl_oport184_i;
  wire [0:0]sl_oport185_i;
  wire [0:0]sl_oport186_i;
  wire [0:0]sl_oport187_i;
  wire [0:0]sl_oport188_i;
  wire [0:0]sl_oport189_i;
  wire [0:0]sl_oport18_i;
  wire [0:0]sl_oport190_i;
  wire [0:0]sl_oport191_i;
  wire [0:0]sl_oport192_i;
  wire [0:0]sl_oport193_i;
  wire [0:0]sl_oport194_i;
  wire [0:0]sl_oport195_i;
  wire [0:0]sl_oport196_i;
  wire [0:0]sl_oport197_i;
  wire [0:0]sl_oport198_i;
  wire [0:0]sl_oport199_i;
  wire [0:0]sl_oport19_i;
  wire [0:0]sl_oport1_i;
  wire [0:0]sl_oport200_i;
  wire [0:0]sl_oport201_i;
  wire [0:0]sl_oport202_i;
  wire [0:0]sl_oport203_i;
  wire [0:0]sl_oport204_i;
  wire [0:0]sl_oport205_i;
  wire [0:0]sl_oport206_i;
  wire [0:0]sl_oport207_i;
  wire [0:0]sl_oport208_i;
  wire [0:0]sl_oport209_i;
  wire [0:0]sl_oport20_i;
  wire [0:0]sl_oport210_i;
  wire [0:0]sl_oport211_i;
  wire [0:0]sl_oport212_i;
  wire [0:0]sl_oport213_i;
  wire [0:0]sl_oport214_i;
  wire [0:0]sl_oport215_i;
  wire [0:0]sl_oport216_i;
  wire [0:0]sl_oport217_i;
  wire [0:0]sl_oport218_i;
  wire [0:0]sl_oport219_i;
  wire [0:0]sl_oport21_i;
  wire [0:0]sl_oport220_i;
  wire [0:0]sl_oport221_i;
  wire [0:0]sl_oport222_i;
  wire [0:0]sl_oport223_i;
  wire [0:0]sl_oport224_i;
  wire [0:0]sl_oport225_i;
  wire [0:0]sl_oport226_i;
  wire [0:0]sl_oport227_i;
  wire [0:0]sl_oport228_i;
  wire [0:0]sl_oport229_i;
  wire [0:0]sl_oport22_i;
  wire [0:0]sl_oport230_i;
  wire [0:0]sl_oport231_i;
  wire [0:0]sl_oport232_i;
  wire [0:0]sl_oport233_i;
  wire [0:0]sl_oport234_i;
  wire [0:0]sl_oport235_i;
  wire [0:0]sl_oport236_i;
  wire [0:0]sl_oport237_i;
  wire [0:0]sl_oport238_i;
  wire [0:0]sl_oport239_i;
  wire [0:0]sl_oport23_i;
  wire [0:0]sl_oport240_i;
  wire [0:0]sl_oport241_i;
  wire [0:0]sl_oport242_i;
  wire [0:0]sl_oport243_i;
  wire [0:0]sl_oport244_i;
  wire [0:0]sl_oport245_i;
  wire [0:0]sl_oport246_i;
  wire [0:0]sl_oport247_i;
  wire [0:0]sl_oport248_i;
  wire [0:0]sl_oport249_i;
  wire [0:0]sl_oport24_i;
  wire [0:0]sl_oport250_i;
  wire [0:0]sl_oport251_i;
  wire [0:0]sl_oport252_i;
  wire [0:0]sl_oport253_i;
  wire [0:0]sl_oport254_i;
  wire [0:0]sl_oport255_i;
  wire [0:0]sl_oport25_i;
  wire [0:0]sl_oport26_i;
  wire [0:0]sl_oport27_i;
  wire [0:0]sl_oport28_i;
  wire [0:0]sl_oport29_i;
  wire [0:0]sl_oport2_i;
  wire [0:0]sl_oport30_i;
  wire [0:0]sl_oport31_i;
  wire [0:0]sl_oport32_i;
  wire [0:0]sl_oport33_i;
  wire [0:0]sl_oport34_i;
  wire [0:0]sl_oport35_i;
  wire [0:0]sl_oport36_i;
  wire [0:0]sl_oport37_i;
  wire [0:0]sl_oport38_i;
  wire [0:0]sl_oport39_i;
  wire [0:0]sl_oport3_i;
  wire [0:0]sl_oport40_i;
  wire [0:0]sl_oport41_i;
  wire [0:0]sl_oport42_i;
  wire [0:0]sl_oport43_i;
  wire [0:0]sl_oport44_i;
  wire [0:0]sl_oport45_i;
  wire [0:0]sl_oport46_i;
  wire [0:0]sl_oport47_i;
  wire [0:0]sl_oport48_i;
  wire [0:0]sl_oport49_i;
  wire [0:0]sl_oport4_i;
  wire [0:0]sl_oport50_i;
  wire [0:0]sl_oport51_i;
  wire [0:0]sl_oport52_i;
  wire [0:0]sl_oport53_i;
  wire [0:0]sl_oport54_i;
  wire [0:0]sl_oport55_i;
  wire [0:0]sl_oport56_i;
  wire [0:0]sl_oport57_i;
  wire [0:0]sl_oport58_i;
  wire [0:0]sl_oport59_i;
  wire [0:0]sl_oport5_i;
  wire [0:0]sl_oport60_i;
  wire [0:0]sl_oport61_i;
  wire [0:0]sl_oport62_i;
  wire [0:0]sl_oport63_i;
  wire [0:0]sl_oport64_i;
  wire [0:0]sl_oport65_i;
  wire [0:0]sl_oport66_i;
  wire [0:0]sl_oport67_i;
  wire [0:0]sl_oport68_i;
  wire [0:0]sl_oport69_i;
  wire [0:0]sl_oport6_i;
  wire [0:0]sl_oport70_i;
  wire [0:0]sl_oport71_i;
  wire [0:0]sl_oport72_i;
  wire [0:0]sl_oport73_i;
  wire [0:0]sl_oport74_i;
  wire [0:0]sl_oport75_i;
  wire [0:0]sl_oport76_i;
  wire [0:0]sl_oport77_i;
  wire [0:0]sl_oport78_i;
  wire [0:0]sl_oport79_i;
  wire [0:0]sl_oport7_i;
  wire [0:0]sl_oport80_i;
  wire [0:0]sl_oport81_i;
  wire [0:0]sl_oport82_i;
  wire [0:0]sl_oport83_i;
  wire [0:0]sl_oport84_i;
  wire [0:0]sl_oport85_i;
  wire [0:0]sl_oport86_i;
  wire [0:0]sl_oport87_i;
  wire [0:0]sl_oport88_i;
  wire [0:0]sl_oport89_i;
  wire [0:0]sl_oport8_i;
  wire [0:0]sl_oport90_i;
  wire [0:0]sl_oport91_i;
  wire [0:0]sl_oport92_i;
  wire [0:0]sl_oport93_i;
  wire [0:0]sl_oport94_i;
  wire [0:0]sl_oport95_i;
  wire [0:0]sl_oport96_i;
  wire [0:0]sl_oport97_i;
  wire [0:0]sl_oport98_i;
  wire [0:0]sl_oport99_i;
  wire [0:0]sl_oport9_i;
  wire tck;
  wire tdi;
  wire tdo_0;
  wire tdo_1;
  wire tdo_10;
  wire tdo_11;
  wire tdo_12;
  wire tdo_13;
  wire tdo_14;
  wire tdo_15;
  wire tdo_2;
  wire tdo_3;
  wire tdo_4;
  wire tdo_5;
  wire tdo_6;
  wire tdo_7;
  wire tdo_8;
  wire tdo_9;
  wire tms;
  wire update;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_bscanid_en_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_capture_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_drck_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_reset_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_runtest_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_sel_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_shift_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tck_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdi_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tdo_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_tms_9_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_0_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_1_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_10_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_11_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_12_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_13_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_14_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_15_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_2_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_3_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_4_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_5_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_6_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_7_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_8_UNCONNECTED ;
  wire \NLW_BSCANID.u_xsdbm_id_update_9_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport100_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport101_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport102_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport103_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport104_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport105_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport106_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport107_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport108_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport109_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport10_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport110_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport111_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport112_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport113_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport114_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport115_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport116_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport117_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport118_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport119_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport11_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport120_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport121_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport122_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport123_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport124_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport125_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport126_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport127_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport128_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport129_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport12_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport130_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport131_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport132_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport133_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport134_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport135_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport136_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport137_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport138_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport139_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport13_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport140_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport141_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport142_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport143_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport144_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport145_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport146_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport147_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport148_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport149_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport14_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport150_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport151_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport152_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport153_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport154_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport155_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport156_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport157_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport158_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport159_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport15_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport160_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport161_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport162_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport163_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport164_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport165_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport166_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport167_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport168_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport169_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport16_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport170_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport171_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport172_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport173_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport174_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport175_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport176_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport177_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport178_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport179_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport17_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport180_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport181_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport182_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport183_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport184_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport185_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport186_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport187_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport188_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport189_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport18_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport190_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport191_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport192_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport193_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport194_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport195_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport196_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport197_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport198_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport199_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport19_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport1_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport200_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport201_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport202_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport203_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport204_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport205_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport206_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport207_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport208_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport209_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport20_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport210_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport211_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport212_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport213_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport214_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport215_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport216_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport217_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport218_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport219_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport21_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport220_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport221_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport222_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport223_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport224_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport225_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport226_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport227_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport228_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport229_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport22_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport230_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport231_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport232_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport233_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport234_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport235_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport236_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport237_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport238_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport239_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport23_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport240_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport241_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport242_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport243_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport244_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport245_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport246_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport247_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport248_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport249_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport24_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport250_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport251_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport252_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport253_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport254_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport255_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport25_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport26_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport27_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport28_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport29_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport2_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport30_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport31_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport32_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport33_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport34_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport35_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport36_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport37_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport38_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport39_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport3_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport40_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport41_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport42_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport43_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport44_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport45_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport46_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport47_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport48_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport49_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport4_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport50_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport51_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport52_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport53_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport54_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport55_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport56_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport57_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport58_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport59_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport5_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport60_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport61_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport62_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport63_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport64_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport65_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport66_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport67_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport68_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport69_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport6_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport70_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport71_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport72_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport73_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport74_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport75_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport76_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport77_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport78_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport79_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport7_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport80_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport81_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport82_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport83_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport84_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport85_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport86_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport87_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport88_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport89_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport8_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport90_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport91_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport92_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport93_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport94_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport95_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport96_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport97_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport98_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport99_o_UNCONNECTED ;
  wire [0:0]\NLW_BSCANID.u_xsdbm_id_sl_iport9_o_UNCONNECTED ;

  (* C_BSCANID = "32'b00000100100100000000001000100000" *) 
  (* C_BSCAN_MODE = "0" *) 
  (* C_BSCAN_MODE_WITH_CORE = "0" *) 
  (* C_BUILD_REVISION = "0" *) 
  (* C_CLKFBOUT_MULT_F = "10.000000" *) 
  (* C_CLKOUT0_DIVIDE_F = "10.000000" *) 
  (* C_CLK_INPUT_FREQ_HZ = "32'b00010001111000011010001100000000" *) 
  (* C_CORE_MAJOR_VER = "1" *) 
  (* C_CORE_MINOR_ALPHA_VER = "97" *) 
  (* C_CORE_MINOR_VER = "0" *) 
  (* C_CORE_TYPE = "1" *) 
  (* C_DCLK_HAS_RESET = "0" *) 
  (* C_DIVCLK_DIVIDE = "3" *) 
  (* C_ENABLE_CLK_DIVIDER = "0" *) 
  (* C_EN_BSCANID_VEC = "0" *) 
  (* C_EN_INT_SIM = "1" *) 
  (* C_FIFO_STYLE = "SUBCORE" *) 
  (* C_MAJOR_VERSION = "14" *) 
  (* C_MINOR_VERSION = "1" *) 
  (* C_NUM_BSCAN_MASTER_PORTS = "0" *) 
  (* C_TWO_PRIM_MODE = "0" *) 
  (* C_USER_SCAN_CHAIN = "1" *) 
  (* C_USER_SCAN_CHAIN1 = "1" *) 
  (* C_USE_BUFR = "0" *) 
  (* C_USE_EXT_BSCAN = "0" *) 
  (* C_USE_STARTUP_CLK = "0" *) 
  (* C_XDEVICEFAMILY = "zynq" *) 
  (* C_XSDB_NUM_SLAVES = "1" *) 
  (* C_XSDB_PERIOD_FRC = "0" *) 
  (* C_XSDB_PERIOD_INT = "10" *) 
  (* DONT_TOUCH *) 
  (* LC_CLKIN1_PERIOD = "3.333333" *) 
  xsdbm_v3_0_0_xsdbm_id \BSCANID.u_xsdbm_id 
       (.bscanid_en(bscanid_en),
        .bscanid_en_0(\NLW_BSCANID.u_xsdbm_id_bscanid_en_0_UNCONNECTED ),
        .bscanid_en_1(\NLW_BSCANID.u_xsdbm_id_bscanid_en_1_UNCONNECTED ),
        .bscanid_en_10(\NLW_BSCANID.u_xsdbm_id_bscanid_en_10_UNCONNECTED ),
        .bscanid_en_11(\NLW_BSCANID.u_xsdbm_id_bscanid_en_11_UNCONNECTED ),
        .bscanid_en_12(\NLW_BSCANID.u_xsdbm_id_bscanid_en_12_UNCONNECTED ),
        .bscanid_en_13(\NLW_BSCANID.u_xsdbm_id_bscanid_en_13_UNCONNECTED ),
        .bscanid_en_14(\NLW_BSCANID.u_xsdbm_id_bscanid_en_14_UNCONNECTED ),
        .bscanid_en_15(\NLW_BSCANID.u_xsdbm_id_bscanid_en_15_UNCONNECTED ),
        .bscanid_en_2(\NLW_BSCANID.u_xsdbm_id_bscanid_en_2_UNCONNECTED ),
        .bscanid_en_3(\NLW_BSCANID.u_xsdbm_id_bscanid_en_3_UNCONNECTED ),
        .bscanid_en_4(\NLW_BSCANID.u_xsdbm_id_bscanid_en_4_UNCONNECTED ),
        .bscanid_en_5(\NLW_BSCANID.u_xsdbm_id_bscanid_en_5_UNCONNECTED ),
        .bscanid_en_6(\NLW_BSCANID.u_xsdbm_id_bscanid_en_6_UNCONNECTED ),
        .bscanid_en_7(\NLW_BSCANID.u_xsdbm_id_bscanid_en_7_UNCONNECTED ),
        .bscanid_en_8(\NLW_BSCANID.u_xsdbm_id_bscanid_en_8_UNCONNECTED ),
        .bscanid_en_9(\NLW_BSCANID.u_xsdbm_id_bscanid_en_9_UNCONNECTED ),
        .capture(capture),
        .capture_0(\NLW_BSCANID.u_xsdbm_id_capture_0_UNCONNECTED ),
        .capture_1(\NLW_BSCANID.u_xsdbm_id_capture_1_UNCONNECTED ),
        .capture_10(\NLW_BSCANID.u_xsdbm_id_capture_10_UNCONNECTED ),
        .capture_11(\NLW_BSCANID.u_xsdbm_id_capture_11_UNCONNECTED ),
        .capture_12(\NLW_BSCANID.u_xsdbm_id_capture_12_UNCONNECTED ),
        .capture_13(\NLW_BSCANID.u_xsdbm_id_capture_13_UNCONNECTED ),
        .capture_14(\NLW_BSCANID.u_xsdbm_id_capture_14_UNCONNECTED ),
        .capture_15(\NLW_BSCANID.u_xsdbm_id_capture_15_UNCONNECTED ),
        .capture_2(\NLW_BSCANID.u_xsdbm_id_capture_2_UNCONNECTED ),
        .capture_3(\NLW_BSCANID.u_xsdbm_id_capture_3_UNCONNECTED ),
        .capture_4(\NLW_BSCANID.u_xsdbm_id_capture_4_UNCONNECTED ),
        .capture_5(\NLW_BSCANID.u_xsdbm_id_capture_5_UNCONNECTED ),
        .capture_6(\NLW_BSCANID.u_xsdbm_id_capture_6_UNCONNECTED ),
        .capture_7(\NLW_BSCANID.u_xsdbm_id_capture_7_UNCONNECTED ),
        .capture_8(\NLW_BSCANID.u_xsdbm_id_capture_8_UNCONNECTED ),
        .capture_9(\NLW_BSCANID.u_xsdbm_id_capture_9_UNCONNECTED ),
        .clk(clk),
        .drck(drck),
        .drck_0(\NLW_BSCANID.u_xsdbm_id_drck_0_UNCONNECTED ),
        .drck_1(\NLW_BSCANID.u_xsdbm_id_drck_1_UNCONNECTED ),
        .drck_10(\NLW_BSCANID.u_xsdbm_id_drck_10_UNCONNECTED ),
        .drck_11(\NLW_BSCANID.u_xsdbm_id_drck_11_UNCONNECTED ),
        .drck_12(\NLW_BSCANID.u_xsdbm_id_drck_12_UNCONNECTED ),
        .drck_13(\NLW_BSCANID.u_xsdbm_id_drck_13_UNCONNECTED ),
        .drck_14(\NLW_BSCANID.u_xsdbm_id_drck_14_UNCONNECTED ),
        .drck_15(\NLW_BSCANID.u_xsdbm_id_drck_15_UNCONNECTED ),
        .drck_2(\NLW_BSCANID.u_xsdbm_id_drck_2_UNCONNECTED ),
        .drck_3(\NLW_BSCANID.u_xsdbm_id_drck_3_UNCONNECTED ),
        .drck_4(\NLW_BSCANID.u_xsdbm_id_drck_4_UNCONNECTED ),
        .drck_5(\NLW_BSCANID.u_xsdbm_id_drck_5_UNCONNECTED ),
        .drck_6(\NLW_BSCANID.u_xsdbm_id_drck_6_UNCONNECTED ),
        .drck_7(\NLW_BSCANID.u_xsdbm_id_drck_7_UNCONNECTED ),
        .drck_8(\NLW_BSCANID.u_xsdbm_id_drck_8_UNCONNECTED ),
        .drck_9(\NLW_BSCANID.u_xsdbm_id_drck_9_UNCONNECTED ),
        .reset(reset),
        .reset_0(\NLW_BSCANID.u_xsdbm_id_reset_0_UNCONNECTED ),
        .reset_1(\NLW_BSCANID.u_xsdbm_id_reset_1_UNCONNECTED ),
        .reset_10(\NLW_BSCANID.u_xsdbm_id_reset_10_UNCONNECTED ),
        .reset_11(\NLW_BSCANID.u_xsdbm_id_reset_11_UNCONNECTED ),
        .reset_12(\NLW_BSCANID.u_xsdbm_id_reset_12_UNCONNECTED ),
        .reset_13(\NLW_BSCANID.u_xsdbm_id_reset_13_UNCONNECTED ),
        .reset_14(\NLW_BSCANID.u_xsdbm_id_reset_14_UNCONNECTED ),
        .reset_15(\NLW_BSCANID.u_xsdbm_id_reset_15_UNCONNECTED ),
        .reset_2(\NLW_BSCANID.u_xsdbm_id_reset_2_UNCONNECTED ),
        .reset_3(\NLW_BSCANID.u_xsdbm_id_reset_3_UNCONNECTED ),
        .reset_4(\NLW_BSCANID.u_xsdbm_id_reset_4_UNCONNECTED ),
        .reset_5(\NLW_BSCANID.u_xsdbm_id_reset_5_UNCONNECTED ),
        .reset_6(\NLW_BSCANID.u_xsdbm_id_reset_6_UNCONNECTED ),
        .reset_7(\NLW_BSCANID.u_xsdbm_id_reset_7_UNCONNECTED ),
        .reset_8(\NLW_BSCANID.u_xsdbm_id_reset_8_UNCONNECTED ),
        .reset_9(\NLW_BSCANID.u_xsdbm_id_reset_9_UNCONNECTED ),
        .runtest(runtest),
        .runtest_0(\NLW_BSCANID.u_xsdbm_id_runtest_0_UNCONNECTED ),
        .runtest_1(\NLW_BSCANID.u_xsdbm_id_runtest_1_UNCONNECTED ),
        .runtest_10(\NLW_BSCANID.u_xsdbm_id_runtest_10_UNCONNECTED ),
        .runtest_11(\NLW_BSCANID.u_xsdbm_id_runtest_11_UNCONNECTED ),
        .runtest_12(\NLW_BSCANID.u_xsdbm_id_runtest_12_UNCONNECTED ),
        .runtest_13(\NLW_BSCANID.u_xsdbm_id_runtest_13_UNCONNECTED ),
        .runtest_14(\NLW_BSCANID.u_xsdbm_id_runtest_14_UNCONNECTED ),
        .runtest_15(\NLW_BSCANID.u_xsdbm_id_runtest_15_UNCONNECTED ),
        .runtest_2(\NLW_BSCANID.u_xsdbm_id_runtest_2_UNCONNECTED ),
        .runtest_3(\NLW_BSCANID.u_xsdbm_id_runtest_3_UNCONNECTED ),
        .runtest_4(\NLW_BSCANID.u_xsdbm_id_runtest_4_UNCONNECTED ),
        .runtest_5(\NLW_BSCANID.u_xsdbm_id_runtest_5_UNCONNECTED ),
        .runtest_6(\NLW_BSCANID.u_xsdbm_id_runtest_6_UNCONNECTED ),
        .runtest_7(\NLW_BSCANID.u_xsdbm_id_runtest_7_UNCONNECTED ),
        .runtest_8(\NLW_BSCANID.u_xsdbm_id_runtest_8_UNCONNECTED ),
        .runtest_9(\NLW_BSCANID.u_xsdbm_id_runtest_9_UNCONNECTED ),
        .sel(sel),
        .sel_0(\NLW_BSCANID.u_xsdbm_id_sel_0_UNCONNECTED ),
        .sel_1(\NLW_BSCANID.u_xsdbm_id_sel_1_UNCONNECTED ),
        .sel_10(\NLW_BSCANID.u_xsdbm_id_sel_10_UNCONNECTED ),
        .sel_11(\NLW_BSCANID.u_xsdbm_id_sel_11_UNCONNECTED ),
        .sel_12(\NLW_BSCANID.u_xsdbm_id_sel_12_UNCONNECTED ),
        .sel_13(\NLW_BSCANID.u_xsdbm_id_sel_13_UNCONNECTED ),
        .sel_14(\NLW_BSCANID.u_xsdbm_id_sel_14_UNCONNECTED ),
        .sel_15(\NLW_BSCANID.u_xsdbm_id_sel_15_UNCONNECTED ),
        .sel_2(\NLW_BSCANID.u_xsdbm_id_sel_2_UNCONNECTED ),
        .sel_3(\NLW_BSCANID.u_xsdbm_id_sel_3_UNCONNECTED ),
        .sel_4(\NLW_BSCANID.u_xsdbm_id_sel_4_UNCONNECTED ),
        .sel_5(\NLW_BSCANID.u_xsdbm_id_sel_5_UNCONNECTED ),
        .sel_6(\NLW_BSCANID.u_xsdbm_id_sel_6_UNCONNECTED ),
        .sel_7(\NLW_BSCANID.u_xsdbm_id_sel_7_UNCONNECTED ),
        .sel_8(\NLW_BSCANID.u_xsdbm_id_sel_8_UNCONNECTED ),
        .sel_9(\NLW_BSCANID.u_xsdbm_id_sel_9_UNCONNECTED ),
        .shift(shift),
        .shift_0(\NLW_BSCANID.u_xsdbm_id_shift_0_UNCONNECTED ),
        .shift_1(\NLW_BSCANID.u_xsdbm_id_shift_1_UNCONNECTED ),
        .shift_10(\NLW_BSCANID.u_xsdbm_id_shift_10_UNCONNECTED ),
        .shift_11(\NLW_BSCANID.u_xsdbm_id_shift_11_UNCONNECTED ),
        .shift_12(\NLW_BSCANID.u_xsdbm_id_shift_12_UNCONNECTED ),
        .shift_13(\NLW_BSCANID.u_xsdbm_id_shift_13_UNCONNECTED ),
        .shift_14(\NLW_BSCANID.u_xsdbm_id_shift_14_UNCONNECTED ),
        .shift_15(\NLW_BSCANID.u_xsdbm_id_shift_15_UNCONNECTED ),
        .shift_2(\NLW_BSCANID.u_xsdbm_id_shift_2_UNCONNECTED ),
        .shift_3(\NLW_BSCANID.u_xsdbm_id_shift_3_UNCONNECTED ),
        .shift_4(\NLW_BSCANID.u_xsdbm_id_shift_4_UNCONNECTED ),
        .shift_5(\NLW_BSCANID.u_xsdbm_id_shift_5_UNCONNECTED ),
        .shift_6(\NLW_BSCANID.u_xsdbm_id_shift_6_UNCONNECTED ),
        .shift_7(\NLW_BSCANID.u_xsdbm_id_shift_7_UNCONNECTED ),
        .shift_8(\NLW_BSCANID.u_xsdbm_id_shift_8_UNCONNECTED ),
        .shift_9(\NLW_BSCANID.u_xsdbm_id_shift_9_UNCONNECTED ),
        .sl_iport0_o(sl_iport0_o),
        .sl_iport100_o(\NLW_BSCANID.u_xsdbm_id_sl_iport100_o_UNCONNECTED [0]),
        .sl_iport101_o(\NLW_BSCANID.u_xsdbm_id_sl_iport101_o_UNCONNECTED [0]),
        .sl_iport102_o(\NLW_BSCANID.u_xsdbm_id_sl_iport102_o_UNCONNECTED [0]),
        .sl_iport103_o(\NLW_BSCANID.u_xsdbm_id_sl_iport103_o_UNCONNECTED [0]),
        .sl_iport104_o(\NLW_BSCANID.u_xsdbm_id_sl_iport104_o_UNCONNECTED [0]),
        .sl_iport105_o(\NLW_BSCANID.u_xsdbm_id_sl_iport105_o_UNCONNECTED [0]),
        .sl_iport106_o(\NLW_BSCANID.u_xsdbm_id_sl_iport106_o_UNCONNECTED [0]),
        .sl_iport107_o(\NLW_BSCANID.u_xsdbm_id_sl_iport107_o_UNCONNECTED [0]),
        .sl_iport108_o(\NLW_BSCANID.u_xsdbm_id_sl_iport108_o_UNCONNECTED [0]),
        .sl_iport109_o(\NLW_BSCANID.u_xsdbm_id_sl_iport109_o_UNCONNECTED [0]),
        .sl_iport10_o(\NLW_BSCANID.u_xsdbm_id_sl_iport10_o_UNCONNECTED [0]),
        .sl_iport110_o(\NLW_BSCANID.u_xsdbm_id_sl_iport110_o_UNCONNECTED [0]),
        .sl_iport111_o(\NLW_BSCANID.u_xsdbm_id_sl_iport111_o_UNCONNECTED [0]),
        .sl_iport112_o(\NLW_BSCANID.u_xsdbm_id_sl_iport112_o_UNCONNECTED [0]),
        .sl_iport113_o(\NLW_BSCANID.u_xsdbm_id_sl_iport113_o_UNCONNECTED [0]),
        .sl_iport114_o(\NLW_BSCANID.u_xsdbm_id_sl_iport114_o_UNCONNECTED [0]),
        .sl_iport115_o(\NLW_BSCANID.u_xsdbm_id_sl_iport115_o_UNCONNECTED [0]),
        .sl_iport116_o(\NLW_BSCANID.u_xsdbm_id_sl_iport116_o_UNCONNECTED [0]),
        .sl_iport117_o(\NLW_BSCANID.u_xsdbm_id_sl_iport117_o_UNCONNECTED [0]),
        .sl_iport118_o(\NLW_BSCANID.u_xsdbm_id_sl_iport118_o_UNCONNECTED [0]),
        .sl_iport119_o(\NLW_BSCANID.u_xsdbm_id_sl_iport119_o_UNCONNECTED [0]),
        .sl_iport11_o(\NLW_BSCANID.u_xsdbm_id_sl_iport11_o_UNCONNECTED [0]),
        .sl_iport120_o(\NLW_BSCANID.u_xsdbm_id_sl_iport120_o_UNCONNECTED [0]),
        .sl_iport121_o(\NLW_BSCANID.u_xsdbm_id_sl_iport121_o_UNCONNECTED [0]),
        .sl_iport122_o(\NLW_BSCANID.u_xsdbm_id_sl_iport122_o_UNCONNECTED [0]),
        .sl_iport123_o(\NLW_BSCANID.u_xsdbm_id_sl_iport123_o_UNCONNECTED [0]),
        .sl_iport124_o(\NLW_BSCANID.u_xsdbm_id_sl_iport124_o_UNCONNECTED [0]),
        .sl_iport125_o(\NLW_BSCANID.u_xsdbm_id_sl_iport125_o_UNCONNECTED [0]),
        .sl_iport126_o(\NLW_BSCANID.u_xsdbm_id_sl_iport126_o_UNCONNECTED [0]),
        .sl_iport127_o(\NLW_BSCANID.u_xsdbm_id_sl_iport127_o_UNCONNECTED [0]),
        .sl_iport128_o(\NLW_BSCANID.u_xsdbm_id_sl_iport128_o_UNCONNECTED [0]),
        .sl_iport129_o(\NLW_BSCANID.u_xsdbm_id_sl_iport129_o_UNCONNECTED [0]),
        .sl_iport12_o(\NLW_BSCANID.u_xsdbm_id_sl_iport12_o_UNCONNECTED [0]),
        .sl_iport130_o(\NLW_BSCANID.u_xsdbm_id_sl_iport130_o_UNCONNECTED [0]),
        .sl_iport131_o(\NLW_BSCANID.u_xsdbm_id_sl_iport131_o_UNCONNECTED [0]),
        .sl_iport132_o(\NLW_BSCANID.u_xsdbm_id_sl_iport132_o_UNCONNECTED [0]),
        .sl_iport133_o(\NLW_BSCANID.u_xsdbm_id_sl_iport133_o_UNCONNECTED [0]),
        .sl_iport134_o(\NLW_BSCANID.u_xsdbm_id_sl_iport134_o_UNCONNECTED [0]),
        .sl_iport135_o(\NLW_BSCANID.u_xsdbm_id_sl_iport135_o_UNCONNECTED [0]),
        .sl_iport136_o(\NLW_BSCANID.u_xsdbm_id_sl_iport136_o_UNCONNECTED [0]),
        .sl_iport137_o(\NLW_BSCANID.u_xsdbm_id_sl_iport137_o_UNCONNECTED [0]),
        .sl_iport138_o(\NLW_BSCANID.u_xsdbm_id_sl_iport138_o_UNCONNECTED [0]),
        .sl_iport139_o(\NLW_BSCANID.u_xsdbm_id_sl_iport139_o_UNCONNECTED [0]),
        .sl_iport13_o(\NLW_BSCANID.u_xsdbm_id_sl_iport13_o_UNCONNECTED [0]),
        .sl_iport140_o(\NLW_BSCANID.u_xsdbm_id_sl_iport140_o_UNCONNECTED [0]),
        .sl_iport141_o(\NLW_BSCANID.u_xsdbm_id_sl_iport141_o_UNCONNECTED [0]),
        .sl_iport142_o(\NLW_BSCANID.u_xsdbm_id_sl_iport142_o_UNCONNECTED [0]),
        .sl_iport143_o(\NLW_BSCANID.u_xsdbm_id_sl_iport143_o_UNCONNECTED [0]),
        .sl_iport144_o(\NLW_BSCANID.u_xsdbm_id_sl_iport144_o_UNCONNECTED [0]),
        .sl_iport145_o(\NLW_BSCANID.u_xsdbm_id_sl_iport145_o_UNCONNECTED [0]),
        .sl_iport146_o(\NLW_BSCANID.u_xsdbm_id_sl_iport146_o_UNCONNECTED [0]),
        .sl_iport147_o(\NLW_BSCANID.u_xsdbm_id_sl_iport147_o_UNCONNECTED [0]),
        .sl_iport148_o(\NLW_BSCANID.u_xsdbm_id_sl_iport148_o_UNCONNECTED [0]),
        .sl_iport149_o(\NLW_BSCANID.u_xsdbm_id_sl_iport149_o_UNCONNECTED [0]),
        .sl_iport14_o(\NLW_BSCANID.u_xsdbm_id_sl_iport14_o_UNCONNECTED [0]),
        .sl_iport150_o(\NLW_BSCANID.u_xsdbm_id_sl_iport150_o_UNCONNECTED [0]),
        .sl_iport151_o(\NLW_BSCANID.u_xsdbm_id_sl_iport151_o_UNCONNECTED [0]),
        .sl_iport152_o(\NLW_BSCANID.u_xsdbm_id_sl_iport152_o_UNCONNECTED [0]),
        .sl_iport153_o(\NLW_BSCANID.u_xsdbm_id_sl_iport153_o_UNCONNECTED [0]),
        .sl_iport154_o(\NLW_BSCANID.u_xsdbm_id_sl_iport154_o_UNCONNECTED [0]),
        .sl_iport155_o(\NLW_BSCANID.u_xsdbm_id_sl_iport155_o_UNCONNECTED [0]),
        .sl_iport156_o(\NLW_BSCANID.u_xsdbm_id_sl_iport156_o_UNCONNECTED [0]),
        .sl_iport157_o(\NLW_BSCANID.u_xsdbm_id_sl_iport157_o_UNCONNECTED [0]),
        .sl_iport158_o(\NLW_BSCANID.u_xsdbm_id_sl_iport158_o_UNCONNECTED [0]),
        .sl_iport159_o(\NLW_BSCANID.u_xsdbm_id_sl_iport159_o_UNCONNECTED [0]),
        .sl_iport15_o(\NLW_BSCANID.u_xsdbm_id_sl_iport15_o_UNCONNECTED [0]),
        .sl_iport160_o(\NLW_BSCANID.u_xsdbm_id_sl_iport160_o_UNCONNECTED [0]),
        .sl_iport161_o(\NLW_BSCANID.u_xsdbm_id_sl_iport161_o_UNCONNECTED [0]),
        .sl_iport162_o(\NLW_BSCANID.u_xsdbm_id_sl_iport162_o_UNCONNECTED [0]),
        .sl_iport163_o(\NLW_BSCANID.u_xsdbm_id_sl_iport163_o_UNCONNECTED [0]),
        .sl_iport164_o(\NLW_BSCANID.u_xsdbm_id_sl_iport164_o_UNCONNECTED [0]),
        .sl_iport165_o(\NLW_BSCANID.u_xsdbm_id_sl_iport165_o_UNCONNECTED [0]),
        .sl_iport166_o(\NLW_BSCANID.u_xsdbm_id_sl_iport166_o_UNCONNECTED [0]),
        .sl_iport167_o(\NLW_BSCANID.u_xsdbm_id_sl_iport167_o_UNCONNECTED [0]),
        .sl_iport168_o(\NLW_BSCANID.u_xsdbm_id_sl_iport168_o_UNCONNECTED [0]),
        .sl_iport169_o(\NLW_BSCANID.u_xsdbm_id_sl_iport169_o_UNCONNECTED [0]),
        .sl_iport16_o(\NLW_BSCANID.u_xsdbm_id_sl_iport16_o_UNCONNECTED [0]),
        .sl_iport170_o(\NLW_BSCANID.u_xsdbm_id_sl_iport170_o_UNCONNECTED [0]),
        .sl_iport171_o(\NLW_BSCANID.u_xsdbm_id_sl_iport171_o_UNCONNECTED [0]),
        .sl_iport172_o(\NLW_BSCANID.u_xsdbm_id_sl_iport172_o_UNCONNECTED [0]),
        .sl_iport173_o(\NLW_BSCANID.u_xsdbm_id_sl_iport173_o_UNCONNECTED [0]),
        .sl_iport174_o(\NLW_BSCANID.u_xsdbm_id_sl_iport174_o_UNCONNECTED [0]),
        .sl_iport175_o(\NLW_BSCANID.u_xsdbm_id_sl_iport175_o_UNCONNECTED [0]),
        .sl_iport176_o(\NLW_BSCANID.u_xsdbm_id_sl_iport176_o_UNCONNECTED [0]),
        .sl_iport177_o(\NLW_BSCANID.u_xsdbm_id_sl_iport177_o_UNCONNECTED [0]),
        .sl_iport178_o(\NLW_BSCANID.u_xsdbm_id_sl_iport178_o_UNCONNECTED [0]),
        .sl_iport179_o(\NLW_BSCANID.u_xsdbm_id_sl_iport179_o_UNCONNECTED [0]),
        .sl_iport17_o(\NLW_BSCANID.u_xsdbm_id_sl_iport17_o_UNCONNECTED [0]),
        .sl_iport180_o(\NLW_BSCANID.u_xsdbm_id_sl_iport180_o_UNCONNECTED [0]),
        .sl_iport181_o(\NLW_BSCANID.u_xsdbm_id_sl_iport181_o_UNCONNECTED [0]),
        .sl_iport182_o(\NLW_BSCANID.u_xsdbm_id_sl_iport182_o_UNCONNECTED [0]),
        .sl_iport183_o(\NLW_BSCANID.u_xsdbm_id_sl_iport183_o_UNCONNECTED [0]),
        .sl_iport184_o(\NLW_BSCANID.u_xsdbm_id_sl_iport184_o_UNCONNECTED [0]),
        .sl_iport185_o(\NLW_BSCANID.u_xsdbm_id_sl_iport185_o_UNCONNECTED [0]),
        .sl_iport186_o(\NLW_BSCANID.u_xsdbm_id_sl_iport186_o_UNCONNECTED [0]),
        .sl_iport187_o(\NLW_BSCANID.u_xsdbm_id_sl_iport187_o_UNCONNECTED [0]),
        .sl_iport188_o(\NLW_BSCANID.u_xsdbm_id_sl_iport188_o_UNCONNECTED [0]),
        .sl_iport189_o(\NLW_BSCANID.u_xsdbm_id_sl_iport189_o_UNCONNECTED [0]),
        .sl_iport18_o(\NLW_BSCANID.u_xsdbm_id_sl_iport18_o_UNCONNECTED [0]),
        .sl_iport190_o(\NLW_BSCANID.u_xsdbm_id_sl_iport190_o_UNCONNECTED [0]),
        .sl_iport191_o(\NLW_BSCANID.u_xsdbm_id_sl_iport191_o_UNCONNECTED [0]),
        .sl_iport192_o(\NLW_BSCANID.u_xsdbm_id_sl_iport192_o_UNCONNECTED [0]),
        .sl_iport193_o(\NLW_BSCANID.u_xsdbm_id_sl_iport193_o_UNCONNECTED [0]),
        .sl_iport194_o(\NLW_BSCANID.u_xsdbm_id_sl_iport194_o_UNCONNECTED [0]),
        .sl_iport195_o(\NLW_BSCANID.u_xsdbm_id_sl_iport195_o_UNCONNECTED [0]),
        .sl_iport196_o(\NLW_BSCANID.u_xsdbm_id_sl_iport196_o_UNCONNECTED [0]),
        .sl_iport197_o(\NLW_BSCANID.u_xsdbm_id_sl_iport197_o_UNCONNECTED [0]),
        .sl_iport198_o(\NLW_BSCANID.u_xsdbm_id_sl_iport198_o_UNCONNECTED [0]),
        .sl_iport199_o(\NLW_BSCANID.u_xsdbm_id_sl_iport199_o_UNCONNECTED [0]),
        .sl_iport19_o(\NLW_BSCANID.u_xsdbm_id_sl_iport19_o_UNCONNECTED [0]),
        .sl_iport1_o(\NLW_BSCANID.u_xsdbm_id_sl_iport1_o_UNCONNECTED [0]),
        .sl_iport200_o(\NLW_BSCANID.u_xsdbm_id_sl_iport200_o_UNCONNECTED [0]),
        .sl_iport201_o(\NLW_BSCANID.u_xsdbm_id_sl_iport201_o_UNCONNECTED [0]),
        .sl_iport202_o(\NLW_BSCANID.u_xsdbm_id_sl_iport202_o_UNCONNECTED [0]),
        .sl_iport203_o(\NLW_BSCANID.u_xsdbm_id_sl_iport203_o_UNCONNECTED [0]),
        .sl_iport204_o(\NLW_BSCANID.u_xsdbm_id_sl_iport204_o_UNCONNECTED [0]),
        .sl_iport205_o(\NLW_BSCANID.u_xsdbm_id_sl_iport205_o_UNCONNECTED [0]),
        .sl_iport206_o(\NLW_BSCANID.u_xsdbm_id_sl_iport206_o_UNCONNECTED [0]),
        .sl_iport207_o(\NLW_BSCANID.u_xsdbm_id_sl_iport207_o_UNCONNECTED [0]),
        .sl_iport208_o(\NLW_BSCANID.u_xsdbm_id_sl_iport208_o_UNCONNECTED [0]),
        .sl_iport209_o(\NLW_BSCANID.u_xsdbm_id_sl_iport209_o_UNCONNECTED [0]),
        .sl_iport20_o(\NLW_BSCANID.u_xsdbm_id_sl_iport20_o_UNCONNECTED [0]),
        .sl_iport210_o(\NLW_BSCANID.u_xsdbm_id_sl_iport210_o_UNCONNECTED [0]),
        .sl_iport211_o(\NLW_BSCANID.u_xsdbm_id_sl_iport211_o_UNCONNECTED [0]),
        .sl_iport212_o(\NLW_BSCANID.u_xsdbm_id_sl_iport212_o_UNCONNECTED [0]),
        .sl_iport213_o(\NLW_BSCANID.u_xsdbm_id_sl_iport213_o_UNCONNECTED [0]),
        .sl_iport214_o(\NLW_BSCANID.u_xsdbm_id_sl_iport214_o_UNCONNECTED [0]),
        .sl_iport215_o(\NLW_BSCANID.u_xsdbm_id_sl_iport215_o_UNCONNECTED [0]),
        .sl_iport216_o(\NLW_BSCANID.u_xsdbm_id_sl_iport216_o_UNCONNECTED [0]),
        .sl_iport217_o(\NLW_BSCANID.u_xsdbm_id_sl_iport217_o_UNCONNECTED [0]),
        .sl_iport218_o(\NLW_BSCANID.u_xsdbm_id_sl_iport218_o_UNCONNECTED [0]),
        .sl_iport219_o(\NLW_BSCANID.u_xsdbm_id_sl_iport219_o_UNCONNECTED [0]),
        .sl_iport21_o(\NLW_BSCANID.u_xsdbm_id_sl_iport21_o_UNCONNECTED [0]),
        .sl_iport220_o(\NLW_BSCANID.u_xsdbm_id_sl_iport220_o_UNCONNECTED [0]),
        .sl_iport221_o(\NLW_BSCANID.u_xsdbm_id_sl_iport221_o_UNCONNECTED [0]),
        .sl_iport222_o(\NLW_BSCANID.u_xsdbm_id_sl_iport222_o_UNCONNECTED [0]),
        .sl_iport223_o(\NLW_BSCANID.u_xsdbm_id_sl_iport223_o_UNCONNECTED [0]),
        .sl_iport224_o(\NLW_BSCANID.u_xsdbm_id_sl_iport224_o_UNCONNECTED [0]),
        .sl_iport225_o(\NLW_BSCANID.u_xsdbm_id_sl_iport225_o_UNCONNECTED [0]),
        .sl_iport226_o(\NLW_BSCANID.u_xsdbm_id_sl_iport226_o_UNCONNECTED [0]),
        .sl_iport227_o(\NLW_BSCANID.u_xsdbm_id_sl_iport227_o_UNCONNECTED [0]),
        .sl_iport228_o(\NLW_BSCANID.u_xsdbm_id_sl_iport228_o_UNCONNECTED [0]),
        .sl_iport229_o(\NLW_BSCANID.u_xsdbm_id_sl_iport229_o_UNCONNECTED [0]),
        .sl_iport22_o(\NLW_BSCANID.u_xsdbm_id_sl_iport22_o_UNCONNECTED [0]),
        .sl_iport230_o(\NLW_BSCANID.u_xsdbm_id_sl_iport230_o_UNCONNECTED [0]),
        .sl_iport231_o(\NLW_BSCANID.u_xsdbm_id_sl_iport231_o_UNCONNECTED [0]),
        .sl_iport232_o(\NLW_BSCANID.u_xsdbm_id_sl_iport232_o_UNCONNECTED [0]),
        .sl_iport233_o(\NLW_BSCANID.u_xsdbm_id_sl_iport233_o_UNCONNECTED [0]),
        .sl_iport234_o(\NLW_BSCANID.u_xsdbm_id_sl_iport234_o_UNCONNECTED [0]),
        .sl_iport235_o(\NLW_BSCANID.u_xsdbm_id_sl_iport235_o_UNCONNECTED [0]),
        .sl_iport236_o(\NLW_BSCANID.u_xsdbm_id_sl_iport236_o_UNCONNECTED [0]),
        .sl_iport237_o(\NLW_BSCANID.u_xsdbm_id_sl_iport237_o_UNCONNECTED [0]),
        .sl_iport238_o(\NLW_BSCANID.u_xsdbm_id_sl_iport238_o_UNCONNECTED [0]),
        .sl_iport239_o(\NLW_BSCANID.u_xsdbm_id_sl_iport239_o_UNCONNECTED [0]),
        .sl_iport23_o(\NLW_BSCANID.u_xsdbm_id_sl_iport23_o_UNCONNECTED [0]),
        .sl_iport240_o(\NLW_BSCANID.u_xsdbm_id_sl_iport240_o_UNCONNECTED [0]),
        .sl_iport241_o(\NLW_BSCANID.u_xsdbm_id_sl_iport241_o_UNCONNECTED [0]),
        .sl_iport242_o(\NLW_BSCANID.u_xsdbm_id_sl_iport242_o_UNCONNECTED [0]),
        .sl_iport243_o(\NLW_BSCANID.u_xsdbm_id_sl_iport243_o_UNCONNECTED [0]),
        .sl_iport244_o(\NLW_BSCANID.u_xsdbm_id_sl_iport244_o_UNCONNECTED [0]),
        .sl_iport245_o(\NLW_BSCANID.u_xsdbm_id_sl_iport245_o_UNCONNECTED [0]),
        .sl_iport246_o(\NLW_BSCANID.u_xsdbm_id_sl_iport246_o_UNCONNECTED [0]),
        .sl_iport247_o(\NLW_BSCANID.u_xsdbm_id_sl_iport247_o_UNCONNECTED [0]),
        .sl_iport248_o(\NLW_BSCANID.u_xsdbm_id_sl_iport248_o_UNCONNECTED [0]),
        .sl_iport249_o(\NLW_BSCANID.u_xsdbm_id_sl_iport249_o_UNCONNECTED [0]),
        .sl_iport24_o(\NLW_BSCANID.u_xsdbm_id_sl_iport24_o_UNCONNECTED [0]),
        .sl_iport250_o(\NLW_BSCANID.u_xsdbm_id_sl_iport250_o_UNCONNECTED [0]),
        .sl_iport251_o(\NLW_BSCANID.u_xsdbm_id_sl_iport251_o_UNCONNECTED [0]),
        .sl_iport252_o(\NLW_BSCANID.u_xsdbm_id_sl_iport252_o_UNCONNECTED [0]),
        .sl_iport253_o(\NLW_BSCANID.u_xsdbm_id_sl_iport253_o_UNCONNECTED [0]),
        .sl_iport254_o(\NLW_BSCANID.u_xsdbm_id_sl_iport254_o_UNCONNECTED [0]),
        .sl_iport255_o(\NLW_BSCANID.u_xsdbm_id_sl_iport255_o_UNCONNECTED [0]),
        .sl_iport25_o(\NLW_BSCANID.u_xsdbm_id_sl_iport25_o_UNCONNECTED [0]),
        .sl_iport26_o(\NLW_BSCANID.u_xsdbm_id_sl_iport26_o_UNCONNECTED [0]),
        .sl_iport27_o(\NLW_BSCANID.u_xsdbm_id_sl_iport27_o_UNCONNECTED [0]),
        .sl_iport28_o(\NLW_BSCANID.u_xsdbm_id_sl_iport28_o_UNCONNECTED [0]),
        .sl_iport29_o(\NLW_BSCANID.u_xsdbm_id_sl_iport29_o_UNCONNECTED [0]),
        .sl_iport2_o(\NLW_BSCANID.u_xsdbm_id_sl_iport2_o_UNCONNECTED [0]),
        .sl_iport30_o(\NLW_BSCANID.u_xsdbm_id_sl_iport30_o_UNCONNECTED [0]),
        .sl_iport31_o(\NLW_BSCANID.u_xsdbm_id_sl_iport31_o_UNCONNECTED [0]),
        .sl_iport32_o(\NLW_BSCANID.u_xsdbm_id_sl_iport32_o_UNCONNECTED [0]),
        .sl_iport33_o(\NLW_BSCANID.u_xsdbm_id_sl_iport33_o_UNCONNECTED [0]),
        .sl_iport34_o(\NLW_BSCANID.u_xsdbm_id_sl_iport34_o_UNCONNECTED [0]),
        .sl_iport35_o(\NLW_BSCANID.u_xsdbm_id_sl_iport35_o_UNCONNECTED [0]),
        .sl_iport36_o(\NLW_BSCANID.u_xsdbm_id_sl_iport36_o_UNCONNECTED [0]),
        .sl_iport37_o(\NLW_BSCANID.u_xsdbm_id_sl_iport37_o_UNCONNECTED [0]),
        .sl_iport38_o(\NLW_BSCANID.u_xsdbm_id_sl_iport38_o_UNCONNECTED [0]),
        .sl_iport39_o(\NLW_BSCANID.u_xsdbm_id_sl_iport39_o_UNCONNECTED [0]),
        .sl_iport3_o(\NLW_BSCANID.u_xsdbm_id_sl_iport3_o_UNCONNECTED [0]),
        .sl_iport40_o(\NLW_BSCANID.u_xsdbm_id_sl_iport40_o_UNCONNECTED [0]),
        .sl_iport41_o(\NLW_BSCANID.u_xsdbm_id_sl_iport41_o_UNCONNECTED [0]),
        .sl_iport42_o(\NLW_BSCANID.u_xsdbm_id_sl_iport42_o_UNCONNECTED [0]),
        .sl_iport43_o(\NLW_BSCANID.u_xsdbm_id_sl_iport43_o_UNCONNECTED [0]),
        .sl_iport44_o(\NLW_BSCANID.u_xsdbm_id_sl_iport44_o_UNCONNECTED [0]),
        .sl_iport45_o(\NLW_BSCANID.u_xsdbm_id_sl_iport45_o_UNCONNECTED [0]),
        .sl_iport46_o(\NLW_BSCANID.u_xsdbm_id_sl_iport46_o_UNCONNECTED [0]),
        .sl_iport47_o(\NLW_BSCANID.u_xsdbm_id_sl_iport47_o_UNCONNECTED [0]),
        .sl_iport48_o(\NLW_BSCANID.u_xsdbm_id_sl_iport48_o_UNCONNECTED [0]),
        .sl_iport49_o(\NLW_BSCANID.u_xsdbm_id_sl_iport49_o_UNCONNECTED [0]),
        .sl_iport4_o(\NLW_BSCANID.u_xsdbm_id_sl_iport4_o_UNCONNECTED [0]),
        .sl_iport50_o(\NLW_BSCANID.u_xsdbm_id_sl_iport50_o_UNCONNECTED [0]),
        .sl_iport51_o(\NLW_BSCANID.u_xsdbm_id_sl_iport51_o_UNCONNECTED [0]),
        .sl_iport52_o(\NLW_BSCANID.u_xsdbm_id_sl_iport52_o_UNCONNECTED [0]),
        .sl_iport53_o(\NLW_BSCANID.u_xsdbm_id_sl_iport53_o_UNCONNECTED [0]),
        .sl_iport54_o(\NLW_BSCANID.u_xsdbm_id_sl_iport54_o_UNCONNECTED [0]),
        .sl_iport55_o(\NLW_BSCANID.u_xsdbm_id_sl_iport55_o_UNCONNECTED [0]),
        .sl_iport56_o(\NLW_BSCANID.u_xsdbm_id_sl_iport56_o_UNCONNECTED [0]),
        .sl_iport57_o(\NLW_BSCANID.u_xsdbm_id_sl_iport57_o_UNCONNECTED [0]),
        .sl_iport58_o(\NLW_BSCANID.u_xsdbm_id_sl_iport58_o_UNCONNECTED [0]),
        .sl_iport59_o(\NLW_BSCANID.u_xsdbm_id_sl_iport59_o_UNCONNECTED [0]),
        .sl_iport5_o(\NLW_BSCANID.u_xsdbm_id_sl_iport5_o_UNCONNECTED [0]),
        .sl_iport60_o(\NLW_BSCANID.u_xsdbm_id_sl_iport60_o_UNCONNECTED [0]),
        .sl_iport61_o(\NLW_BSCANID.u_xsdbm_id_sl_iport61_o_UNCONNECTED [0]),
        .sl_iport62_o(\NLW_BSCANID.u_xsdbm_id_sl_iport62_o_UNCONNECTED [0]),
        .sl_iport63_o(\NLW_BSCANID.u_xsdbm_id_sl_iport63_o_UNCONNECTED [0]),
        .sl_iport64_o(\NLW_BSCANID.u_xsdbm_id_sl_iport64_o_UNCONNECTED [0]),
        .sl_iport65_o(\NLW_BSCANID.u_xsdbm_id_sl_iport65_o_UNCONNECTED [0]),
        .sl_iport66_o(\NLW_BSCANID.u_xsdbm_id_sl_iport66_o_UNCONNECTED [0]),
        .sl_iport67_o(\NLW_BSCANID.u_xsdbm_id_sl_iport67_o_UNCONNECTED [0]),
        .sl_iport68_o(\NLW_BSCANID.u_xsdbm_id_sl_iport68_o_UNCONNECTED [0]),
        .sl_iport69_o(\NLW_BSCANID.u_xsdbm_id_sl_iport69_o_UNCONNECTED [0]),
        .sl_iport6_o(\NLW_BSCANID.u_xsdbm_id_sl_iport6_o_UNCONNECTED [0]),
        .sl_iport70_o(\NLW_BSCANID.u_xsdbm_id_sl_iport70_o_UNCONNECTED [0]),
        .sl_iport71_o(\NLW_BSCANID.u_xsdbm_id_sl_iport71_o_UNCONNECTED [0]),
        .sl_iport72_o(\NLW_BSCANID.u_xsdbm_id_sl_iport72_o_UNCONNECTED [0]),
        .sl_iport73_o(\NLW_BSCANID.u_xsdbm_id_sl_iport73_o_UNCONNECTED [0]),
        .sl_iport74_o(\NLW_BSCANID.u_xsdbm_id_sl_iport74_o_UNCONNECTED [0]),
        .sl_iport75_o(\NLW_BSCANID.u_xsdbm_id_sl_iport75_o_UNCONNECTED [0]),
        .sl_iport76_o(\NLW_BSCANID.u_xsdbm_id_sl_iport76_o_UNCONNECTED [0]),
        .sl_iport77_o(\NLW_BSCANID.u_xsdbm_id_sl_iport77_o_UNCONNECTED [0]),
        .sl_iport78_o(\NLW_BSCANID.u_xsdbm_id_sl_iport78_o_UNCONNECTED [0]),
        .sl_iport79_o(\NLW_BSCANID.u_xsdbm_id_sl_iport79_o_UNCONNECTED [0]),
        .sl_iport7_o(\NLW_BSCANID.u_xsdbm_id_sl_iport7_o_UNCONNECTED [0]),
        .sl_iport80_o(\NLW_BSCANID.u_xsdbm_id_sl_iport80_o_UNCONNECTED [0]),
        .sl_iport81_o(\NLW_BSCANID.u_xsdbm_id_sl_iport81_o_UNCONNECTED [0]),
        .sl_iport82_o(\NLW_BSCANID.u_xsdbm_id_sl_iport82_o_UNCONNECTED [0]),
        .sl_iport83_o(\NLW_BSCANID.u_xsdbm_id_sl_iport83_o_UNCONNECTED [0]),
        .sl_iport84_o(\NLW_BSCANID.u_xsdbm_id_sl_iport84_o_UNCONNECTED [0]),
        .sl_iport85_o(\NLW_BSCANID.u_xsdbm_id_sl_iport85_o_UNCONNECTED [0]),
        .sl_iport86_o(\NLW_BSCANID.u_xsdbm_id_sl_iport86_o_UNCONNECTED [0]),
        .sl_iport87_o(\NLW_BSCANID.u_xsdbm_id_sl_iport87_o_UNCONNECTED [0]),
        .sl_iport88_o(\NLW_BSCANID.u_xsdbm_id_sl_iport88_o_UNCONNECTED [0]),
        .sl_iport89_o(\NLW_BSCANID.u_xsdbm_id_sl_iport89_o_UNCONNECTED [0]),
        .sl_iport8_o(\NLW_BSCANID.u_xsdbm_id_sl_iport8_o_UNCONNECTED [0]),
        .sl_iport90_o(\NLW_BSCANID.u_xsdbm_id_sl_iport90_o_UNCONNECTED [0]),
        .sl_iport91_o(\NLW_BSCANID.u_xsdbm_id_sl_iport91_o_UNCONNECTED [0]),
        .sl_iport92_o(\NLW_BSCANID.u_xsdbm_id_sl_iport92_o_UNCONNECTED [0]),
        .sl_iport93_o(\NLW_BSCANID.u_xsdbm_id_sl_iport93_o_UNCONNECTED [0]),
        .sl_iport94_o(\NLW_BSCANID.u_xsdbm_id_sl_iport94_o_UNCONNECTED [0]),
        .sl_iport95_o(\NLW_BSCANID.u_xsdbm_id_sl_iport95_o_UNCONNECTED [0]),
        .sl_iport96_o(\NLW_BSCANID.u_xsdbm_id_sl_iport96_o_UNCONNECTED [0]),
        .sl_iport97_o(\NLW_BSCANID.u_xsdbm_id_sl_iport97_o_UNCONNECTED [0]),
        .sl_iport98_o(\NLW_BSCANID.u_xsdbm_id_sl_iport98_o_UNCONNECTED [0]),
        .sl_iport99_o(\NLW_BSCANID.u_xsdbm_id_sl_iport99_o_UNCONNECTED [0]),
        .sl_iport9_o(\NLW_BSCANID.u_xsdbm_id_sl_iport9_o_UNCONNECTED [0]),
        .sl_oport0_i(sl_oport0_i),
        .sl_oport100_i(sl_oport100_i),
        .sl_oport101_i(sl_oport101_i),
        .sl_oport102_i(sl_oport102_i),
        .sl_oport103_i(sl_oport103_i),
        .sl_oport104_i(sl_oport104_i),
        .sl_oport105_i(sl_oport105_i),
        .sl_oport106_i(sl_oport106_i),
        .sl_oport107_i(sl_oport107_i),
        .sl_oport108_i(sl_oport108_i),
        .sl_oport109_i(sl_oport109_i),
        .sl_oport10_i(sl_oport10_i),
        .sl_oport110_i(sl_oport110_i),
        .sl_oport111_i(sl_oport111_i),
        .sl_oport112_i(sl_oport112_i),
        .sl_oport113_i(sl_oport113_i),
        .sl_oport114_i(sl_oport114_i),
        .sl_oport115_i(sl_oport115_i),
        .sl_oport116_i(sl_oport116_i),
        .sl_oport117_i(sl_oport117_i),
        .sl_oport118_i(sl_oport118_i),
        .sl_oport119_i(sl_oport119_i),
        .sl_oport11_i(sl_oport11_i),
        .sl_oport120_i(sl_oport120_i),
        .sl_oport121_i(sl_oport121_i),
        .sl_oport122_i(sl_oport122_i),
        .sl_oport123_i(sl_oport123_i),
        .sl_oport124_i(sl_oport124_i),
        .sl_oport125_i(sl_oport125_i),
        .sl_oport126_i(sl_oport126_i),
        .sl_oport127_i(sl_oport127_i),
        .sl_oport128_i(sl_oport128_i),
        .sl_oport129_i(sl_oport129_i),
        .sl_oport12_i(sl_oport12_i),
        .sl_oport130_i(sl_oport130_i),
        .sl_oport131_i(sl_oport131_i),
        .sl_oport132_i(sl_oport132_i),
        .sl_oport133_i(sl_oport133_i),
        .sl_oport134_i(sl_oport134_i),
        .sl_oport135_i(sl_oport135_i),
        .sl_oport136_i(sl_oport136_i),
        .sl_oport137_i(sl_oport137_i),
        .sl_oport138_i(sl_oport138_i),
        .sl_oport139_i(sl_oport139_i),
        .sl_oport13_i(sl_oport13_i),
        .sl_oport140_i(sl_oport140_i),
        .sl_oport141_i(sl_oport141_i),
        .sl_oport142_i(sl_oport142_i),
        .sl_oport143_i(sl_oport143_i),
        .sl_oport144_i(sl_oport144_i),
        .sl_oport145_i(sl_oport145_i),
        .sl_oport146_i(sl_oport146_i),
        .sl_oport147_i(sl_oport147_i),
        .sl_oport148_i(sl_oport148_i),
        .sl_oport149_i(sl_oport149_i),
        .sl_oport14_i(sl_oport14_i),
        .sl_oport150_i(sl_oport150_i),
        .sl_oport151_i(sl_oport151_i),
        .sl_oport152_i(sl_oport152_i),
        .sl_oport153_i(sl_oport153_i),
        .sl_oport154_i(sl_oport154_i),
        .sl_oport155_i(sl_oport155_i),
        .sl_oport156_i(sl_oport156_i),
        .sl_oport157_i(sl_oport157_i),
        .sl_oport158_i(sl_oport158_i),
        .sl_oport159_i(sl_oport159_i),
        .sl_oport15_i(sl_oport15_i),
        .sl_oport160_i(sl_oport160_i),
        .sl_oport161_i(sl_oport161_i),
        .sl_oport162_i(sl_oport162_i),
        .sl_oport163_i(sl_oport163_i),
        .sl_oport164_i(sl_oport164_i),
        .sl_oport165_i(sl_oport165_i),
        .sl_oport166_i(sl_oport166_i),
        .sl_oport167_i(sl_oport167_i),
        .sl_oport168_i(sl_oport168_i),
        .sl_oport169_i(sl_oport169_i),
        .sl_oport16_i(sl_oport16_i),
        .sl_oport170_i(sl_oport170_i),
        .sl_oport171_i(sl_oport171_i),
        .sl_oport172_i(sl_oport172_i),
        .sl_oport173_i(sl_oport173_i),
        .sl_oport174_i(sl_oport174_i),
        .sl_oport175_i(sl_oport175_i),
        .sl_oport176_i(sl_oport176_i),
        .sl_oport177_i(sl_oport177_i),
        .sl_oport178_i(sl_oport178_i),
        .sl_oport179_i(sl_oport179_i),
        .sl_oport17_i(sl_oport17_i),
        .sl_oport180_i(sl_oport180_i),
        .sl_oport181_i(sl_oport181_i),
        .sl_oport182_i(sl_oport182_i),
        .sl_oport183_i(sl_oport183_i),
        .sl_oport184_i(sl_oport184_i),
        .sl_oport185_i(sl_oport185_i),
        .sl_oport186_i(sl_oport186_i),
        .sl_oport187_i(sl_oport187_i),
        .sl_oport188_i(sl_oport188_i),
        .sl_oport189_i(sl_oport189_i),
        .sl_oport18_i(sl_oport18_i),
        .sl_oport190_i(sl_oport190_i),
        .sl_oport191_i(sl_oport191_i),
        .sl_oport192_i(sl_oport192_i),
        .sl_oport193_i(sl_oport193_i),
        .sl_oport194_i(sl_oport194_i),
        .sl_oport195_i(sl_oport195_i),
        .sl_oport196_i(sl_oport196_i),
        .sl_oport197_i(sl_oport197_i),
        .sl_oport198_i(sl_oport198_i),
        .sl_oport199_i(sl_oport199_i),
        .sl_oport19_i(sl_oport19_i),
        .sl_oport1_i(sl_oport1_i),
        .sl_oport200_i(sl_oport200_i),
        .sl_oport201_i(sl_oport201_i),
        .sl_oport202_i(sl_oport202_i),
        .sl_oport203_i(sl_oport203_i),
        .sl_oport204_i(sl_oport204_i),
        .sl_oport205_i(sl_oport205_i),
        .sl_oport206_i(sl_oport206_i),
        .sl_oport207_i(sl_oport207_i),
        .sl_oport208_i(sl_oport208_i),
        .sl_oport209_i(sl_oport209_i),
        .sl_oport20_i(sl_oport20_i),
        .sl_oport210_i(sl_oport210_i),
        .sl_oport211_i(sl_oport211_i),
        .sl_oport212_i(sl_oport212_i),
        .sl_oport213_i(sl_oport213_i),
        .sl_oport214_i(sl_oport214_i),
        .sl_oport215_i(sl_oport215_i),
        .sl_oport216_i(sl_oport216_i),
        .sl_oport217_i(sl_oport217_i),
        .sl_oport218_i(sl_oport218_i),
        .sl_oport219_i(sl_oport219_i),
        .sl_oport21_i(sl_oport21_i),
        .sl_oport220_i(sl_oport220_i),
        .sl_oport221_i(sl_oport221_i),
        .sl_oport222_i(sl_oport222_i),
        .sl_oport223_i(sl_oport223_i),
        .sl_oport224_i(sl_oport224_i),
        .sl_oport225_i(sl_oport225_i),
        .sl_oport226_i(sl_oport226_i),
        .sl_oport227_i(sl_oport227_i),
        .sl_oport228_i(sl_oport228_i),
        .sl_oport229_i(sl_oport229_i),
        .sl_oport22_i(sl_oport22_i),
        .sl_oport230_i(sl_oport230_i),
        .sl_oport231_i(sl_oport231_i),
        .sl_oport232_i(sl_oport232_i),
        .sl_oport233_i(sl_oport233_i),
        .sl_oport234_i(sl_oport234_i),
        .sl_oport235_i(sl_oport235_i),
        .sl_oport236_i(sl_oport236_i),
        .sl_oport237_i(sl_oport237_i),
        .sl_oport238_i(sl_oport238_i),
        .sl_oport239_i(sl_oport239_i),
        .sl_oport23_i(sl_oport23_i),
        .sl_oport240_i(sl_oport240_i),
        .sl_oport241_i(sl_oport241_i),
        .sl_oport242_i(sl_oport242_i),
        .sl_oport243_i(sl_oport243_i),
        .sl_oport244_i(sl_oport244_i),
        .sl_oport245_i(sl_oport245_i),
        .sl_oport246_i(sl_oport246_i),
        .sl_oport247_i(sl_oport247_i),
        .sl_oport248_i(sl_oport248_i),
        .sl_oport249_i(sl_oport249_i),
        .sl_oport24_i(sl_oport24_i),
        .sl_oport250_i(sl_oport250_i),
        .sl_oport251_i(sl_oport251_i),
        .sl_oport252_i(sl_oport252_i),
        .sl_oport253_i(sl_oport253_i),
        .sl_oport254_i(sl_oport254_i),
        .sl_oport255_i(sl_oport255_i),
        .sl_oport25_i(sl_oport25_i),
        .sl_oport26_i(sl_oport26_i),
        .sl_oport27_i(sl_oport27_i),
        .sl_oport28_i(sl_oport28_i),
        .sl_oport29_i(sl_oport29_i),
        .sl_oport2_i(sl_oport2_i),
        .sl_oport30_i(sl_oport30_i),
        .sl_oport31_i(sl_oport31_i),
        .sl_oport32_i(sl_oport32_i),
        .sl_oport33_i(sl_oport33_i),
        .sl_oport34_i(sl_oport34_i),
        .sl_oport35_i(sl_oport35_i),
        .sl_oport36_i(sl_oport36_i),
        .sl_oport37_i(sl_oport37_i),
        .sl_oport38_i(sl_oport38_i),
        .sl_oport39_i(sl_oport39_i),
        .sl_oport3_i(sl_oport3_i),
        .sl_oport40_i(sl_oport40_i),
        .sl_oport41_i(sl_oport41_i),
        .sl_oport42_i(sl_oport42_i),
        .sl_oport43_i(sl_oport43_i),
        .sl_oport44_i(sl_oport44_i),
        .sl_oport45_i(sl_oport45_i),
        .sl_oport46_i(sl_oport46_i),
        .sl_oport47_i(sl_oport47_i),
        .sl_oport48_i(sl_oport48_i),
        .sl_oport49_i(sl_oport49_i),
        .sl_oport4_i(sl_oport4_i),
        .sl_oport50_i(sl_oport50_i),
        .sl_oport51_i(sl_oport51_i),
        .sl_oport52_i(sl_oport52_i),
        .sl_oport53_i(sl_oport53_i),
        .sl_oport54_i(sl_oport54_i),
        .sl_oport55_i(sl_oport55_i),
        .sl_oport56_i(sl_oport56_i),
        .sl_oport57_i(sl_oport57_i),
        .sl_oport58_i(sl_oport58_i),
        .sl_oport59_i(sl_oport59_i),
        .sl_oport5_i(sl_oport5_i),
        .sl_oport60_i(sl_oport60_i),
        .sl_oport61_i(sl_oport61_i),
        .sl_oport62_i(sl_oport62_i),
        .sl_oport63_i(sl_oport63_i),
        .sl_oport64_i(sl_oport64_i),
        .sl_oport65_i(sl_oport65_i),
        .sl_oport66_i(sl_oport66_i),
        .sl_oport67_i(sl_oport67_i),
        .sl_oport68_i(sl_oport68_i),
        .sl_oport69_i(sl_oport69_i),
        .sl_oport6_i(sl_oport6_i),
        .sl_oport70_i(sl_oport70_i),
        .sl_oport71_i(sl_oport71_i),
        .sl_oport72_i(sl_oport72_i),
        .sl_oport73_i(sl_oport73_i),
        .sl_oport74_i(sl_oport74_i),
        .sl_oport75_i(sl_oport75_i),
        .sl_oport76_i(sl_oport76_i),
        .sl_oport77_i(sl_oport77_i),
        .sl_oport78_i(sl_oport78_i),
        .sl_oport79_i(sl_oport79_i),
        .sl_oport7_i(sl_oport7_i),
        .sl_oport80_i(sl_oport80_i),
        .sl_oport81_i(sl_oport81_i),
        .sl_oport82_i(sl_oport82_i),
        .sl_oport83_i(sl_oport83_i),
        .sl_oport84_i(sl_oport84_i),
        .sl_oport85_i(sl_oport85_i),
        .sl_oport86_i(sl_oport86_i),
        .sl_oport87_i(sl_oport87_i),
        .sl_oport88_i(sl_oport88_i),
        .sl_oport89_i(sl_oport89_i),
        .sl_oport8_i(sl_oport8_i),
        .sl_oport90_i(sl_oport90_i),
        .sl_oport91_i(sl_oport91_i),
        .sl_oport92_i(sl_oport92_i),
        .sl_oport93_i(sl_oport93_i),
        .sl_oport94_i(sl_oport94_i),
        .sl_oport95_i(sl_oport95_i),
        .sl_oport96_i(sl_oport96_i),
        .sl_oport97_i(sl_oport97_i),
        .sl_oport98_i(sl_oport98_i),
        .sl_oport99_i(sl_oport99_i),
        .sl_oport9_i(sl_oport9_i),
        .tck(tck),
        .tck_0(\NLW_BSCANID.u_xsdbm_id_tck_0_UNCONNECTED ),
        .tck_1(\NLW_BSCANID.u_xsdbm_id_tck_1_UNCONNECTED ),
        .tck_10(\NLW_BSCANID.u_xsdbm_id_tck_10_UNCONNECTED ),
        .tck_11(\NLW_BSCANID.u_xsdbm_id_tck_11_UNCONNECTED ),
        .tck_12(\NLW_BSCANID.u_xsdbm_id_tck_12_UNCONNECTED ),
        .tck_13(\NLW_BSCANID.u_xsdbm_id_tck_13_UNCONNECTED ),
        .tck_14(\NLW_BSCANID.u_xsdbm_id_tck_14_UNCONNECTED ),
        .tck_15(\NLW_BSCANID.u_xsdbm_id_tck_15_UNCONNECTED ),
        .tck_2(\NLW_BSCANID.u_xsdbm_id_tck_2_UNCONNECTED ),
        .tck_3(\NLW_BSCANID.u_xsdbm_id_tck_3_UNCONNECTED ),
        .tck_4(\NLW_BSCANID.u_xsdbm_id_tck_4_UNCONNECTED ),
        .tck_5(\NLW_BSCANID.u_xsdbm_id_tck_5_UNCONNECTED ),
        .tck_6(\NLW_BSCANID.u_xsdbm_id_tck_6_UNCONNECTED ),
        .tck_7(\NLW_BSCANID.u_xsdbm_id_tck_7_UNCONNECTED ),
        .tck_8(\NLW_BSCANID.u_xsdbm_id_tck_8_UNCONNECTED ),
        .tck_9(\NLW_BSCANID.u_xsdbm_id_tck_9_UNCONNECTED ),
        .tdi(tdi),
        .tdi_0(\NLW_BSCANID.u_xsdbm_id_tdi_0_UNCONNECTED ),
        .tdi_1(\NLW_BSCANID.u_xsdbm_id_tdi_1_UNCONNECTED ),
        .tdi_10(\NLW_BSCANID.u_xsdbm_id_tdi_10_UNCONNECTED ),
        .tdi_11(\NLW_BSCANID.u_xsdbm_id_tdi_11_UNCONNECTED ),
        .tdi_12(\NLW_BSCANID.u_xsdbm_id_tdi_12_UNCONNECTED ),
        .tdi_13(\NLW_BSCANID.u_xsdbm_id_tdi_13_UNCONNECTED ),
        .tdi_14(\NLW_BSCANID.u_xsdbm_id_tdi_14_UNCONNECTED ),
        .tdi_15(\NLW_BSCANID.u_xsdbm_id_tdi_15_UNCONNECTED ),
        .tdi_2(\NLW_BSCANID.u_xsdbm_id_tdi_2_UNCONNECTED ),
        .tdi_3(\NLW_BSCANID.u_xsdbm_id_tdi_3_UNCONNECTED ),
        .tdi_4(\NLW_BSCANID.u_xsdbm_id_tdi_4_UNCONNECTED ),
        .tdi_5(\NLW_BSCANID.u_xsdbm_id_tdi_5_UNCONNECTED ),
        .tdi_6(\NLW_BSCANID.u_xsdbm_id_tdi_6_UNCONNECTED ),
        .tdi_7(\NLW_BSCANID.u_xsdbm_id_tdi_7_UNCONNECTED ),
        .tdi_8(\NLW_BSCANID.u_xsdbm_id_tdi_8_UNCONNECTED ),
        .tdi_9(\NLW_BSCANID.u_xsdbm_id_tdi_9_UNCONNECTED ),
        .tdo(\NLW_BSCANID.u_xsdbm_id_tdo_UNCONNECTED ),
        .tdo_0(tdo_0),
        .tdo_1(tdo_1),
        .tdo_10(tdo_10),
        .tdo_11(tdo_11),
        .tdo_12(tdo_12),
        .tdo_13(tdo_13),
        .tdo_14(tdo_14),
        .tdo_15(tdo_15),
        .tdo_2(tdo_2),
        .tdo_3(tdo_3),
        .tdo_4(tdo_4),
        .tdo_5(tdo_5),
        .tdo_6(tdo_6),
        .tdo_7(tdo_7),
        .tdo_8(tdo_8),
        .tdo_9(tdo_9),
        .tms(tms),
        .tms_0(\NLW_BSCANID.u_xsdbm_id_tms_0_UNCONNECTED ),
        .tms_1(\NLW_BSCANID.u_xsdbm_id_tms_1_UNCONNECTED ),
        .tms_10(\NLW_BSCANID.u_xsdbm_id_tms_10_UNCONNECTED ),
        .tms_11(\NLW_BSCANID.u_xsdbm_id_tms_11_UNCONNECTED ),
        .tms_12(\NLW_BSCANID.u_xsdbm_id_tms_12_UNCONNECTED ),
        .tms_13(\NLW_BSCANID.u_xsdbm_id_tms_13_UNCONNECTED ),
        .tms_14(\NLW_BSCANID.u_xsdbm_id_tms_14_UNCONNECTED ),
        .tms_15(\NLW_BSCANID.u_xsdbm_id_tms_15_UNCONNECTED ),
        .tms_2(\NLW_BSCANID.u_xsdbm_id_tms_2_UNCONNECTED ),
        .tms_3(\NLW_BSCANID.u_xsdbm_id_tms_3_UNCONNECTED ),
        .tms_4(\NLW_BSCANID.u_xsdbm_id_tms_4_UNCONNECTED ),
        .tms_5(\NLW_BSCANID.u_xsdbm_id_tms_5_UNCONNECTED ),
        .tms_6(\NLW_BSCANID.u_xsdbm_id_tms_6_UNCONNECTED ),
        .tms_7(\NLW_BSCANID.u_xsdbm_id_tms_7_UNCONNECTED ),
        .tms_8(\NLW_BSCANID.u_xsdbm_id_tms_8_UNCONNECTED ),
        .tms_9(\NLW_BSCANID.u_xsdbm_id_tms_9_UNCONNECTED ),
        .update(update),
        .update_0(\NLW_BSCANID.u_xsdbm_id_update_0_UNCONNECTED ),
        .update_1(\NLW_BSCANID.u_xsdbm_id_update_1_UNCONNECTED ),
        .update_10(\NLW_BSCANID.u_xsdbm_id_update_10_UNCONNECTED ),
        .update_11(\NLW_BSCANID.u_xsdbm_id_update_11_UNCONNECTED ),
        .update_12(\NLW_BSCANID.u_xsdbm_id_update_12_UNCONNECTED ),
        .update_13(\NLW_BSCANID.u_xsdbm_id_update_13_UNCONNECTED ),
        .update_14(\NLW_BSCANID.u_xsdbm_id_update_14_UNCONNECTED ),
        .update_15(\NLW_BSCANID.u_xsdbm_id_update_15_UNCONNECTED ),
        .update_2(\NLW_BSCANID.u_xsdbm_id_update_2_UNCONNECTED ),
        .update_3(\NLW_BSCANID.u_xsdbm_id_update_3_UNCONNECTED ),
        .update_4(\NLW_BSCANID.u_xsdbm_id_update_4_UNCONNECTED ),
        .update_5(\NLW_BSCANID.u_xsdbm_id_update_5_UNCONNECTED ),
        .update_6(\NLW_BSCANID.u_xsdbm_id_update_6_UNCONNECTED ),
        .update_7(\NLW_BSCANID.u_xsdbm_id_update_7_UNCONNECTED ),
        .update_8(\NLW_BSCANID.u_xsdbm_id_update_8_UNCONNECTED ),
        .update_9(\NLW_BSCANID.u_xsdbm_id_update_9_UNCONNECTED ));
endmodule

(* C_BSCANID = "32'b00000100100100000000001000100000" *) (* C_BSCAN_MODE = "0" *) (* C_BSCAN_MODE_WITH_CORE = "0" *) 
(* C_BUILD_REVISION = "0" *) (* C_CLKFBOUT_MULT_F = "10.000000" *) (* C_CLKOUT0_DIVIDE_F = "10.000000" *) 
(* C_CLK_INPUT_FREQ_HZ = "32'b00010001111000011010001100000000" *) (* C_CORE_MAJOR_VER = "1" *) (* C_CORE_MINOR_ALPHA_VER = "97" *) 
(* C_CORE_MINOR_VER = "0" *) (* C_CORE_TYPE = "1" *) (* C_DCLK_HAS_RESET = "0" *) 
(* C_DIVCLK_DIVIDE = "3" *) (* C_ENABLE_CLK_DIVIDER = "0" *) (* C_EN_BSCANID_VEC = "0" *) 
(* C_EN_INT_SIM = "1" *) (* C_FIFO_STYLE = "SUBCORE" *) (* C_MAJOR_VERSION = "14" *) 
(* C_MINOR_VERSION = "1" *) (* C_NUM_BSCAN_MASTER_PORTS = "0" *) (* C_TWO_PRIM_MODE = "0" *) 
(* C_USER_SCAN_CHAIN = "1" *) (* C_USER_SCAN_CHAIN1 = "1" *) (* C_USE_BUFR = "0" *) 
(* C_USE_EXT_BSCAN = "0" *) (* C_USE_STARTUP_CLK = "0" *) (* C_XDEVICEFAMILY = "zynq" *) 
(* C_XSDB_NUM_SLAVES = "1" *) (* C_XSDB_PERIOD_FRC = "0" *) (* C_XSDB_PERIOD_INT = "10" *) 
(* LC_CLKIN1_PERIOD = "3.333333" *) (* dont_touch = "true" *) 
module xsdbm_v3_0_0_xsdbm_id
   (bscanid_en,
    bscanid_en_0,
    bscanid_en_1,
    bscanid_en_10,
    bscanid_en_11,
    bscanid_en_12,
    bscanid_en_13,
    bscanid_en_14,
    bscanid_en_15,
    bscanid_en_2,
    bscanid_en_3,
    bscanid_en_4,
    bscanid_en_5,
    bscanid_en_6,
    bscanid_en_7,
    bscanid_en_8,
    bscanid_en_9,
    capture,
    capture_0,
    capture_1,
    capture_10,
    capture_11,
    capture_12,
    capture_13,
    capture_14,
    capture_15,
    capture_2,
    capture_3,
    capture_4,
    capture_5,
    capture_6,
    capture_7,
    capture_8,
    capture_9,
    clk,
    drck,
    drck_0,
    drck_1,
    drck_10,
    drck_11,
    drck_12,
    drck_13,
    drck_14,
    drck_15,
    drck_2,
    drck_3,
    drck_4,
    drck_5,
    drck_6,
    drck_7,
    drck_8,
    drck_9,
    reset,
    reset_0,
    reset_1,
    reset_10,
    reset_11,
    reset_12,
    reset_13,
    reset_14,
    reset_15,
    reset_2,
    reset_3,
    reset_4,
    reset_5,
    reset_6,
    reset_7,
    reset_8,
    reset_9,
    runtest,
    runtest_0,
    runtest_1,
    runtest_10,
    runtest_11,
    runtest_12,
    runtest_13,
    runtest_14,
    runtest_15,
    runtest_2,
    runtest_3,
    runtest_4,
    runtest_5,
    runtest_6,
    runtest_7,
    runtest_8,
    runtest_9,
    sel,
    sel_0,
    sel_1,
    sel_10,
    sel_11,
    sel_12,
    sel_13,
    sel_14,
    sel_15,
    sel_2,
    sel_3,
    sel_4,
    sel_5,
    sel_6,
    sel_7,
    sel_8,
    sel_9,
    shift,
    shift_0,
    shift_1,
    shift_10,
    shift_11,
    shift_12,
    shift_13,
    shift_14,
    shift_15,
    shift_2,
    shift_3,
    shift_4,
    shift_5,
    shift_6,
    shift_7,
    shift_8,
    shift_9,
    tck,
    tck_0,
    tck_1,
    tck_10,
    tck_11,
    tck_12,
    tck_13,
    tck_14,
    tck_15,
    tck_2,
    tck_3,
    tck_4,
    tck_5,
    tck_6,
    tck_7,
    tck_8,
    tck_9,
    tdi,
    tdi_0,
    tdi_1,
    tdi_10,
    tdi_11,
    tdi_12,
    tdi_13,
    tdi_14,
    tdi_15,
    tdi_2,
    tdi_3,
    tdi_4,
    tdi_5,
    tdi_6,
    tdi_7,
    tdi_8,
    tdi_9,
    tdo,
    tdo_0,
    tdo_1,
    tdo_10,
    tdo_11,
    tdo_12,
    tdo_13,
    tdo_14,
    tdo_15,
    tdo_2,
    tdo_3,
    tdo_4,
    tdo_5,
    tdo_6,
    tdo_7,
    tdo_8,
    tdo_9,
    tms,
    tms_0,
    tms_1,
    tms_10,
    tms_11,
    tms_12,
    tms_13,
    tms_14,
    tms_15,
    tms_2,
    tms_3,
    tms_4,
    tms_5,
    tms_6,
    tms_7,
    tms_8,
    tms_9,
    update,
    update_0,
    update_1,
    update_10,
    update_11,
    update_12,
    update_13,
    update_14,
    update_15,
    update_2,
    update_3,
    update_4,
    update_5,
    update_6,
    update_7,
    update_8,
    update_9,
    sl_iport0_o,
    sl_iport100_o,
    sl_iport101_o,
    sl_iport102_o,
    sl_iport103_o,
    sl_iport104_o,
    sl_iport105_o,
    sl_iport106_o,
    sl_iport107_o,
    sl_iport108_o,
    sl_iport109_o,
    sl_iport10_o,
    sl_iport110_o,
    sl_iport111_o,
    sl_iport112_o,
    sl_iport113_o,
    sl_iport114_o,
    sl_iport115_o,
    sl_iport116_o,
    sl_iport117_o,
    sl_iport118_o,
    sl_iport119_o,
    sl_iport11_o,
    sl_iport120_o,
    sl_iport121_o,
    sl_iport122_o,
    sl_iport123_o,
    sl_iport124_o,
    sl_iport125_o,
    sl_iport126_o,
    sl_iport127_o,
    sl_iport128_o,
    sl_iport129_o,
    sl_iport12_o,
    sl_iport130_o,
    sl_iport131_o,
    sl_iport132_o,
    sl_iport133_o,
    sl_iport134_o,
    sl_iport135_o,
    sl_iport136_o,
    sl_iport137_o,
    sl_iport138_o,
    sl_iport139_o,
    sl_iport13_o,
    sl_iport140_o,
    sl_iport141_o,
    sl_iport142_o,
    sl_iport143_o,
    sl_iport144_o,
    sl_iport145_o,
    sl_iport146_o,
    sl_iport147_o,
    sl_iport148_o,
    sl_iport149_o,
    sl_iport14_o,
    sl_iport150_o,
    sl_iport151_o,
    sl_iport152_o,
    sl_iport153_o,
    sl_iport154_o,
    sl_iport155_o,
    sl_iport156_o,
    sl_iport157_o,
    sl_iport158_o,
    sl_iport159_o,
    sl_iport15_o,
    sl_iport160_o,
    sl_iport161_o,
    sl_iport162_o,
    sl_iport163_o,
    sl_iport164_o,
    sl_iport165_o,
    sl_iport166_o,
    sl_iport167_o,
    sl_iport168_o,
    sl_iport169_o,
    sl_iport16_o,
    sl_iport170_o,
    sl_iport171_o,
    sl_iport172_o,
    sl_iport173_o,
    sl_iport174_o,
    sl_iport175_o,
    sl_iport176_o,
    sl_iport177_o,
    sl_iport178_o,
    sl_iport179_o,
    sl_iport17_o,
    sl_iport180_o,
    sl_iport181_o,
    sl_iport182_o,
    sl_iport183_o,
    sl_iport184_o,
    sl_iport185_o,
    sl_iport186_o,
    sl_iport187_o,
    sl_iport188_o,
    sl_iport189_o,
    sl_iport18_o,
    sl_iport190_o,
    sl_iport191_o,
    sl_iport192_o,
    sl_iport193_o,
    sl_iport194_o,
    sl_iport195_o,
    sl_iport196_o,
    sl_iport197_o,
    sl_iport198_o,
    sl_iport199_o,
    sl_iport19_o,
    sl_iport1_o,
    sl_iport200_o,
    sl_iport201_o,
    sl_iport202_o,
    sl_iport203_o,
    sl_iport204_o,
    sl_iport205_o,
    sl_iport206_o,
    sl_iport207_o,
    sl_iport208_o,
    sl_iport209_o,
    sl_iport20_o,
    sl_iport210_o,
    sl_iport211_o,
    sl_iport212_o,
    sl_iport213_o,
    sl_iport214_o,
    sl_iport215_o,
    sl_iport216_o,
    sl_iport217_o,
    sl_iport218_o,
    sl_iport219_o,
    sl_iport21_o,
    sl_iport220_o,
    sl_iport221_o,
    sl_iport222_o,
    sl_iport223_o,
    sl_iport224_o,
    sl_iport225_o,
    sl_iport226_o,
    sl_iport227_o,
    sl_iport228_o,
    sl_iport229_o,
    sl_iport22_o,
    sl_iport230_o,
    sl_iport231_o,
    sl_iport232_o,
    sl_iport233_o,
    sl_iport234_o,
    sl_iport235_o,
    sl_iport236_o,
    sl_iport237_o,
    sl_iport238_o,
    sl_iport239_o,
    sl_iport23_o,
    sl_iport240_o,
    sl_iport241_o,
    sl_iport242_o,
    sl_iport243_o,
    sl_iport244_o,
    sl_iport245_o,
    sl_iport246_o,
    sl_iport247_o,
    sl_iport248_o,
    sl_iport249_o,
    sl_iport24_o,
    sl_iport250_o,
    sl_iport251_o,
    sl_iport252_o,
    sl_iport253_o,
    sl_iport254_o,
    sl_iport255_o,
    sl_iport25_o,
    sl_iport26_o,
    sl_iport27_o,
    sl_iport28_o,
    sl_iport29_o,
    sl_iport2_o,
    sl_iport30_o,
    sl_iport31_o,
    sl_iport32_o,
    sl_iport33_o,
    sl_iport34_o,
    sl_iport35_o,
    sl_iport36_o,
    sl_iport37_o,
    sl_iport38_o,
    sl_iport39_o,
    sl_iport3_o,
    sl_iport40_o,
    sl_iport41_o,
    sl_iport42_o,
    sl_iport43_o,
    sl_iport44_o,
    sl_iport45_o,
    sl_iport46_o,
    sl_iport47_o,
    sl_iport48_o,
    sl_iport49_o,
    sl_iport4_o,
    sl_iport50_o,
    sl_iport51_o,
    sl_iport52_o,
    sl_iport53_o,
    sl_iport54_o,
    sl_iport55_o,
    sl_iport56_o,
    sl_iport57_o,
    sl_iport58_o,
    sl_iport59_o,
    sl_iport5_o,
    sl_iport60_o,
    sl_iport61_o,
    sl_iport62_o,
    sl_iport63_o,
    sl_iport64_o,
    sl_iport65_o,
    sl_iport66_o,
    sl_iport67_o,
    sl_iport68_o,
    sl_iport69_o,
    sl_iport6_o,
    sl_iport70_o,
    sl_iport71_o,
    sl_iport72_o,
    sl_iport73_o,
    sl_iport74_o,
    sl_iport75_o,
    sl_iport76_o,
    sl_iport77_o,
    sl_iport78_o,
    sl_iport79_o,
    sl_iport7_o,
    sl_iport80_o,
    sl_iport81_o,
    sl_iport82_o,
    sl_iport83_o,
    sl_iport84_o,
    sl_iport85_o,
    sl_iport86_o,
    sl_iport87_o,
    sl_iport88_o,
    sl_iport89_o,
    sl_iport8_o,
    sl_iport90_o,
    sl_iport91_o,
    sl_iport92_o,
    sl_iport93_o,
    sl_iport94_o,
    sl_iport95_o,
    sl_iport96_o,
    sl_iport97_o,
    sl_iport98_o,
    sl_iport99_o,
    sl_iport9_o,
    sl_oport0_i,
    sl_oport100_i,
    sl_oport101_i,
    sl_oport102_i,
    sl_oport103_i,
    sl_oport104_i,
    sl_oport105_i,
    sl_oport106_i,
    sl_oport107_i,
    sl_oport108_i,
    sl_oport109_i,
    sl_oport10_i,
    sl_oport110_i,
    sl_oport111_i,
    sl_oport112_i,
    sl_oport113_i,
    sl_oport114_i,
    sl_oport115_i,
    sl_oport116_i,
    sl_oport117_i,
    sl_oport118_i,
    sl_oport119_i,
    sl_oport11_i,
    sl_oport120_i,
    sl_oport121_i,
    sl_oport122_i,
    sl_oport123_i,
    sl_oport124_i,
    sl_oport125_i,
    sl_oport126_i,
    sl_oport127_i,
    sl_oport128_i,
    sl_oport129_i,
    sl_oport12_i,
    sl_oport130_i,
    sl_oport131_i,
    sl_oport132_i,
    sl_oport133_i,
    sl_oport134_i,
    sl_oport135_i,
    sl_oport136_i,
    sl_oport137_i,
    sl_oport138_i,
    sl_oport139_i,
    sl_oport13_i,
    sl_oport140_i,
    sl_oport141_i,
    sl_oport142_i,
    sl_oport143_i,
    sl_oport144_i,
    sl_oport145_i,
    sl_oport146_i,
    sl_oport147_i,
    sl_oport148_i,
    sl_oport149_i,
    sl_oport14_i,
    sl_oport150_i,
    sl_oport151_i,
    sl_oport152_i,
    sl_oport153_i,
    sl_oport154_i,
    sl_oport155_i,
    sl_oport156_i,
    sl_oport157_i,
    sl_oport158_i,
    sl_oport159_i,
    sl_oport15_i,
    sl_oport160_i,
    sl_oport161_i,
    sl_oport162_i,
    sl_oport163_i,
    sl_oport164_i,
    sl_oport165_i,
    sl_oport166_i,
    sl_oport167_i,
    sl_oport168_i,
    sl_oport169_i,
    sl_oport16_i,
    sl_oport170_i,
    sl_oport171_i,
    sl_oport172_i,
    sl_oport173_i,
    sl_oport174_i,
    sl_oport175_i,
    sl_oport176_i,
    sl_oport177_i,
    sl_oport178_i,
    sl_oport179_i,
    sl_oport17_i,
    sl_oport180_i,
    sl_oport181_i,
    sl_oport182_i,
    sl_oport183_i,
    sl_oport184_i,
    sl_oport185_i,
    sl_oport186_i,
    sl_oport187_i,
    sl_oport188_i,
    sl_oport189_i,
    sl_oport18_i,
    sl_oport190_i,
    sl_oport191_i,
    sl_oport192_i,
    sl_oport193_i,
    sl_oport194_i,
    sl_oport195_i,
    sl_oport196_i,
    sl_oport197_i,
    sl_oport198_i,
    sl_oport199_i,
    sl_oport19_i,
    sl_oport1_i,
    sl_oport200_i,
    sl_oport201_i,
    sl_oport202_i,
    sl_oport203_i,
    sl_oport204_i,
    sl_oport205_i,
    sl_oport206_i,
    sl_oport207_i,
    sl_oport208_i,
    sl_oport209_i,
    sl_oport20_i,
    sl_oport210_i,
    sl_oport211_i,
    sl_oport212_i,
    sl_oport213_i,
    sl_oport214_i,
    sl_oport215_i,
    sl_oport216_i,
    sl_oport217_i,
    sl_oport218_i,
    sl_oport219_i,
    sl_oport21_i,
    sl_oport220_i,
    sl_oport221_i,
    sl_oport222_i,
    sl_oport223_i,
    sl_oport224_i,
    sl_oport225_i,
    sl_oport226_i,
    sl_oport227_i,
    sl_oport228_i,
    sl_oport229_i,
    sl_oport22_i,
    sl_oport230_i,
    sl_oport231_i,
    sl_oport232_i,
    sl_oport233_i,
    sl_oport234_i,
    sl_oport235_i,
    sl_oport236_i,
    sl_oport237_i,
    sl_oport238_i,
    sl_oport239_i,
    sl_oport23_i,
    sl_oport240_i,
    sl_oport241_i,
    sl_oport242_i,
    sl_oport243_i,
    sl_oport244_i,
    sl_oport245_i,
    sl_oport246_i,
    sl_oport247_i,
    sl_oport248_i,
    sl_oport249_i,
    sl_oport24_i,
    sl_oport250_i,
    sl_oport251_i,
    sl_oport252_i,
    sl_oport253_i,
    sl_oport254_i,
    sl_oport255_i,
    sl_oport25_i,
    sl_oport26_i,
    sl_oport27_i,
    sl_oport28_i,
    sl_oport29_i,
    sl_oport2_i,
    sl_oport30_i,
    sl_oport31_i,
    sl_oport32_i,
    sl_oport33_i,
    sl_oport34_i,
    sl_oport35_i,
    sl_oport36_i,
    sl_oport37_i,
    sl_oport38_i,
    sl_oport39_i,
    sl_oport3_i,
    sl_oport40_i,
    sl_oport41_i,
    sl_oport42_i,
    sl_oport43_i,
    sl_oport44_i,
    sl_oport45_i,
    sl_oport46_i,
    sl_oport47_i,
    sl_oport48_i,
    sl_oport49_i,
    sl_oport4_i,
    sl_oport50_i,
    sl_oport51_i,
    sl_oport52_i,
    sl_oport53_i,
    sl_oport54_i,
    sl_oport55_i,
    sl_oport56_i,
    sl_oport57_i,
    sl_oport58_i,
    sl_oport59_i,
    sl_oport5_i,
    sl_oport60_i,
    sl_oport61_i,
    sl_oport62_i,
    sl_oport63_i,
    sl_oport64_i,
    sl_oport65_i,
    sl_oport66_i,
    sl_oport67_i,
    sl_oport68_i,
    sl_oport69_i,
    sl_oport6_i,
    sl_oport70_i,
    sl_oport71_i,
    sl_oport72_i,
    sl_oport73_i,
    sl_oport74_i,
    sl_oport75_i,
    sl_oport76_i,
    sl_oport77_i,
    sl_oport78_i,
    sl_oport79_i,
    sl_oport7_i,
    sl_oport80_i,
    sl_oport81_i,
    sl_oport82_i,
    sl_oport83_i,
    sl_oport84_i,
    sl_oport85_i,
    sl_oport86_i,
    sl_oport87_i,
    sl_oport88_i,
    sl_oport89_i,
    sl_oport8_i,
    sl_oport90_i,
    sl_oport91_i,
    sl_oport92_i,
    sl_oport93_i,
    sl_oport94_i,
    sl_oport95_i,
    sl_oport96_i,
    sl_oport97_i,
    sl_oport98_i,
    sl_oport99_i,
    sl_oport9_i);
  input bscanid_en;
  (* BSCAN_SLAVE_INDEX = "0" *) output bscanid_en_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output bscanid_en_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output bscanid_en_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output bscanid_en_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output bscanid_en_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output bscanid_en_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output bscanid_en_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output bscanid_en_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output bscanid_en_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output bscanid_en_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output bscanid_en_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output bscanid_en_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output bscanid_en_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output bscanid_en_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output bscanid_en_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output bscanid_en_9;
  input capture;
  (* BSCAN_SLAVE_INDEX = "0" *) output capture_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output capture_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output capture_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output capture_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output capture_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output capture_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output capture_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output capture_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output capture_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output capture_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output capture_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output capture_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output capture_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output capture_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output capture_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output capture_9;
  (* dont_touch = "true" *) input clk;
  input drck;
  (* BSCAN_SLAVE_INDEX = "0" *) output drck_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output drck_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output drck_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output drck_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output drck_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output drck_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output drck_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output drck_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output drck_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output drck_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output drck_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output drck_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output drck_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output drck_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output drck_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output drck_9;
  input reset;
  (* BSCAN_SLAVE_INDEX = "0" *) output reset_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output reset_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output reset_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output reset_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output reset_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output reset_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output reset_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output reset_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output reset_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output reset_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output reset_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output reset_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output reset_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output reset_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output reset_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output reset_9;
  input runtest;
  (* BSCAN_SLAVE_INDEX = "0" *) output runtest_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output runtest_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output runtest_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output runtest_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output runtest_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output runtest_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output runtest_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output runtest_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output runtest_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output runtest_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output runtest_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output runtest_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output runtest_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output runtest_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output runtest_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output runtest_9;
  input sel;
  (* BSCAN_SLAVE_INDEX = "0" *) output sel_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output sel_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output sel_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output sel_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output sel_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output sel_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output sel_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output sel_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output sel_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output sel_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output sel_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output sel_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output sel_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output sel_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output sel_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output sel_9;
  input shift;
  (* BSCAN_SLAVE_INDEX = "0" *) output shift_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output shift_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output shift_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output shift_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output shift_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output shift_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output shift_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output shift_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output shift_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output shift_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output shift_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output shift_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output shift_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output shift_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output shift_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output shift_9;
  input tck;
  (* BSCAN_SLAVE_INDEX = "0" *) output tck_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output tck_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output tck_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output tck_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output tck_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output tck_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output tck_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output tck_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output tck_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output tck_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output tck_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output tck_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output tck_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output tck_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output tck_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output tck_9;
  input tdi;
  (* BSCAN_SLAVE_INDEX = "0" *) output tdi_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output tdi_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output tdi_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output tdi_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output tdi_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output tdi_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output tdi_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output tdi_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output tdi_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output tdi_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output tdi_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output tdi_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output tdi_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output tdi_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output tdi_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output tdi_9;
  output tdo;
  (* BSCAN_SLAVE_INDEX = "0" *) input tdo_0;
  (* BSCAN_SLAVE_INDEX = "1" *) input tdo_1;
  (* BSCAN_SLAVE_INDEX = "10" *) input tdo_10;
  (* BSCAN_SLAVE_INDEX = "11" *) input tdo_11;
  (* BSCAN_SLAVE_INDEX = "12" *) input tdo_12;
  (* BSCAN_SLAVE_INDEX = "13" *) input tdo_13;
  (* BSCAN_SLAVE_INDEX = "14" *) input tdo_14;
  (* BSCAN_SLAVE_INDEX = "15" *) input tdo_15;
  (* BSCAN_SLAVE_INDEX = "2" *) input tdo_2;
  (* BSCAN_SLAVE_INDEX = "3" *) input tdo_3;
  (* BSCAN_SLAVE_INDEX = "4" *) input tdo_4;
  (* BSCAN_SLAVE_INDEX = "5" *) input tdo_5;
  (* BSCAN_SLAVE_INDEX = "6" *) input tdo_6;
  (* BSCAN_SLAVE_INDEX = "7" *) input tdo_7;
  (* BSCAN_SLAVE_INDEX = "8" *) input tdo_8;
  (* BSCAN_SLAVE_INDEX = "9" *) input tdo_9;
  input tms;
  (* BSCAN_SLAVE_INDEX = "0" *) output tms_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output tms_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output tms_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output tms_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output tms_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output tms_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output tms_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output tms_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output tms_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output tms_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output tms_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output tms_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output tms_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output tms_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output tms_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output tms_9;
  input update;
  (* BSCAN_SLAVE_INDEX = "0" *) output update_0;
  (* BSCAN_SLAVE_INDEX = "1" *) output update_1;
  (* BSCAN_SLAVE_INDEX = "10" *) output update_10;
  (* BSCAN_SLAVE_INDEX = "11" *) output update_11;
  (* BSCAN_SLAVE_INDEX = "12" *) output update_12;
  (* BSCAN_SLAVE_INDEX = "13" *) output update_13;
  (* BSCAN_SLAVE_INDEX = "14" *) output update_14;
  (* BSCAN_SLAVE_INDEX = "15" *) output update_15;
  (* BSCAN_SLAVE_INDEX = "2" *) output update_2;
  (* BSCAN_SLAVE_INDEX = "3" *) output update_3;
  (* BSCAN_SLAVE_INDEX = "4" *) output update_4;
  (* BSCAN_SLAVE_INDEX = "5" *) output update_5;
  (* BSCAN_SLAVE_INDEX = "6" *) output update_6;
  (* BSCAN_SLAVE_INDEX = "7" *) output update_7;
  (* BSCAN_SLAVE_INDEX = "8" *) output update_8;
  (* BSCAN_SLAVE_INDEX = "9" *) output update_9;
  output [36:0]sl_iport0_o;
  output [0:0]sl_iport100_o;
  output [0:0]sl_iport101_o;
  output [0:0]sl_iport102_o;
  output [0:0]sl_iport103_o;
  output [0:0]sl_iport104_o;
  output [0:0]sl_iport105_o;
  output [0:0]sl_iport106_o;
  output [0:0]sl_iport107_o;
  output [0:0]sl_iport108_o;
  output [0:0]sl_iport109_o;
  output [0:0]sl_iport10_o;
  output [0:0]sl_iport110_o;
  output [0:0]sl_iport111_o;
  output [0:0]sl_iport112_o;
  output [0:0]sl_iport113_o;
  output [0:0]sl_iport114_o;
  output [0:0]sl_iport115_o;
  output [0:0]sl_iport116_o;
  output [0:0]sl_iport117_o;
  output [0:0]sl_iport118_o;
  output [0:0]sl_iport119_o;
  output [0:0]sl_iport11_o;
  output [0:0]sl_iport120_o;
  output [0:0]sl_iport121_o;
  output [0:0]sl_iport122_o;
  output [0:0]sl_iport123_o;
  output [0:0]sl_iport124_o;
  output [0:0]sl_iport125_o;
  output [0:0]sl_iport126_o;
  output [0:0]sl_iport127_o;
  output [0:0]sl_iport128_o;
  output [0:0]sl_iport129_o;
  output [0:0]sl_iport12_o;
  output [0:0]sl_iport130_o;
  output [0:0]sl_iport131_o;
  output [0:0]sl_iport132_o;
  output [0:0]sl_iport133_o;
  output [0:0]sl_iport134_o;
  output [0:0]sl_iport135_o;
  output [0:0]sl_iport136_o;
  output [0:0]sl_iport137_o;
  output [0:0]sl_iport138_o;
  output [0:0]sl_iport139_o;
  output [0:0]sl_iport13_o;
  output [0:0]sl_iport140_o;
  output [0:0]sl_iport141_o;
  output [0:0]sl_iport142_o;
  output [0:0]sl_iport143_o;
  output [0:0]sl_iport144_o;
  output [0:0]sl_iport145_o;
  output [0:0]sl_iport146_o;
  output [0:0]sl_iport147_o;
  output [0:0]sl_iport148_o;
  output [0:0]sl_iport149_o;
  output [0:0]sl_iport14_o;
  output [0:0]sl_iport150_o;
  output [0:0]sl_iport151_o;
  output [0:0]sl_iport152_o;
  output [0:0]sl_iport153_o;
  output [0:0]sl_iport154_o;
  output [0:0]sl_iport155_o;
  output [0:0]sl_iport156_o;
  output [0:0]sl_iport157_o;
  output [0:0]sl_iport158_o;
  output [0:0]sl_iport159_o;
  output [0:0]sl_iport15_o;
  output [0:0]sl_iport160_o;
  output [0:0]sl_iport161_o;
  output [0:0]sl_iport162_o;
  output [0:0]sl_iport163_o;
  output [0:0]sl_iport164_o;
  output [0:0]sl_iport165_o;
  output [0:0]sl_iport166_o;
  output [0:0]sl_iport167_o;
  output [0:0]sl_iport168_o;
  output [0:0]sl_iport169_o;
  output [0:0]sl_iport16_o;
  output [0:0]sl_iport170_o;
  output [0:0]sl_iport171_o;
  output [0:0]sl_iport172_o;
  output [0:0]sl_iport173_o;
  output [0:0]sl_iport174_o;
  output [0:0]sl_iport175_o;
  output [0:0]sl_iport176_o;
  output [0:0]sl_iport177_o;
  output [0:0]sl_iport178_o;
  output [0:0]sl_iport179_o;
  output [0:0]sl_iport17_o;
  output [0:0]sl_iport180_o;
  output [0:0]sl_iport181_o;
  output [0:0]sl_iport182_o;
  output [0:0]sl_iport183_o;
  output [0:0]sl_iport184_o;
  output [0:0]sl_iport185_o;
  output [0:0]sl_iport186_o;
  output [0:0]sl_iport187_o;
  output [0:0]sl_iport188_o;
  output [0:0]sl_iport189_o;
  output [0:0]sl_iport18_o;
  output [0:0]sl_iport190_o;
  output [0:0]sl_iport191_o;
  output [0:0]sl_iport192_o;
  output [0:0]sl_iport193_o;
  output [0:0]sl_iport194_o;
  output [0:0]sl_iport195_o;
  output [0:0]sl_iport196_o;
  output [0:0]sl_iport197_o;
  output [0:0]sl_iport198_o;
  output [0:0]sl_iport199_o;
  output [0:0]sl_iport19_o;
  output [0:0]sl_iport1_o;
  output [0:0]sl_iport200_o;
  output [0:0]sl_iport201_o;
  output [0:0]sl_iport202_o;
  output [0:0]sl_iport203_o;
  output [0:0]sl_iport204_o;
  output [0:0]sl_iport205_o;
  output [0:0]sl_iport206_o;
  output [0:0]sl_iport207_o;
  output [0:0]sl_iport208_o;
  output [0:0]sl_iport209_o;
  output [0:0]sl_iport20_o;
  output [0:0]sl_iport210_o;
  output [0:0]sl_iport211_o;
  output [0:0]sl_iport212_o;
  output [0:0]sl_iport213_o;
  output [0:0]sl_iport214_o;
  output [0:0]sl_iport215_o;
  output [0:0]sl_iport216_o;
  output [0:0]sl_iport217_o;
  output [0:0]sl_iport218_o;
  output [0:0]sl_iport219_o;
  output [0:0]sl_iport21_o;
  output [0:0]sl_iport220_o;
  output [0:0]sl_iport221_o;
  output [0:0]sl_iport222_o;
  output [0:0]sl_iport223_o;
  output [0:0]sl_iport224_o;
  output [0:0]sl_iport225_o;
  output [0:0]sl_iport226_o;
  output [0:0]sl_iport227_o;
  output [0:0]sl_iport228_o;
  output [0:0]sl_iport229_o;
  output [0:0]sl_iport22_o;
  output [0:0]sl_iport230_o;
  output [0:0]sl_iport231_o;
  output [0:0]sl_iport232_o;
  output [0:0]sl_iport233_o;
  output [0:0]sl_iport234_o;
  output [0:0]sl_iport235_o;
  output [0:0]sl_iport236_o;
  output [0:0]sl_iport237_o;
  output [0:0]sl_iport238_o;
  output [0:0]sl_iport239_o;
  output [0:0]sl_iport23_o;
  output [0:0]sl_iport240_o;
  output [0:0]sl_iport241_o;
  output [0:0]sl_iport242_o;
  output [0:0]sl_iport243_o;
  output [0:0]sl_iport244_o;
  output [0:0]sl_iport245_o;
  output [0:0]sl_iport246_o;
  output [0:0]sl_iport247_o;
  output [0:0]sl_iport248_o;
  output [0:0]sl_iport249_o;
  output [0:0]sl_iport24_o;
  output [0:0]sl_iport250_o;
  output [0:0]sl_iport251_o;
  output [0:0]sl_iport252_o;
  output [0:0]sl_iport253_o;
  output [0:0]sl_iport254_o;
  output [0:0]sl_iport255_o;
  output [0:0]sl_iport25_o;
  output [0:0]sl_iport26_o;
  output [0:0]sl_iport27_o;
  output [0:0]sl_iport28_o;
  output [0:0]sl_iport29_o;
  output [0:0]sl_iport2_o;
  output [0:0]sl_iport30_o;
  output [0:0]sl_iport31_o;
  output [0:0]sl_iport32_o;
  output [0:0]sl_iport33_o;
  output [0:0]sl_iport34_o;
  output [0:0]sl_iport35_o;
  output [0:0]sl_iport36_o;
  output [0:0]sl_iport37_o;
  output [0:0]sl_iport38_o;
  output [0:0]sl_iport39_o;
  output [0:0]sl_iport3_o;
  output [0:0]sl_iport40_o;
  output [0:0]sl_iport41_o;
  output [0:0]sl_iport42_o;
  output [0:0]sl_iport43_o;
  output [0:0]sl_iport44_o;
  output [0:0]sl_iport45_o;
  output [0:0]sl_iport46_o;
  output [0:0]sl_iport47_o;
  output [0:0]sl_iport48_o;
  output [0:0]sl_iport49_o;
  output [0:0]sl_iport4_o;
  output [0:0]sl_iport50_o;
  output [0:0]sl_iport51_o;
  output [0:0]sl_iport52_o;
  output [0:0]sl_iport53_o;
  output [0:0]sl_iport54_o;
  output [0:0]sl_iport55_o;
  output [0:0]sl_iport56_o;
  output [0:0]sl_iport57_o;
  output [0:0]sl_iport58_o;
  output [0:0]sl_iport59_o;
  output [0:0]sl_iport5_o;
  output [0:0]sl_iport60_o;
  output [0:0]sl_iport61_o;
  output [0:0]sl_iport62_o;
  output [0:0]sl_iport63_o;
  output [0:0]sl_iport64_o;
  output [0:0]sl_iport65_o;
  output [0:0]sl_iport66_o;
  output [0:0]sl_iport67_o;
  output [0:0]sl_iport68_o;
  output [0:0]sl_iport69_o;
  output [0:0]sl_iport6_o;
  output [0:0]sl_iport70_o;
  output [0:0]sl_iport71_o;
  output [0:0]sl_iport72_o;
  output [0:0]sl_iport73_o;
  output [0:0]sl_iport74_o;
  output [0:0]sl_iport75_o;
  output [0:0]sl_iport76_o;
  output [0:0]sl_iport77_o;
  output [0:0]sl_iport78_o;
  output [0:0]sl_iport79_o;
  output [0:0]sl_iport7_o;
  output [0:0]sl_iport80_o;
  output [0:0]sl_iport81_o;
  output [0:0]sl_iport82_o;
  output [0:0]sl_iport83_o;
  output [0:0]sl_iport84_o;
  output [0:0]sl_iport85_o;
  output [0:0]sl_iport86_o;
  output [0:0]sl_iport87_o;
  output [0:0]sl_iport88_o;
  output [0:0]sl_iport89_o;
  output [0:0]sl_iport8_o;
  output [0:0]sl_iport90_o;
  output [0:0]sl_iport91_o;
  output [0:0]sl_iport92_o;
  output [0:0]sl_iport93_o;
  output [0:0]sl_iport94_o;
  output [0:0]sl_iport95_o;
  output [0:0]sl_iport96_o;
  output [0:0]sl_iport97_o;
  output [0:0]sl_iport98_o;
  output [0:0]sl_iport99_o;
  output [0:0]sl_iport9_o;
  input [16:0]sl_oport0_i;
  input [0:0]sl_oport100_i;
  input [0:0]sl_oport101_i;
  input [0:0]sl_oport102_i;
  input [0:0]sl_oport103_i;
  input [0:0]sl_oport104_i;
  input [0:0]sl_oport105_i;
  input [0:0]sl_oport106_i;
  input [0:0]sl_oport107_i;
  input [0:0]sl_oport108_i;
  input [0:0]sl_oport109_i;
  input [0:0]sl_oport10_i;
  input [0:0]sl_oport110_i;
  input [0:0]sl_oport111_i;
  input [0:0]sl_oport112_i;
  input [0:0]sl_oport113_i;
  input [0:0]sl_oport114_i;
  input [0:0]sl_oport115_i;
  input [0:0]sl_oport116_i;
  input [0:0]sl_oport117_i;
  input [0:0]sl_oport118_i;
  input [0:0]sl_oport119_i;
  input [0:0]sl_oport11_i;
  input [0:0]sl_oport120_i;
  input [0:0]sl_oport121_i;
  input [0:0]sl_oport122_i;
  input [0:0]sl_oport123_i;
  input [0:0]sl_oport124_i;
  input [0:0]sl_oport125_i;
  input [0:0]sl_oport126_i;
  input [0:0]sl_oport127_i;
  input [0:0]sl_oport128_i;
  input [0:0]sl_oport129_i;
  input [0:0]sl_oport12_i;
  input [0:0]sl_oport130_i;
  input [0:0]sl_oport131_i;
  input [0:0]sl_oport132_i;
  input [0:0]sl_oport133_i;
  input [0:0]sl_oport134_i;
  input [0:0]sl_oport135_i;
  input [0:0]sl_oport136_i;
  input [0:0]sl_oport137_i;
  input [0:0]sl_oport138_i;
  input [0:0]sl_oport139_i;
  input [0:0]sl_oport13_i;
  input [0:0]sl_oport140_i;
  input [0:0]sl_oport141_i;
  input [0:0]sl_oport142_i;
  input [0:0]sl_oport143_i;
  input [0:0]sl_oport144_i;
  input [0:0]sl_oport145_i;
  input [0:0]sl_oport146_i;
  input [0:0]sl_oport147_i;
  input [0:0]sl_oport148_i;
  input [0:0]sl_oport149_i;
  input [0:0]sl_oport14_i;
  input [0:0]sl_oport150_i;
  input [0:0]sl_oport151_i;
  input [0:0]sl_oport152_i;
  input [0:0]sl_oport153_i;
  input [0:0]sl_oport154_i;
  input [0:0]sl_oport155_i;
  input [0:0]sl_oport156_i;
  input [0:0]sl_oport157_i;
  input [0:0]sl_oport158_i;
  input [0:0]sl_oport159_i;
  input [0:0]sl_oport15_i;
  input [0:0]sl_oport160_i;
  input [0:0]sl_oport161_i;
  input [0:0]sl_oport162_i;
  input [0:0]sl_oport163_i;
  input [0:0]sl_oport164_i;
  input [0:0]sl_oport165_i;
  input [0:0]sl_oport166_i;
  input [0:0]sl_oport167_i;
  input [0:0]sl_oport168_i;
  input [0:0]sl_oport169_i;
  input [0:0]sl_oport16_i;
  input [0:0]sl_oport170_i;
  input [0:0]sl_oport171_i;
  input [0:0]sl_oport172_i;
  input [0:0]sl_oport173_i;
  input [0:0]sl_oport174_i;
  input [0:0]sl_oport175_i;
  input [0:0]sl_oport176_i;
  input [0:0]sl_oport177_i;
  input [0:0]sl_oport178_i;
  input [0:0]sl_oport179_i;
  input [0:0]sl_oport17_i;
  input [0:0]sl_oport180_i;
  input [0:0]sl_oport181_i;
  input [0:0]sl_oport182_i;
  input [0:0]sl_oport183_i;
  input [0:0]sl_oport184_i;
  input [0:0]sl_oport185_i;
  input [0:0]sl_oport186_i;
  input [0:0]sl_oport187_i;
  input [0:0]sl_oport188_i;
  input [0:0]sl_oport189_i;
  input [0:0]sl_oport18_i;
  input [0:0]sl_oport190_i;
  input [0:0]sl_oport191_i;
  input [0:0]sl_oport192_i;
  input [0:0]sl_oport193_i;
  input [0:0]sl_oport194_i;
  input [0:0]sl_oport195_i;
  input [0:0]sl_oport196_i;
  input [0:0]sl_oport197_i;
  input [0:0]sl_oport198_i;
  input [0:0]sl_oport199_i;
  input [0:0]sl_oport19_i;
  input [0:0]sl_oport1_i;
  input [0:0]sl_oport200_i;
  input [0:0]sl_oport201_i;
  input [0:0]sl_oport202_i;
  input [0:0]sl_oport203_i;
  input [0:0]sl_oport204_i;
  input [0:0]sl_oport205_i;
  input [0:0]sl_oport206_i;
  input [0:0]sl_oport207_i;
  input [0:0]sl_oport208_i;
  input [0:0]sl_oport209_i;
  input [0:0]sl_oport20_i;
  input [0:0]sl_oport210_i;
  input [0:0]sl_oport211_i;
  input [0:0]sl_oport212_i;
  input [0:0]sl_oport213_i;
  input [0:0]sl_oport214_i;
  input [0:0]sl_oport215_i;
  input [0:0]sl_oport216_i;
  input [0:0]sl_oport217_i;
  input [0:0]sl_oport218_i;
  input [0:0]sl_oport219_i;
  input [0:0]sl_oport21_i;
  input [0:0]sl_oport220_i;
  input [0:0]sl_oport221_i;
  input [0:0]sl_oport222_i;
  input [0:0]sl_oport223_i;
  input [0:0]sl_oport224_i;
  input [0:0]sl_oport225_i;
  input [0:0]sl_oport226_i;
  input [0:0]sl_oport227_i;
  input [0:0]sl_oport228_i;
  input [0:0]sl_oport229_i;
  input [0:0]sl_oport22_i;
  input [0:0]sl_oport230_i;
  input [0:0]sl_oport231_i;
  input [0:0]sl_oport232_i;
  input [0:0]sl_oport233_i;
  input [0:0]sl_oport234_i;
  input [0:0]sl_oport235_i;
  input [0:0]sl_oport236_i;
  input [0:0]sl_oport237_i;
  input [0:0]sl_oport238_i;
  input [0:0]sl_oport239_i;
  input [0:0]sl_oport23_i;
  input [0:0]sl_oport240_i;
  input [0:0]sl_oport241_i;
  input [0:0]sl_oport242_i;
  input [0:0]sl_oport243_i;
  input [0:0]sl_oport244_i;
  input [0:0]sl_oport245_i;
  input [0:0]sl_oport246_i;
  input [0:0]sl_oport247_i;
  input [0:0]sl_oport248_i;
  input [0:0]sl_oport249_i;
  input [0:0]sl_oport24_i;
  input [0:0]sl_oport250_i;
  input [0:0]sl_oport251_i;
  input [0:0]sl_oport252_i;
  input [0:0]sl_oport253_i;
  input [0:0]sl_oport254_i;
  input [0:0]sl_oport255_i;
  input [0:0]sl_oport25_i;
  input [0:0]sl_oport26_i;
  input [0:0]sl_oport27_i;
  input [0:0]sl_oport28_i;
  input [0:0]sl_oport29_i;
  input [0:0]sl_oport2_i;
  input [0:0]sl_oport30_i;
  input [0:0]sl_oport31_i;
  input [0:0]sl_oport32_i;
  input [0:0]sl_oport33_i;
  input [0:0]sl_oport34_i;
  input [0:0]sl_oport35_i;
  input [0:0]sl_oport36_i;
  input [0:0]sl_oport37_i;
  input [0:0]sl_oport38_i;
  input [0:0]sl_oport39_i;
  input [0:0]sl_oport3_i;
  input [0:0]sl_oport40_i;
  input [0:0]sl_oport41_i;
  input [0:0]sl_oport42_i;
  input [0:0]sl_oport43_i;
  input [0:0]sl_oport44_i;
  input [0:0]sl_oport45_i;
  input [0:0]sl_oport46_i;
  input [0:0]sl_oport47_i;
  input [0:0]sl_oport48_i;
  input [0:0]sl_oport49_i;
  input [0:0]sl_oport4_i;
  input [0:0]sl_oport50_i;
  input [0:0]sl_oport51_i;
  input [0:0]sl_oport52_i;
  input [0:0]sl_oport53_i;
  input [0:0]sl_oport54_i;
  input [0:0]sl_oport55_i;
  input [0:0]sl_oport56_i;
  input [0:0]sl_oport57_i;
  input [0:0]sl_oport58_i;
  input [0:0]sl_oport59_i;
  input [0:0]sl_oport5_i;
  input [0:0]sl_oport60_i;
  input [0:0]sl_oport61_i;
  input [0:0]sl_oport62_i;
  input [0:0]sl_oport63_i;
  input [0:0]sl_oport64_i;
  input [0:0]sl_oport65_i;
  input [0:0]sl_oport66_i;
  input [0:0]sl_oport67_i;
  input [0:0]sl_oport68_i;
  input [0:0]sl_oport69_i;
  input [0:0]sl_oport6_i;
  input [0:0]sl_oport70_i;
  input [0:0]sl_oport71_i;
  input [0:0]sl_oport72_i;
  input [0:0]sl_oport73_i;
  input [0:0]sl_oport74_i;
  input [0:0]sl_oport75_i;
  input [0:0]sl_oport76_i;
  input [0:0]sl_oport77_i;
  input [0:0]sl_oport78_i;
  input [0:0]sl_oport79_i;
  input [0:0]sl_oport7_i;
  input [0:0]sl_oport80_i;
  input [0:0]sl_oport81_i;
  input [0:0]sl_oport82_i;
  input [0:0]sl_oport83_i;
  input [0:0]sl_oport84_i;
  input [0:0]sl_oport85_i;
  input [0:0]sl_oport86_i;
  input [0:0]sl_oport87_i;
  input [0:0]sl_oport88_i;
  input [0:0]sl_oport89_i;
  input [0:0]sl_oport8_i;
  input [0:0]sl_oport90_i;
  input [0:0]sl_oport91_i;
  input [0:0]sl_oport92_i;
  input [0:0]sl_oport93_i;
  input [0:0]sl_oport94_i;
  input [0:0]sl_oport95_i;
  input [0:0]sl_oport96_i;
  input [0:0]sl_oport97_i;
  input [0:0]sl_oport98_i;
  input [0:0]sl_oport99_i;
  input [0:0]sl_oport9_i;

  wire \<const0> ;
  wire \CORE_XSDB.U_ICON_n_10 ;
  wire \CORE_XSDB.U_ICON_n_11 ;
  wire \CORE_XSDB.U_ICON_n_12 ;
  wire \CORE_XSDB.U_ICON_n_13 ;
  wire \CORE_XSDB.U_ICON_n_7 ;
  wire \CORE_XSDB.U_ICON_n_8 ;
  wire \CORE_XSDB.U_ICON_n_9 ;
  (* RTL_KEEP = "true" *) wire DRCK;
  (* RTL_KEEP = "true" *) wire RESET;
  (* RTL_KEEP = "true" *) wire SEL;
  (* RTL_KEEP = "true" *) wire SHIFT;
  wire \SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ;
  (* RTL_KEEP = "true" *) wire TDI;
  (* RTL_KEEP = "true" *) wire TDO;
  (* RTL_KEEP = "true" *) wire UPDATE;
  (* RTL_KEEP = "true" *) wire UPDATE_temp;
  (* DONT_TOUCH *) wire [31:0]bscanid;
  wire bscanid_en_int;
  wire capture_bs;
  wire clk;
  wire [3:2]iCORE_ID;
  wire iSYNC;
  wire iTDI_reg;
  wire iTDO_next;
  (* DONT_TOUCH *) wire [1:0]id_state;
  wire itck;
  wire itck_i;
  wire [1:1]p_0_in__0;
  wire [31:0]p_2_in;
  wire reset_bs;
  wire runtest_bs;
  wire [3:2]sel0;
  wire sel_bs;
  wire shift_bs;
  wire [36:0]\^sl_iport0_o ;
  wire [16:0]sl_oport0_i;
  wire stat_reg_reg0;
  wire tck_bs;
  wire tdi_bs;
  wire tdo_bs;
  wire tdo_int;
  wire tms_bs;
  wire [0:0]\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_capture_UNCONNECTED ;
  wire [0:0]\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_drck_UNCONNECTED ;
  wire [0:0]\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_runtest_UNCONNECTED ;
  wire [0:0]\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_tms_UNCONNECTED ;

  assign bscanid_en_0 = \<const0> ;
  assign bscanid_en_1 = \<const0> ;
  assign bscanid_en_10 = \<const0> ;
  assign bscanid_en_11 = \<const0> ;
  assign bscanid_en_12 = \<const0> ;
  assign bscanid_en_13 = \<const0> ;
  assign bscanid_en_14 = \<const0> ;
  assign bscanid_en_15 = \<const0> ;
  assign bscanid_en_2 = \<const0> ;
  assign bscanid_en_3 = \<const0> ;
  assign bscanid_en_4 = \<const0> ;
  assign bscanid_en_5 = \<const0> ;
  assign bscanid_en_6 = \<const0> ;
  assign bscanid_en_7 = \<const0> ;
  assign bscanid_en_8 = \<const0> ;
  assign bscanid_en_9 = \<const0> ;
  assign capture_0 = \<const0> ;
  assign capture_1 = \<const0> ;
  assign capture_10 = \<const0> ;
  assign capture_11 = \<const0> ;
  assign capture_12 = \<const0> ;
  assign capture_13 = \<const0> ;
  assign capture_14 = \<const0> ;
  assign capture_15 = \<const0> ;
  assign capture_2 = \<const0> ;
  assign capture_3 = \<const0> ;
  assign capture_4 = \<const0> ;
  assign capture_5 = \<const0> ;
  assign capture_6 = \<const0> ;
  assign capture_7 = \<const0> ;
  assign capture_8 = \<const0> ;
  assign capture_9 = \<const0> ;
  assign drck_0 = \<const0> ;
  assign drck_1 = \<const0> ;
  assign drck_10 = \<const0> ;
  assign drck_11 = \<const0> ;
  assign drck_12 = \<const0> ;
  assign drck_13 = \<const0> ;
  assign drck_14 = \<const0> ;
  assign drck_15 = \<const0> ;
  assign drck_2 = \<const0> ;
  assign drck_3 = \<const0> ;
  assign drck_4 = \<const0> ;
  assign drck_5 = \<const0> ;
  assign drck_6 = \<const0> ;
  assign drck_7 = \<const0> ;
  assign drck_8 = \<const0> ;
  assign drck_9 = \<const0> ;
  assign reset_0 = \<const0> ;
  assign reset_1 = \<const0> ;
  assign reset_10 = \<const0> ;
  assign reset_11 = \<const0> ;
  assign reset_12 = \<const0> ;
  assign reset_13 = \<const0> ;
  assign reset_14 = \<const0> ;
  assign reset_15 = \<const0> ;
  assign reset_2 = \<const0> ;
  assign reset_3 = \<const0> ;
  assign reset_4 = \<const0> ;
  assign reset_5 = \<const0> ;
  assign reset_6 = \<const0> ;
  assign reset_7 = \<const0> ;
  assign reset_8 = \<const0> ;
  assign reset_9 = \<const0> ;
  assign runtest_0 = \<const0> ;
  assign runtest_1 = \<const0> ;
  assign runtest_10 = \<const0> ;
  assign runtest_11 = \<const0> ;
  assign runtest_12 = \<const0> ;
  assign runtest_13 = \<const0> ;
  assign runtest_14 = \<const0> ;
  assign runtest_15 = \<const0> ;
  assign runtest_2 = \<const0> ;
  assign runtest_3 = \<const0> ;
  assign runtest_4 = \<const0> ;
  assign runtest_5 = \<const0> ;
  assign runtest_6 = \<const0> ;
  assign runtest_7 = \<const0> ;
  assign runtest_8 = \<const0> ;
  assign runtest_9 = \<const0> ;
  assign sel_0 = \<const0> ;
  assign sel_1 = \<const0> ;
  assign sel_10 = \<const0> ;
  assign sel_11 = \<const0> ;
  assign sel_12 = \<const0> ;
  assign sel_13 = \<const0> ;
  assign sel_14 = \<const0> ;
  assign sel_15 = \<const0> ;
  assign sel_2 = \<const0> ;
  assign sel_3 = \<const0> ;
  assign sel_4 = \<const0> ;
  assign sel_5 = \<const0> ;
  assign sel_6 = \<const0> ;
  assign sel_7 = \<const0> ;
  assign sel_8 = \<const0> ;
  assign sel_9 = \<const0> ;
  assign shift_0 = \<const0> ;
  assign shift_1 = \<const0> ;
  assign shift_10 = \<const0> ;
  assign shift_11 = \<const0> ;
  assign shift_12 = \<const0> ;
  assign shift_13 = \<const0> ;
  assign shift_14 = \<const0> ;
  assign shift_15 = \<const0> ;
  assign shift_2 = \<const0> ;
  assign shift_3 = \<const0> ;
  assign shift_4 = \<const0> ;
  assign shift_5 = \<const0> ;
  assign shift_6 = \<const0> ;
  assign shift_7 = \<const0> ;
  assign shift_8 = \<const0> ;
  assign shift_9 = \<const0> ;
  assign sl_iport0_o[36:2] = \^sl_iport0_o [36:2];
  assign sl_iport0_o[1] = clk;
  assign sl_iport0_o[0] = \^sl_iport0_o [0];
  assign sl_iport100_o[0] = \<const0> ;
  assign sl_iport101_o[0] = \<const0> ;
  assign sl_iport102_o[0] = \<const0> ;
  assign sl_iport103_o[0] = \<const0> ;
  assign sl_iport104_o[0] = \<const0> ;
  assign sl_iport105_o[0] = \<const0> ;
  assign sl_iport106_o[0] = \<const0> ;
  assign sl_iport107_o[0] = \<const0> ;
  assign sl_iport108_o[0] = \<const0> ;
  assign sl_iport109_o[0] = \<const0> ;
  assign sl_iport10_o[0] = \<const0> ;
  assign sl_iport110_o[0] = \<const0> ;
  assign sl_iport111_o[0] = \<const0> ;
  assign sl_iport112_o[0] = \<const0> ;
  assign sl_iport113_o[0] = \<const0> ;
  assign sl_iport114_o[0] = \<const0> ;
  assign sl_iport115_o[0] = \<const0> ;
  assign sl_iport116_o[0] = \<const0> ;
  assign sl_iport117_o[0] = \<const0> ;
  assign sl_iport118_o[0] = \<const0> ;
  assign sl_iport119_o[0] = \<const0> ;
  assign sl_iport11_o[0] = \<const0> ;
  assign sl_iport120_o[0] = \<const0> ;
  assign sl_iport121_o[0] = \<const0> ;
  assign sl_iport122_o[0] = \<const0> ;
  assign sl_iport123_o[0] = \<const0> ;
  assign sl_iport124_o[0] = \<const0> ;
  assign sl_iport125_o[0] = \<const0> ;
  assign sl_iport126_o[0] = \<const0> ;
  assign sl_iport127_o[0] = \<const0> ;
  assign sl_iport128_o[0] = \<const0> ;
  assign sl_iport129_o[0] = \<const0> ;
  assign sl_iport12_o[0] = \<const0> ;
  assign sl_iport130_o[0] = \<const0> ;
  assign sl_iport131_o[0] = \<const0> ;
  assign sl_iport132_o[0] = \<const0> ;
  assign sl_iport133_o[0] = \<const0> ;
  assign sl_iport134_o[0] = \<const0> ;
  assign sl_iport135_o[0] = \<const0> ;
  assign sl_iport136_o[0] = \<const0> ;
  assign sl_iport137_o[0] = \<const0> ;
  assign sl_iport138_o[0] = \<const0> ;
  assign sl_iport139_o[0] = \<const0> ;
  assign sl_iport13_o[0] = \<const0> ;
  assign sl_iport140_o[0] = \<const0> ;
  assign sl_iport141_o[0] = \<const0> ;
  assign sl_iport142_o[0] = \<const0> ;
  assign sl_iport143_o[0] = \<const0> ;
  assign sl_iport144_o[0] = \<const0> ;
  assign sl_iport145_o[0] = \<const0> ;
  assign sl_iport146_o[0] = \<const0> ;
  assign sl_iport147_o[0] = \<const0> ;
  assign sl_iport148_o[0] = \<const0> ;
  assign sl_iport149_o[0] = \<const0> ;
  assign sl_iport14_o[0] = \<const0> ;
  assign sl_iport150_o[0] = \<const0> ;
  assign sl_iport151_o[0] = \<const0> ;
  assign sl_iport152_o[0] = \<const0> ;
  assign sl_iport153_o[0] = \<const0> ;
  assign sl_iport154_o[0] = \<const0> ;
  assign sl_iport155_o[0] = \<const0> ;
  assign sl_iport156_o[0] = \<const0> ;
  assign sl_iport157_o[0] = \<const0> ;
  assign sl_iport158_o[0] = \<const0> ;
  assign sl_iport159_o[0] = \<const0> ;
  assign sl_iport15_o[0] = \<const0> ;
  assign sl_iport160_o[0] = \<const0> ;
  assign sl_iport161_o[0] = \<const0> ;
  assign sl_iport162_o[0] = \<const0> ;
  assign sl_iport163_o[0] = \<const0> ;
  assign sl_iport164_o[0] = \<const0> ;
  assign sl_iport165_o[0] = \<const0> ;
  assign sl_iport166_o[0] = \<const0> ;
  assign sl_iport167_o[0] = \<const0> ;
  assign sl_iport168_o[0] = \<const0> ;
  assign sl_iport169_o[0] = \<const0> ;
  assign sl_iport16_o[0] = \<const0> ;
  assign sl_iport170_o[0] = \<const0> ;
  assign sl_iport171_o[0] = \<const0> ;
  assign sl_iport172_o[0] = \<const0> ;
  assign sl_iport173_o[0] = \<const0> ;
  assign sl_iport174_o[0] = \<const0> ;
  assign sl_iport175_o[0] = \<const0> ;
  assign sl_iport176_o[0] = \<const0> ;
  assign sl_iport177_o[0] = \<const0> ;
  assign sl_iport178_o[0] = \<const0> ;
  assign sl_iport179_o[0] = \<const0> ;
  assign sl_iport17_o[0] = \<const0> ;
  assign sl_iport180_o[0] = \<const0> ;
  assign sl_iport181_o[0] = \<const0> ;
  assign sl_iport182_o[0] = \<const0> ;
  assign sl_iport183_o[0] = \<const0> ;
  assign sl_iport184_o[0] = \<const0> ;
  assign sl_iport185_o[0] = \<const0> ;
  assign sl_iport186_o[0] = \<const0> ;
  assign sl_iport187_o[0] = \<const0> ;
  assign sl_iport188_o[0] = \<const0> ;
  assign sl_iport189_o[0] = \<const0> ;
  assign sl_iport18_o[0] = \<const0> ;
  assign sl_iport190_o[0] = \<const0> ;
  assign sl_iport191_o[0] = \<const0> ;
  assign sl_iport192_o[0] = \<const0> ;
  assign sl_iport193_o[0] = \<const0> ;
  assign sl_iport194_o[0] = \<const0> ;
  assign sl_iport195_o[0] = \<const0> ;
  assign sl_iport196_o[0] = \<const0> ;
  assign sl_iport197_o[0] = \<const0> ;
  assign sl_iport198_o[0] = \<const0> ;
  assign sl_iport199_o[0] = \<const0> ;
  assign sl_iport19_o[0] = \<const0> ;
  assign sl_iport1_o[0] = \<const0> ;
  assign sl_iport200_o[0] = \<const0> ;
  assign sl_iport201_o[0] = \<const0> ;
  assign sl_iport202_o[0] = \<const0> ;
  assign sl_iport203_o[0] = \<const0> ;
  assign sl_iport204_o[0] = \<const0> ;
  assign sl_iport205_o[0] = \<const0> ;
  assign sl_iport206_o[0] = \<const0> ;
  assign sl_iport207_o[0] = \<const0> ;
  assign sl_iport208_o[0] = \<const0> ;
  assign sl_iport209_o[0] = \<const0> ;
  assign sl_iport20_o[0] = \<const0> ;
  assign sl_iport210_o[0] = \<const0> ;
  assign sl_iport211_o[0] = \<const0> ;
  assign sl_iport212_o[0] = \<const0> ;
  assign sl_iport213_o[0] = \<const0> ;
  assign sl_iport214_o[0] = \<const0> ;
  assign sl_iport215_o[0] = \<const0> ;
  assign sl_iport216_o[0] = \<const0> ;
  assign sl_iport217_o[0] = \<const0> ;
  assign sl_iport218_o[0] = \<const0> ;
  assign sl_iport219_o[0] = \<const0> ;
  assign sl_iport21_o[0] = \<const0> ;
  assign sl_iport220_o[0] = \<const0> ;
  assign sl_iport221_o[0] = \<const0> ;
  assign sl_iport222_o[0] = \<const0> ;
  assign sl_iport223_o[0] = \<const0> ;
  assign sl_iport224_o[0] = \<const0> ;
  assign sl_iport225_o[0] = \<const0> ;
  assign sl_iport226_o[0] = \<const0> ;
  assign sl_iport227_o[0] = \<const0> ;
  assign sl_iport228_o[0] = \<const0> ;
  assign sl_iport229_o[0] = \<const0> ;
  assign sl_iport22_o[0] = \<const0> ;
  assign sl_iport230_o[0] = \<const0> ;
  assign sl_iport231_o[0] = \<const0> ;
  assign sl_iport232_o[0] = \<const0> ;
  assign sl_iport233_o[0] = \<const0> ;
  assign sl_iport234_o[0] = \<const0> ;
  assign sl_iport235_o[0] = \<const0> ;
  assign sl_iport236_o[0] = \<const0> ;
  assign sl_iport237_o[0] = \<const0> ;
  assign sl_iport238_o[0] = \<const0> ;
  assign sl_iport239_o[0] = \<const0> ;
  assign sl_iport23_o[0] = \<const0> ;
  assign sl_iport240_o[0] = \<const0> ;
  assign sl_iport241_o[0] = \<const0> ;
  assign sl_iport242_o[0] = \<const0> ;
  assign sl_iport243_o[0] = \<const0> ;
  assign sl_iport244_o[0] = \<const0> ;
  assign sl_iport245_o[0] = \<const0> ;
  assign sl_iport246_o[0] = \<const0> ;
  assign sl_iport247_o[0] = \<const0> ;
  assign sl_iport248_o[0] = \<const0> ;
  assign sl_iport249_o[0] = \<const0> ;
  assign sl_iport24_o[0] = \<const0> ;
  assign sl_iport250_o[0] = \<const0> ;
  assign sl_iport251_o[0] = \<const0> ;
  assign sl_iport252_o[0] = \<const0> ;
  assign sl_iport253_o[0] = \<const0> ;
  assign sl_iport254_o[0] = \<const0> ;
  assign sl_iport255_o[0] = \<const0> ;
  assign sl_iport25_o[0] = \<const0> ;
  assign sl_iport26_o[0] = \<const0> ;
  assign sl_iport27_o[0] = \<const0> ;
  assign sl_iport28_o[0] = \<const0> ;
  assign sl_iport29_o[0] = \<const0> ;
  assign sl_iport2_o[0] = \<const0> ;
  assign sl_iport30_o[0] = \<const0> ;
  assign sl_iport31_o[0] = \<const0> ;
  assign sl_iport32_o[0] = \<const0> ;
  assign sl_iport33_o[0] = \<const0> ;
  assign sl_iport34_o[0] = \<const0> ;
  assign sl_iport35_o[0] = \<const0> ;
  assign sl_iport36_o[0] = \<const0> ;
  assign sl_iport37_o[0] = \<const0> ;
  assign sl_iport38_o[0] = \<const0> ;
  assign sl_iport39_o[0] = \<const0> ;
  assign sl_iport3_o[0] = \<const0> ;
  assign sl_iport40_o[0] = \<const0> ;
  assign sl_iport41_o[0] = \<const0> ;
  assign sl_iport42_o[0] = \<const0> ;
  assign sl_iport43_o[0] = \<const0> ;
  assign sl_iport44_o[0] = \<const0> ;
  assign sl_iport45_o[0] = \<const0> ;
  assign sl_iport46_o[0] = \<const0> ;
  assign sl_iport47_o[0] = \<const0> ;
  assign sl_iport48_o[0] = \<const0> ;
  assign sl_iport49_o[0] = \<const0> ;
  assign sl_iport4_o[0] = \<const0> ;
  assign sl_iport50_o[0] = \<const0> ;
  assign sl_iport51_o[0] = \<const0> ;
  assign sl_iport52_o[0] = \<const0> ;
  assign sl_iport53_o[0] = \<const0> ;
  assign sl_iport54_o[0] = \<const0> ;
  assign sl_iport55_o[0] = \<const0> ;
  assign sl_iport56_o[0] = \<const0> ;
  assign sl_iport57_o[0] = \<const0> ;
  assign sl_iport58_o[0] = \<const0> ;
  assign sl_iport59_o[0] = \<const0> ;
  assign sl_iport5_o[0] = \<const0> ;
  assign sl_iport60_o[0] = \<const0> ;
  assign sl_iport61_o[0] = \<const0> ;
  assign sl_iport62_o[0] = \<const0> ;
  assign sl_iport63_o[0] = \<const0> ;
  assign sl_iport64_o[0] = \<const0> ;
  assign sl_iport65_o[0] = \<const0> ;
  assign sl_iport66_o[0] = \<const0> ;
  assign sl_iport67_o[0] = \<const0> ;
  assign sl_iport68_o[0] = \<const0> ;
  assign sl_iport69_o[0] = \<const0> ;
  assign sl_iport6_o[0] = \<const0> ;
  assign sl_iport70_o[0] = \<const0> ;
  assign sl_iport71_o[0] = \<const0> ;
  assign sl_iport72_o[0] = \<const0> ;
  assign sl_iport73_o[0] = \<const0> ;
  assign sl_iport74_o[0] = \<const0> ;
  assign sl_iport75_o[0] = \<const0> ;
  assign sl_iport76_o[0] = \<const0> ;
  assign sl_iport77_o[0] = \<const0> ;
  assign sl_iport78_o[0] = \<const0> ;
  assign sl_iport79_o[0] = \<const0> ;
  assign sl_iport7_o[0] = \<const0> ;
  assign sl_iport80_o[0] = \<const0> ;
  assign sl_iport81_o[0] = \<const0> ;
  assign sl_iport82_o[0] = \<const0> ;
  assign sl_iport83_o[0] = \<const0> ;
  assign sl_iport84_o[0] = \<const0> ;
  assign sl_iport85_o[0] = \<const0> ;
  assign sl_iport86_o[0] = \<const0> ;
  assign sl_iport87_o[0] = \<const0> ;
  assign sl_iport88_o[0] = \<const0> ;
  assign sl_iport89_o[0] = \<const0> ;
  assign sl_iport8_o[0] = \<const0> ;
  assign sl_iport90_o[0] = \<const0> ;
  assign sl_iport91_o[0] = \<const0> ;
  assign sl_iport92_o[0] = \<const0> ;
  assign sl_iport93_o[0] = \<const0> ;
  assign sl_iport94_o[0] = \<const0> ;
  assign sl_iport95_o[0] = \<const0> ;
  assign sl_iport96_o[0] = \<const0> ;
  assign sl_iport97_o[0] = \<const0> ;
  assign sl_iport98_o[0] = \<const0> ;
  assign sl_iport99_o[0] = \<const0> ;
  assign sl_iport9_o[0] = \<const0> ;
  assign tck_0 = \<const0> ;
  assign tck_1 = \<const0> ;
  assign tck_10 = \<const0> ;
  assign tck_11 = \<const0> ;
  assign tck_12 = \<const0> ;
  assign tck_13 = \<const0> ;
  assign tck_14 = \<const0> ;
  assign tck_15 = \<const0> ;
  assign tck_2 = \<const0> ;
  assign tck_3 = \<const0> ;
  assign tck_4 = \<const0> ;
  assign tck_5 = \<const0> ;
  assign tck_6 = \<const0> ;
  assign tck_7 = \<const0> ;
  assign tck_8 = \<const0> ;
  assign tck_9 = \<const0> ;
  assign tdi_0 = \<const0> ;
  assign tdi_1 = \<const0> ;
  assign tdi_10 = \<const0> ;
  assign tdi_11 = \<const0> ;
  assign tdi_12 = \<const0> ;
  assign tdi_13 = \<const0> ;
  assign tdi_14 = \<const0> ;
  assign tdi_15 = \<const0> ;
  assign tdi_2 = \<const0> ;
  assign tdi_3 = \<const0> ;
  assign tdi_4 = \<const0> ;
  assign tdi_5 = \<const0> ;
  assign tdi_6 = \<const0> ;
  assign tdi_7 = \<const0> ;
  assign tdi_8 = \<const0> ;
  assign tdi_9 = \<const0> ;
  assign tdo = \<const0> ;
  assign tms_0 = \<const0> ;
  assign tms_1 = \<const0> ;
  assign tms_10 = \<const0> ;
  assign tms_11 = \<const0> ;
  assign tms_12 = \<const0> ;
  assign tms_13 = \<const0> ;
  assign tms_14 = \<const0> ;
  assign tms_15 = \<const0> ;
  assign tms_2 = \<const0> ;
  assign tms_3 = \<const0> ;
  assign tms_4 = \<const0> ;
  assign tms_5 = \<const0> ;
  assign tms_6 = \<const0> ;
  assign tms_7 = \<const0> ;
  assign tms_8 = \<const0> ;
  assign tms_9 = \<const0> ;
  assign update_0 = \<const0> ;
  assign update_1 = \<const0> ;
  assign update_10 = \<const0> ;
  assign update_11 = \<const0> ;
  assign update_12 = \<const0> ;
  assign update_13 = \<const0> ;
  assign update_14 = \<const0> ;
  assign update_15 = \<const0> ;
  assign update_2 = \<const0> ;
  assign update_3 = \<const0> ;
  assign update_4 = \<const0> ;
  assign update_5 = \<const0> ;
  assign update_6 = \<const0> ;
  assign update_7 = \<const0> ;
  assign update_8 = \<const0> ;
  assign update_9 = \<const0> ;
  xsdbm_v3_0_0_icon2xsdb \CORE_XSDB.UUT_MASTER 
       (.D(stat_reg_reg0),
        .Q({iCORE_ID,sel0}),
        .clk(clk),
        .iSYNC(iSYNC),
        .iTDO_next(iTDO_next),
        .iTDO_reg(\CORE_XSDB.U_ICON_n_7 ),
        .iTDO_reg_0(\CORE_XSDB.U_ICON_n_8 ),
        .icn_cmd_din_reg(iTDI_reg),
        .\icn_cmd_en_reg[4] (\CORE_XSDB.U_ICON_n_10 ),
        .\icn_cmd_en_reg[5] (\CORE_XSDB.U_ICON_n_12 ),
        .\icn_cmd_en_reg[6] (\CORE_XSDB.U_ICON_n_11 ),
        .\icn_cmd_en_reg[7] (\CORE_XSDB.U_ICON_n_9 ),
        .\icn_cmd_en_reg[7]_0 (\CORE_XSDB.U_ICON_n_13 ),
        .m_bscan_tck(itck),
        .out(SHIFT),
        .sl_iport0_o({\^sl_iport0_o [36:2],\^sl_iport0_o [0]}),
        .sl_oport0_i(sl_oport0_i),
        .\stat_reg_reg[2] ({1'b0,1'b0,stat_reg_reg0}));
  xsdbm_v3_0_0_icon \CORE_XSDB.U_ICON 
       (.D(iTDI_reg),
        .Q({iCORE_ID,sel0}),
        .SYNC_reg(\CORE_XSDB.U_ICON_n_9 ),
        .iDATA_CMD_reg_0(UPDATE_temp),
        .iSYNC(iSYNC),
        .\iTARGET_reg[14] (\CORE_XSDB.U_ICON_n_7 ),
        .\iTARGET_reg[15] (\CORE_XSDB.U_ICON_n_8 ),
        .\iTARGET_reg[6] (SEL),
        .\iTARGET_reg[9] (\CORE_XSDB.U_ICON_n_10 ),
        .\iTARGET_reg[9]_0 (\CORE_XSDB.U_ICON_n_11 ),
        .\iTARGET_reg[9]_1 (\CORE_XSDB.U_ICON_n_12 ),
        .\iTARGET_reg[9]_2 (\CORE_XSDB.U_ICON_n_13 ),
        .iTDO_next(iTDO_next),
        .\icn_cmd_en_reg[7] (SHIFT),
        .in0(TDO),
        .m_bscan_tck(itck),
        .out(TDI));
  GND GND
       (.G(\<const0> ));
  ltlib_v1_0_0_bscan \SWITCH_N_EXT_BSCAN.bscan_inst 
       (.UPDATE(UPDATE),
        .in0(DRCK),
        .s_bscan_capture(capture_bs),
        .s_bscan_reset(reset_bs),
        .s_bscan_runtest(runtest_bs),
        .s_bscan_sel(sel_bs),
        .s_bscan_shift(shift_bs),
        .s_bscan_tdi(tdi_bs),
        .s_bscan_tdo(tdo_bs),
        .s_bscan_tms(tms_bs),
        .tck_bs(tck_bs));
  (* DONT_TOUCH *) 
  (* ERROR = "7" *) 
  (* FORWARD = "4" *) 
  (* IDLE = "0" *) 
  (* PORTS = "1" *) 
  (* PORT_SELECT = "3" *) 
  (* SWITCH_SELECT = "2" *) 
  (* XILINX_JEP106_ID = "12'b000001001001" *) 
  xsdbm_v3_0_0_bscan_switch \SWITCH_N_EXT_BSCAN.bscan_switch 
       (.m_bscan_bscanid_en(bscanid_en_int),
        .m_bscan_capture(\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_capture_UNCONNECTED [0]),
        .m_bscan_drck(\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_drck_UNCONNECTED [0]),
        .m_bscan_reset(RESET),
        .m_bscan_runtest(\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_runtest_UNCONNECTED [0]),
        .m_bscan_sel(SEL),
        .m_bscan_shift(SHIFT),
        .m_bscan_tck(itck),
        .m_bscan_tdi(TDI),
        .m_bscan_tdo(tdo_int),
        .m_bscan_tms(\NLW_SWITCH_N_EXT_BSCAN.bscan_switch_m_bscan_tms_UNCONNECTED [0]),
        .m_bscan_update(UPDATE_temp),
        .s_bscan_capture(capture_bs),
        .s_bscan_drck(DRCK),
        .s_bscan_reset(reset_bs),
        .s_bscan_runtest(runtest_bs),
        .s_bscan_sel(sel_bs),
        .s_bscan_shift(shift_bs),
        .s_bscan_tck(itck_i),
        .s_bscan_tdi(tdi_bs),
        .s_bscan_tdo(tdo_bs),
        .s_bscan_tms(tms_bs),
        .s_bscan_update(UPDATE),
        .s_bscanid_en(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \SWITCH_N_EXT_BSCAN.bscan_switch_i_1 
       (.I0(bscanid[0]),
        .I1(bscanid_en_int),
        .I2(TDO),
        .O(tdo_int));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[0]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[0]),
        .I2(bscanid_en_int),
        .I3(bscanid[1]),
        .O(p_2_in[0]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[10]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[10]),
        .I2(bscanid_en_int),
        .I3(bscanid[11]),
        .O(p_2_in[10]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[11]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[11]),
        .I2(bscanid_en_int),
        .I3(bscanid[12]),
        .O(p_2_in[11]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[12]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[12]),
        .I2(bscanid_en_int),
        .I3(bscanid[13]),
        .O(p_2_in[12]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[13]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[13]),
        .I2(bscanid_en_int),
        .I3(bscanid[14]),
        .O(p_2_in[13]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[14]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[14]),
        .I2(bscanid_en_int),
        .I3(bscanid[15]),
        .O(p_2_in[14]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[15]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[15]),
        .I2(bscanid_en_int),
        .I3(bscanid[16]),
        .O(p_2_in[15]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[16]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[16]),
        .I2(bscanid_en_int),
        .I3(bscanid[17]),
        .O(p_2_in[16]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[17]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[17]),
        .I2(bscanid_en_int),
        .I3(bscanid[18]),
        .O(p_2_in[17]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[18]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[18]),
        .I2(bscanid_en_int),
        .I3(bscanid[19]),
        .O(p_2_in[18]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[19]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[19]),
        .I2(bscanid_en_int),
        .I3(bscanid[20]),
        .O(p_2_in[19]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[1]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[1]),
        .I2(bscanid_en_int),
        .I3(bscanid[2]),
        .O(p_2_in[1]));
  LUT4 #(
    .INIT(16'hE2FF)) 
    \SWITCH_N_EXT_BSCAN.bscanid[20]_i_1 
       (.I0(bscanid[20]),
        .I1(bscanid_en_int),
        .I2(bscanid[21]),
        .I3(id_state[0]),
        .O(p_2_in[20]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[21]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[21]),
        .I2(bscanid_en_int),
        .I3(bscanid[22]),
        .O(p_2_in[21]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[22]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[22]),
        .I2(bscanid_en_int),
        .I3(bscanid[23]),
        .O(p_2_in[22]));
  LUT4 #(
    .INIT(16'hE2FF)) 
    \SWITCH_N_EXT_BSCAN.bscanid[23]_i_1 
       (.I0(bscanid[23]),
        .I1(bscanid_en_int),
        .I2(bscanid[24]),
        .I3(id_state[0]),
        .O(p_2_in[23]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[24]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[24]),
        .I2(bscanid_en_int),
        .I3(bscanid[25]),
        .O(p_2_in[24]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[25]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[25]),
        .I2(bscanid_en_int),
        .I3(bscanid[26]),
        .O(p_2_in[25]));
  LUT4 #(
    .INIT(16'hE2FF)) 
    \SWITCH_N_EXT_BSCAN.bscanid[26]_i_1 
       (.I0(bscanid[26]),
        .I1(bscanid_en_int),
        .I2(bscanid[27]),
        .I3(id_state[0]),
        .O(p_2_in[26]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[27]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[27]),
        .I2(bscanid_en_int),
        .I3(bscanid[28]),
        .O(p_2_in[27]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[28]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[28]),
        .I2(bscanid_en_int),
        .I3(bscanid[29]),
        .O(p_2_in[28]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[29]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[29]),
        .I2(bscanid_en_int),
        .I3(bscanid[30]),
        .O(p_2_in[29]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[2]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[2]),
        .I2(bscanid_en_int),
        .I3(bscanid[3]),
        .O(p_2_in[2]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[30]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[30]),
        .I2(bscanid_en_int),
        .I3(bscanid[31]),
        .O(p_2_in[30]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[31]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[31]),
        .I2(bscanid_en_int),
        .I3(TDI),
        .O(p_2_in[31]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[3]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[3]),
        .I2(bscanid_en_int),
        .I3(bscanid[4]),
        .O(p_2_in[3]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[4]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[4]),
        .I2(bscanid_en_int),
        .I3(bscanid[5]),
        .O(p_2_in[4]));
  LUT4 #(
    .INIT(16'hE2FF)) 
    \SWITCH_N_EXT_BSCAN.bscanid[5]_i_1 
       (.I0(bscanid[5]),
        .I1(bscanid_en_int),
        .I2(bscanid[6]),
        .I3(id_state[0]),
        .O(p_2_in[5]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[6]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[6]),
        .I2(bscanid_en_int),
        .I3(bscanid[7]),
        .O(p_2_in[6]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[7]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[7]),
        .I2(bscanid_en_int),
        .I3(bscanid[8]),
        .O(p_2_in[7]));
  LUT4 #(
    .INIT(16'hA808)) 
    \SWITCH_N_EXT_BSCAN.bscanid[8]_i_1 
       (.I0(id_state[0]),
        .I1(bscanid[8]),
        .I2(bscanid_en_int),
        .I3(bscanid[9]),
        .O(p_2_in[8]));
  LUT4 #(
    .INIT(16'hE2FF)) 
    \SWITCH_N_EXT_BSCAN.bscanid[9]_i_1 
       (.I0(bscanid[9]),
        .I1(bscanid_en_int),
        .I2(bscanid[10]),
        .I3(id_state[0]),
        .O(p_2_in[9]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[0] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[0]),
        .Q(bscanid[0]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[10] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[10]),
        .Q(bscanid[10]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[11] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[11]),
        .Q(bscanid[11]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[12] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[12]),
        .Q(bscanid[12]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[13] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[13]),
        .Q(bscanid[13]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[14] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[14]),
        .Q(bscanid[14]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[15] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[15]),
        .Q(bscanid[15]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[16] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[16]),
        .Q(bscanid[16]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[17] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[17]),
        .Q(bscanid[17]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[18] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[18]),
        .Q(bscanid[18]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[19] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[19]),
        .Q(bscanid[19]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[1] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[1]),
        .Q(bscanid[1]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[20] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[20]),
        .Q(bscanid[20]),
        .S(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[21] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[21]),
        .Q(bscanid[21]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[22] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[22]),
        .Q(bscanid[22]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[23] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[23]),
        .Q(bscanid[23]),
        .S(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[24] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[24]),
        .Q(bscanid[24]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[25] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[25]),
        .Q(bscanid[25]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[26] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[26]),
        .Q(bscanid[26]),
        .S(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[27] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[27]),
        .Q(bscanid[27]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[28] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[28]),
        .Q(bscanid[28]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[29] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[29]),
        .Q(bscanid[29]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[2] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[2]),
        .Q(bscanid[2]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[30] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[30]),
        .Q(bscanid[30]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[31] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[31]),
        .Q(bscanid[31]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[3] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[3]),
        .Q(bscanid[3]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[4] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[4]),
        .Q(bscanid[4]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[5] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[5]),
        .Q(bscanid[5]),
        .S(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[6] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[6]),
        .Q(bscanid[6]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[7] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[7]),
        .Q(bscanid[7]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[8] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[8]),
        .Q(bscanid[8]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \SWITCH_N_EXT_BSCAN.bscanid_reg[9] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_2_in[9]),
        .Q(bscanid[9]),
        .S(RESET));
  LUT1 #(
    .INIT(2'h1)) 
    \SWITCH_N_EXT_BSCAN.id_state[1]_i_1 
       (.I0(id_state[1]),
        .O(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h84)) 
    \SWITCH_N_EXT_BSCAN.id_state[1]_i_2 
       (.I0(id_state[0]),
        .I1(id_state[1]),
        .I2(bscanid_en_int),
        .O(p_0_in__0));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "iSTATE:00,iSTATE0:01" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.id_state_reg[0] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(bscanid_en_int),
        .Q(id_state[0]),
        .R(RESET));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "iSTATE:00,iSTATE0:01" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \SWITCH_N_EXT_BSCAN.id_state_reg[1] 
       (.C(itck_i),
        .CE(\SWITCH_N_EXT_BSCAN.id_state[1]_i_1_n_0 ),
        .D(p_0_in__0),
        .Q(id_state[1]),
        .R(RESET));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG \SWITCH_N_EXT_BSCAN.u_bufg_icon_tck 
       (.I(tck_bs),
        .O(itck_i));
endmodule

(* hw_handoff = "design_1.hwdef" *) 
module design_1
   (btn,
    clk,
    led,
    rgb,
    state,
    sw,
    sl_iport0,
    sl_oport0);
  input [3:0]btn;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME CLK.CLK, CLK_DOMAIN design_1_clk_0, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, INSERT_VIP 0, PHASE 0.000" *) input clk;
  output [3:0]led;
  output [2:0]rgb;
  input state;
  input [2:0]sw;
  input [36:0]sl_iport0;
  output [16:0]sl_oport0;

  wire Game_0_active_g;
  wire [3:0]Game_0_led;
  wire [3:0]ID_selector_0_ID;
  wire Init_0_active;
  wire [3:0]Init_0_leds;
  wire [3:0]axi_traffic_gen_0_M_AXI_LITE_CH1_ARADDR;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_ARREADY;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_ARVALID;
  wire [3:0]axi_traffic_gen_0_M_AXI_LITE_CH1_AWADDR;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_AWREADY;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_AWVALID;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_BREADY;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_BVALID;
  wire [31:0]axi_traffic_gen_0_M_AXI_LITE_CH1_RDATA;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_RREADY;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_RVALID;
  wire [31:0]axi_traffic_gen_0_M_AXI_LITE_CH1_WDATA;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_WREADY;
  wire axi_traffic_gen_0_M_AXI_LITE_CH1_WVALID;
  wire [3:0]btn;
  wire clk;
  wire clk_wiz_0_clk_out1;
  wire clk_wiz_0_locked;
  wire [3:0]led;
  wire proc_sys_reset_0_peripheral_aresetn;
  wire [31:0]ram_reader_0_data;
  wire [2:0]rgb;
  wire [36:0]sl_iport0;
  wire [16:0]sl_oport0;
  wire state;
  wire [2:0]state_machine_0_sm_state;
  wire [2:0]state_results_0_RGB;
  wire state_results_0_active;
  wire state_wait_0_active;
  wire [2:0]sw;
  wire vio_0_probe_out0;
  wire NLW_Game_0_result_UNCONNECTED;
  wire [3:0]NLW_Game_0_btns_UNCONNECTED;
  wire [14:1]NLW_Game_0_data0_UNCONNECTED;
  wire [3:3]NLW_ID_selector_0_ID_UNCONNECTED;
  wire [1:0]NLW_Init_0_s00_axi_araddr_UNCONNECTED;
  wire [2:0]NLW_Init_0_s00_axi_arprot_UNCONNECTED;
  wire [1:0]NLW_Init_0_s00_axi_awaddr_UNCONNECTED;
  wire [2:0]NLW_Init_0_s00_axi_awprot_UNCONNECTED;
  wire [1:0]NLW_Init_0_s00_axi_bresp_UNCONNECTED;
  wire [1:0]NLW_Init_0_s00_axi_rresp_UNCONNECTED;
  wire [3:0]NLW_Init_0_s00_axi_wstrb_UNCONNECTED;
  wire NLW_LightController_0_result_UNCONNECTED;
  wire [1:1]NLW_LightController_0_rgb_in_UNCONNECTED;
  wire NLW_axi_traffic_gen_0_done_UNCONNECTED;
  wire [31:0]NLW_axi_traffic_gen_0_m_axi_lite_ch1_araddr_UNCONNECTED;
  wire [31:0]NLW_axi_traffic_gen_0_m_axi_lite_ch1_awaddr_UNCONNECTED;
  wire [2:0]NLW_axi_traffic_gen_0_m_axi_lite_ch1_awprot_UNCONNECTED;
  wire [1:0]NLW_axi_traffic_gen_0_m_axi_lite_ch1_bresp_UNCONNECTED;
  wire [1:0]NLW_axi_traffic_gen_0_m_axi_lite_ch1_rresp_UNCONNECTED;
  wire [3:0]NLW_axi_traffic_gen_0_m_axi_lite_ch1_wstrb_UNCONNECTED;
  wire [31:0]NLW_axi_traffic_gen_0_status_UNCONNECTED;
  wire NLW_proc_sys_reset_0_aux_reset_in_UNCONNECTED;
  wire NLW_proc_sys_reset_0_mb_debug_sys_rst_UNCONNECTED;
  wire NLW_proc_sys_reset_0_mb_reset_UNCONNECTED;
  wire [0:0]NLW_proc_sys_reset_0_bus_struct_reset_UNCONNECTED;
  wire [0:0]NLW_proc_sys_reset_0_interconnect_aresetn_UNCONNECTED;
  wire [0:0]NLW_proc_sys_reset_0_peripheral_reset_UNCONNECTED;
  wire [3:3]NLW_ram_reader_0_ID_UNCONNECTED;
  wire [14:1]NLW_ram_reader_0_data_UNCONNECTED;
  wire [1:1]NLW_state_results_0_RGB_UNCONNECTED;
  wire [1:0]NLW_state_results_0_option_UNCONNECTED;

  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_Game_0_0/design_1_Game_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "Game,Vivado 2020.1" *) 
  design_1_Game_0_0 Game_0
       (.active_g(Game_0_active_g),
        .btns(NLW_Game_0_btns_UNCONNECTED[3:0]),
        .clk0(clk),
        .data0({ram_reader_0_data[31:15],NLW_Game_0_data0_UNCONNECTED[14],ram_reader_0_data[13:2],NLW_Game_0_data0_UNCONNECTED[1],ram_reader_0_data[0]}),
        .led(Game_0_led),
        .result(NLW_Game_0_result_UNCONNECTED),
        .sm_s0(state_machine_0_sm_state));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_ID_selector_0_0/design_1_ID_selector_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "ID_selector,Vivado 2020.1" *) 
  design_1_ID_selector_0_0 ID_selector_0
       (.ID({NLW_ID_selector_0_ID_UNCONNECTED[3],ID_selector_0_ID[2:0]}),
        .state(state),
        .sw(sw));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_Init_0_0/design_1_Init_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "Init_v1_0,Vivado 2020.1" *) 
  design_1_Init_0_0 Init_0
       (.active(Init_0_active),
        .clk(clk),
        .leds(Init_0_leds),
        .s00_axi_aclk(clk_wiz_0_clk_out1),
        .s00_axi_araddr({axi_traffic_gen_0_M_AXI_LITE_CH1_ARADDR[3:2],NLW_Init_0_s00_axi_araddr_UNCONNECTED[1:0]}),
        .s00_axi_aresetn(proc_sys_reset_0_peripheral_aresetn),
        .s00_axi_arprot(NLW_Init_0_s00_axi_arprot_UNCONNECTED[2:0]),
        .s00_axi_arready(axi_traffic_gen_0_M_AXI_LITE_CH1_ARREADY),
        .s00_axi_arvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_ARVALID),
        .s00_axi_awaddr({axi_traffic_gen_0_M_AXI_LITE_CH1_AWADDR[3:2],NLW_Init_0_s00_axi_awaddr_UNCONNECTED[1:0]}),
        .s00_axi_awprot(NLW_Init_0_s00_axi_awprot_UNCONNECTED[2:0]),
        .s00_axi_awready(axi_traffic_gen_0_M_AXI_LITE_CH1_AWREADY),
        .s00_axi_awvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_AWVALID),
        .s00_axi_bready(axi_traffic_gen_0_M_AXI_LITE_CH1_BREADY),
        .s00_axi_bresp(NLW_Init_0_s00_axi_bresp_UNCONNECTED[1:0]),
        .s00_axi_bvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_BVALID),
        .s00_axi_rdata(axi_traffic_gen_0_M_AXI_LITE_CH1_RDATA),
        .s00_axi_rready(axi_traffic_gen_0_M_AXI_LITE_CH1_RREADY),
        .s00_axi_rresp(NLW_Init_0_s00_axi_rresp_UNCONNECTED[1:0]),
        .s00_axi_rvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_RVALID),
        .s00_axi_wdata(axi_traffic_gen_0_M_AXI_LITE_CH1_WDATA),
        .s00_axi_wready(axi_traffic_gen_0_M_AXI_LITE_CH1_WREADY),
        .s00_axi_wstrb(NLW_Init_0_s00_axi_wstrb_UNCONNECTED[3:0]),
        .s00_axi_wvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_WVALID),
        .sm_state(state_machine_0_sm_state));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_LightController_0_0/design_1_LightController_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "LightController,Vivado 2020.1" *) 
  design_1_LightController_0_0 LightController_0
       (.led1(Init_0_leds),
        .led2(Game_0_led),
        .led_out(led),
        .result(NLW_LightController_0_result_UNCONNECTED),
        .rgb(rgb),
        .rgb_in({state_results_0_RGB[2],NLW_LightController_0_rgb_in_UNCONNECTED[1],state_results_0_RGB[0]}),
        .state(state_machine_0_sm_state));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_axi_traffic_gen_0_0/design_1_axi_traffic_gen_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "axi_traffic_gen_v3_0_7_top,Vivado 2020.1" *) 
  design_1_axi_traffic_gen_0_0 axi_traffic_gen_0
       (.done(NLW_axi_traffic_gen_0_done_UNCONNECTED),
        .m_axi_lite_ch1_araddr({NLW_axi_traffic_gen_0_m_axi_lite_ch1_araddr_UNCONNECTED[31:4],axi_traffic_gen_0_M_AXI_LITE_CH1_ARADDR[3:2],NLW_axi_traffic_gen_0_m_axi_lite_ch1_araddr_UNCONNECTED[1:0]}),
        .m_axi_lite_ch1_arready(axi_traffic_gen_0_M_AXI_LITE_CH1_ARREADY),
        .m_axi_lite_ch1_arvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_ARVALID),
        .m_axi_lite_ch1_awaddr({NLW_axi_traffic_gen_0_m_axi_lite_ch1_awaddr_UNCONNECTED[31:4],axi_traffic_gen_0_M_AXI_LITE_CH1_AWADDR[3:2],NLW_axi_traffic_gen_0_m_axi_lite_ch1_awaddr_UNCONNECTED[1:0]}),
        .m_axi_lite_ch1_awprot(NLW_axi_traffic_gen_0_m_axi_lite_ch1_awprot_UNCONNECTED[2:0]),
        .m_axi_lite_ch1_awready(axi_traffic_gen_0_M_AXI_LITE_CH1_AWREADY),
        .m_axi_lite_ch1_awvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_AWVALID),
        .m_axi_lite_ch1_bready(axi_traffic_gen_0_M_AXI_LITE_CH1_BREADY),
        .m_axi_lite_ch1_bresp(NLW_axi_traffic_gen_0_m_axi_lite_ch1_bresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch1_bvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_BVALID),
        .m_axi_lite_ch1_rdata(axi_traffic_gen_0_M_AXI_LITE_CH1_RDATA),
        .m_axi_lite_ch1_rready(axi_traffic_gen_0_M_AXI_LITE_CH1_RREADY),
        .m_axi_lite_ch1_rresp(NLW_axi_traffic_gen_0_m_axi_lite_ch1_rresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch1_rvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_RVALID),
        .m_axi_lite_ch1_wdata(axi_traffic_gen_0_M_AXI_LITE_CH1_WDATA),
        .m_axi_lite_ch1_wready(axi_traffic_gen_0_M_AXI_LITE_CH1_WREADY),
        .m_axi_lite_ch1_wstrb(NLW_axi_traffic_gen_0_m_axi_lite_ch1_wstrb_UNCONNECTED[3:0]),
        .m_axi_lite_ch1_wvalid(axi_traffic_gen_0_M_AXI_LITE_CH1_WVALID),
        .s_axi_aclk(clk_wiz_0_clk_out1),
        .s_axi_aresetn(proc_sys_reset_0_peripheral_aresetn),
        .status(NLW_axi_traffic_gen_0_status_UNCONNECTED[31:0]));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_clk_wiz_0_0/design_1_clk_wiz_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  design_1_clk_wiz_0_0 clk_wiz_0
       (.clk_in1(clk),
        .clk_out1(clk_wiz_0_clk_out1),
        .locked(clk_wiz_0_locked));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_proc_sys_reset_0_0/design_1_proc_sys_reset_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "proc_sys_reset,Vivado 2020.1" *) 
  design_1_proc_sys_reset_0_0 proc_sys_reset_0
       (.aux_reset_in(NLW_proc_sys_reset_0_aux_reset_in_UNCONNECTED),
        .bus_struct_reset(NLW_proc_sys_reset_0_bus_struct_reset_UNCONNECTED[0]),
        .dcm_locked(clk_wiz_0_locked),
        .ext_reset_in(vio_0_probe_out0),
        .interconnect_aresetn(NLW_proc_sys_reset_0_interconnect_aresetn_UNCONNECTED[0]),
        .mb_debug_sys_rst(NLW_proc_sys_reset_0_mb_debug_sys_rst_UNCONNECTED),
        .mb_reset(NLW_proc_sys_reset_0_mb_reset_UNCONNECTED),
        .peripheral_aresetn(proc_sys_reset_0_peripheral_aresetn),
        .peripheral_reset(NLW_proc_sys_reset_0_peripheral_reset_UNCONNECTED[0]),
        .slowest_sync_clk(clk_wiz_0_clk_out1));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_ram_reader_0_0/design_1_ram_reader_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "ram_reader,Vivado 2020.1" *) 
  design_1_ram_reader_0_0 ram_reader_0
       (.ID({NLW_ram_reader_0_ID_UNCONNECTED[3],ID_selector_0_ID[2:0]}),
        .data({ram_reader_0_data[31:15],NLW_ram_reader_0_data_UNCONNECTED[14],ram_reader_0_data[13:2],NLW_ram_reader_0_data_UNCONNECTED[1],ram_reader_0_data[0]}));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_state_machine_0_0/design_1_state_machine_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "state_machine,Vivado 2020.1" *) 
  design_1_state_machine_0_0 state_machine_0
       (.active_state_game(Game_0_active_g),
        .active_state_init(Init_0_active),
        .active_state_result(state_results_0_active),
        .active_state_wait(state_wait_0_active),
        .clk(clk),
        .sm_state(state_machine_0_sm_state),
        .state(state));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_state_results_0_0/design_1_state_results_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "state_results,Vivado 2020.1" *) 
  design_1_state_results_0_0 state_results_0
       (.RGB({state_results_0_RGB[2],NLW_state_results_0_RGB_UNCONNECTED[1],state_results_0_RGB[0]}),
        .active(state_results_0_active),
        .clk(clk),
        .option(NLW_state_results_0_option_UNCONNECTED[1:0]),
        .sm_state(state_machine_0_sm_state));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_state_wait_0_0/design_1_state_wait_0_0.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "state_wait,Vivado 2020.1" *) 
  design_1_state_wait_0_0 state_wait_0
       (.active(state_wait_0_active),
        .btn(btn),
        .sm_state(state_machine_0_sm_state));
  (* IMPORTED_FROM = "c:/DATA/2024/sem07/SEP/SEP_projects/memorice/memorice.srcs/sources_1/bd/design_1/ip/design_1_vio_0_1/design_1_vio_0_1.dcp" *) 
  (* IMPORTED_TYPE = "CHECKPOINT" *) 
  (* IS_DEBUG_CORE *) 
  (* IS_IMPORTED *) 
  (* syn_black_box = "TRUE" *) 
  (* x_core_info = "vio,Vivado 2020.1" *) 
  design_1_vio_0_1 vio_0
       (.clk(clk),
        .probe_out0(vio_0_probe_out0),
        .sl_iport0(sl_iport0),
        .sl_oport0(sl_oport0));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_Game_0_0,Game,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* ip_definition_source = "package_project" *) 
(* x_core_info = "Game,Vivado 2020.1" *) 
module design_1_Game_0_0
   (clk0,
    sm_s0,
    data0,
    btns,
    active_g,
    result,
    led);
  input clk0;
  input [2:0]sm_s0;
  input [31:0]data0;
  input [3:0]btns;
  output active_g;
  output result;
  output [3:0]led;

  wire active_g;
  wire clk0;
  wire [31:0]data0;
  wire [3:0]led;
  wire [2:0]sm_s0;
  wire NLW_U0_result_UNCONNECTED;
  wire [3:0]NLW_U0_btns_UNCONNECTED;
  wire [14:1]NLW_U0_data0_UNCONNECTED;

  design_1_Game_0_0_Game U0
       (.active_g(active_g),
        .btns(NLW_U0_btns_UNCONNECTED[3:0]),
        .clk0(clk0),
        .data0({data0[31:15],NLW_U0_data0_UNCONNECTED[14],data0[13:2],NLW_U0_data0_UNCONNECTED[1],data0[0]}),
        .led(led),
        .result(NLW_U0_result_UNCONNECTED),
        .sm_s0(sm_s0));
endmodule

(* ORIG_REF_NAME = "Comparer" *) 
module design_1_Game_0_0_Comparer
   (CO,
    \step_reg[31]_0 ,
    complete,
    \state_reg[0] ,
    \state_reg[1] ,
    buff_reg_0,
    result_reg,
    SR,
    \step_reg[0]_0 ,
    \step_reg[0]_1 ,
    \step_reg[0]_2 ,
    \step_reg[0]_3 ,
    complete_g_reg,
    E,
    \step_reg[0]_4 ,
    click,
    \state_reg[0]_0 ,
    complete_l,
    complete_g,
    \state_reg[0]_1 ,
    \state_reg[1]_0 ,
    active_g,
    result,
    complete_g_reg_0,
    sm_s0,
    Q,
    data0,
    \opt_reg[1]_0 ,
    \opt_reg[1]_1 ,
    \opt_reg[1]_2 );
  output [0:0]CO;
  output [0:0]\step_reg[31]_0 ;
  output complete;
  output \state_reg[0] ;
  output \state_reg[1] ;
  output buff_reg_0;
  output result_reg;
  output [0:0]SR;
  output \step_reg[0]_0 ;
  output \step_reg[0]_1 ;
  output \step_reg[0]_2 ;
  output \step_reg[0]_3 ;
  output complete_g_reg;
  output [0:0]E;
  input \step_reg[0]_4 ;
  input click;
  input \state_reg[0]_0 ;
  input complete_l;
  input complete_g;
  input \state_reg[0]_1 ;
  input \state_reg[1]_0 ;
  input active_g;
  input result;
  input complete_g_reg_0;
  input [2:0]sm_s0;
  input [3:0]Q;
  input [31:0]data0;
  input \opt_reg[1]_0 ;
  input \opt_reg[1]_1 ;
  input \opt_reg[1]_2 ;

  wire [0:0]CO;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire active_g;
  wire buff_i_1__1_n_0;
  wire buff_i_2_n_0;
  wire buff_reg_0;
  wire clear;
  wire click;
  wire complete;
  wire complete_g;
  wire complete_g_reg;
  wire complete_g_reg_0;
  wire complete_l;
  wire [31:0]data0;
  wire i__carry__0_i_1_n_0;
  wire i__carry__0_i_2_n_0;
  wire i__carry__0_i_3_n_0;
  wire i__carry__0_i_4_n_0;
  wire i__carry__1_i_1_n_0;
  wire i__carry__1_i_2_n_0;
  wire i__carry__1_i_3_n_0;
  wire i__carry_i_1_n_0;
  wire i__carry_i_2_n_0;
  wire i__carry_i_3_n_0;
  wire i__carry_i_4_n_0;
  wire i__carry_i_5__1_n_0;
  wire i__carry_i_6_n_0;
  wire [1:0]opt0;
  wire \opt0_inferred__0/i__carry__0_n_0 ;
  wire \opt0_inferred__0/i__carry_n_0 ;
  wire opt1_carry__0_i_1_n_0;
  wire opt1_carry__0_i_2_n_0;
  wire opt1_carry__0_i_3_n_0;
  wire opt1_carry__0_i_4_n_0;
  wire opt1_carry__0_i_5_n_0;
  wire opt1_carry__0_i_6_n_0;
  wire opt1_carry__0_i_7_n_0;
  wire opt1_carry__0_i_8_n_0;
  wire opt1_carry__0_n_0;
  wire opt1_carry__1_i_1_n_0;
  wire opt1_carry__1_i_2_n_0;
  wire opt1_carry__1_i_3_n_0;
  wire opt1_carry__1_i_4_n_0;
  wire opt1_carry__1_i_5_n_0;
  wire opt1_carry__1_i_6_n_0;
  wire opt1_carry__1_i_7_n_0;
  wire opt1_carry__1_i_8_n_0;
  wire opt1_carry__1_n_0;
  wire opt1_carry__2_i_1_n_0;
  wire opt1_carry__2_i_2_n_0;
  wire opt1_carry__2_i_3_n_0;
  wire opt1_carry__2_i_4_n_0;
  wire opt1_carry__2_i_5_n_0;
  wire opt1_carry__2_i_6_n_0;
  wire opt1_carry__2_i_7_n_0;
  wire opt1_carry__2_i_8_n_0;
  wire opt1_carry_i_1_n_0;
  wire opt1_carry_i_2_n_0;
  wire opt1_carry_i_3_n_0;
  wire opt1_carry_i_4_n_0;
  wire opt1_carry_i_5_n_0;
  wire opt1_carry_i_6_n_0;
  wire opt1_carry_i_7_n_0;
  wire opt1_carry_i_8_n_0;
  wire opt1_carry_n_0;
  wire \opt[0]_i_1_n_0 ;
  wire \opt[1]_i_13_n_0 ;
  wire \opt[1]_i_14_n_0 ;
  wire \opt[1]_i_15_n_0 ;
  wire \opt[1]_i_16_n_0 ;
  wire \opt[1]_i_17_n_0 ;
  wire \opt[1]_i_18_n_0 ;
  wire \opt[1]_i_19_n_0 ;
  wire \opt[1]_i_1_n_0 ;
  wire \opt[1]_i_20_n_0 ;
  wire \opt_reg[1]_0 ;
  wire \opt_reg[1]_1 ;
  wire \opt_reg[1]_2 ;
  wire \state_reg[0] ;
  wire \state_reg[0]_0 ;
  wire \state_reg[0]_1 ;
  wire \state_reg[1] ;
  wire \state_reg[1]_0 ;
  wire \step[0]_i_3_n_0 ;
  wire \step[0]_i_4_n_0 ;
  wire \step[0]_i_5_n_0 ;
  wire \step[0]_i_6_n_0 ;
  wire \step[12]_i_2_n_0 ;
  wire \step[12]_i_3_n_0 ;
  wire \step[12]_i_4_n_0 ;
  wire \step[12]_i_5_n_0 ;
  wire \step[16]_i_2_n_0 ;
  wire \step[16]_i_3_n_0 ;
  wire \step[16]_i_4_n_0 ;
  wire \step[16]_i_5_n_0 ;
  wire \step[20]_i_2_n_0 ;
  wire \step[20]_i_3_n_0 ;
  wire \step[20]_i_4_n_0 ;
  wire \step[20]_i_5_n_0 ;
  wire \step[24]_i_2_n_0 ;
  wire \step[24]_i_3_n_0 ;
  wire \step[24]_i_4_n_0 ;
  wire \step[24]_i_5_n_0 ;
  wire \step[28]_i_2_n_0 ;
  wire \step[28]_i_3_n_0 ;
  wire \step[28]_i_4_n_0 ;
  wire \step[28]_i_5_n_0 ;
  wire \step[4]_i_2_n_0 ;
  wire \step[4]_i_3_n_0 ;
  wire \step[4]_i_4_n_0 ;
  wire \step[4]_i_5_n_0 ;
  wire \step[8]_i_2_n_0 ;
  wire \step[8]_i_3_n_0 ;
  wire \step[8]_i_4_n_0 ;
  wire \step[8]_i_5_n_0 ;
  wire [31:0]step_reg;
  wire \step_reg[0]_0 ;
  wire \step_reg[0]_1 ;
  wire \step_reg[0]_2 ;
  wire \step_reg[0]_3 ;
  wire \step_reg[0]_4 ;
  wire \step_reg[0]_i_2_n_0 ;
  wire \step_reg[0]_i_2_n_4 ;
  wire \step_reg[0]_i_2_n_5 ;
  wire \step_reg[0]_i_2_n_6 ;
  wire \step_reg[0]_i_2_n_7 ;
  wire \step_reg[12]_i_1_n_0 ;
  wire \step_reg[12]_i_1_n_4 ;
  wire \step_reg[12]_i_1_n_5 ;
  wire \step_reg[12]_i_1_n_6 ;
  wire \step_reg[12]_i_1_n_7 ;
  wire \step_reg[16]_i_1_n_0 ;
  wire \step_reg[16]_i_1_n_4 ;
  wire \step_reg[16]_i_1_n_5 ;
  wire \step_reg[16]_i_1_n_6 ;
  wire \step_reg[16]_i_1_n_7 ;
  wire \step_reg[20]_i_1_n_0 ;
  wire \step_reg[20]_i_1_n_4 ;
  wire \step_reg[20]_i_1_n_5 ;
  wire \step_reg[20]_i_1_n_6 ;
  wire \step_reg[20]_i_1_n_7 ;
  wire \step_reg[24]_i_1_n_0 ;
  wire \step_reg[24]_i_1_n_4 ;
  wire \step_reg[24]_i_1_n_5 ;
  wire \step_reg[24]_i_1_n_6 ;
  wire \step_reg[24]_i_1_n_7 ;
  wire \step_reg[28]_i_1_n_4 ;
  wire \step_reg[28]_i_1_n_5 ;
  wire \step_reg[28]_i_1_n_6 ;
  wire \step_reg[28]_i_1_n_7 ;
  wire [0:0]\step_reg[31]_0 ;
  wire \step_reg[4]_i_1_n_0 ;
  wire \step_reg[4]_i_1_n_4 ;
  wire \step_reg[4]_i_1_n_5 ;
  wire \step_reg[4]_i_1_n_6 ;
  wire \step_reg[4]_i_1_n_7 ;
  wire \step_reg[8]_i_1_n_0 ;
  wire \step_reg[8]_i_1_n_4 ;
  wire \step_reg[8]_i_1_n_5 ;
  wire \step_reg[8]_i_1_n_6 ;
  wire \step_reg[8]_i_1_n_7 ;
  wire [2:0]\NLW_opt0_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_opt0_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_opt0_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_opt0_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]\NLW_opt0_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_opt0_inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [2:0]NLW_opt1_carry_CO_UNCONNECTED;
  wire [3:0]NLW_opt1_carry_O_UNCONNECTED;
  wire [2:0]NLW_opt1_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_opt1_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_opt1_carry__1_CO_UNCONNECTED;
  wire [3:0]NLW_opt1_carry__1_O_UNCONNECTED;
  wire [2:0]NLW_opt1_carry__2_CO_UNCONNECTED;
  wire [3:0]NLW_opt1_carry__2_O_UNCONNECTED;
  wire [2:0]\NLW_step_reg[0]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_step_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_step_reg[16]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_step_reg[20]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_step_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_step_reg[28]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_step_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_step_reg[8]_i_1_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h2222033322223333)) 
    buff_i_1__0
       (.I0(active_g),
        .I1(\state_reg[0]_1 ),
        .I2(opt0[0]),
        .I3(complete),
        .I4(complete_g),
        .I5(buff_i_2_n_0),
        .O(buff_reg_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF20000)) 
    buff_i_1__1
       (.I0(\step_reg[31]_0 ),
        .I1(CO),
        .I2(\opt_reg[1]_0 ),
        .I3(\opt_reg[1]_1 ),
        .I4(\opt_reg[1]_2 ),
        .I5(complete),
        .O(buff_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h0100FFFF)) 
    buff_i_2
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(opt0[1]),
        .O(buff_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    buff_reg
       (.C(click),
        .CE(1'b1),
        .CLR(clear),
        .D(buff_i_1__1_n_0),
        .Q(complete));
  LUT6 #(
    .INIT(64'h00000000EAAAEAEA)) 
    complete_g_i_1
       (.I0(complete_g),
        .I1(complete),
        .I2(opt0[0]),
        .I3(complete_g_reg_0),
        .I4(opt0[1]),
        .I5(\state_reg[0]_1 ),
        .O(complete_g_reg));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry__0_i_1
       (.I0(step_reg[21]),
        .I1(step_reg[22]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[23]),
        .O(i__carry__0_i_1_n_0));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry__0_i_2
       (.I0(step_reg[18]),
        .I1(step_reg[19]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[20]),
        .O(i__carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry__0_i_3
       (.I0(step_reg[15]),
        .I1(step_reg[16]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[17]),
        .O(i__carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry__0_i_4
       (.I0(step_reg[12]),
        .I1(step_reg[13]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[14]),
        .O(i__carry__0_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    i__carry__1_i_1
       (.I0(step_reg[31]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(step_reg[30]),
        .O(i__carry__1_i_1_n_0));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry__1_i_2
       (.I0(step_reg[27]),
        .I1(step_reg[28]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[29]),
        .O(i__carry__1_i_2_n_0));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry__1_i_3
       (.I0(step_reg[24]),
        .I1(step_reg[25]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[26]),
        .O(i__carry__1_i_3_n_0));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry_i_1
       (.I0(step_reg[9]),
        .I1(step_reg[10]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[11]),
        .O(i__carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h8001)) 
    i__carry_i_2
       (.I0(step_reg[6]),
        .I1(step_reg[7]),
        .I2(i__carry_i_5__1_n_0),
        .I3(step_reg[8]),
        .O(i__carry_i_2_n_0));
  LUT5 #(
    .INIT(32'h00082110)) 
    i__carry_i_3
       (.I0(step_reg[3]),
        .I1(step_reg[4]),
        .I2(i__carry_i_6_n_0),
        .I3(Q[3]),
        .I4(step_reg[5]),
        .O(i__carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h2010400802010480)) 
    i__carry_i_4
       (.I0(step_reg[1]),
        .I1(step_reg[0]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(step_reg[2]),
        .O(i__carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    i__carry_i_5__1
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(i__carry_i_5__1_n_0));
  LUT3 #(
    .INIT(8'hFE)) 
    i__carry_i_6
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(i__carry_i_6_n_0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \opt0_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\opt0_inferred__0/i__carry_n_0 ,\NLW_opt0_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_opt0_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1_n_0,i__carry_i_2_n_0,i__carry_i_3_n_0,i__carry_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \opt0_inferred__0/i__carry__0 
       (.CI(\opt0_inferred__0/i__carry_n_0 ),
        .CO({\opt0_inferred__0/i__carry__0_n_0 ,\NLW_opt0_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_opt0_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_1_n_0,i__carry__0_i_2_n_0,i__carry__0_i_3_n_0,i__carry__0_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \opt0_inferred__0/i__carry__1 
       (.CI(\opt0_inferred__0/i__carry__0_n_0 ),
        .CO({\NLW_opt0_inferred__0/i__carry__1_CO_UNCONNECTED [3],\step_reg[31]_0 ,\NLW_opt0_inferred__0/i__carry__1_CO_UNCONNECTED [1:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_opt0_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({1'b0,i__carry__1_i_1_n_0,i__carry__1_i_2_n_0,i__carry__1_i_3_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 opt1_carry
       (.CI(1'b0),
        .CO({opt1_carry_n_0,NLW_opt1_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({opt1_carry_i_1_n_0,opt1_carry_i_2_n_0,opt1_carry_i_3_n_0,opt1_carry_i_4_n_0}),
        .O(NLW_opt1_carry_O_UNCONNECTED[3:0]),
        .S({opt1_carry_i_5_n_0,opt1_carry_i_6_n_0,opt1_carry_i_7_n_0,opt1_carry_i_8_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 opt1_carry__0
       (.CI(opt1_carry_n_0),
        .CO({opt1_carry__0_n_0,NLW_opt1_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({opt1_carry__0_i_1_n_0,opt1_carry__0_i_2_n_0,opt1_carry__0_i_3_n_0,opt1_carry__0_i_4_n_0}),
        .O(NLW_opt1_carry__0_O_UNCONNECTED[3:0]),
        .S({opt1_carry__0_i_5_n_0,opt1_carry__0_i_6_n_0,opt1_carry__0_i_7_n_0,opt1_carry__0_i_8_n_0}));
  LUT6 #(
    .INIT(64'h0000000000000007)) 
    opt1_carry__0_i_1
       (.I0(step_reg[15]),
        .I1(step_reg[14]),
        .I2(Q[3]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(opt1_carry__0_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry__0_i_2
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[12]),
        .I5(step_reg[13]),
        .O(opt1_carry__0_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry__0_i_3
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[10]),
        .I5(step_reg[11]),
        .O(opt1_carry__0_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000007)) 
    opt1_carry__0_i_4
       (.I0(step_reg[9]),
        .I1(step_reg[8]),
        .I2(Q[3]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(opt1_carry__0_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__0_i_5
       (.I0(step_reg[15]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(step_reg[14]),
        .O(opt1_carry__0_i_5_n_0));
  LUT6 #(
    .INIT(64'h000100000000FFFE)) 
    opt1_carry__0_i_6
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(step_reg[13]),
        .I5(step_reg[12]),
        .O(opt1_carry__0_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__0_i_7
       (.I0(step_reg[10]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[3]),
        .I5(step_reg[11]),
        .O(opt1_carry__0_i_7_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__0_i_8
       (.I0(step_reg[9]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(step_reg[8]),
        .O(opt1_carry__0_i_8_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 opt1_carry__1
       (.CI(opt1_carry__0_n_0),
        .CO({opt1_carry__1_n_0,NLW_opt1_carry__1_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({opt1_carry__1_i_1_n_0,opt1_carry__1_i_2_n_0,opt1_carry__1_i_3_n_0,opt1_carry__1_i_4_n_0}),
        .O(NLW_opt1_carry__1_O_UNCONNECTED[3:0]),
        .S({opt1_carry__1_i_5_n_0,opt1_carry__1_i_6_n_0,opt1_carry__1_i_7_n_0,opt1_carry__1_i_8_n_0}));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry__1_i_1
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[22]),
        .I5(step_reg[23]),
        .O(opt1_carry__1_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000007)) 
    opt1_carry__1_i_2
       (.I0(step_reg[21]),
        .I1(step_reg[20]),
        .I2(Q[3]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(opt1_carry__1_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry__1_i_3
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[18]),
        .I5(step_reg[19]),
        .O(opt1_carry__1_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry__1_i_4
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[16]),
        .I5(step_reg[17]),
        .O(opt1_carry__1_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__1_i_5
       (.I0(step_reg[22]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[3]),
        .I5(step_reg[23]),
        .O(opt1_carry__1_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__1_i_6
       (.I0(step_reg[21]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(step_reg[20]),
        .O(opt1_carry__1_i_6_n_0));
  LUT6 #(
    .INIT(64'h000100000000FFFE)) 
    opt1_carry__1_i_7
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(step_reg[19]),
        .I5(step_reg[18]),
        .O(opt1_carry__1_i_7_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__1_i_8
       (.I0(step_reg[16]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[3]),
        .I5(step_reg[17]),
        .O(opt1_carry__1_i_8_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 opt1_carry__2
       (.CI(opt1_carry__1_n_0),
        .CO({CO,NLW_opt1_carry__2_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({opt1_carry__2_i_1_n_0,opt1_carry__2_i_2_n_0,opt1_carry__2_i_3_n_0,opt1_carry__2_i_4_n_0}),
        .O(NLW_opt1_carry__2_O_UNCONNECTED[3:0]),
        .S({opt1_carry__2_i_5_n_0,opt1_carry__2_i_6_n_0,opt1_carry__2_i_7_n_0,opt1_carry__2_i_8_n_0}));
  LUT6 #(
    .INIT(64'hAAAAAAA8AAAAAAAA)) 
    opt1_carry__2_i_1
       (.I0(step_reg[31]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(step_reg[30]),
        .O(opt1_carry__2_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry__2_i_2
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[28]),
        .I5(step_reg[29]),
        .O(opt1_carry__2_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000007)) 
    opt1_carry__2_i_3
       (.I0(step_reg[27]),
        .I1(step_reg[26]),
        .I2(Q[3]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(opt1_carry__2_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry__2_i_4
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[24]),
        .I5(step_reg[25]),
        .O(opt1_carry__2_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__2_i_5
       (.I0(step_reg[31]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(step_reg[30]),
        .O(opt1_carry__2_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__2_i_6
       (.I0(step_reg[28]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[3]),
        .I5(step_reg[29]),
        .O(opt1_carry__2_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry__2_i_7
       (.I0(step_reg[27]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(step_reg[26]),
        .O(opt1_carry__2_i_7_n_0));
  LUT6 #(
    .INIT(64'h000100000000FFFE)) 
    opt1_carry__2_i_8
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(step_reg[25]),
        .I5(step_reg[24]),
        .O(opt1_carry__2_i_8_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry_i_1
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[6]),
        .I5(step_reg[7]),
        .O(opt1_carry_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000100010001)) 
    opt1_carry_i_2
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(step_reg[4]),
        .I5(step_reg[5]),
        .O(opt1_carry_i_2_n_0));
  LUT6 #(
    .INIT(64'h55540001DDD54443)) 
    opt1_carry_i_3
       (.I0(step_reg[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[3]),
        .I5(step_reg[2]),
        .O(opt1_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'h4147)) 
    opt1_carry_i_4
       (.I0(step_reg[1]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(step_reg[0]),
        .O(opt1_carry_i_4_n_0));
  LUT6 #(
    .INIT(64'h000100000000FFFE)) 
    opt1_carry_i_5
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(step_reg[7]),
        .I5(step_reg[6]),
        .O(opt1_carry_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000255555554)) 
    opt1_carry_i_6
       (.I0(step_reg[4]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[3]),
        .I5(step_reg[5]),
        .O(opt1_carry_i_6_n_0));
  LUT6 #(
    .INIT(64'h9090900609090990)) 
    opt1_carry_i_7
       (.I0(Q[3]),
        .I1(step_reg[3]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(step_reg[2]),
        .O(opt1_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h4224)) 
    opt1_carry_i_8
       (.I0(step_reg[0]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(step_reg[1]),
        .O(opt1_carry_i_8_n_0));
  LUT6 #(
    .INIT(64'hFDFFFDFFA8AAA8A8)) 
    \opt[0]_i_1 
       (.I0(\opt_reg[1]_2 ),
        .I1(\opt_reg[1]_0 ),
        .I2(\opt_reg[1]_1 ),
        .I3(CO),
        .I4(\step_reg[31]_0 ),
        .I5(opt0[0]),
        .O(\opt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5757575702020200)) 
    \opt[1]_i_1 
       (.I0(\opt_reg[1]_2 ),
        .I1(\opt_reg[1]_0 ),
        .I2(\opt_reg[1]_1 ),
        .I3(CO),
        .I4(\step_reg[31]_0 ),
        .I5(opt0[1]),
        .O(\opt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \opt[1]_i_13 
       (.I0(data0[27]),
        .I1(data0[11]),
        .I2(step_reg[1]),
        .I3(data0[19]),
        .I4(step_reg[2]),
        .I5(data0[3]),
        .O(\opt[1]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \opt[1]_i_14 
       (.I0(data0[31]),
        .I1(data0[15]),
        .I2(step_reg[1]),
        .I3(data0[23]),
        .I4(step_reg[2]),
        .I5(data0[7]),
        .O(\opt[1]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \opt[1]_i_15 
       (.I0(data0[26]),
        .I1(data0[10]),
        .I2(step_reg[1]),
        .I3(data0[18]),
        .I4(step_reg[2]),
        .I5(data0[2]),
        .O(\opt[1]_i_15_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'hB833B800)) 
    \opt[1]_i_16 
       (.I0(data0[30]),
        .I1(step_reg[1]),
        .I2(data0[22]),
        .I3(step_reg[2]),
        .I4(data0[6]),
        .O(\opt[1]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \opt[1]_i_17 
       (.I0(data0[24]),
        .I1(data0[8]),
        .I2(step_reg[1]),
        .I3(data0[16]),
        .I4(step_reg[2]),
        .I5(data0[0]),
        .O(\opt[1]_i_17_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \opt[1]_i_18 
       (.I0(data0[28]),
        .I1(data0[12]),
        .I2(step_reg[1]),
        .I3(data0[20]),
        .I4(step_reg[2]),
        .I5(data0[4]),
        .O(\opt[1]_i_18_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'hAFA0C0C0)) 
    \opt[1]_i_19 
       (.I0(data0[25]),
        .I1(data0[9]),
        .I2(step_reg[1]),
        .I3(data0[17]),
        .I4(step_reg[2]),
        .O(\opt[1]_i_19_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \opt[1]_i_20 
       (.I0(data0[29]),
        .I1(data0[13]),
        .I2(step_reg[1]),
        .I3(data0[21]),
        .I4(step_reg[2]),
        .I5(data0[5]),
        .O(\opt[1]_i_20_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \opt[1]_i_3 
       (.I0(\state_reg[0]_0 ),
        .I1(\state_reg[1]_0 ),
        .O(clear));
  FDCE #(
    .INIT(1'b0)) 
    \opt_reg[0] 
       (.C(click),
        .CE(1'b1),
        .CLR(clear),
        .D(\opt[0]_i_1_n_0 ),
        .Q(opt0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \opt_reg[1] 
       (.C(click),
        .CE(1'b1),
        .CLR(clear),
        .D(\opt[1]_i_1_n_0 ),
        .Q(opt0[1]));
  MUXF7 \opt_reg[1]_i_10 
       (.I0(\opt[1]_i_15_n_0 ),
        .I1(\opt[1]_i_16_n_0 ),
        .O(\step_reg[0]_2 ),
        .S(step_reg[0]));
  MUXF7 \opt_reg[1]_i_11 
       (.I0(\opt[1]_i_17_n_0 ),
        .I1(\opt[1]_i_18_n_0 ),
        .O(\step_reg[0]_1 ),
        .S(step_reg[0]));
  MUXF7 \opt_reg[1]_i_12 
       (.I0(\opt[1]_i_19_n_0 ),
        .I1(\opt[1]_i_20_n_0 ),
        .O(\step_reg[0]_0 ),
        .S(step_reg[0]));
  MUXF7 \opt_reg[1]_i_9 
       (.I0(\opt[1]_i_13_n_0 ),
        .I1(\opt[1]_i_14_n_0 ),
        .O(\step_reg[0]_3 ),
        .S(step_reg[0]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAFA2AAA2)) 
    \state[0]_i_1 
       (.I0(\state_reg[0]_0 ),
        .I1(complete_l),
        .I2(complete_g),
        .I3(complete),
        .I4(opt0[0]),
        .I5(\state_reg[0]_1 ),
        .O(\state_reg[0] ));
  LUT6 #(
    .INIT(64'hAAAAAAAAA0AEAAAE)) 
    \state[1]_i_1 
       (.I0(\state_reg[1]_0 ),
        .I1(complete_l),
        .I2(complete_g),
        .I3(complete),
        .I4(opt0[0]),
        .I5(\state_reg[0]_1 ),
        .O(\state_reg[1] ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[0]_i_3 
       (.I0(CO),
        .I1(step_reg[3]),
        .O(\step[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[0]_i_4 
       (.I0(CO),
        .I1(step_reg[2]),
        .O(\step[0]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[0]_i_5 
       (.I0(CO),
        .I1(step_reg[1]),
        .O(\step[0]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h4)) 
    \step[0]_i_6 
       (.I0(step_reg[0]),
        .I1(CO),
        .O(\step[0]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[12]_i_2 
       (.I0(CO),
        .I1(step_reg[15]),
        .O(\step[12]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[12]_i_3 
       (.I0(CO),
        .I1(step_reg[14]),
        .O(\step[12]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[12]_i_4 
       (.I0(CO),
        .I1(step_reg[13]),
        .O(\step[12]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[12]_i_5 
       (.I0(CO),
        .I1(step_reg[12]),
        .O(\step[12]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[16]_i_2 
       (.I0(CO),
        .I1(step_reg[19]),
        .O(\step[16]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[16]_i_3 
       (.I0(CO),
        .I1(step_reg[18]),
        .O(\step[16]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[16]_i_4 
       (.I0(CO),
        .I1(step_reg[17]),
        .O(\step[16]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[16]_i_5 
       (.I0(CO),
        .I1(step_reg[16]),
        .O(\step[16]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[20]_i_2 
       (.I0(CO),
        .I1(step_reg[23]),
        .O(\step[20]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[20]_i_3 
       (.I0(CO),
        .I1(step_reg[22]),
        .O(\step[20]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[20]_i_4 
       (.I0(CO),
        .I1(step_reg[21]),
        .O(\step[20]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[20]_i_5 
       (.I0(CO),
        .I1(step_reg[20]),
        .O(\step[20]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[24]_i_2 
       (.I0(CO),
        .I1(step_reg[27]),
        .O(\step[24]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[24]_i_3 
       (.I0(CO),
        .I1(step_reg[26]),
        .O(\step[24]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[24]_i_4 
       (.I0(CO),
        .I1(step_reg[25]),
        .O(\step[24]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[24]_i_5 
       (.I0(CO),
        .I1(step_reg[24]),
        .O(\step[24]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[28]_i_2 
       (.I0(CO),
        .I1(step_reg[31]),
        .O(\step[28]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[28]_i_3 
       (.I0(CO),
        .I1(step_reg[30]),
        .O(\step[28]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[28]_i_4 
       (.I0(CO),
        .I1(step_reg[29]),
        .O(\step[28]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[28]_i_5 
       (.I0(CO),
        .I1(step_reg[28]),
        .O(\step[28]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[4]_i_2 
       (.I0(CO),
        .I1(step_reg[7]),
        .O(\step[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[4]_i_3 
       (.I0(CO),
        .I1(step_reg[6]),
        .O(\step[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[4]_i_4 
       (.I0(CO),
        .I1(step_reg[5]),
        .O(\step[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[4]_i_5 
       (.I0(CO),
        .I1(step_reg[4]),
        .O(\step[4]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[8]_i_2 
       (.I0(CO),
        .I1(step_reg[11]),
        .O(\step[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[8]_i_3 
       (.I0(CO),
        .I1(step_reg[10]),
        .O(\step[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[8]_i_4 
       (.I0(CO),
        .I1(step_reg[9]),
        .O(\step[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \step[8]_i_5 
       (.I0(CO),
        .I1(step_reg[8]),
        .O(\step[8]_i_5_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[0] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[0]_i_2_n_7 ),
        .Q(step_reg[0]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\step_reg[0]_i_2_n_0 ,\NLW_step_reg[0]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,CO}),
        .O({\step_reg[0]_i_2_n_4 ,\step_reg[0]_i_2_n_5 ,\step_reg[0]_i_2_n_6 ,\step_reg[0]_i_2_n_7 }),
        .S({\step[0]_i_3_n_0 ,\step[0]_i_4_n_0 ,\step[0]_i_5_n_0 ,\step[0]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[10] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[8]_i_1_n_5 ),
        .Q(step_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[11] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[8]_i_1_n_4 ),
        .Q(step_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[12] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[12]_i_1_n_7 ),
        .Q(step_reg[12]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[12]_i_1 
       (.CI(\step_reg[8]_i_1_n_0 ),
        .CO({\step_reg[12]_i_1_n_0 ,\NLW_step_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\step_reg[12]_i_1_n_4 ,\step_reg[12]_i_1_n_5 ,\step_reg[12]_i_1_n_6 ,\step_reg[12]_i_1_n_7 }),
        .S({\step[12]_i_2_n_0 ,\step[12]_i_3_n_0 ,\step[12]_i_4_n_0 ,\step[12]_i_5_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[13] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[12]_i_1_n_6 ),
        .Q(step_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[14] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[12]_i_1_n_5 ),
        .Q(step_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[15] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[12]_i_1_n_4 ),
        .Q(step_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[16] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[16]_i_1_n_7 ),
        .Q(step_reg[16]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[16]_i_1 
       (.CI(\step_reg[12]_i_1_n_0 ),
        .CO({\step_reg[16]_i_1_n_0 ,\NLW_step_reg[16]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\step_reg[16]_i_1_n_4 ,\step_reg[16]_i_1_n_5 ,\step_reg[16]_i_1_n_6 ,\step_reg[16]_i_1_n_7 }),
        .S({\step[16]_i_2_n_0 ,\step[16]_i_3_n_0 ,\step[16]_i_4_n_0 ,\step[16]_i_5_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[17] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[16]_i_1_n_6 ),
        .Q(step_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[18] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[16]_i_1_n_5 ),
        .Q(step_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[19] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[16]_i_1_n_4 ),
        .Q(step_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[1] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[0]_i_2_n_6 ),
        .Q(step_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[20] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[20]_i_1_n_7 ),
        .Q(step_reg[20]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[20]_i_1 
       (.CI(\step_reg[16]_i_1_n_0 ),
        .CO({\step_reg[20]_i_1_n_0 ,\NLW_step_reg[20]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\step_reg[20]_i_1_n_4 ,\step_reg[20]_i_1_n_5 ,\step_reg[20]_i_1_n_6 ,\step_reg[20]_i_1_n_7 }),
        .S({\step[20]_i_2_n_0 ,\step[20]_i_3_n_0 ,\step[20]_i_4_n_0 ,\step[20]_i_5_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[21] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[20]_i_1_n_6 ),
        .Q(step_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[22] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[20]_i_1_n_5 ),
        .Q(step_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[23] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[20]_i_1_n_4 ),
        .Q(step_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[24] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[24]_i_1_n_7 ),
        .Q(step_reg[24]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[24]_i_1 
       (.CI(\step_reg[20]_i_1_n_0 ),
        .CO({\step_reg[24]_i_1_n_0 ,\NLW_step_reg[24]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\step_reg[24]_i_1_n_4 ,\step_reg[24]_i_1_n_5 ,\step_reg[24]_i_1_n_6 ,\step_reg[24]_i_1_n_7 }),
        .S({\step[24]_i_2_n_0 ,\step[24]_i_3_n_0 ,\step[24]_i_4_n_0 ,\step[24]_i_5_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[25] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[24]_i_1_n_6 ),
        .Q(step_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[26] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[24]_i_1_n_5 ),
        .Q(step_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[27] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[24]_i_1_n_4 ),
        .Q(step_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[28] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[28]_i_1_n_7 ),
        .Q(step_reg[28]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[28]_i_1 
       (.CI(\step_reg[24]_i_1_n_0 ),
        .CO(\NLW_step_reg[28]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\step_reg[28]_i_1_n_4 ,\step_reg[28]_i_1_n_5 ,\step_reg[28]_i_1_n_6 ,\step_reg[28]_i_1_n_7 }),
        .S({\step[28]_i_2_n_0 ,\step[28]_i_3_n_0 ,\step[28]_i_4_n_0 ,\step[28]_i_5_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[29] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[28]_i_1_n_6 ),
        .Q(step_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[2] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[0]_i_2_n_5 ),
        .Q(step_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[30] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[28]_i_1_n_5 ),
        .Q(step_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[31] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[28]_i_1_n_4 ),
        .Q(step_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[3] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[0]_i_2_n_4 ),
        .Q(step_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[4] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[4]_i_1_n_7 ),
        .Q(step_reg[4]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[4]_i_1 
       (.CI(\step_reg[0]_i_2_n_0 ),
        .CO({\step_reg[4]_i_1_n_0 ,\NLW_step_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\step_reg[4]_i_1_n_4 ,\step_reg[4]_i_1_n_5 ,\step_reg[4]_i_1_n_6 ,\step_reg[4]_i_1_n_7 }),
        .S({\step[4]_i_2_n_0 ,\step[4]_i_3_n_0 ,\step[4]_i_4_n_0 ,\step[4]_i_5_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[5] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[4]_i_1_n_6 ),
        .Q(step_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[6] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[4]_i_1_n_5 ),
        .Q(step_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[7] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[4]_i_1_n_4 ),
        .Q(step_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[8] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[8]_i_1_n_7 ),
        .Q(step_reg[8]));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \step_reg[8]_i_1 
       (.CI(\step_reg[4]_i_1_n_0 ),
        .CO({\step_reg[8]_i_1_n_0 ,\NLW_step_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\step_reg[8]_i_1_n_4 ,\step_reg[8]_i_1_n_5 ,\step_reg[8]_i_1_n_6 ,\step_reg[8]_i_1_n_7 }),
        .S({\step[8]_i_2_n_0 ,\step[8]_i_3_n_0 ,\step[8]_i_4_n_0 ,\step[8]_i_5_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \step_reg[9] 
       (.C(click),
        .CE(\step_reg[0]_4 ),
        .CLR(clear),
        .D(\step_reg[8]_i_1_n_6 ),
        .Q(step_reg[9]));
  LUT5 #(
    .INIT(32'h00000040)) 
    \sublevel0[3]_i_1 
       (.I0(complete_g),
        .I1(complete),
        .I2(opt0[0]),
        .I3(\state_reg[0]_1 ),
        .I4(opt0[1]),
        .O(SR));
  LUT5 #(
    .INIT(32'h00400000)) 
    \sublevel0[3]_i_2 
       (.I0(complete_g),
        .I1(complete),
        .I2(opt0[0]),
        .I3(\state_reg[0]_1 ),
        .I4(opt0[1]),
        .O(E));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button
   (Q_reg_0,
    Q_reg_1,
    Q_reg_2,
    clk0,
    Q_reg_3,
    Q_reg_4);
  output Q_reg_0;
  output Q_reg_1;
  input Q_reg_2;
  input clk0;
  input Q_reg_3;
  input Q_reg_4;

  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire Q_reg_3;
  wire Q_reg_4;
  wire clk0;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1__9
       (.I0(Q_reg_0),
        .I1(Q_reg_3),
        .I2(Q_reg_4),
        .O(Q_reg_1));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_2),
        .Q(Q_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_10
   (Q1,
    Q_reg_0,
    Q_reg_1,
    clk0,
    Q_reg_2,
    Q2);
  output Q1;
  output Q_reg_0;
  input Q_reg_1;
  input clk0;
  input Q_reg_2;
  input Q2;

  wire Q1;
  wire Q2;
  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire clk0;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1__2
       (.I0(Q1),
        .I1(Q_reg_2),
        .I2(Q2),
        .O(Q_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_1),
        .Q(Q1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_11
   (Q2,
    Q_reg_0,
    clk0);
  output Q2;
  input Q_reg_0;
  input clk0;

  wire Q2;
  wire Q_reg_0;
  wire clk0;

  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_0),
        .Q(Q2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_13
   (D,
    Q_reg_0,
    Q_reg_1,
    clk0,
    clock_enable,
    Q_reg_2);
  output D;
  output Q_reg_0;
  input Q_reg_1;
  input clk0;
  input clock_enable;
  input Q_reg_2;

  wire D;
  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire clk0;
  wire clock_enable;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1__0
       (.I0(D),
        .I1(clock_enable),
        .I2(Q_reg_2),
        .O(Q_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_1),
        .Q(D),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_14
   (Q_reg_0,
    Q_reg_1,
    \state_reg[0] ,
    Q_reg_2,
    Q_reg_3,
    Q_reg_4,
    clk0,
    \step_reg[0] ,
    Q_reg_5,
    \step_reg[0]_0 ,
    Q1_0,
    Q2_1,
    \step_reg[0]_1 ,
    \step_reg[0]_2 ,
    complete,
    Q1_2,
    Q2_3,
    \opt[1]_i_4_0 ,
    \step_reg[0]_3 ,
    CO,
    \step_reg[0]_4 ,
    clock_enable);
  output Q_reg_0;
  output Q_reg_1;
  output \state_reg[0] ;
  output Q_reg_2;
  output Q_reg_3;
  input Q_reg_4;
  input clk0;
  input \step_reg[0] ;
  input Q_reg_5;
  input \step_reg[0]_0 ;
  input Q1_0;
  input Q2_1;
  input \step_reg[0]_1 ;
  input \step_reg[0]_2 ;
  input complete;
  input Q1_2;
  input Q2_3;
  input \opt[1]_i_4_0 ;
  input \step_reg[0]_3 ;
  input [0:0]CO;
  input [0:0]\step_reg[0]_4 ;
  input clock_enable;

  wire [0:0]CO;
  wire Q1_0;
  wire Q1_2;
  wire Q2_1;
  wire Q2_3;
  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire Q_reg_3;
  wire Q_reg_4;
  wire Q_reg_5;
  wire clk0;
  wire clock_enable;
  wire complete;
  wire \opt[1]_i_4_0 ;
  wire \opt[1]_i_8_n_0 ;
  wire \state_reg[0] ;
  wire \step_reg[0] ;
  wire \step_reg[0]_0 ;
  wire \step_reg[0]_1 ;
  wire \step_reg[0]_2 ;
  wire \step_reg[0]_3 ;
  wire [0:0]\step_reg[0]_4 ;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1
       (.I0(Q_reg_0),
        .I1(clock_enable),
        .I2(Q_reg_5),
        .O(Q_reg_3));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_4),
        .Q(Q_reg_0),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0010)) 
    \opt[1]_i_4 
       (.I0(\opt[1]_i_8_n_0 ),
        .I1(\step_reg[0]_1 ),
        .I2(\step_reg[0]_2 ),
        .I3(complete),
        .O(\state_reg[0] ));
  LUT6 #(
    .INIT(64'hFFA6FFA6A6FFFFA6)) 
    \opt[1]_i_6 
       (.I0(\step_reg[0] ),
        .I1(Q_reg_0),
        .I2(Q_reg_5),
        .I3(\step_reg[0]_0 ),
        .I4(Q1_0),
        .I5(Q2_1),
        .O(Q_reg_1));
  LUT5 #(
    .INIT(32'h0000DD0D)) 
    \opt[1]_i_8 
       (.I0(Q_reg_0),
        .I1(Q_reg_5),
        .I2(Q1_2),
        .I3(Q2_3),
        .I4(\opt[1]_i_4_0 ),
        .O(\opt[1]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h11100000)) 
    \step[0]_i_1 
       (.I0(\step_reg[0]_3 ),
        .I1(Q_reg_1),
        .I2(CO),
        .I3(\step_reg[0]_4 ),
        .I4(\state_reg[0] ),
        .O(Q_reg_2));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_15
   (Q2,
    Q_reg_0,
    clk0);
  output Q2;
  input Q_reg_0;
  input clk0;

  wire Q2;
  wire Q_reg_0;
  wire clk0;

  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_0),
        .Q(Q2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_3
   (Q_reg_0,
    Q_reg_1,
    Q_reg_2,
    Q_reg_3,
    clk0,
    \step_reg[0] ,
    Q_reg_4,
    \step_reg[0]_0 ,
    Q1_2,
    Q2_3,
    Q_reg_5);
  output Q_reg_0;
  output Q_reg_1;
  output Q_reg_2;
  input Q_reg_3;
  input clk0;
  input \step_reg[0] ;
  input Q_reg_4;
  input \step_reg[0]_0 ;
  input Q1_2;
  input Q2_3;
  input Q_reg_5;

  wire Q1_2;
  wire Q2_3;
  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire Q_reg_3;
  wire Q_reg_4;
  wire Q_reg_5;
  wire clk0;
  wire \step_reg[0] ;
  wire \step_reg[0]_0 ;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1__8
       (.I0(Q_reg_0),
        .I1(Q_reg_5),
        .I2(Q_reg_4),
        .O(Q_reg_2));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_3),
        .Q(Q_reg_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFA6FFA6A6FFFFA6)) 
    \opt[1]_i_5 
       (.I0(\step_reg[0] ),
        .I1(Q_reg_0),
        .I2(Q_reg_4),
        .I3(\step_reg[0]_0 ),
        .I4(Q1_2),
        .I5(Q2_3),
        .O(Q_reg_1));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_4
   (Q2,
    click,
    Q_reg_0,
    clk0,
    buff_reg,
    Q1,
    Q2_0,
    Q1_1);
  output Q2;
  output click;
  input Q_reg_0;
  input clk0;
  input buff_reg;
  input Q1;
  input Q2_0;
  input Q1_1;

  wire Q1;
  wire Q1_1;
  wire Q2;
  wire Q2_0;
  wire Q_reg_0;
  wire buff_reg;
  wire \^click ;
  wire click_BUFG;
  wire clk0;

  assign click = click_BUFG;
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_0),
        .Q(Q2),
        .R(1'b0));
  (* LOPT_BUFG_CLOCK *) 
  (* OPT_MODIFIED = "BUFG_OPT" *) 
  BUFG click_BUFG_inst
       (.I(\^click ),
        .O(click_BUFG));
  (* OPT_MODIFIED = "BUFG_OPT" *) 
  LUT5 #(
    .INIT(32'hBAFFBABA)) 
    \opt[1]_i_2 
       (.I0(buff_reg),
        .I1(Q2),
        .I2(Q1),
        .I3(Q2_0),
        .I4(Q1_1),
        .O(\^click ));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_5
   (Q_reg_0,
    Q_reg_1,
    Q_reg_2,
    clk0,
    Q_reg_3,
    Q_reg_4);
  output Q_reg_0;
  output Q_reg_1;
  input Q_reg_2;
  input clk0;
  input Q_reg_3;
  input Q_reg_4;

  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire Q_reg_3;
  wire Q_reg_4;
  wire clk0;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1__6
       (.I0(Q_reg_0),
        .I1(Q_reg_3),
        .I2(Q_reg_4),
        .O(Q_reg_1));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_2),
        .Q(Q_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_6
   (Q_reg_0,
    Q_reg_1,
    Q_reg_2,
    clk0,
    Q_reg_3,
    Q2);
  output Q_reg_0;
  output Q_reg_1;
  input Q_reg_2;
  input clk0;
  input Q_reg_3;
  input Q2;

  wire Q2;
  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire Q_reg_3;
  wire clk0;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1__5
       (.I0(Q_reg_0),
        .I1(Q_reg_3),
        .I2(Q2),
        .O(Q_reg_1));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_2),
        .Q(Q_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_7
   (Q2,
    Q_reg_0,
    Q_reg_1,
    clk0,
    Q1,
    Q2_0,
    Q1_1);
  output Q2;
  output Q_reg_0;
  input Q_reg_1;
  input clk0;
  input Q1;
  input Q2_0;
  input Q1_1;

  wire Q1;
  wire Q1_1;
  wire Q2;
  wire Q2_0;
  wire Q_reg_0;
  wire Q_reg_1;
  wire clk0;

  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_1),
        .Q(Q2),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h4F44)) 
    \opt[1]_i_7 
       (.I0(Q2),
        .I1(Q1),
        .I2(Q2_0),
        .I3(Q1_1),
        .O(Q_reg_0));
endmodule

(* ORIG_REF_NAME = "DFF_Debouncing_Button" *) 
module design_1_Game_0_0_DFF_Debouncing_Button_9
   (Q_reg_0,
    Q_reg_1,
    Q_reg_2,
    clk0,
    Q_reg_3,
    Q1);
  output Q_reg_0;
  output Q_reg_1;
  input Q_reg_2;
  input clk0;
  input Q_reg_3;
  input Q1;

  wire Q1;
  wire Q_reg_0;
  wire Q_reg_1;
  wire Q_reg_2;
  wire Q_reg_3;
  wire clk0;

  LUT3 #(
    .INIT(8'hB8)) 
    Q_i_1__3
       (.I0(Q_reg_0),
        .I1(Q_reg_3),
        .I2(Q1),
        .O(Q_reg_1));
  FDRE #(
    .INIT(1'b0)) 
    Q_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Q_reg_2),
        .Q(Q_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Debouncer" *) 
module design_1_Game_0_0_Debouncer
   (Q1,
    Q2,
    Q_reg,
    \state_reg[0] ,
    Q_reg_0,
    clk0,
    \step_reg[0] ,
    \step_reg[0]_0 ,
    Q1_0,
    Q2_1,
    \step_reg[0]_1 ,
    \step_reg[0]_2 ,
    complete,
    Q1_2,
    Q2_3,
    \opt[1]_i_4 ,
    \step_reg[0]_3 ,
    CO,
    \step_reg[0]_4 ,
    btns);
  output Q1;
  output Q2;
  output Q_reg;
  output \state_reg[0] ;
  output Q_reg_0;
  input clk0;
  input \step_reg[0] ;
  input \step_reg[0]_0 ;
  input Q1_0;
  input Q2_1;
  input \step_reg[0]_1 ;
  input \step_reg[0]_2 ;
  input complete;
  input Q1_2;
  input Q2_3;
  input \opt[1]_i_4 ;
  input \step_reg[0]_3 ;
  input [0:0]CO;
  input [0:0]\step_reg[0]_4 ;
  input [0:0]btns;

  wire [0:0]CO;
  wire D;
  wire Debouncing_FF0_n_1;
  wire Debouncing_FF1_n_4;
  wire Q1;
  wire Q1_0;
  wire Q1_2;
  wire Q2;
  wire Q2_1;
  wire Q2_3;
  wire Q_reg;
  wire Q_reg_0;
  wire clk0;
  wire clock_enable;
  wire clock_enable_generator_n_1;
  wire complete;
  wire \opt[1]_i_4 ;
  wire \state_reg[0] ;
  wire \step_reg[0] ;
  wire \step_reg[0]_0 ;
  wire \step_reg[0]_1 ;
  wire \step_reg[0]_2 ;
  wire \step_reg[0]_3 ;
  wire [0:0]\step_reg[0]_4 ;
  wire [0:0]NLW_clock_enable_generator_btns_UNCONNECTED;

  design_1_Game_0_0_DFF_Debouncing_Button_13 Debouncing_FF0
       (.D(D),
        .Q_reg_0(Debouncing_FF0_n_1),
        .Q_reg_1(clock_enable_generator_n_1),
        .Q_reg_2(Q1),
        .clk0(clk0),
        .clock_enable(clock_enable));
  design_1_Game_0_0_DFF_Debouncing_Button_14 Debouncing_FF1
       (.CO(CO),
        .Q1_0(Q1_0),
        .Q1_2(Q1_2),
        .Q2_1(Q2_1),
        .Q2_3(Q2_3),
        .Q_reg_0(Q1),
        .Q_reg_1(Q_reg),
        .Q_reg_2(Q_reg_0),
        .Q_reg_3(Debouncing_FF1_n_4),
        .Q_reg_4(Debouncing_FF0_n_1),
        .Q_reg_5(Q2),
        .clk0(clk0),
        .clock_enable(clock_enable),
        .complete(complete),
        .\opt[1]_i_4_0 (\opt[1]_i_4 ),
        .\state_reg[0] (\state_reg[0] ),
        .\step_reg[0] (\step_reg[0] ),
        .\step_reg[0]_0 (\step_reg[0]_0 ),
        .\step_reg[0]_1 (\step_reg[0]_1 ),
        .\step_reg[0]_2 (\step_reg[0]_2 ),
        .\step_reg[0]_3 (\step_reg[0]_3 ),
        .\step_reg[0]_4 (\step_reg[0]_4 ));
  design_1_Game_0_0_DFF_Debouncing_Button_15 Debouncing_FF2
       (.Q2(Q2),
        .Q_reg_0(Debouncing_FF1_n_4),
        .clk0(clk0));
  design_1_Game_0_0_clock_enable_debouncing_button_16 clock_enable_generator
       (.D(D),
        .btns(NLW_clock_enable_generator_btns_UNCONNECTED[0]),
        .btns_0_sp_1(clock_enable_generator_n_1),
        .clk0(clk0),
        .clock_enable(clock_enable));
endmodule

(* ORIG_REF_NAME = "Debouncer" *) 
module design_1_Game_0_0_Debouncer_0
   (Q1,
    Q2,
    clk0,
    btns);
  output Q1;
  output Q2;
  input clk0;
  input [0:0]btns;

  wire Debouncing_FF0_n_0;
  wire Debouncing_FF0_n_1;
  wire Debouncing_FF1_n_1;
  wire Q1;
  wire Q2;
  wire clk0;
  wire clock_enable_generator_n_0;
  wire clock_enable_generator_n_1;
  wire [0:0]NLW_clock_enable_generator_btns_UNCONNECTED;

  design_1_Game_0_0_DFF_Debouncing_Button_9 Debouncing_FF0
       (.Q1(Q1),
        .Q_reg_0(Debouncing_FF0_n_0),
        .Q_reg_1(Debouncing_FF0_n_1),
        .Q_reg_2(clock_enable_generator_n_1),
        .Q_reg_3(clock_enable_generator_n_0),
        .clk0(clk0));
  design_1_Game_0_0_DFF_Debouncing_Button_10 Debouncing_FF1
       (.Q1(Q1),
        .Q2(Q2),
        .Q_reg_0(Debouncing_FF1_n_1),
        .Q_reg_1(Debouncing_FF0_n_1),
        .Q_reg_2(clock_enable_generator_n_0),
        .clk0(clk0));
  design_1_Game_0_0_DFF_Debouncing_Button_11 Debouncing_FF2
       (.Q2(Q2),
        .Q_reg_0(Debouncing_FF1_n_1),
        .clk0(clk0));
  design_1_Game_0_0_clock_enable_debouncing_button_12 clock_enable_generator
       (.Q_reg(Debouncing_FF0_n_0),
        .btns(NLW_clock_enable_generator_btns_UNCONNECTED[0]),
        .\btns[1] (clock_enable_generator_n_1),
        .clk0(clk0),
        .\counter_reg[8]_0 (clock_enable_generator_n_0));
endmodule

(* ORIG_REF_NAME = "Debouncer" *) 
module design_1_Game_0_0_Debouncer_1
   (Q1,
    Q2,
    Q_reg,
    clk0,
    Q2_0,
    Q1_1,
    btns);
  output Q1;
  output Q2;
  output Q_reg;
  input clk0;
  input Q2_0;
  input Q1_1;
  input [0:0]btns;

  wire Debouncing_FF0_n_0;
  wire Debouncing_FF0_n_1;
  wire Debouncing_FF1_n_1;
  wire Q1;
  wire Q1_1;
  wire Q2;
  wire Q2_0;
  wire Q_reg;
  wire clk0;
  wire clock_enable_generator_n_0;
  wire clock_enable_generator_n_1;
  wire [0:0]NLW_clock_enable_generator_btns_UNCONNECTED;

  design_1_Game_0_0_DFF_Debouncing_Button_5 Debouncing_FF0
       (.Q_reg_0(Debouncing_FF0_n_0),
        .Q_reg_1(Debouncing_FF0_n_1),
        .Q_reg_2(clock_enable_generator_n_1),
        .Q_reg_3(clock_enable_generator_n_0),
        .Q_reg_4(Q1),
        .clk0(clk0));
  design_1_Game_0_0_DFF_Debouncing_Button_6 Debouncing_FF1
       (.Q2(Q2),
        .Q_reg_0(Q1),
        .Q_reg_1(Debouncing_FF1_n_1),
        .Q_reg_2(Debouncing_FF0_n_1),
        .Q_reg_3(clock_enable_generator_n_0),
        .clk0(clk0));
  design_1_Game_0_0_DFF_Debouncing_Button_7 Debouncing_FF2
       (.Q1(Q1),
        .Q1_1(Q1_1),
        .Q2(Q2),
        .Q2_0(Q2_0),
        .Q_reg_0(Q_reg),
        .Q_reg_1(Debouncing_FF1_n_1),
        .clk0(clk0));
  design_1_Game_0_0_clock_enable_debouncing_button_8 clock_enable_generator
       (.Q_reg(Debouncing_FF0_n_0),
        .btns(NLW_clock_enable_generator_btns_UNCONNECTED[0]),
        .\btns[2] (clock_enable_generator_n_1),
        .clk0(clk0),
        .\counter_reg[24]_0 (clock_enable_generator_n_0));
endmodule

(* ORIG_REF_NAME = "Debouncer" *) 
module design_1_Game_0_0_Debouncer_2
   (Q1,
    Q2,
    click,
    Q_reg,
    clk0,
    buff_reg,
    Q2_0,
    Q1_1,
    \step_reg[0] ,
    \step_reg[0]_0 ,
    Q1_2,
    Q2_3,
    btns);
  output Q1;
  output Q2;
  output click;
  output Q_reg;
  input clk0;
  input buff_reg;
  input Q2_0;
  input Q1_1;
  input \step_reg[0] ;
  input \step_reg[0]_0 ;
  input Q1_2;
  input Q2_3;
  input [0:0]btns;

  wire Debouncing_FF0_n_0;
  wire Debouncing_FF0_n_1;
  wire Debouncing_FF1_n_2;
  wire Q1;
  wire Q1_1;
  wire Q1_2;
  wire Q2;
  wire Q2_0;
  wire Q2_3;
  wire Q_reg;
  wire buff_reg;
  wire click;
  wire clk0;
  wire clock_enable_generator_n_0;
  wire clock_enable_generator_n_1;
  wire \step_reg[0] ;
  wire \step_reg[0]_0 ;
  wire [0:0]NLW_clock_enable_generator_btns_UNCONNECTED;

  design_1_Game_0_0_DFF_Debouncing_Button Debouncing_FF0
       (.Q_reg_0(Debouncing_FF0_n_0),
        .Q_reg_1(Debouncing_FF0_n_1),
        .Q_reg_2(clock_enable_generator_n_1),
        .Q_reg_3(clock_enable_generator_n_0),
        .Q_reg_4(Q1),
        .clk0(clk0));
  design_1_Game_0_0_DFF_Debouncing_Button_3 Debouncing_FF1
       (.Q1_2(Q1_2),
        .Q2_3(Q2_3),
        .Q_reg_0(Q1),
        .Q_reg_1(Q_reg),
        .Q_reg_2(Debouncing_FF1_n_2),
        .Q_reg_3(Debouncing_FF0_n_1),
        .Q_reg_4(Q2),
        .Q_reg_5(clock_enable_generator_n_0),
        .clk0(clk0),
        .\step_reg[0] (\step_reg[0] ),
        .\step_reg[0]_0 (\step_reg[0]_0 ));
  design_1_Game_0_0_DFF_Debouncing_Button_4 Debouncing_FF2
       (.Q1(Q1),
        .Q1_1(Q1_1),
        .Q2(Q2),
        .Q2_0(Q2_0),
        .Q_reg_0(Debouncing_FF1_n_2),
        .buff_reg(buff_reg),
        .click(click),
        .clk0(clk0));
  design_1_Game_0_0_clock_enable_debouncing_button clock_enable_generator
       (.Q_reg(Debouncing_FF0_n_0),
        .btns(NLW_clock_enable_generator_btns_UNCONNECTED[0]),
        .\btns[3] (clock_enable_generator_n_1),
        .clk0(clk0),
        .\counter_reg[12]_0 (clock_enable_generator_n_0));
endmodule

(* ORIG_REF_NAME = "GDebouncer" *) 
module design_1_Game_0_0_GDebouncer
   (Q_reg,
    \state_reg[0] ,
    click,
    Q_reg_0,
    Q_reg_1,
    clk0,
    \step_reg[0] ,
    \step_reg[0]_0 ,
    \step_reg[0]_1 ,
    \step_reg[0]_2 ,
    complete,
    \step_reg[0]_3 ,
    \step_reg[0]_4 ,
    CO,
    \step_reg[0]_5 ,
    btns);
  output Q_reg;
  output \state_reg[0] ;
  output click;
  output Q_reg_0;
  output Q_reg_1;
  input clk0;
  input \step_reg[0] ;
  input \step_reg[0]_0 ;
  input \step_reg[0]_1 ;
  input \step_reg[0]_2 ;
  input complete;
  input \step_reg[0]_3 ;
  input \step_reg[0]_4 ;
  input [0:0]CO;
  input [0:0]\step_reg[0]_5 ;
  input [3:0]btns;

  wire [0:0]CO;
  wire Debouncer2_n_2;
  wire Q1;
  wire Q1_1;
  wire Q1_3;
  wire Q1_5;
  wire Q2;
  wire Q2_0;
  wire Q2_2;
  wire Q2_4;
  wire Q_reg;
  wire Q_reg_0;
  wire Q_reg_1;
  wire click;
  wire clk0;
  wire complete;
  wire \state_reg[0] ;
  wire \step_reg[0] ;
  wire \step_reg[0]_0 ;
  wire \step_reg[0]_1 ;
  wire \step_reg[0]_2 ;
  wire \step_reg[0]_3 ;
  wire \step_reg[0]_4 ;
  wire [0:0]\step_reg[0]_5 ;
  wire [0:0]NLW_Debouncer0_btns_UNCONNECTED;
  wire [0:0]NLW_Debouncer1_btns_UNCONNECTED;
  wire [0:0]NLW_Debouncer2_btns_UNCONNECTED;
  wire [0:0]NLW_Debouncer3_btns_UNCONNECTED;

  design_1_Game_0_0_Debouncer Debouncer0
       (.CO(CO),
        .Q1(Q1),
        .Q1_0(Q1_1),
        .Q1_2(Q1_5),
        .Q2(Q2),
        .Q2_1(Q2_0),
        .Q2_3(Q2_4),
        .Q_reg(Q_reg),
        .Q_reg_0(Q_reg_1),
        .btns(NLW_Debouncer0_btns_UNCONNECTED[0]),
        .clk0(clk0),
        .complete(complete),
        .\opt[1]_i_4 (Debouncer2_n_2),
        .\state_reg[0] (\state_reg[0] ),
        .\step_reg[0] (\step_reg[0] ),
        .\step_reg[0]_0 (\step_reg[0]_0 ),
        .\step_reg[0]_1 (\step_reg[0]_1 ),
        .\step_reg[0]_2 (\step_reg[0]_2 ),
        .\step_reg[0]_3 (Q_reg_0),
        .\step_reg[0]_4 (\step_reg[0]_5 ));
  design_1_Game_0_0_Debouncer_0 Debouncer1
       (.Q1(Q1_1),
        .Q2(Q2_0),
        .btns(NLW_Debouncer1_btns_UNCONNECTED[0]),
        .clk0(clk0));
  design_1_Game_0_0_Debouncer_1 Debouncer2
       (.Q1(Q1_3),
        .Q1_1(Q1_1),
        .Q2(Q2_2),
        .Q2_0(Q2_0),
        .Q_reg(Debouncer2_n_2),
        .btns(NLW_Debouncer2_btns_UNCONNECTED[0]),
        .clk0(clk0));
  design_1_Game_0_0_Debouncer_2 Debouncer3
       (.Q1(Q1_5),
        .Q1_1(Q1),
        .Q1_2(Q1_3),
        .Q2(Q2_4),
        .Q2_0(Q2),
        .Q2_3(Q2_2),
        .Q_reg(Q_reg_0),
        .btns(NLW_Debouncer3_btns_UNCONNECTED[0]),
        .buff_reg(Debouncer2_n_2),
        .click(click),
        .clk0(clk0),
        .\step_reg[0] (\step_reg[0]_3 ),
        .\step_reg[0]_0 (\step_reg[0]_4 ));
endmodule

(* ORIG_REF_NAME = "Game" *) 
module design_1_Game_0_0_Game
   (clk0,
    sm_s0,
    data0,
    btns,
    active_g,
    result,
    led);
  input clk0;
  input [2:0]sm_s0;
  input [31:0]data0;
  input [3:0]btns;
  output active_g;
  output result;
  output [3:0]led;

  wire Comparer0_n_0;
  wire Comparer0_n_10;
  wire Comparer0_n_11;
  wire Comparer0_n_12;
  wire Comparer0_n_13;
  wire Comparer0_n_3;
  wire Comparer0_n_4;
  wire Comparer0_n_5;
  wire Comparer0_n_7;
  wire Comparer0_n_8;
  wire Comparer0_n_9;
  wire GDebouncer0_n_0;
  wire GDebouncer0_n_1;
  wire GDebouncer0_n_3;
  wire GDebouncer0_n_4;
  wire LedShow0_n_1;
  wire active_g;
  wire click;
  wire clk0;
  wire complete;
  wire complete_g;
  wire complete_l;
  wire [31:0]data0;
  wire [3:0]led;
  wire p_0_in;
  wire result_i_2_n_0;
  wire [2:0]sm_s0;
  wire \state_reg_n_0_[0] ;
  wire \state_reg_n_0_[1] ;
  wire [3:0]sublevel;
  wire \sublevel0[0]_i_1_n_0 ;
  wire \sublevel0[1]_i_1_n_0 ;
  wire \sublevel0[2]_i_1_n_0 ;
  wire \sublevel0[3]_i_3_n_0 ;
  wire NLW_Comparer0_result_UNCONNECTED;
  wire NLW_Comparer0_result_reg_UNCONNECTED;
  wire [14:1]NLW_Comparer0_data0_UNCONNECTED;
  wire [2:0]NLW_Comparer0_sm_s0_UNCONNECTED;
  wire [3:0]NLW_GDebouncer0_btns_UNCONNECTED;
  wire [14:1]NLW_LedShow0_data0_UNCONNECTED;

  design_1_Game_0_0_Comparer Comparer0
       (.CO(Comparer0_n_0),
        .E(Comparer0_n_13),
        .Q(sublevel),
        .SR(Comparer0_n_7),
        .active_g(active_g),
        .buff_reg_0(Comparer0_n_5),
        .click(click),
        .complete(complete),
        .complete_g(complete_g),
        .complete_g_reg(Comparer0_n_12),
        .complete_g_reg_0(result_i_2_n_0),
        .complete_l(complete_l),
        .data0({data0[31:15],NLW_Comparer0_data0_UNCONNECTED[14],data0[13:2],NLW_Comparer0_data0_UNCONNECTED[1],data0[0]}),
        .\opt_reg[1]_0 (GDebouncer0_n_3),
        .\opt_reg[1]_1 (GDebouncer0_n_0),
        .\opt_reg[1]_2 (GDebouncer0_n_1),
        .result(NLW_Comparer0_result_UNCONNECTED),
        .result_reg(NLW_Comparer0_result_reg_UNCONNECTED),
        .sm_s0(NLW_Comparer0_sm_s0_UNCONNECTED[2:0]),
        .\state_reg[0] (Comparer0_n_3),
        .\state_reg[0]_0 (\state_reg_n_0_[0] ),
        .\state_reg[0]_1 (LedShow0_n_1),
        .\state_reg[1] (Comparer0_n_4),
        .\state_reg[1]_0 (\state_reg_n_0_[1] ),
        .\step_reg[0]_0 (Comparer0_n_8),
        .\step_reg[0]_1 (Comparer0_n_9),
        .\step_reg[0]_2 (Comparer0_n_10),
        .\step_reg[0]_3 (Comparer0_n_11),
        .\step_reg[0]_4 (GDebouncer0_n_4),
        .\step_reg[31]_0 (p_0_in));
  design_1_Game_0_0_GDebouncer GDebouncer0
       (.CO(Comparer0_n_0),
        .Q_reg(GDebouncer0_n_0),
        .Q_reg_0(GDebouncer0_n_3),
        .Q_reg_1(GDebouncer0_n_4),
        .btns(NLW_GDebouncer0_btns_UNCONNECTED[3:0]),
        .click(click),
        .clk0(clk0),
        .complete(complete),
        .\state_reg[0] (GDebouncer0_n_1),
        .\step_reg[0] (Comparer0_n_9),
        .\step_reg[0]_0 (Comparer0_n_8),
        .\step_reg[0]_1 (\state_reg_n_0_[0] ),
        .\step_reg[0]_2 (\state_reg_n_0_[1] ),
        .\step_reg[0]_3 (Comparer0_n_11),
        .\step_reg[0]_4 (Comparer0_n_10),
        .\step_reg[0]_5 (p_0_in));
  design_1_Game_0_0_LedShow LedShow0
       (.Q(sublevel),
        .buff_reg_0(\state_reg_n_0_[0] ),
        .buff_reg_1(\state_reg_n_0_[1] ),
        .clk0(clk0),
        .complete_l(complete_l),
        .data0({data0[31:15],NLW_LedShow0_data0_UNCONNECTED[14],data0[13:2],NLW_LedShow0_data0_UNCONNECTED[1],data0[0]}),
        .led(led),
        .sm_s0(sm_s0),
        .sm_s0_2_sp_1(LedShow0_n_1));
  FDRE #(
    .INIT(1'b0)) 
    buff_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Comparer0_n_5),
        .Q(active_g),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    complete_g_reg
       (.C(clk0),
        .CE(1'b1),
        .D(Comparer0_n_12),
        .Q(complete_g),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0002)) 
    result_i_2
       (.I0(sublevel[3]),
        .I1(sublevel[0]),
        .I2(sublevel[1]),
        .I3(sublevel[2]),
        .O(result_i_2_n_0));
  FDRE #(
    .INIT(1'b1)) 
    \state_reg[0] 
       (.C(clk0),
        .CE(1'b1),
        .D(Comparer0_n_3),
        .Q(\state_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(clk0),
        .CE(1'b1),
        .D(Comparer0_n_4),
        .Q(\state_reg_n_0_[1] ),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \sublevel0[0]_i_1 
       (.I0(sublevel[0]),
        .O(\sublevel0[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \sublevel0[1]_i_1 
       (.I0(sublevel[0]),
        .I1(sublevel[1]),
        .O(\sublevel0[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \sublevel0[2]_i_1 
       (.I0(sublevel[2]),
        .I1(sublevel[1]),
        .I2(sublevel[0]),
        .O(\sublevel0[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7E80)) 
    \sublevel0[3]_i_3 
       (.I0(sublevel[1]),
        .I1(sublevel[2]),
        .I2(sublevel[0]),
        .I3(sublevel[3]),
        .O(\sublevel0[3]_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \sublevel0_reg[0] 
       (.C(clk0),
        .CE(Comparer0_n_13),
        .D(\sublevel0[0]_i_1_n_0 ),
        .Q(sublevel[0]),
        .S(Comparer0_n_7));
  FDRE #(
    .INIT(1'b0)) 
    \sublevel0_reg[1] 
       (.C(clk0),
        .CE(Comparer0_n_13),
        .D(\sublevel0[1]_i_1_n_0 ),
        .Q(sublevel[1]),
        .R(Comparer0_n_7));
  FDRE #(
    .INIT(1'b0)) 
    \sublevel0_reg[2] 
       (.C(clk0),
        .CE(Comparer0_n_13),
        .D(\sublevel0[2]_i_1_n_0 ),
        .Q(sublevel[2]),
        .R(Comparer0_n_7));
  FDRE #(
    .INIT(1'b0)) 
    \sublevel0_reg[3] 
       (.C(clk0),
        .CE(Comparer0_n_13),
        .D(\sublevel0[3]_i_3_n_0 ),
        .Q(sublevel[3]),
        .R(Comparer0_n_7));
endmodule

(* ORIG_REF_NAME = "LedShow" *) 
module design_1_Game_0_0_LedShow
   (complete_l,
    sm_s0_2_sp_1,
    led,
    clk0,
    buff_reg_0,
    buff_reg_1,
    sm_s0,
    Q,
    data0);
  output complete_l;
  output sm_s0_2_sp_1;
  output [3:0]led;
  input clk0;
  input buff_reg_0;
  input buff_reg_1;
  input [2:0]sm_s0;
  input [3:0]Q;
  input [31:0]data0;

  wire [3:0]Q;
  wire \_inferred__0/i__carry__0_n_0 ;
  wire \_inferred__0/i__carry__1_n_0 ;
  wire \_inferred__0/i__carry__2_n_0 ;
  wire \_inferred__0/i__carry__3_n_0 ;
  wire \_inferred__0/i__carry__4_n_0 ;
  wire \_inferred__0/i__carry__5_n_0 ;
  wire \_inferred__0/i__carry__6_n_0 ;
  wire \_inferred__0/i__carry_n_0 ;
  wire active1;
  wire \active1_inferred__0/i__carry__0_n_0 ;
  wire \active1_inferred__0/i__carry_n_0 ;
  wire buff_i_1_n_0;
  wire buff_reg_0;
  wire buff_reg_1;
  wire clk0;
  wire complete_l;
  wire counter10;
  wire \counter1[0]_i_1_n_0 ;
  wire \counter1[0]_i_4_n_0 ;
  wire [31:0]counter1_reg;
  wire \counter1_reg[0]_i_3_n_0 ;
  wire \counter1_reg[0]_i_3_n_4 ;
  wire \counter1_reg[0]_i_3_n_5 ;
  wire \counter1_reg[0]_i_3_n_6 ;
  wire \counter1_reg[0]_i_3_n_7 ;
  wire \counter1_reg[12]_i_1_n_0 ;
  wire \counter1_reg[12]_i_1_n_4 ;
  wire \counter1_reg[12]_i_1_n_5 ;
  wire \counter1_reg[12]_i_1_n_6 ;
  wire \counter1_reg[12]_i_1_n_7 ;
  wire \counter1_reg[16]_i_1_n_0 ;
  wire \counter1_reg[16]_i_1_n_4 ;
  wire \counter1_reg[16]_i_1_n_5 ;
  wire \counter1_reg[16]_i_1_n_6 ;
  wire \counter1_reg[16]_i_1_n_7 ;
  wire \counter1_reg[20]_i_1_n_0 ;
  wire \counter1_reg[20]_i_1_n_4 ;
  wire \counter1_reg[20]_i_1_n_5 ;
  wire \counter1_reg[20]_i_1_n_6 ;
  wire \counter1_reg[20]_i_1_n_7 ;
  wire \counter1_reg[24]_i_1_n_0 ;
  wire \counter1_reg[24]_i_1_n_4 ;
  wire \counter1_reg[24]_i_1_n_5 ;
  wire \counter1_reg[24]_i_1_n_6 ;
  wire \counter1_reg[24]_i_1_n_7 ;
  wire \counter1_reg[28]_i_1_n_4 ;
  wire \counter1_reg[28]_i_1_n_5 ;
  wire \counter1_reg[28]_i_1_n_6 ;
  wire \counter1_reg[28]_i_1_n_7 ;
  wire \counter1_reg[4]_i_1_n_0 ;
  wire \counter1_reg[4]_i_1_n_4 ;
  wire \counter1_reg[4]_i_1_n_5 ;
  wire \counter1_reg[4]_i_1_n_6 ;
  wire \counter1_reg[4]_i_1_n_7 ;
  wire \counter1_reg[8]_i_1_n_0 ;
  wire \counter1_reg[8]_i_1_n_4 ;
  wire \counter1_reg[8]_i_1_n_5 ;
  wire \counter1_reg[8]_i_1_n_6 ;
  wire \counter1_reg[8]_i_1_n_7 ;
  wire [31:0]counter2;
  wire counter20;
  wire counter21_carry__0_i_1_n_0;
  wire counter21_carry__0_i_2_n_0;
  wire counter21_carry__0_i_3_n_0;
  wire counter21_carry__0_i_4_n_0;
  wire counter21_carry__0_n_0;
  wire counter21_carry__1_i_1_n_0;
  wire counter21_carry__1_i_2_n_0;
  wire counter21_carry__1_i_3_n_0;
  wire counter21_carry__1_i_4_n_0;
  wire counter21_carry__1_n_0;
  wire counter21_carry__2_i_1_n_0;
  wire counter21_carry__2_i_2_n_0;
  wire counter21_carry__2_i_3_n_0;
  wire counter21_carry__2_i_4_n_0;
  wire counter21_carry__2_n_0;
  wire counter21_carry_i_1_n_0;
  wire counter21_carry_i_2_n_0;
  wire counter21_carry_i_3_n_0;
  wire counter21_carry_i_4_n_0;
  wire counter21_carry_i_5_n_0;
  wire counter21_carry_i_6_n_0;
  wire counter21_carry_n_0;
  wire \counter21_inferred__0/i__carry__0_n_0 ;
  wire \counter21_inferred__0/i__carry__1_n_0 ;
  wire \counter21_inferred__0/i__carry__2_n_3 ;
  wire \counter21_inferred__0/i__carry_n_0 ;
  wire [27:5]counter22;
  wire counter22_carry__0_i_1_n_0;
  wire counter22_carry__0_i_2_n_0;
  wire counter22_carry__0_i_3_n_0;
  wire counter22_carry__0_i_4_n_0;
  wire counter22_carry__0_i_5_n_0;
  wire counter22_carry__0_i_6_n_0;
  wire counter22_carry__0_n_0;
  wire counter22_carry__1_i_1_n_0;
  wire counter22_carry__1_i_2_n_0;
  wire counter22_carry__1_i_4_n_0;
  wire counter22_carry__1_i_6_n_0;
  wire counter22_carry__1_i_7_n_0;
  wire counter22_carry__1_n_0;
  wire counter22_carry__2_i_1_n_0;
  wire counter22_carry__2_i_2_n_0;
  wire counter22_carry__2_i_3_n_0;
  wire counter22_carry__2_i_4_n_0;
  wire counter22_carry__2_i_5_n_0;
  wire counter22_carry__2_i_6_n_0;
  wire counter22_carry__2_i_7_n_0;
  wire counter22_carry__2_n_0;
  wire counter22_carry__3_i_1_n_0;
  wire counter22_carry__3_i_4_n_0;
  wire counter22_carry__3_i_6_n_0;
  wire counter22_carry__3_i_7_n_0;
  wire counter22_carry__3_n_0;
  wire counter22_carry__4_i_2_n_0;
  wire counter22_carry_i_1_n_0;
  wire counter22_carry_i_2_n_0;
  wire counter22_carry_i_3_n_0;
  wire counter22_carry_i_4_n_0;
  wire counter22_carry_i_5_n_0;
  wire counter22_carry_n_0;
  wire \counter2[31]_i_1_n_0 ;
  wire \counter2[3]_i_3_n_0 ;
  wire [31:0]counter2__0;
  wire \counter2_reg[11]_i_2_n_0 ;
  wire \counter2_reg[15]_i_2_n_0 ;
  wire \counter2_reg[19]_i_2_n_0 ;
  wire \counter2_reg[23]_i_2_n_0 ;
  wire \counter2_reg[27]_i_2_n_0 ;
  wire \counter2_reg[3]_i_2_n_0 ;
  wire \counter2_reg[7]_i_2_n_0 ;
  wire \counter2_reg_n_0_[30] ;
  wire \counter2_reg_n_0_[31] ;
  wire [31:0]data0;
  wire i__carry__0_i_1__0_n_0;
  wire i__carry__0_i_1__1_n_0;
  wire i__carry__0_i_1__2_n_0;
  wire i__carry__0_i_2__0_n_0;
  wire i__carry__0_i_2__1_n_0;
  wire i__carry__0_i_2__2_n_0;
  wire i__carry__0_i_3__0_n_0;
  wire i__carry__0_i_3__1_n_0;
  wire i__carry__0_i_3__2_n_0;
  wire i__carry__0_i_4__0_n_0;
  wire i__carry__0_i_4__1_n_0;
  wire i__carry__0_i_4__2_n_0;
  wire i__carry__0_i_5_n_0;
  wire i__carry__0_i_6_n_0;
  wire i__carry__0_i_7_n_0;
  wire i__carry__0_i_8_n_0;
  wire i__carry__1_i_1__0_n_0;
  wire i__carry__1_i_1__1_n_0;
  wire i__carry__1_i_1__2_n_0;
  wire i__carry__1_i_2__0_n_0;
  wire i__carry__1_i_2__1_n_0;
  wire i__carry__1_i_2__2_n_0;
  wire i__carry__1_i_3__0_n_0;
  wire i__carry__1_i_3__1_n_0;
  wire i__carry__1_i_3__2_n_0;
  wire i__carry__1_i_4__0_n_0;
  wire i__carry__1_i_4_n_0;
  wire i__carry__1_i_5_n_0;
  wire i__carry__1_i_6_n_0;
  wire i__carry__2_i_1__0_n_0;
  wire i__carry__2_i_1_n_0;
  wire i__carry__2_i_2_n_0;
  wire i__carry__2_i_3_n_0;
  wire i__carry__2_i_4_n_0;
  wire i__carry__3_i_1_n_0;
  wire i__carry__3_i_2_n_0;
  wire i__carry__3_i_3_n_0;
  wire i__carry__3_i_4_n_0;
  wire i__carry__4_i_1_n_0;
  wire i__carry__4_i_2_n_0;
  wire i__carry__4_i_3_n_0;
  wire i__carry__4_i_4_n_0;
  wire i__carry__5_i_1_n_0;
  wire i__carry__5_i_2_n_0;
  wire i__carry__5_i_3_n_0;
  wire i__carry__5_i_4_n_0;
  wire i__carry__6_i_1_n_0;
  wire i__carry__6_i_2_n_0;
  wire i__carry__6_i_3_n_0;
  wire i__carry__6_i_4_n_0;
  wire i__carry__6_i_5_n_0;
  wire i__carry_i_1__0_n_0;
  wire i__carry_i_1__1_n_0;
  wire i__carry_i_1__2_n_0;
  wire i__carry_i_2__0_n_0;
  wire i__carry_i_2__1_n_0;
  wire i__carry_i_2__2_n_0;
  wire i__carry_i_3__0_n_0;
  wire i__carry_i_3__1_n_0;
  wire i__carry_i_3__2_n_0;
  wire i__carry_i_4__0_n_0;
  wire i__carry_i_4__1_n_0;
  wire i__carry_i_4__2_n_0;
  wire i__carry_i_5__0_n_0;
  wire i__carry_i_5_n_0;
  wire i__carry_i_6__0_n_0;
  wire i__carry_i_7_n_0;
  wire [3:0]led;
  wire leds0;
  wire [31:2]leds1;
  wire \leds[0]_i_1_n_0 ;
  wire \leds[0]_i_2_n_0 ;
  wire \leds[0]_i_3_n_0 ;
  wire \leds[1]_i_1_n_0 ;
  wire \leds[1]_i_2_n_0 ;
  wire \leds[1]_i_3_n_0 ;
  wire \leds[2]_i_1_n_0 ;
  wire \leds[2]_i_2_n_0 ;
  wire \leds[2]_i_3_n_0 ;
  wire \leds[3]_i_2_n_0 ;
  wire \leds[3]_i_4_n_0 ;
  wire \leds[3]_i_5_n_0 ;
  wire \leds[3]_i_6_n_0 ;
  wire \leds[3]_i_7_n_0 ;
  wire \leds[3]_i_8_n_0 ;
  wire [2:0]sm_s0;
  wire sm_s0_2_sn_1;
  wire [26:13]speed;
  wire [2:0]\NLW__inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW__inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [2:0]\NLW__inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [2:0]\NLW__inferred__0/i__carry__2_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry__2_O_UNCONNECTED ;
  wire [2:0]\NLW__inferred__0/i__carry__3_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry__3_O_UNCONNECTED ;
  wire [2:0]\NLW__inferred__0/i__carry__4_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry__4_O_UNCONNECTED ;
  wire [2:0]\NLW__inferred__0/i__carry__5_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry__5_O_UNCONNECTED ;
  wire [2:0]\NLW__inferred__0/i__carry__6_CO_UNCONNECTED ;
  wire [3:0]\NLW__inferred__0/i__carry__6_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [2:0]\NLW_counter1_reg[0]_i_3_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter1_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter1_reg[16]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter1_reg[20]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter1_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter1_reg[28]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter1_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter1_reg[8]_i_1_CO_UNCONNECTED ;
  wire [2:0]NLW_counter21_carry_CO_UNCONNECTED;
  wire [3:0]NLW_counter21_carry_O_UNCONNECTED;
  wire [2:0]NLW_counter21_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_counter21_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_counter21_carry__1_CO_UNCONNECTED;
  wire [3:0]NLW_counter21_carry__1_O_UNCONNECTED;
  wire [2:0]NLW_counter21_carry__2_CO_UNCONNECTED;
  wire [3:0]NLW_counter21_carry__2_O_UNCONNECTED;
  wire [2:0]\NLW_counter21_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter21_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_counter21_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter21_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [2:0]\NLW_counter21_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter21_inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [3:1]\NLW_counter21_inferred__0/i__carry__2_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter21_inferred__0/i__carry__2_O_UNCONNECTED ;
  wire [2:0]NLW_counter22_carry_CO_UNCONNECTED;
  wire [2:0]NLW_counter22_carry__0_CO_UNCONNECTED;
  wire [2:0]NLW_counter22_carry__1_CO_UNCONNECTED;
  wire [2:0]NLW_counter22_carry__2_CO_UNCONNECTED;
  wire [2:0]NLW_counter22_carry__3_CO_UNCONNECTED;
  wire [3:0]NLW_counter22_carry__4_CO_UNCONNECTED;
  wire [3:2]NLW_counter22_carry__4_O_UNCONNECTED;
  wire [2:0]\NLW_counter2_reg[11]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter2_reg[15]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter2_reg[19]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter2_reg[23]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter2_reg[27]_i_2_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter2_reg[31]_i_4_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter2_reg[3]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter2_reg[7]_i_2_CO_UNCONNECTED ;

  assign sm_s0_2_sp_1 = sm_s0_2_sn_1;
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\_inferred__0/i__carry_n_0 ,\NLW__inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI(counter1_reg[3:0]),
        .O(\NLW__inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1__2_n_0,i__carry_i_2__0_n_0,i__carry_i_3__0_n_0,i__carry_i_4__2_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry__0 
       (.CI(\_inferred__0/i__carry_n_0 ),
        .CO({\_inferred__0/i__carry__0_n_0 ,\NLW__inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(counter1_reg[7:4]),
        .O(\NLW__inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_1__2_n_0,i__carry__0_i_2__2_n_0,i__carry__0_i_3__2_n_0,i__carry__0_i_4__2_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry__1 
       (.CI(\_inferred__0/i__carry__0_n_0 ),
        .CO({\_inferred__0/i__carry__1_n_0 ,\NLW__inferred__0/i__carry__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(counter1_reg[11:8]),
        .O(\NLW__inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({i__carry__1_i_1__2_n_0,i__carry__1_i_2__2_n_0,i__carry__1_i_3__2_n_0,i__carry__1_i_4__0_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry__2 
       (.CI(\_inferred__0/i__carry__1_n_0 ),
        .CO({\_inferred__0/i__carry__2_n_0 ,\NLW__inferred__0/i__carry__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(counter1_reg[15:12]),
        .O(\NLW__inferred__0/i__carry__2_O_UNCONNECTED [3:0]),
        .S({i__carry__2_i_1__0_n_0,i__carry__2_i_2_n_0,i__carry__2_i_3_n_0,i__carry__2_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry__3 
       (.CI(\_inferred__0/i__carry__2_n_0 ),
        .CO({\_inferred__0/i__carry__3_n_0 ,\NLW__inferred__0/i__carry__3_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(counter1_reg[19:16]),
        .O(\NLW__inferred__0/i__carry__3_O_UNCONNECTED [3:0]),
        .S({i__carry__3_i_1_n_0,i__carry__3_i_2_n_0,i__carry__3_i_3_n_0,i__carry__3_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry__4 
       (.CI(\_inferred__0/i__carry__3_n_0 ),
        .CO({\_inferred__0/i__carry__4_n_0 ,\NLW__inferred__0/i__carry__4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(counter1_reg[23:20]),
        .O(\NLW__inferred__0/i__carry__4_O_UNCONNECTED [3:0]),
        .S({i__carry__4_i_1_n_0,i__carry__4_i_2_n_0,i__carry__4_i_3_n_0,i__carry__4_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry__5 
       (.CI(\_inferred__0/i__carry__4_n_0 ),
        .CO({\_inferred__0/i__carry__5_n_0 ,\NLW__inferred__0/i__carry__5_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(counter1_reg[27:24]),
        .O(\NLW__inferred__0/i__carry__5_O_UNCONNECTED [3:0]),
        .S({i__carry__5_i_1_n_0,i__carry__5_i_2_n_0,i__carry__5_i_3_n_0,i__carry__5_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \_inferred__0/i__carry__6 
       (.CI(\_inferred__0/i__carry__5_n_0 ),
        .CO({\_inferred__0/i__carry__6_n_0 ,\NLW__inferred__0/i__carry__6_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__6_i_1_n_0,counter1_reg[30:28]}),
        .O(\NLW__inferred__0/i__carry__6_O_UNCONNECTED [3:0]),
        .S({i__carry__6_i_2_n_0,i__carry__6_i_3_n_0,i__carry__6_i_4_n_0,i__carry__6_i_5_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\active1_inferred__0/i__carry_n_0 ,\NLW_active1_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_active1_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1__1_n_0,i__carry_i_2__2_n_0,i__carry_i_3__2_n_0,i__carry_i_4__1_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__0/i__carry__0 
       (.CI(\active1_inferred__0/i__carry_n_0 ),
        .CO({\active1_inferred__0/i__carry__0_n_0 ,\NLW_active1_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_active1_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_1__1_n_0,i__carry__0_i_2__1_n_0,i__carry__0_i_3__1_n_0,i__carry__0_i_4__1_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__0/i__carry__1 
       (.CI(\active1_inferred__0/i__carry__0_n_0 ),
        .CO({\NLW_active1_inferred__0/i__carry__1_CO_UNCONNECTED [3],active1,\NLW_active1_inferred__0/i__carry__1_CO_UNCONNECTED [1:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_active1_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({1'b0,i__carry__1_i_1__1_n_0,i__carry__1_i_2__1_n_0,i__carry__1_i_3__1_n_0}));
  LUT5 #(
    .INIT(32'hA0A0AEA0)) 
    buff_i_1
       (.I0(complete_l),
        .I1(active1),
        .I2(sm_s0_2_sn_1),
        .I3(buff_reg_0),
        .I4(buff_reg_1),
        .O(buff_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    buff_reg
       (.C(clk0),
        .CE(1'b1),
        .D(buff_i_1_n_0),
        .Q(complete_l),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAABAAAAAAAAAA)) 
    \counter1[0]_i_1 
       (.I0(\leds[3]_i_4_n_0 ),
        .I1(complete_l),
        .I2(sm_s0_2_sn_1),
        .I3(counter21_carry__2_n_0),
        .I4(\counter21_inferred__0/i__carry__2_n_3 ),
        .I5(\_inferred__0/i__carry__6_n_0 ),
        .O(\counter1[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \counter1[0]_i_2 
       (.I0(counter21_carry__2_n_0),
        .I1(buff_reg_0),
        .I2(buff_reg_1),
        .I3(complete_l),
        .I4(sm_s0_2_sn_1),
        .O(counter10));
  LUT1 #(
    .INIT(2'h1)) 
    \counter1[0]_i_4 
       (.I0(counter1_reg[0]),
        .O(\counter1[0]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[0] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[0]_i_3_n_7 ),
        .Q(counter1_reg[0]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\counter1_reg[0]_i_3_n_0 ,\NLW_counter1_reg[0]_i_3_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter1_reg[0]_i_3_n_4 ,\counter1_reg[0]_i_3_n_5 ,\counter1_reg[0]_i_3_n_6 ,\counter1_reg[0]_i_3_n_7 }),
        .S({counter1_reg[3:1],\counter1[0]_i_4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[10] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[8]_i_1_n_5 ),
        .Q(counter1_reg[10]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[11] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[8]_i_1_n_4 ),
        .Q(counter1_reg[11]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[12] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[12]_i_1_n_7 ),
        .Q(counter1_reg[12]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[12]_i_1 
       (.CI(\counter1_reg[8]_i_1_n_0 ),
        .CO({\counter1_reg[12]_i_1_n_0 ,\NLW_counter1_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter1_reg[12]_i_1_n_4 ,\counter1_reg[12]_i_1_n_5 ,\counter1_reg[12]_i_1_n_6 ,\counter1_reg[12]_i_1_n_7 }),
        .S(counter1_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[13] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[12]_i_1_n_6 ),
        .Q(counter1_reg[13]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[14] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[12]_i_1_n_5 ),
        .Q(counter1_reg[14]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[15] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[12]_i_1_n_4 ),
        .Q(counter1_reg[15]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[16] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[16]_i_1_n_7 ),
        .Q(counter1_reg[16]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[16]_i_1 
       (.CI(\counter1_reg[12]_i_1_n_0 ),
        .CO({\counter1_reg[16]_i_1_n_0 ,\NLW_counter1_reg[16]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter1_reg[16]_i_1_n_4 ,\counter1_reg[16]_i_1_n_5 ,\counter1_reg[16]_i_1_n_6 ,\counter1_reg[16]_i_1_n_7 }),
        .S(counter1_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[17] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[16]_i_1_n_6 ),
        .Q(counter1_reg[17]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[18] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[16]_i_1_n_5 ),
        .Q(counter1_reg[18]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[19] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[16]_i_1_n_4 ),
        .Q(counter1_reg[19]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[1] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[0]_i_3_n_6 ),
        .Q(counter1_reg[1]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[20] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[20]_i_1_n_7 ),
        .Q(counter1_reg[20]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[20]_i_1 
       (.CI(\counter1_reg[16]_i_1_n_0 ),
        .CO({\counter1_reg[20]_i_1_n_0 ,\NLW_counter1_reg[20]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter1_reg[20]_i_1_n_4 ,\counter1_reg[20]_i_1_n_5 ,\counter1_reg[20]_i_1_n_6 ,\counter1_reg[20]_i_1_n_7 }),
        .S(counter1_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[21] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[20]_i_1_n_6 ),
        .Q(counter1_reg[21]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[22] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[20]_i_1_n_5 ),
        .Q(counter1_reg[22]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[23] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[20]_i_1_n_4 ),
        .Q(counter1_reg[23]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[24] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[24]_i_1_n_7 ),
        .Q(counter1_reg[24]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[24]_i_1 
       (.CI(\counter1_reg[20]_i_1_n_0 ),
        .CO({\counter1_reg[24]_i_1_n_0 ,\NLW_counter1_reg[24]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter1_reg[24]_i_1_n_4 ,\counter1_reg[24]_i_1_n_5 ,\counter1_reg[24]_i_1_n_6 ,\counter1_reg[24]_i_1_n_7 }),
        .S(counter1_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[25] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[24]_i_1_n_6 ),
        .Q(counter1_reg[25]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[26] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[24]_i_1_n_5 ),
        .Q(counter1_reg[26]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[27] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[24]_i_1_n_4 ),
        .Q(counter1_reg[27]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[28] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[28]_i_1_n_7 ),
        .Q(counter1_reg[28]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[28]_i_1 
       (.CI(\counter1_reg[24]_i_1_n_0 ),
        .CO(\NLW_counter1_reg[28]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter1_reg[28]_i_1_n_4 ,\counter1_reg[28]_i_1_n_5 ,\counter1_reg[28]_i_1_n_6 ,\counter1_reg[28]_i_1_n_7 }),
        .S(counter1_reg[31:28]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[29] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[28]_i_1_n_6 ),
        .Q(counter1_reg[29]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[2] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[0]_i_3_n_5 ),
        .Q(counter1_reg[2]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[30] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[28]_i_1_n_5 ),
        .Q(counter1_reg[30]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[31] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[28]_i_1_n_4 ),
        .Q(counter1_reg[31]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[3] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[0]_i_3_n_4 ),
        .Q(counter1_reg[3]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[4] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[4]_i_1_n_7 ),
        .Q(counter1_reg[4]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[4]_i_1 
       (.CI(\counter1_reg[0]_i_3_n_0 ),
        .CO({\counter1_reg[4]_i_1_n_0 ,\NLW_counter1_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter1_reg[4]_i_1_n_4 ,\counter1_reg[4]_i_1_n_5 ,\counter1_reg[4]_i_1_n_6 ,\counter1_reg[4]_i_1_n_7 }),
        .S(counter1_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[5] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[4]_i_1_n_6 ),
        .Q(counter1_reg[5]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[6] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[4]_i_1_n_5 ),
        .Q(counter1_reg[6]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[7] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[4]_i_1_n_4 ),
        .Q(counter1_reg[7]),
        .R(\counter1[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[8] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[8]_i_1_n_7 ),
        .Q(counter1_reg[8]),
        .R(\counter1[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter1_reg[8]_i_1 
       (.CI(\counter1_reg[4]_i_1_n_0 ),
        .CO({\counter1_reg[8]_i_1_n_0 ,\NLW_counter1_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter1_reg[8]_i_1_n_4 ,\counter1_reg[8]_i_1_n_5 ,\counter1_reg[8]_i_1_n_6 ,\counter1_reg[8]_i_1_n_7 }),
        .S(counter1_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_reg[9] 
       (.C(clk0),
        .CE(counter10),
        .D(\counter1_reg[8]_i_1_n_6 ),
        .Q(counter1_reg[9]),
        .R(\counter1[0]_i_1_n_0 ));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter21_carry
       (.CI(1'b0),
        .CO({counter21_carry_n_0,NLW_counter21_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,counter21_carry_i_1_n_0,counter21_carry_i_2_n_0}),
        .O(NLW_counter21_carry_O_UNCONNECTED[3:0]),
        .S({counter21_carry_i_3_n_0,counter21_carry_i_4_n_0,counter21_carry_i_5_n_0,counter21_carry_i_6_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter21_carry__0
       (.CI(counter21_carry_n_0),
        .CO({counter21_carry__0_n_0,NLW_counter21_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_counter21_carry__0_O_UNCONNECTED[3:0]),
        .S({counter21_carry__0_i_1_n_0,counter21_carry__0_i_2_n_0,counter21_carry__0_i_3_n_0,counter21_carry__0_i_4_n_0}));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__0_i_1
       (.I0(leds1[17]),
        .I1(leds1[16]),
        .O(counter21_carry__0_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__0_i_2
       (.I0(leds1[15]),
        .I1(leds1[14]),
        .O(counter21_carry__0_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__0_i_3
       (.I0(leds1[13]),
        .I1(leds1[12]),
        .O(counter21_carry__0_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__0_i_4
       (.I0(leds1[11]),
        .I1(leds1[10]),
        .O(counter21_carry__0_i_4_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter21_carry__1
       (.CI(counter21_carry__0_n_0),
        .CO({counter21_carry__1_n_0,NLW_counter21_carry__1_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_counter21_carry__1_O_UNCONNECTED[3:0]),
        .S({counter21_carry__1_i_1_n_0,counter21_carry__1_i_2_n_0,counter21_carry__1_i_3_n_0,counter21_carry__1_i_4_n_0}));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__1_i_1
       (.I0(leds1[25]),
        .I1(leds1[24]),
        .O(counter21_carry__1_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__1_i_2
       (.I0(leds1[23]),
        .I1(leds1[22]),
        .O(counter21_carry__1_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__1_i_3
       (.I0(leds1[21]),
        .I1(leds1[20]),
        .O(counter21_carry__1_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__1_i_4
       (.I0(leds1[19]),
        .I1(leds1[18]),
        .O(counter21_carry__1_i_4_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter21_carry__2
       (.CI(counter21_carry__1_n_0),
        .CO({counter21_carry__2_n_0,NLW_counter21_carry__2_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({\counter2_reg_n_0_[31] ,1'b0,1'b0,1'b0}),
        .O(NLW_counter21_carry__2_O_UNCONNECTED[3:0]),
        .S({counter21_carry__2_i_1_n_0,counter21_carry__2_i_2_n_0,counter21_carry__2_i_3_n_0,counter21_carry__2_i_4_n_0}));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__2_i_1
       (.I0(\counter2_reg_n_0_[31] ),
        .I1(\counter2_reg_n_0_[30] ),
        .O(counter21_carry__2_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__2_i_2
       (.I0(leds1[31]),
        .I1(leds1[30]),
        .O(counter21_carry__2_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__2_i_3
       (.I0(leds1[29]),
        .I1(leds1[28]),
        .O(counter21_carry__2_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry__2_i_4
       (.I0(leds1[27]),
        .I1(leds1[26]),
        .O(counter21_carry__2_i_4_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    counter21_carry_i_1
       (.I0(Q[3]),
        .I1(leds1[5]),
        .I2(Q[2]),
        .I3(leds1[4]),
        .O(counter21_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    counter21_carry_i_2
       (.I0(Q[1]),
        .I1(leds1[3]),
        .I2(Q[0]),
        .I3(leds1[2]),
        .O(counter21_carry_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry_i_3
       (.I0(leds1[9]),
        .I1(leds1[8]),
        .O(counter21_carry_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    counter21_carry_i_4
       (.I0(leds1[7]),
        .I1(leds1[6]),
        .O(counter21_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    counter21_carry_i_5
       (.I0(leds1[5]),
        .I1(Q[3]),
        .I2(leds1[4]),
        .I3(Q[2]),
        .O(counter21_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    counter21_carry_i_6
       (.I0(leds1[3]),
        .I1(Q[1]),
        .I2(leds1[2]),
        .I3(Q[0]),
        .O(counter21_carry_i_6_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter21_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\counter21_inferred__0/i__carry_n_0 ,\NLW_counter21_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry_i_1__0_n_0,i__carry_i_2__1_n_0,1'b0,i__carry_i_3__1_n_0}),
        .O(\NLW_counter21_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_4__0_n_0,i__carry_i_5_n_0,i__carry_i_6__0_n_0,i__carry_i_7_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter21_inferred__0/i__carry__0 
       (.CI(\counter21_inferred__0/i__carry_n_0 ),
        .CO({\counter21_inferred__0/i__carry__0_n_0 ,\NLW_counter21_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__0_i_1__0_n_0,i__carry__0_i_2__0_n_0,i__carry__0_i_3__0_n_0,i__carry__0_i_4__0_n_0}),
        .O(\NLW_counter21_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_5_n_0,i__carry__0_i_6_n_0,i__carry__0_i_7_n_0,i__carry__0_i_8_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter21_inferred__0/i__carry__1 
       (.CI(\counter21_inferred__0/i__carry__0_n_0 ),
        .CO({\counter21_inferred__0/i__carry__1_n_0 ,\NLW_counter21_inferred__0/i__carry__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,i__carry__1_i_1__0_n_0,i__carry__1_i_2__0_n_0}),
        .O(\NLW_counter21_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({i__carry__1_i_3__0_n_0,i__carry__1_i_4_n_0,i__carry__1_i_5_n_0,i__carry__1_i_6_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  CARRY4 \counter21_inferred__0/i__carry__2 
       (.CI(\counter21_inferred__0/i__carry__1_n_0 ),
        .CO({\NLW_counter21_inferred__0/i__carry__2_CO_UNCONNECTED [3:1],\counter21_inferred__0/i__carry__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,counter1_reg[31]}),
        .O(\NLW_counter21_inferred__0/i__carry__2_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,1'b0,i__carry__2_i_1_n_0}));
  (* OPT_MODIFIED = "PROPCONST SWEEP" *) 
  CARRY4 counter22_carry
       (.CI(1'b0),
        .CO({counter22_carry_n_0,NLW_counter22_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,counter22_carry_i_1_n_0,1'b0}),
        .O(counter22[8:5]),
        .S({counter22_carry_i_2_n_0,counter22_carry_i_3_n_0,counter22_carry_i_4_n_0,counter22_carry_i_5_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter22_carry__0
       (.CI(counter22_carry_n_0),
        .CO({counter22_carry__0_n_0,NLW_counter22_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({counter22_carry__0_i_1_n_0,counter22_carry__0_i_2_n_0,1'b0,1'b0}),
        .O(counter22[12:9]),
        .S({counter22_carry__0_i_3_n_0,counter22_carry__0_i_4_n_0,counter22_carry__0_i_5_n_0,counter22_carry__0_i_6_n_0}));
  LUT3 #(
    .INIT(8'h15)) 
    counter22_carry__0_i_1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(counter22_carry__0_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFF7)) 
    counter22_carry__0_i_2
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(counter22_carry__0_i_2_n_0));
  LUT3 #(
    .INIT(8'hF8)) 
    counter22_carry__0_i_3
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .O(counter22_carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h1000)) 
    counter22_carry__0_i_4
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(counter22_carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h0440)) 
    counter22_carry__0_i_5
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(counter22_carry__0_i_5_n_0));
  LUT3 #(
    .INIT(8'hF8)) 
    counter22_carry__0_i_6
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[3]),
        .O(counter22_carry__0_i_6_n_0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter22_carry__1
       (.CI(counter22_carry__0_n_0),
        .CO({counter22_carry__1_n_0,NLW_counter22_carry__1_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({counter22_carry__1_i_1_n_0,1'b0,counter22_carry__1_i_2_n_0,speed[13]}),
        .O(counter22[16:13]),
        .S({counter22_carry__1_i_4_n_0,speed[15],counter22_carry__1_i_6_n_0,counter22_carry__1_i_7_n_0}));
  LUT3 #(
    .INIT(8'h15)) 
    counter22_carry__1_i_1
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .O(counter22_carry__1_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFBF)) 
    counter22_carry__1_i_2
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(counter22_carry__1_i_2_n_0));
  LUT3 #(
    .INIT(8'hF8)) 
    counter22_carry__1_i_3
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .O(speed[13]));
  LUT3 #(
    .INIT(8'hF8)) 
    counter22_carry__1_i_4
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[3]),
        .O(counter22_carry__1_i_4_n_0));
  LUT4 #(
    .INIT(16'h0440)) 
    counter22_carry__1_i_5
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(speed[15]));
  LUT4 #(
    .INIT(16'h0040)) 
    counter22_carry__1_i_6
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(counter22_carry__1_i_6_n_0));
  LUT3 #(
    .INIT(8'h15)) 
    counter22_carry__1_i_7
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(counter22_carry__1_i_7_n_0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter22_carry__2
       (.CI(counter22_carry__1_n_0),
        .CO({counter22_carry__2_n_0,NLW_counter22_carry__2_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({counter22_carry__2_i_1_n_0,counter22_carry__2_i_2_n_0,counter22_carry__2_i_3_n_0,1'b0}),
        .O(counter22[20:17]),
        .S({counter22_carry__2_i_4_n_0,counter22_carry__2_i_5_n_0,counter22_carry__2_i_6_n_0,counter22_carry__2_i_7_n_0}));
  LUT4 #(
    .INIT(16'h1555)) 
    counter22_carry__2_i_1
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[1]),
        .O(counter22_carry__2_i_1_n_0));
  LUT4 #(
    .INIT(16'hFAF8)) 
    counter22_carry__2_i_2
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(counter22_carry__2_i_2_n_0));
  LUT3 #(
    .INIT(8'hF8)) 
    counter22_carry__2_i_3
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[3]),
        .O(counter22_carry__2_i_3_n_0));
  LUT4 #(
    .INIT(16'hFF80)) 
    counter22_carry__2_i_4
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(counter22_carry__2_i_4_n_0));
  LUT4 #(
    .INIT(16'h0133)) 
    counter22_carry__2_i_5
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(counter22_carry__2_i_5_n_0));
  LUT3 #(
    .INIT(8'h15)) 
    counter22_carry__2_i_6
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .O(counter22_carry__2_i_6_n_0));
  LUT4 #(
    .INIT(16'hFF9F)) 
    counter22_carry__2_i_7
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(counter22_carry__2_i_7_n_0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter22_carry__3
       (.CI(counter22_carry__2_n_0),
        .CO({counter22_carry__3_n_0,NLW_counter22_carry__3_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({counter22_carry__3_i_1_n_0,1'b0,speed[22:21]}),
        .O(counter22[24:21]),
        .S({counter22_carry__3_i_4_n_0,speed[23],counter22_carry__3_i_6_n_0,counter22_carry__3_i_7_n_0}));
  LUT4 #(
    .INIT(16'h1555)) 
    counter22_carry__3_i_1
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[1]),
        .O(counter22_carry__3_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFBF)) 
    counter22_carry__3_i_2
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(speed[22]));
  LUT4 #(
    .INIT(16'hFFF7)) 
    counter22_carry__3_i_3
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(speed[21]));
  LUT4 #(
    .INIT(16'hFF80)) 
    counter22_carry__3_i_4
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(counter22_carry__3_i_4_n_0));
  LUT4 #(
    .INIT(16'hFAF8)) 
    counter22_carry__3_i_5
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(speed[23]));
  LUT4 #(
    .INIT(16'h0040)) 
    counter22_carry__3_i_6
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(counter22_carry__3_i_6_n_0));
  LUT4 #(
    .INIT(16'h1000)) 
    counter22_carry__3_i_7
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(counter22_carry__3_i_7_n_0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 counter22_carry__4
       (.CI(counter22_carry__3_n_0),
        .CO({NLW_counter22_carry__4_CO_UNCONNECTED[3],counter22[27],NLW_counter22_carry__4_CO_UNCONNECTED[1:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_counter22_carry__4_O_UNCONNECTED[3:2],counter22[26:25]}),
        .S({1'b0,1'b1,speed[26],counter22_carry__4_i_2_n_0}));
  LUT4 #(
    .INIT(16'h0133)) 
    counter22_carry__4_i_1
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(speed[26]));
  LUT3 #(
    .INIT(8'h15)) 
    counter22_carry__4_i_2
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .O(counter22_carry__4_i_2_n_0));
  LUT3 #(
    .INIT(8'h15)) 
    counter22_carry_i_1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(counter22_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'hFF9F)) 
    counter22_carry_i_2
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(counter22_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h0040)) 
    counter22_carry_i_3
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(counter22_carry_i_3_n_0));
  LUT3 #(
    .INIT(8'hF8)) 
    counter22_carry_i_4
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .O(counter22_carry_i_4_n_0));
  LUT3 #(
    .INIT(8'hF8)) 
    counter22_carry_i_5
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .O(counter22_carry_i_5_n_0));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[0]_i_1 
       (.I0(counter2__0[0]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[2]),
        .O(counter2[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[10]_i_1 
       (.I0(counter2__0[10]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[12]),
        .O(counter2[10]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[11]_i_1 
       (.I0(counter2__0[11]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[13]),
        .O(counter2[11]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[12]_i_1 
       (.I0(counter2__0[12]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[14]),
        .O(counter2[12]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[13]_i_1 
       (.I0(counter2__0[13]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[15]),
        .O(counter2[13]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[14]_i_1 
       (.I0(counter2__0[14]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[16]),
        .O(counter2[14]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[15]_i_1 
       (.I0(counter2__0[15]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[17]),
        .O(counter2[15]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[16]_i_1 
       (.I0(counter2__0[16]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[18]),
        .O(counter2[16]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[17]_i_1 
       (.I0(counter2__0[17]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[19]),
        .O(counter2[17]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[18]_i_1 
       (.I0(counter2__0[18]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[20]),
        .O(counter2[18]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[19]_i_1 
       (.I0(counter2__0[19]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[21]),
        .O(counter2[19]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[1]_i_1 
       (.I0(counter2__0[1]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[3]),
        .O(counter2[1]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[20]_i_1 
       (.I0(counter2__0[20]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[22]),
        .O(counter2[20]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[21]_i_1 
       (.I0(counter2__0[21]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[23]),
        .O(counter2[21]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[22]_i_1 
       (.I0(counter2__0[22]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[24]),
        .O(counter2[22]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[23]_i_1 
       (.I0(counter2__0[23]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[25]),
        .O(counter2[23]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[24]_i_1 
       (.I0(counter2__0[24]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[26]),
        .O(counter2[24]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[25]_i_1 
       (.I0(counter2__0[25]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[27]),
        .O(counter2[25]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[26]_i_1 
       (.I0(counter2__0[26]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[28]),
        .O(counter2[26]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[27]_i_1 
       (.I0(counter2__0[27]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[29]),
        .O(counter2[27]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[28]_i_1 
       (.I0(counter2__0[28]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[30]),
        .O(counter2[28]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[29]_i_1 
       (.I0(counter2__0[29]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[31]),
        .O(counter2[29]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[2]_i_1 
       (.I0(counter2__0[2]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[4]),
        .O(counter2[2]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[30]_i_1 
       (.I0(counter2__0[30]),
        .I1(counter21_carry__2_n_0),
        .I2(\counter2_reg_n_0_[30] ),
        .O(counter2[30]));
  LUT5 #(
    .INIT(32'h0F0F040F)) 
    \counter2[31]_i_1 
       (.I0(complete_l),
        .I1(active1),
        .I2(sm_s0_2_sn_1),
        .I3(buff_reg_0),
        .I4(buff_reg_1),
        .O(\counter2[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000002000000)) 
    \counter2[31]_i_2 
       (.I0(buff_reg_0),
        .I1(buff_reg_1),
        .I2(complete_l),
        .I3(sm_s0[0]),
        .I4(sm_s0[1]),
        .I5(sm_s0[2]),
        .O(counter20));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[31]_i_3 
       (.I0(counter2__0[31]),
        .I1(counter21_carry__2_n_0),
        .I2(\counter2_reg_n_0_[31] ),
        .O(counter2[31]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[3]_i_1 
       (.I0(counter2__0[3]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[5]),
        .O(counter2[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \counter2[3]_i_3 
       (.I0(leds1[2]),
        .I1(\counter21_inferred__0/i__carry__2_n_3 ),
        .I2(\_inferred__0/i__carry__6_n_0 ),
        .O(\counter2[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[4]_i_1 
       (.I0(counter2__0[4]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[6]),
        .O(counter2[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[5]_i_1 
       (.I0(counter2__0[5]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[7]),
        .O(counter2[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[6]_i_1 
       (.I0(counter2__0[6]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[8]),
        .O(counter2[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[7]_i_1 
       (.I0(counter2__0[7]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[9]),
        .O(counter2[7]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[8]_i_1 
       (.I0(counter2__0[8]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[10]),
        .O(counter2[8]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \counter2[9]_i_1 
       (.I0(counter2__0[9]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[11]),
        .O(counter2[9]));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[0] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[0]),
        .Q(leds1[2]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[10] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[10]),
        .Q(leds1[12]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[11] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[11]),
        .Q(leds1[13]),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[11]_i_2 
       (.CI(\counter2_reg[7]_i_2_n_0 ),
        .CO({\counter2_reg[11]_i_2_n_0 ,\NLW_counter2_reg[11]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(counter2__0[11:8]),
        .S(leds1[13:10]));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[12] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[12]),
        .Q(leds1[14]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[13] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[13]),
        .Q(leds1[15]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[14] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[14]),
        .Q(leds1[16]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[15] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[15]),
        .Q(leds1[17]),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[15]_i_2 
       (.CI(\counter2_reg[11]_i_2_n_0 ),
        .CO({\counter2_reg[15]_i_2_n_0 ,\NLW_counter2_reg[15]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(counter2__0[15:12]),
        .S(leds1[17:14]));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[16] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[16]),
        .Q(leds1[18]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[17] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[17]),
        .Q(leds1[19]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[18] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[18]),
        .Q(leds1[20]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[19] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[19]),
        .Q(leds1[21]),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[19]_i_2 
       (.CI(\counter2_reg[15]_i_2_n_0 ),
        .CO({\counter2_reg[19]_i_2_n_0 ,\NLW_counter2_reg[19]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(counter2__0[19:16]),
        .S(leds1[21:18]));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[1] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[1]),
        .Q(leds1[3]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[20] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[20]),
        .Q(leds1[22]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[21] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[21]),
        .Q(leds1[23]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[22] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[22]),
        .Q(leds1[24]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[23] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[23]),
        .Q(leds1[25]),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[23]_i_2 
       (.CI(\counter2_reg[19]_i_2_n_0 ),
        .CO({\counter2_reg[23]_i_2_n_0 ,\NLW_counter2_reg[23]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(counter2__0[23:20]),
        .S(leds1[25:22]));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[24] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[24]),
        .Q(leds1[26]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[25] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[25]),
        .Q(leds1[27]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[26] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[26]),
        .Q(leds1[28]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[27] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[27]),
        .Q(leds1[29]),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[27]_i_2 
       (.CI(\counter2_reg[23]_i_2_n_0 ),
        .CO({\counter2_reg[27]_i_2_n_0 ,\NLW_counter2_reg[27]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(counter2__0[27:24]),
        .S(leds1[29:26]));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[28] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[28]),
        .Q(leds1[30]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[29] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[29]),
        .Q(leds1[31]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[2] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[2]),
        .Q(leds1[4]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[30] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[30]),
        .Q(\counter2_reg_n_0_[30] ),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[31] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[31]),
        .Q(\counter2_reg_n_0_[31] ),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[31]_i_4 
       (.CI(\counter2_reg[27]_i_2_n_0 ),
        .CO(\NLW_counter2_reg[31]_i_4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(counter2__0[31:28]),
        .S({\counter2_reg_n_0_[31] ,\counter2_reg_n_0_[30] ,leds1[31:30]}));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[3] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[3]),
        .Q(leds1[5]),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\counter2_reg[3]_i_2_n_0 ,\NLW_counter2_reg[3]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,leds1[2]}),
        .O(counter2__0[3:0]),
        .S({leds1[5:3],\counter2[3]_i_3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[4] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[4]),
        .Q(leds1[6]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[5] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[5]),
        .Q(leds1[7]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[6] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[6]),
        .Q(leds1[8]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[7] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[7]),
        .Q(leds1[9]),
        .R(\counter2[31]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter2_reg[7]_i_2 
       (.CI(\counter2_reg[3]_i_2_n_0 ),
        .CO({\counter2_reg[7]_i_2_n_0 ,\NLW_counter2_reg[7]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(counter2__0[7:4]),
        .S(leds1[9:6]));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[8] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[8]),
        .Q(leds1[10]),
        .R(\counter2[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter2_reg[9] 
       (.C(clk0),
        .CE(counter20),
        .D(counter2[9]),
        .Q(leds1[11]),
        .R(\counter2[31]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    i__carry__0_i_1__0
       (.I0(counter1_reg[21]),
        .I1(counter1_reg[20]),
        .O(i__carry__0_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry__0_i_1__1
       (.I0(counter2__0[21]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[23]),
        .I3(counter2__0[23]),
        .I4(leds1[25]),
        .I5(counter2[22]),
        .O(i__carry__0_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__0_i_1__2
       (.I0(counter1_reg[7]),
        .I1(counter22[7]),
        .O(i__carry__0_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    i__carry__0_i_2__0
       (.I0(counter1_reg[19]),
        .I1(counter1_reg[18]),
        .O(i__carry__0_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry__0_i_2__1
       (.I0(counter2__0[18]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[20]),
        .I3(counter2__0[20]),
        .I4(leds1[22]),
        .I5(counter2[19]),
        .O(i__carry__0_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__0_i_2__2
       (.I0(counter1_reg[6]),
        .I1(counter22[6]),
        .O(i__carry__0_i_2__2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__0_i_3__0
       (.I0(counter1_reg[16]),
        .I1(counter1_reg[17]),
        .O(i__carry__0_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry__0_i_3__1
       (.I0(counter2__0[15]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[17]),
        .I3(counter2__0[17]),
        .I4(leds1[19]),
        .I5(counter2[16]),
        .O(i__carry__0_i_3__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__0_i_3__2
       (.I0(counter1_reg[5]),
        .I1(counter22[5]),
        .O(i__carry__0_i_3__2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__0_i_4__0
       (.I0(counter1_reg[14]),
        .I1(counter1_reg[15]),
        .O(i__carry__0_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry__0_i_4__1
       (.I0(counter2__0[12]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[14]),
        .I3(counter2__0[14]),
        .I4(leds1[16]),
        .I5(counter2[13]),
        .O(i__carry__0_i_4__1_n_0));
  LUT5 #(
    .INIT(32'h55555595)) 
    i__carry__0_i_4__2
       (.I0(counter1_reg[4]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(i__carry__0_i_4__2_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    i__carry__0_i_5
       (.I0(counter1_reg[20]),
        .I1(counter1_reg[21]),
        .O(i__carry__0_i_5_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    i__carry__0_i_6
       (.I0(counter1_reg[18]),
        .I1(counter1_reg[19]),
        .O(i__carry__0_i_6_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry__0_i_7
       (.I0(counter1_reg[16]),
        .I1(counter1_reg[17]),
        .O(i__carry__0_i_7_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry__0_i_8
       (.I0(counter1_reg[14]),
        .I1(counter1_reg[15]),
        .O(i__carry__0_i_8_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__1_i_1__0
       (.I0(counter1_reg[24]),
        .I1(counter1_reg[25]),
        .O(i__carry__1_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h00053305)) 
    i__carry__1_i_1__1
       (.I0(\counter2_reg_n_0_[31] ),
        .I1(counter2__0[31]),
        .I2(\counter2_reg_n_0_[30] ),
        .I3(counter21_carry__2_n_0),
        .I4(counter2__0[30]),
        .O(i__carry__1_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_1__2
       (.I0(counter1_reg[11]),
        .I1(counter22[11]),
        .O(i__carry__1_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__1_i_2__0
       (.I0(counter1_reg[22]),
        .I1(counter1_reg[23]),
        .O(i__carry__1_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry__1_i_2__1
       (.I0(counter2__0[27]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[29]),
        .I3(counter2__0[29]),
        .I4(leds1[31]),
        .I5(counter2[28]),
        .O(i__carry__1_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_2__2
       (.I0(counter1_reg[10]),
        .I1(counter22[10]),
        .O(i__carry__1_i_2__2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__1_i_3__0
       (.I0(counter1_reg[29]),
        .I1(counter1_reg[28]),
        .O(i__carry__1_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry__1_i_3__1
       (.I0(counter2__0[24]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[26]),
        .I3(counter2__0[26]),
        .I4(leds1[28]),
        .I5(counter2[25]),
        .O(i__carry__1_i_3__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_3__2
       (.I0(counter1_reg[9]),
        .I1(counter22[9]),
        .O(i__carry__1_i_3__2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__1_i_4
       (.I0(counter1_reg[27]),
        .I1(counter1_reg[26]),
        .O(i__carry__1_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_4__0
       (.I0(counter1_reg[8]),
        .I1(counter22[8]),
        .O(i__carry__1_i_4__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry__1_i_5
       (.I0(counter1_reg[24]),
        .I1(counter1_reg[25]),
        .O(i__carry__1_i_5_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry__1_i_6
       (.I0(counter1_reg[22]),
        .I1(counter1_reg[23]),
        .O(i__carry__1_i_6_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__2_i_1
       (.I0(counter1_reg[31]),
        .I1(counter1_reg[30]),
        .O(i__carry__2_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_1__0
       (.I0(counter1_reg[15]),
        .I1(counter22[15]),
        .O(i__carry__2_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_2
       (.I0(counter1_reg[14]),
        .I1(counter22[14]),
        .O(i__carry__2_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_3
       (.I0(counter1_reg[13]),
        .I1(counter22[13]),
        .O(i__carry__2_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_4
       (.I0(counter1_reg[12]),
        .I1(counter22[12]),
        .O(i__carry__2_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_1
       (.I0(counter1_reg[19]),
        .I1(counter22[19]),
        .O(i__carry__3_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_2
       (.I0(counter1_reg[18]),
        .I1(counter22[18]),
        .O(i__carry__3_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_3
       (.I0(counter1_reg[17]),
        .I1(counter22[17]),
        .O(i__carry__3_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_4
       (.I0(counter1_reg[16]),
        .I1(counter22[16]),
        .O(i__carry__3_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_1
       (.I0(counter1_reg[23]),
        .I1(counter22[23]),
        .O(i__carry__4_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_2
       (.I0(counter1_reg[22]),
        .I1(counter22[22]),
        .O(i__carry__4_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_3
       (.I0(counter1_reg[21]),
        .I1(counter22[21]),
        .O(i__carry__4_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_4
       (.I0(counter1_reg[20]),
        .I1(counter22[20]),
        .O(i__carry__4_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_1
       (.I0(counter1_reg[27]),
        .I1(counter22[27]),
        .O(i__carry__5_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_2
       (.I0(counter1_reg[26]),
        .I1(counter22[26]),
        .O(i__carry__5_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_3
       (.I0(counter1_reg[25]),
        .I1(counter22[25]),
        .O(i__carry__5_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_4
       (.I0(counter1_reg[24]),
        .I1(counter22[24]),
        .O(i__carry__5_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry__6_i_1
       (.I0(counter1_reg[31]),
        .O(i__carry__6_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry__6_i_2
       (.I0(counter1_reg[31]),
        .O(i__carry__6_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry__6_i_3
       (.I0(counter1_reg[30]),
        .O(i__carry__6_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry__6_i_4
       (.I0(counter1_reg[29]),
        .O(i__carry__6_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry__6_i_5
       (.I0(counter1_reg[28]),
        .O(i__carry__6_i_5_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    i__carry_i_1__0
       (.I0(counter1_reg[13]),
        .I1(counter1_reg[12]),
        .O(i__carry_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry_i_1__1
       (.I0(counter2__0[9]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[11]),
        .I3(counter2__0[11]),
        .I4(leds1[13]),
        .I5(counter2[10]),
        .O(i__carry_i_1__1_n_0));
  LUT5 #(
    .INIT(32'hAAAA9555)) 
    i__carry_i_1__2
       (.I0(counter1_reg[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[3]),
        .O(i__carry_i_1__2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry_i_2__0
       (.I0(counter1_reg[2]),
        .O(i__carry_i_2__0_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry_i_2__1
       (.I0(counter1_reg[11]),
        .O(i__carry_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0000000000440347)) 
    i__carry_i_2__2
       (.I0(counter2__0[6]),
        .I1(counter21_carry__2_n_0),
        .I2(leds1[8]),
        .I3(counter2__0[8]),
        .I4(leds1[10]),
        .I5(counter2[7]),
        .O(i__carry_i_2__2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry_i_3__0
       (.I0(counter1_reg[1]),
        .O(i__carry_i_3__0_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry_i_3__1
       (.I0(counter1_reg[6]),
        .I1(counter1_reg[7]),
        .O(i__carry_i_3__1_n_0));
  LUT5 #(
    .INIT(32'h8A80202A)) 
    i__carry_i_3__2
       (.I0(i__carry_i_5__0_n_0),
        .I1(counter2__0[3]),
        .I2(counter21_carry__2_n_0),
        .I3(leds1[5]),
        .I4(Q[3]),
        .O(i__carry_i_3__2_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    i__carry_i_4__0
       (.I0(counter1_reg[12]),
        .I1(counter1_reg[13]),
        .O(i__carry_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_4__1
       (.I0(counter2[0]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(counter2[2]),
        .I4(Q[1]),
        .I5(counter2[1]),
        .O(i__carry_i_4__1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry_i_4__2
       (.I0(counter1_reg[0]),
        .O(i__carry_i_4__2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry_i_5
       (.I0(counter1_reg[11]),
        .I1(counter1_reg[10]),
        .O(i__carry_i_5_n_0));
  LUT5 #(
    .INIT(32'h00053305)) 
    i__carry_i_5__0
       (.I0(leds1[7]),
        .I1(counter2__0[5]),
        .I2(leds1[6]),
        .I3(counter21_carry__2_n_0),
        .I4(counter2__0[4]),
        .O(i__carry_i_5__0_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry_i_6__0
       (.I0(counter1_reg[9]),
        .I1(counter1_reg[8]),
        .O(i__carry_i_6__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry_i_7
       (.I0(counter1_reg[6]),
        .I1(counter1_reg[7]),
        .O(i__carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h0053)) 
    \leds[0]_i_1 
       (.I0(\leds[0]_i_2_n_0 ),
        .I1(\leds[0]_i_3_n_0 ),
        .I2(leds1[2]),
        .I3(\leds[3]_i_7_n_0 ),
        .O(\leds[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \leds[0]_i_2 
       (.I0(data0[28]),
        .I1(data0[12]),
        .I2(leds1[3]),
        .I3(data0[20]),
        .I4(leds1[4]),
        .I5(data0[4]),
        .O(\leds[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \leds[0]_i_3 
       (.I0(data0[24]),
        .I1(data0[8]),
        .I2(leds1[3]),
        .I3(data0[16]),
        .I4(leds1[4]),
        .I5(data0[0]),
        .O(\leds[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0053)) 
    \leds[1]_i_1 
       (.I0(\leds[1]_i_2_n_0 ),
        .I1(\leds[1]_i_3_n_0 ),
        .I2(leds1[2]),
        .I3(\leds[3]_i_7_n_0 ),
        .O(\leds[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \leds[1]_i_2 
       (.I0(data0[29]),
        .I1(data0[13]),
        .I2(leds1[3]),
        .I3(data0[21]),
        .I4(leds1[4]),
        .I5(data0[5]),
        .O(\leds[1]_i_2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h505F3F3F)) 
    \leds[1]_i_3 
       (.I0(data0[25]),
        .I1(data0[9]),
        .I2(leds1[3]),
        .I3(data0[17]),
        .I4(leds1[4]),
        .O(\leds[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0053)) 
    \leds[2]_i_1 
       (.I0(\leds[2]_i_2_n_0 ),
        .I1(\leds[2]_i_3_n_0 ),
        .I2(leds1[2]),
        .I3(\leds[3]_i_7_n_0 ),
        .O(\leds[2]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h47CC47FF)) 
    \leds[2]_i_2 
       (.I0(data0[30]),
        .I1(leds1[3]),
        .I2(data0[22]),
        .I3(leds1[4]),
        .I4(data0[6]),
        .O(\leds[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \leds[2]_i_3 
       (.I0(data0[26]),
        .I1(data0[10]),
        .I2(leds1[3]),
        .I3(data0[18]),
        .I4(leds1[4]),
        .I5(data0[2]),
        .O(\leds[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBABBBABABABA)) 
    \leds[3]_i_1 
       (.I0(\leds[3]_i_4_n_0 ),
        .I1(\leds[3]_i_5_n_0 ),
        .I2(active1),
        .I3(\_inferred__0/i__carry__6_n_0 ),
        .I4(\counter21_inferred__0/i__carry__2_n_3 ),
        .I5(counter21_carry__2_n_0),
        .O(leds0));
  LUT4 #(
    .INIT(16'h1103)) 
    \leds[3]_i_2 
       (.I0(\leds[3]_i_6_n_0 ),
        .I1(\leds[3]_i_7_n_0 ),
        .I2(\leds[3]_i_8_n_0 ),
        .I3(leds1[2]),
        .O(\leds[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hBF)) 
    \leds[3]_i_3 
       (.I0(sm_s0[2]),
        .I1(sm_s0[1]),
        .I2(sm_s0[0]),
        .O(sm_s0_2_sn_1));
  LUT5 #(
    .INIT(32'h0000B000)) 
    \leds[3]_i_4 
       (.I0(buff_reg_1),
        .I1(buff_reg_0),
        .I2(sm_s0[0]),
        .I3(sm_s0[1]),
        .I4(sm_s0[2]),
        .O(\leds[3]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFBF)) 
    \leds[3]_i_5 
       (.I0(complete_l),
        .I1(sm_s0[0]),
        .I2(sm_s0[1]),
        .I3(sm_s0[2]),
        .O(\leds[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \leds[3]_i_6 
       (.I0(data0[31]),
        .I1(data0[15]),
        .I2(leds1[3]),
        .I3(data0[23]),
        .I4(leds1[4]),
        .I5(data0[7]),
        .O(\leds[3]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFB)) 
    \leds[3]_i_7 
       (.I0(buff_reg_1),
        .I1(buff_reg_0),
        .I2(\counter21_inferred__0/i__carry__2_n_3 ),
        .I3(active1),
        .O(\leds[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \leds[3]_i_8 
       (.I0(data0[27]),
        .I1(data0[11]),
        .I2(leds1[3]),
        .I3(data0[19]),
        .I4(leds1[4]),
        .I5(data0[3]),
        .O(\leds[3]_i_8_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \leds_reg[0] 
       (.C(clk0),
        .CE(leds0),
        .CLR(sm_s0_2_sn_1),
        .D(\leds[0]_i_1_n_0 ),
        .Q(led[0]));
  FDCE #(
    .INIT(1'b0)) 
    \leds_reg[1] 
       (.C(clk0),
        .CE(leds0),
        .CLR(sm_s0_2_sn_1),
        .D(\leds[1]_i_1_n_0 ),
        .Q(led[1]));
  FDCE #(
    .INIT(1'b0)) 
    \leds_reg[2] 
       (.C(clk0),
        .CE(leds0),
        .CLR(sm_s0_2_sn_1),
        .D(\leds[2]_i_1_n_0 ),
        .Q(led[2]));
  FDCE #(
    .INIT(1'b0)) 
    \leds_reg[3] 
       (.C(clk0),
        .CE(leds0),
        .CLR(sm_s0_2_sn_1),
        .D(\leds[3]_i_2_n_0 ),
        .Q(led[3]));
endmodule

(* ORIG_REF_NAME = "clock_enable_debouncing_button" *) 
module design_1_Game_0_0_clock_enable_debouncing_button
   (\counter_reg[12]_0 ,
    \btns[3] ,
    clk0,
    btns,
    Q_reg);
  output \counter_reg[12]_0 ;
  output \btns[3] ;
  input clk0;
  input [0:0]btns;
  input Q_reg;

  wire Q_i_3__2_n_0;
  wire Q_i_4__0_n_0;
  wire Q_i_5__0_n_0;
  wire Q_reg;
  wire \btns[3] ;
  wire clk0;
  wire \counter[0]_i_10__0_n_0 ;
  wire \counter[0]_i_1__2_n_0 ;
  wire \counter[0]_i_3__2_n_0 ;
  wire \counter[0]_i_4__2_n_0 ;
  wire \counter[0]_i_5__2_n_0 ;
  wire \counter[0]_i_6__2_n_0 ;
  wire \counter[0]_i_7__0_n_0 ;
  wire \counter[0]_i_8__2_n_0 ;
  wire \counter[0]_i_9__1_n_0 ;
  wire [27:0]counter_reg;
  wire \counter_reg[0]_i_2__2_n_0 ;
  wire \counter_reg[0]_i_2__2_n_4 ;
  wire \counter_reg[0]_i_2__2_n_5 ;
  wire \counter_reg[0]_i_2__2_n_6 ;
  wire \counter_reg[0]_i_2__2_n_7 ;
  wire \counter_reg[12]_0 ;
  wire \counter_reg[12]_i_1__2_n_0 ;
  wire \counter_reg[12]_i_1__2_n_4 ;
  wire \counter_reg[12]_i_1__2_n_5 ;
  wire \counter_reg[12]_i_1__2_n_6 ;
  wire \counter_reg[12]_i_1__2_n_7 ;
  wire \counter_reg[16]_i_1__2_n_0 ;
  wire \counter_reg[16]_i_1__2_n_4 ;
  wire \counter_reg[16]_i_1__2_n_5 ;
  wire \counter_reg[16]_i_1__2_n_6 ;
  wire \counter_reg[16]_i_1__2_n_7 ;
  wire \counter_reg[20]_i_1__2_n_0 ;
  wire \counter_reg[20]_i_1__2_n_4 ;
  wire \counter_reg[20]_i_1__2_n_5 ;
  wire \counter_reg[20]_i_1__2_n_6 ;
  wire \counter_reg[20]_i_1__2_n_7 ;
  wire \counter_reg[24]_i_1__2_n_4 ;
  wire \counter_reg[24]_i_1__2_n_5 ;
  wire \counter_reg[24]_i_1__2_n_6 ;
  wire \counter_reg[24]_i_1__2_n_7 ;
  wire \counter_reg[4]_i_1__2_n_0 ;
  wire \counter_reg[4]_i_1__2_n_4 ;
  wire \counter_reg[4]_i_1__2_n_5 ;
  wire \counter_reg[4]_i_1__2_n_6 ;
  wire \counter_reg[4]_i_1__2_n_7 ;
  wire \counter_reg[8]_i_1__2_n_0 ;
  wire \counter_reg[8]_i_1__2_n_4 ;
  wire \counter_reg[8]_i_1__2_n_5 ;
  wire \counter_reg[8]_i_1__2_n_6 ;
  wire \counter_reg[8]_i_1__2_n_7 ;
  wire [2:0]\NLW_counter_reg[0]_i_2__2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[12]_i_1__2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[16]_i_1__2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[20]_i_1__2_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter_reg[24]_i_1__2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[4]_i_1__2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[8]_i_1__2_CO_UNCONNECTED ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    Q_i_1__10
       (.I0(\counter_reg[12]_0 ),
        .I1(Q_reg),
        .O(\btns[3] ));
  LUT5 #(
    .INIT(32'h00001000)) 
    Q_i_2__2
       (.I0(Q_i_3__2_n_0),
        .I1(Q_i_4__0_n_0),
        .I2(counter_reg[12]),
        .I3(counter_reg[7]),
        .I4(Q_i_5__0_n_0),
        .O(\counter_reg[12]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    Q_i_3__2
       (.I0(\counter[0]_i_8__2_n_0 ),
        .I1(counter_reg[18]),
        .I2(counter_reg[19]),
        .I3(counter_reg[20]),
        .I4(\counter[0]_i_9__1_n_0 ),
        .I5(\counter[0]_i_6__2_n_0 ),
        .O(Q_i_3__2_n_0));
  LUT3 #(
    .INIT(8'hFE)) 
    Q_i_4__0
       (.I0(counter_reg[5]),
        .I1(counter_reg[4]),
        .I2(counter_reg[6]),
        .O(Q_i_4__0_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    Q_i_5__0
       (.I0(counter_reg[13]),
        .I1(counter_reg[26]),
        .I2(counter_reg[25]),
        .I3(counter_reg[27]),
        .I4(\counter[0]_i_10__0_n_0 ),
        .O(Q_i_5__0_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_10__0 
       (.I0(counter_reg[23]),
        .I1(counter_reg[24]),
        .I2(counter_reg[21]),
        .I3(counter_reg[22]),
        .O(\counter[0]_i_10__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFAAFFAAFFFFFFEA)) 
    \counter[0]_i_1__2 
       (.I0(\counter[0]_i_3__2_n_0 ),
        .I1(\counter[0]_i_4__2_n_0 ),
        .I2(counter_reg[12]),
        .I3(\counter[0]_i_5__2_n_0 ),
        .I4(counter_reg[13]),
        .I5(\counter[0]_i_6__2_n_0 ),
        .O(\counter[0]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \counter[0]_i_3__2 
       (.I0(counter_reg[18]),
        .I1(counter_reg[19]),
        .I2(counter_reg[20]),
        .O(\counter[0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFFAAAAAAAA)) 
    \counter[0]_i_4__2 
       (.I0(\counter[0]_i_8__2_n_0 ),
        .I1(counter_reg[6]),
        .I2(counter_reg[4]),
        .I3(counter_reg[5]),
        .I4(\counter[0]_i_9__1_n_0 ),
        .I5(counter_reg[7]),
        .O(\counter[0]_i_4__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_5__2 
       (.I0(\counter[0]_i_10__0_n_0 ),
        .I1(counter_reg[27]),
        .I2(counter_reg[25]),
        .I3(counter_reg[26]),
        .O(\counter[0]_i_5__2_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \counter[0]_i_6__2 
       (.I0(counter_reg[15]),
        .I1(counter_reg[16]),
        .I2(counter_reg[14]),
        .I3(counter_reg[17]),
        .O(\counter[0]_i_6__2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \counter[0]_i_7__0 
       (.I0(counter_reg[0]),
        .O(\counter[0]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_8__2 
       (.I0(counter_reg[8]),
        .I1(counter_reg[10]),
        .I2(counter_reg[11]),
        .I3(counter_reg[9]),
        .O(\counter[0]_i_8__2_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \counter[0]_i_9__1 
       (.I0(counter_reg[3]),
        .I1(counter_reg[0]),
        .I2(counter_reg[1]),
        .I3(counter_reg[2]),
        .O(\counter[0]_i_9__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__2_n_7 ),
        .Q(counter_reg[0]),
        .R(\counter[0]_i_1__2_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[0]_i_2__2 
       (.CI(1'b0),
        .CO({\counter_reg[0]_i_2__2_n_0 ,\NLW_counter_reg[0]_i_2__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_reg[0]_i_2__2_n_4 ,\counter_reg[0]_i_2__2_n_5 ,\counter_reg[0]_i_2__2_n_6 ,\counter_reg[0]_i_2__2_n_7 }),
        .S({counter_reg[3:1],\counter[0]_i_7__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[10] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__2_n_5 ),
        .Q(counter_reg[10]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[11] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__2_n_4 ),
        .Q(counter_reg[11]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[12] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__2_n_7 ),
        .Q(counter_reg[12]),
        .R(\counter[0]_i_1__2_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[12]_i_1__2 
       (.CI(\counter_reg[8]_i_1__2_n_0 ),
        .CO({\counter_reg[12]_i_1__2_n_0 ,\NLW_counter_reg[12]_i_1__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[12]_i_1__2_n_4 ,\counter_reg[12]_i_1__2_n_5 ,\counter_reg[12]_i_1__2_n_6 ,\counter_reg[12]_i_1__2_n_7 }),
        .S(counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[13] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__2_n_6 ),
        .Q(counter_reg[13]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[14] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__2_n_5 ),
        .Q(counter_reg[14]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[15] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__2_n_4 ),
        .Q(counter_reg[15]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[16] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__2_n_7 ),
        .Q(counter_reg[16]),
        .R(\counter[0]_i_1__2_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[16]_i_1__2 
       (.CI(\counter_reg[12]_i_1__2_n_0 ),
        .CO({\counter_reg[16]_i_1__2_n_0 ,\NLW_counter_reg[16]_i_1__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[16]_i_1__2_n_4 ,\counter_reg[16]_i_1__2_n_5 ,\counter_reg[16]_i_1__2_n_6 ,\counter_reg[16]_i_1__2_n_7 }),
        .S(counter_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[17] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__2_n_6 ),
        .Q(counter_reg[17]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[18] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__2_n_5 ),
        .Q(counter_reg[18]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[19] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__2_n_4 ),
        .Q(counter_reg[19]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__2_n_6 ),
        .Q(counter_reg[1]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[20] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__2_n_7 ),
        .Q(counter_reg[20]),
        .R(\counter[0]_i_1__2_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[20]_i_1__2 
       (.CI(\counter_reg[16]_i_1__2_n_0 ),
        .CO({\counter_reg[20]_i_1__2_n_0 ,\NLW_counter_reg[20]_i_1__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[20]_i_1__2_n_4 ,\counter_reg[20]_i_1__2_n_5 ,\counter_reg[20]_i_1__2_n_6 ,\counter_reg[20]_i_1__2_n_7 }),
        .S(counter_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[21] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__2_n_6 ),
        .Q(counter_reg[21]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[22] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__2_n_5 ),
        .Q(counter_reg[22]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[23] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__2_n_4 ),
        .Q(counter_reg[23]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[24] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__2_n_7 ),
        .Q(counter_reg[24]),
        .R(\counter[0]_i_1__2_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[24]_i_1__2 
       (.CI(\counter_reg[20]_i_1__2_n_0 ),
        .CO(\NLW_counter_reg[24]_i_1__2_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[24]_i_1__2_n_4 ,\counter_reg[24]_i_1__2_n_5 ,\counter_reg[24]_i_1__2_n_6 ,\counter_reg[24]_i_1__2_n_7 }),
        .S(counter_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[25] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__2_n_6 ),
        .Q(counter_reg[25]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[26] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__2_n_5 ),
        .Q(counter_reg[26]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[27] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__2_n_4 ),
        .Q(counter_reg[27]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__2_n_5 ),
        .Q(counter_reg[2]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__2_n_4 ),
        .Q(counter_reg[3]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__2_n_7 ),
        .Q(counter_reg[4]),
        .R(\counter[0]_i_1__2_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[4]_i_1__2 
       (.CI(\counter_reg[0]_i_2__2_n_0 ),
        .CO({\counter_reg[4]_i_1__2_n_0 ,\NLW_counter_reg[4]_i_1__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[4]_i_1__2_n_4 ,\counter_reg[4]_i_1__2_n_5 ,\counter_reg[4]_i_1__2_n_6 ,\counter_reg[4]_i_1__2_n_7 }),
        .S(counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[5] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__2_n_6 ),
        .Q(counter_reg[5]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[6] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__2_n_5 ),
        .Q(counter_reg[6]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[7] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__2_n_4 ),
        .Q(counter_reg[7]),
        .R(\counter[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[8] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__2_n_7 ),
        .Q(counter_reg[8]),
        .R(\counter[0]_i_1__2_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[8]_i_1__2 
       (.CI(\counter_reg[4]_i_1__2_n_0 ),
        .CO({\counter_reg[8]_i_1__2_n_0 ,\NLW_counter_reg[8]_i_1__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[8]_i_1__2_n_4 ,\counter_reg[8]_i_1__2_n_5 ,\counter_reg[8]_i_1__2_n_6 ,\counter_reg[8]_i_1__2_n_7 }),
        .S(counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[9] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__2_n_6 ),
        .Q(counter_reg[9]),
        .R(\counter[0]_i_1__2_n_0 ));
endmodule

(* ORIG_REF_NAME = "clock_enable_debouncing_button" *) 
module design_1_Game_0_0_clock_enable_debouncing_button_12
   (\counter_reg[8]_0 ,
    \btns[1] ,
    clk0,
    btns,
    Q_reg);
  output \counter_reg[8]_0 ;
  output \btns[1] ;
  input clk0;
  input [0:0]btns;
  input Q_reg;

  wire Q_i_3__0_n_0;
  wire Q_reg;
  wire \btns[1] ;
  wire clk0;
  wire \counter[0]_i_10_n_0 ;
  wire \counter[0]_i_1__0_n_0 ;
  wire \counter[0]_i_3__0_n_0 ;
  wire \counter[0]_i_4__0_n_0 ;
  wire \counter[0]_i_5__0_n_0 ;
  wire \counter[0]_i_6__1_n_0 ;
  wire \counter[0]_i_7_n_0 ;
  wire \counter[0]_i_8__0_n_0 ;
  wire \counter[0]_i_9_n_0 ;
  wire [27:0]counter_reg;
  wire \counter_reg[0]_i_2__0_n_0 ;
  wire \counter_reg[0]_i_2__0_n_4 ;
  wire \counter_reg[0]_i_2__0_n_5 ;
  wire \counter_reg[0]_i_2__0_n_6 ;
  wire \counter_reg[0]_i_2__0_n_7 ;
  wire \counter_reg[12]_i_1__0_n_0 ;
  wire \counter_reg[12]_i_1__0_n_4 ;
  wire \counter_reg[12]_i_1__0_n_5 ;
  wire \counter_reg[12]_i_1__0_n_6 ;
  wire \counter_reg[12]_i_1__0_n_7 ;
  wire \counter_reg[16]_i_1__0_n_0 ;
  wire \counter_reg[16]_i_1__0_n_4 ;
  wire \counter_reg[16]_i_1__0_n_5 ;
  wire \counter_reg[16]_i_1__0_n_6 ;
  wire \counter_reg[16]_i_1__0_n_7 ;
  wire \counter_reg[20]_i_1__0_n_0 ;
  wire \counter_reg[20]_i_1__0_n_4 ;
  wire \counter_reg[20]_i_1__0_n_5 ;
  wire \counter_reg[20]_i_1__0_n_6 ;
  wire \counter_reg[20]_i_1__0_n_7 ;
  wire \counter_reg[24]_i_1__0_n_4 ;
  wire \counter_reg[24]_i_1__0_n_5 ;
  wire \counter_reg[24]_i_1__0_n_6 ;
  wire \counter_reg[24]_i_1__0_n_7 ;
  wire \counter_reg[4]_i_1__0_n_0 ;
  wire \counter_reg[4]_i_1__0_n_4 ;
  wire \counter_reg[4]_i_1__0_n_5 ;
  wire \counter_reg[4]_i_1__0_n_6 ;
  wire \counter_reg[4]_i_1__0_n_7 ;
  wire \counter_reg[8]_0 ;
  wire \counter_reg[8]_i_1__0_n_0 ;
  wire \counter_reg[8]_i_1__0_n_4 ;
  wire \counter_reg[8]_i_1__0_n_5 ;
  wire \counter_reg[8]_i_1__0_n_6 ;
  wire \counter_reg[8]_i_1__0_n_7 ;
  wire [2:0]\NLW_counter_reg[0]_i_2__0_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[12]_i_1__0_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[16]_i_1__0_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[20]_i_1__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter_reg[24]_i_1__0_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[4]_i_1__0_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[8]_i_1__0_CO_UNCONNECTED ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    Q_i_1__4
       (.I0(\counter_reg[8]_0 ),
        .I1(Q_reg),
        .O(\btns[1] ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    Q_i_2__0
       (.I0(\counter[0]_i_9_n_0 ),
        .I1(\counter[0]_i_5__0_n_0 ),
        .I2(\counter[0]_i_8__0_n_0 ),
        .I3(\counter[0]_i_3__0_n_0 ),
        .I4(Q_i_3__0_n_0),
        .I5(\counter[0]_i_6__1_n_0 ),
        .O(\counter_reg[8]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEFFFFFFFFFF)) 
    Q_i_3__0
       (.I0(counter_reg[5]),
        .I1(counter_reg[6]),
        .I2(counter_reg[13]),
        .I3(counter_reg[12]),
        .I4(counter_reg[4]),
        .I5(counter_reg[7]),
        .O(Q_i_3__0_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_10 
       (.I0(counter_reg[23]),
        .I1(counter_reg[24]),
        .I2(counter_reg[21]),
        .I3(counter_reg[22]),
        .O(\counter[0]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF4544)) 
    \counter[0]_i_1__0 
       (.I0(\counter[0]_i_3__0_n_0 ),
        .I1(counter_reg[13]),
        .I2(\counter[0]_i_4__0_n_0 ),
        .I3(counter_reg[12]),
        .I4(\counter[0]_i_5__0_n_0 ),
        .I5(\counter[0]_i_6__1_n_0 ),
        .O(\counter[0]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \counter[0]_i_3__0 
       (.I0(counter_reg[14]),
        .I1(counter_reg[16]),
        .I2(counter_reg[17]),
        .I3(counter_reg[15]),
        .O(\counter[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000100FFFF)) 
    \counter[0]_i_4__0 
       (.I0(counter_reg[6]),
        .I1(counter_reg[5]),
        .I2(counter_reg[4]),
        .I3(\counter[0]_i_8__0_n_0 ),
        .I4(counter_reg[7]),
        .I5(\counter[0]_i_9_n_0 ),
        .O(\counter[0]_i_4__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \counter[0]_i_5__0 
       (.I0(counter_reg[18]),
        .I1(counter_reg[19]),
        .I2(counter_reg[20]),
        .O(\counter[0]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_6__1 
       (.I0(\counter[0]_i_10_n_0 ),
        .I1(counter_reg[27]),
        .I2(counter_reg[25]),
        .I3(counter_reg[26]),
        .O(\counter[0]_i_6__1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \counter[0]_i_7 
       (.I0(counter_reg[0]),
        .O(\counter[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \counter[0]_i_8__0 
       (.I0(counter_reg[3]),
        .I1(counter_reg[0]),
        .I2(counter_reg[1]),
        .I3(counter_reg[2]),
        .O(\counter[0]_i_8__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_9 
       (.I0(counter_reg[8]),
        .I1(counter_reg[10]),
        .I2(counter_reg[11]),
        .I3(counter_reg[9]),
        .O(\counter[0]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__0_n_7 ),
        .Q(counter_reg[0]),
        .R(\counter[0]_i_1__0_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[0]_i_2__0 
       (.CI(1'b0),
        .CO({\counter_reg[0]_i_2__0_n_0 ,\NLW_counter_reg[0]_i_2__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_reg[0]_i_2__0_n_4 ,\counter_reg[0]_i_2__0_n_5 ,\counter_reg[0]_i_2__0_n_6 ,\counter_reg[0]_i_2__0_n_7 }),
        .S({counter_reg[3:1],\counter[0]_i_7_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[10] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__0_n_5 ),
        .Q(counter_reg[10]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[11] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__0_n_4 ),
        .Q(counter_reg[11]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[12] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__0_n_7 ),
        .Q(counter_reg[12]),
        .R(\counter[0]_i_1__0_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[12]_i_1__0 
       (.CI(\counter_reg[8]_i_1__0_n_0 ),
        .CO({\counter_reg[12]_i_1__0_n_0 ,\NLW_counter_reg[12]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[12]_i_1__0_n_4 ,\counter_reg[12]_i_1__0_n_5 ,\counter_reg[12]_i_1__0_n_6 ,\counter_reg[12]_i_1__0_n_7 }),
        .S(counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[13] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__0_n_6 ),
        .Q(counter_reg[13]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[14] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__0_n_5 ),
        .Q(counter_reg[14]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[15] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__0_n_4 ),
        .Q(counter_reg[15]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[16] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__0_n_7 ),
        .Q(counter_reg[16]),
        .R(\counter[0]_i_1__0_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[16]_i_1__0 
       (.CI(\counter_reg[12]_i_1__0_n_0 ),
        .CO({\counter_reg[16]_i_1__0_n_0 ,\NLW_counter_reg[16]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[16]_i_1__0_n_4 ,\counter_reg[16]_i_1__0_n_5 ,\counter_reg[16]_i_1__0_n_6 ,\counter_reg[16]_i_1__0_n_7 }),
        .S(counter_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[17] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__0_n_6 ),
        .Q(counter_reg[17]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[18] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__0_n_5 ),
        .Q(counter_reg[18]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[19] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__0_n_4 ),
        .Q(counter_reg[19]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__0_n_6 ),
        .Q(counter_reg[1]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[20] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__0_n_7 ),
        .Q(counter_reg[20]),
        .R(\counter[0]_i_1__0_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[20]_i_1__0 
       (.CI(\counter_reg[16]_i_1__0_n_0 ),
        .CO({\counter_reg[20]_i_1__0_n_0 ,\NLW_counter_reg[20]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[20]_i_1__0_n_4 ,\counter_reg[20]_i_1__0_n_5 ,\counter_reg[20]_i_1__0_n_6 ,\counter_reg[20]_i_1__0_n_7 }),
        .S(counter_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[21] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__0_n_6 ),
        .Q(counter_reg[21]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[22] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__0_n_5 ),
        .Q(counter_reg[22]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[23] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__0_n_4 ),
        .Q(counter_reg[23]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[24] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__0_n_7 ),
        .Q(counter_reg[24]),
        .R(\counter[0]_i_1__0_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[24]_i_1__0 
       (.CI(\counter_reg[20]_i_1__0_n_0 ),
        .CO(\NLW_counter_reg[24]_i_1__0_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[24]_i_1__0_n_4 ,\counter_reg[24]_i_1__0_n_5 ,\counter_reg[24]_i_1__0_n_6 ,\counter_reg[24]_i_1__0_n_7 }),
        .S(counter_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[25] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__0_n_6 ),
        .Q(counter_reg[25]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[26] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__0_n_5 ),
        .Q(counter_reg[26]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[27] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__0_n_4 ),
        .Q(counter_reg[27]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__0_n_5 ),
        .Q(counter_reg[2]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__0_n_4 ),
        .Q(counter_reg[3]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__0_n_7 ),
        .Q(counter_reg[4]),
        .R(\counter[0]_i_1__0_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[4]_i_1__0 
       (.CI(\counter_reg[0]_i_2__0_n_0 ),
        .CO({\counter_reg[4]_i_1__0_n_0 ,\NLW_counter_reg[4]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[4]_i_1__0_n_4 ,\counter_reg[4]_i_1__0_n_5 ,\counter_reg[4]_i_1__0_n_6 ,\counter_reg[4]_i_1__0_n_7 }),
        .S(counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[5] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__0_n_6 ),
        .Q(counter_reg[5]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[6] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__0_n_5 ),
        .Q(counter_reg[6]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[7] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__0_n_4 ),
        .Q(counter_reg[7]),
        .R(\counter[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[8] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__0_n_7 ),
        .Q(counter_reg[8]),
        .R(\counter[0]_i_1__0_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[8]_i_1__0 
       (.CI(\counter_reg[4]_i_1__0_n_0 ),
        .CO({\counter_reg[8]_i_1__0_n_0 ,\NLW_counter_reg[8]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[8]_i_1__0_n_4 ,\counter_reg[8]_i_1__0_n_5 ,\counter_reg[8]_i_1__0_n_6 ,\counter_reg[8]_i_1__0_n_7 }),
        .S(counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[9] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__0_n_6 ),
        .Q(counter_reg[9]),
        .R(\counter[0]_i_1__0_n_0 ));
endmodule

(* ORIG_REF_NAME = "clock_enable_debouncing_button" *) 
module design_1_Game_0_0_clock_enable_debouncing_button_16
   (clock_enable,
    btns_0_sp_1,
    clk0,
    btns,
    D);
  output clock_enable;
  output btns_0_sp_1;
  input clk0;
  input [0:0]btns;
  input D;

  wire D;
  wire Q_i_3_n_0;
  wire Q_i_4_n_0;
  wire Q_i_5_n_0;
  wire Q_i_6_n_0;
  wire Q_i_7_n_0;
  wire btns_0_sn_1;
  wire clk0;
  wire clock_enable;
  wire \counter[0]_i_1_n_0 ;
  wire \counter[0]_i_3_n_0 ;
  wire \counter[0]_i_4_n_0 ;
  wire \counter[0]_i_5_n_0 ;
  wire \counter[0]_i_6__0_n_0 ;
  wire \counter[0]_i_7__1_n_0 ;
  wire \counter[0]_i_8_n_0 ;
  wire [27:0]counter_reg;
  wire \counter_reg[0]_i_2_n_0 ;
  wire \counter_reg[0]_i_2_n_4 ;
  wire \counter_reg[0]_i_2_n_5 ;
  wire \counter_reg[0]_i_2_n_6 ;
  wire \counter_reg[0]_i_2_n_7 ;
  wire \counter_reg[12]_i_1_n_0 ;
  wire \counter_reg[12]_i_1_n_4 ;
  wire \counter_reg[12]_i_1_n_5 ;
  wire \counter_reg[12]_i_1_n_6 ;
  wire \counter_reg[12]_i_1_n_7 ;
  wire \counter_reg[16]_i_1_n_0 ;
  wire \counter_reg[16]_i_1_n_4 ;
  wire \counter_reg[16]_i_1_n_5 ;
  wire \counter_reg[16]_i_1_n_6 ;
  wire \counter_reg[16]_i_1_n_7 ;
  wire \counter_reg[20]_i_1_n_0 ;
  wire \counter_reg[20]_i_1_n_4 ;
  wire \counter_reg[20]_i_1_n_5 ;
  wire \counter_reg[20]_i_1_n_6 ;
  wire \counter_reg[20]_i_1_n_7 ;
  wire \counter_reg[24]_i_1_n_4 ;
  wire \counter_reg[24]_i_1_n_5 ;
  wire \counter_reg[24]_i_1_n_6 ;
  wire \counter_reg[24]_i_1_n_7 ;
  wire \counter_reg[4]_i_1_n_0 ;
  wire \counter_reg[4]_i_1_n_4 ;
  wire \counter_reg[4]_i_1_n_5 ;
  wire \counter_reg[4]_i_1_n_6 ;
  wire \counter_reg[4]_i_1_n_7 ;
  wire \counter_reg[8]_i_1_n_0 ;
  wire \counter_reg[8]_i_1_n_4 ;
  wire \counter_reg[8]_i_1_n_5 ;
  wire \counter_reg[8]_i_1_n_6 ;
  wire \counter_reg[8]_i_1_n_7 ;
  wire [2:0]\NLW_counter_reg[0]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[16]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[20]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter_reg[24]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[8]_i_1_CO_UNCONNECTED ;

  assign btns_0_sp_1 = btns_0_sn_1;
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    Q_i_1__1
       (.I0(clock_enable),
        .I1(D),
        .O(btns_0_sn_1));
  LUT5 #(
    .INIT(32'h00000040)) 
    Q_i_2
       (.I0(Q_i_3_n_0),
        .I1(Q_i_4_n_0),
        .I2(Q_i_5_n_0),
        .I3(Q_i_6_n_0),
        .I4(\counter[0]_i_4_n_0 ),
        .O(clock_enable));
  LUT3 #(
    .INIT(8'hFE)) 
    Q_i_3
       (.I0(counter_reg[18]),
        .I1(counter_reg[19]),
        .I2(counter_reg[20]),
        .O(Q_i_3_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    Q_i_4
       (.I0(counter_reg[3]),
        .I1(counter_reg[0]),
        .I2(counter_reg[1]),
        .I3(counter_reg[2]),
        .O(Q_i_4_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    Q_i_5
       (.I0(counter_reg[11]),
        .I1(counter_reg[13]),
        .I2(counter_reg[4]),
        .I3(counter_reg[8]),
        .I4(Q_i_7_n_0),
        .O(Q_i_5_n_0));
  LUT6 #(
    .INIT(64'hEFFFFFFFFFFFFFFF)) 
    Q_i_6
       (.I0(counter_reg[9]),
        .I1(counter_reg[10]),
        .I2(counter_reg[16]),
        .I3(counter_reg[15]),
        .I4(counter_reg[7]),
        .I5(counter_reg[12]),
        .O(Q_i_6_n_0));
  LUT4 #(
    .INIT(16'hEFFF)) 
    Q_i_7
       (.I0(counter_reg[5]),
        .I1(counter_reg[6]),
        .I2(counter_reg[14]),
        .I3(counter_reg[17]),
        .O(Q_i_7_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \counter[0]_i_1 
       (.I0(\counter[0]_i_3_n_0 ),
        .I1(counter_reg[18]),
        .I2(counter_reg[19]),
        .I3(counter_reg[20]),
        .I4(\counter[0]_i_4_n_0 ),
        .O(\counter[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hE000000000000000)) 
    \counter[0]_i_3 
       (.I0(\counter[0]_i_6__0_n_0 ),
        .I1(\counter[0]_i_7__1_n_0 ),
        .I2(counter_reg[17]),
        .I3(counter_reg[14]),
        .I4(counter_reg[16]),
        .I5(counter_reg[15]),
        .O(\counter[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_4 
       (.I0(\counter[0]_i_8_n_0 ),
        .I1(counter_reg[27]),
        .I2(counter_reg[25]),
        .I3(counter_reg[26]),
        .O(\counter[0]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \counter[0]_i_5 
       (.I0(counter_reg[0]),
        .O(\counter[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \counter[0]_i_6__0 
       (.I0(counter_reg[13]),
        .I1(counter_reg[9]),
        .I2(counter_reg[10]),
        .I3(counter_reg[8]),
        .I4(counter_reg[11]),
        .I5(counter_reg[12]),
        .O(\counter[0]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE000000000000)) 
    \counter[0]_i_7__1 
       (.I0(counter_reg[4]),
        .I1(counter_reg[5]),
        .I2(counter_reg[6]),
        .I3(Q_i_4_n_0),
        .I4(counter_reg[12]),
        .I5(counter_reg[7]),
        .O(\counter[0]_i_7__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_8 
       (.I0(counter_reg[23]),
        .I1(counter_reg[24]),
        .I2(counter_reg[21]),
        .I3(counter_reg[22]),
        .O(\counter[0]_i_8_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2_n_7 ),
        .Q(counter_reg[0]),
        .R(\counter[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\counter_reg[0]_i_2_n_0 ,\NLW_counter_reg[0]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_reg[0]_i_2_n_4 ,\counter_reg[0]_i_2_n_5 ,\counter_reg[0]_i_2_n_6 ,\counter_reg[0]_i_2_n_7 }),
        .S({counter_reg[3:1],\counter[0]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[10] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1_n_5 ),
        .Q(counter_reg[10]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[11] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1_n_4 ),
        .Q(counter_reg[11]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[12] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1_n_7 ),
        .Q(counter_reg[12]),
        .R(\counter[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[12]_i_1 
       (.CI(\counter_reg[8]_i_1_n_0 ),
        .CO({\counter_reg[12]_i_1_n_0 ,\NLW_counter_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[12]_i_1_n_4 ,\counter_reg[12]_i_1_n_5 ,\counter_reg[12]_i_1_n_6 ,\counter_reg[12]_i_1_n_7 }),
        .S(counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[13] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1_n_6 ),
        .Q(counter_reg[13]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[14] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1_n_5 ),
        .Q(counter_reg[14]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[15] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1_n_4 ),
        .Q(counter_reg[15]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[16] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1_n_7 ),
        .Q(counter_reg[16]),
        .R(\counter[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[16]_i_1 
       (.CI(\counter_reg[12]_i_1_n_0 ),
        .CO({\counter_reg[16]_i_1_n_0 ,\NLW_counter_reg[16]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[16]_i_1_n_4 ,\counter_reg[16]_i_1_n_5 ,\counter_reg[16]_i_1_n_6 ,\counter_reg[16]_i_1_n_7 }),
        .S(counter_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[17] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1_n_6 ),
        .Q(counter_reg[17]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[18] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1_n_5 ),
        .Q(counter_reg[18]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[19] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1_n_4 ),
        .Q(counter_reg[19]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2_n_6 ),
        .Q(counter_reg[1]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[20] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1_n_7 ),
        .Q(counter_reg[20]),
        .R(\counter[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[20]_i_1 
       (.CI(\counter_reg[16]_i_1_n_0 ),
        .CO({\counter_reg[20]_i_1_n_0 ,\NLW_counter_reg[20]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[20]_i_1_n_4 ,\counter_reg[20]_i_1_n_5 ,\counter_reg[20]_i_1_n_6 ,\counter_reg[20]_i_1_n_7 }),
        .S(counter_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[21] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1_n_6 ),
        .Q(counter_reg[21]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[22] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1_n_5 ),
        .Q(counter_reg[22]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[23] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1_n_4 ),
        .Q(counter_reg[23]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[24] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1_n_7 ),
        .Q(counter_reg[24]),
        .R(\counter[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[24]_i_1 
       (.CI(\counter_reg[20]_i_1_n_0 ),
        .CO(\NLW_counter_reg[24]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[24]_i_1_n_4 ,\counter_reg[24]_i_1_n_5 ,\counter_reg[24]_i_1_n_6 ,\counter_reg[24]_i_1_n_7 }),
        .S(counter_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[25] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1_n_6 ),
        .Q(counter_reg[25]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[26] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1_n_5 ),
        .Q(counter_reg[26]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[27] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1_n_4 ),
        .Q(counter_reg[27]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2_n_5 ),
        .Q(counter_reg[2]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2_n_4 ),
        .Q(counter_reg[3]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1_n_7 ),
        .Q(counter_reg[4]),
        .R(\counter[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[4]_i_1 
       (.CI(\counter_reg[0]_i_2_n_0 ),
        .CO({\counter_reg[4]_i_1_n_0 ,\NLW_counter_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[4]_i_1_n_4 ,\counter_reg[4]_i_1_n_5 ,\counter_reg[4]_i_1_n_6 ,\counter_reg[4]_i_1_n_7 }),
        .S(counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[5] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1_n_6 ),
        .Q(counter_reg[5]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[6] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1_n_5 ),
        .Q(counter_reg[6]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[7] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1_n_4 ),
        .Q(counter_reg[7]),
        .R(\counter[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[8] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1_n_7 ),
        .Q(counter_reg[8]),
        .R(\counter[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[8]_i_1 
       (.CI(\counter_reg[4]_i_1_n_0 ),
        .CO({\counter_reg[8]_i_1_n_0 ,\NLW_counter_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[8]_i_1_n_4 ,\counter_reg[8]_i_1_n_5 ,\counter_reg[8]_i_1_n_6 ,\counter_reg[8]_i_1_n_7 }),
        .S(counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[9] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1_n_6 ),
        .Q(counter_reg[9]),
        .R(\counter[0]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "clock_enable_debouncing_button" *) 
module design_1_Game_0_0_clock_enable_debouncing_button_8
   (\counter_reg[24]_0 ,
    \btns[2] ,
    clk0,
    btns,
    Q_reg);
  output \counter_reg[24]_0 ;
  output \btns[2] ;
  input clk0;
  input [0:0]btns;
  input Q_reg;

  wire Q_i_3__1_n_0;
  wire Q_reg;
  wire \btns[2] ;
  wire clk0;
  wire \counter[0]_i_1__1_n_0 ;
  wire \counter[0]_i_3__1_n_0 ;
  wire \counter[0]_i_4__1_n_0 ;
  wire \counter[0]_i_5__1_n_0 ;
  wire \counter[0]_i_6_n_0 ;
  wire \counter[0]_i_7__2_n_0 ;
  wire \counter[0]_i_8__1_n_0 ;
  wire \counter[0]_i_9__0_n_0 ;
  wire [27:0]counter_reg;
  wire \counter_reg[0]_i_2__1_n_0 ;
  wire \counter_reg[0]_i_2__1_n_4 ;
  wire \counter_reg[0]_i_2__1_n_5 ;
  wire \counter_reg[0]_i_2__1_n_6 ;
  wire \counter_reg[0]_i_2__1_n_7 ;
  wire \counter_reg[12]_i_1__1_n_0 ;
  wire \counter_reg[12]_i_1__1_n_4 ;
  wire \counter_reg[12]_i_1__1_n_5 ;
  wire \counter_reg[12]_i_1__1_n_6 ;
  wire \counter_reg[12]_i_1__1_n_7 ;
  wire \counter_reg[16]_i_1__1_n_0 ;
  wire \counter_reg[16]_i_1__1_n_4 ;
  wire \counter_reg[16]_i_1__1_n_5 ;
  wire \counter_reg[16]_i_1__1_n_6 ;
  wire \counter_reg[16]_i_1__1_n_7 ;
  wire \counter_reg[20]_i_1__1_n_0 ;
  wire \counter_reg[20]_i_1__1_n_4 ;
  wire \counter_reg[20]_i_1__1_n_5 ;
  wire \counter_reg[20]_i_1__1_n_6 ;
  wire \counter_reg[20]_i_1__1_n_7 ;
  wire \counter_reg[24]_0 ;
  wire \counter_reg[24]_i_1__1_n_4 ;
  wire \counter_reg[24]_i_1__1_n_5 ;
  wire \counter_reg[24]_i_1__1_n_6 ;
  wire \counter_reg[24]_i_1__1_n_7 ;
  wire \counter_reg[4]_i_1__1_n_0 ;
  wire \counter_reg[4]_i_1__1_n_4 ;
  wire \counter_reg[4]_i_1__1_n_5 ;
  wire \counter_reg[4]_i_1__1_n_6 ;
  wire \counter_reg[4]_i_1__1_n_7 ;
  wire \counter_reg[8]_i_1__1_n_0 ;
  wire \counter_reg[8]_i_1__1_n_4 ;
  wire \counter_reg[8]_i_1__1_n_5 ;
  wire \counter_reg[8]_i_1__1_n_6 ;
  wire \counter_reg[8]_i_1__1_n_7 ;
  wire [2:0]\NLW_counter_reg[0]_i_2__1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[12]_i_1__1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[16]_i_1__1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[20]_i_1__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter_reg[24]_i_1__1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[4]_i_1__1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[8]_i_1__1_CO_UNCONNECTED ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    Q_i_1__7
       (.I0(\counter_reg[24]_0 ),
        .I1(Q_reg),
        .O(\btns[2] ));
  LUT5 #(
    .INIT(32'h00000002)) 
    Q_i_2__1
       (.I0(\counter[0]_i_5__1_n_0 ),
        .I1(\counter[0]_i_8__1_n_0 ),
        .I2(\counter[0]_i_4__1_n_0 ),
        .I3(\counter[0]_i_7__2_n_0 ),
        .I4(Q_i_3__1_n_0),
        .O(\counter_reg[24]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEFFFFFFFFFF)) 
    Q_i_3__1
       (.I0(counter_reg[5]),
        .I1(counter_reg[6]),
        .I2(counter_reg[4]),
        .I3(counter_reg[12]),
        .I4(counter_reg[13]),
        .I5(counter_reg[7]),
        .O(Q_i_3__1_n_0));
  LUT5 #(
    .INIT(32'h00BAFFFF)) 
    \counter[0]_i_1__1 
       (.I0(counter_reg[13]),
        .I1(\counter[0]_i_3__1_n_0 ),
        .I2(counter_reg[12]),
        .I3(\counter[0]_i_4__1_n_0 ),
        .I4(\counter[0]_i_5__1_n_0 ),
        .O(\counter[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000100FFFF)) 
    \counter[0]_i_3__1 
       (.I0(counter_reg[6]),
        .I1(counter_reg[5]),
        .I2(counter_reg[4]),
        .I3(\counter[0]_i_7__2_n_0 ),
        .I4(counter_reg[7]),
        .I5(\counter[0]_i_8__1_n_0 ),
        .O(\counter[0]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \counter[0]_i_4__1 
       (.I0(counter_reg[15]),
        .I1(counter_reg[16]),
        .I2(counter_reg[14]),
        .I3(counter_reg[17]),
        .O(\counter[0]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \counter[0]_i_5__1 
       (.I0(counter_reg[24]),
        .I1(counter_reg[22]),
        .I2(counter_reg[25]),
        .I3(counter_reg[21]),
        .I4(\counter[0]_i_9__0_n_0 ),
        .O(\counter[0]_i_5__1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \counter[0]_i_6 
       (.I0(counter_reg[0]),
        .O(\counter[0]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \counter[0]_i_7__2 
       (.I0(counter_reg[3]),
        .I1(counter_reg[0]),
        .I2(counter_reg[1]),
        .I3(counter_reg[2]),
        .O(\counter[0]_i_7__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[0]_i_8__1 
       (.I0(counter_reg[8]),
        .I1(counter_reg[10]),
        .I2(counter_reg[11]),
        .I3(counter_reg[9]),
        .O(\counter[0]_i_8__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \counter[0]_i_9__0 
       (.I0(counter_reg[19]),
        .I1(counter_reg[20]),
        .I2(counter_reg[27]),
        .I3(counter_reg[23]),
        .I4(counter_reg[26]),
        .I5(counter_reg[18]),
        .O(\counter[0]_i_9__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__1_n_7 ),
        .Q(counter_reg[0]),
        .R(\counter[0]_i_1__1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[0]_i_2__1 
       (.CI(1'b0),
        .CO({\counter_reg[0]_i_2__1_n_0 ,\NLW_counter_reg[0]_i_2__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_reg[0]_i_2__1_n_4 ,\counter_reg[0]_i_2__1_n_5 ,\counter_reg[0]_i_2__1_n_6 ,\counter_reg[0]_i_2__1_n_7 }),
        .S({counter_reg[3:1],\counter[0]_i_6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[10] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__1_n_5 ),
        .Q(counter_reg[10]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[11] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__1_n_4 ),
        .Q(counter_reg[11]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[12] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__1_n_7 ),
        .Q(counter_reg[12]),
        .R(\counter[0]_i_1__1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[12]_i_1__1 
       (.CI(\counter_reg[8]_i_1__1_n_0 ),
        .CO({\counter_reg[12]_i_1__1_n_0 ,\NLW_counter_reg[12]_i_1__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[12]_i_1__1_n_4 ,\counter_reg[12]_i_1__1_n_5 ,\counter_reg[12]_i_1__1_n_6 ,\counter_reg[12]_i_1__1_n_7 }),
        .S(counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[13] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__1_n_6 ),
        .Q(counter_reg[13]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[14] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__1_n_5 ),
        .Q(counter_reg[14]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[15] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[12]_i_1__1_n_4 ),
        .Q(counter_reg[15]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[16] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__1_n_7 ),
        .Q(counter_reg[16]),
        .R(\counter[0]_i_1__1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[16]_i_1__1 
       (.CI(\counter_reg[12]_i_1__1_n_0 ),
        .CO({\counter_reg[16]_i_1__1_n_0 ,\NLW_counter_reg[16]_i_1__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[16]_i_1__1_n_4 ,\counter_reg[16]_i_1__1_n_5 ,\counter_reg[16]_i_1__1_n_6 ,\counter_reg[16]_i_1__1_n_7 }),
        .S(counter_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[17] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__1_n_6 ),
        .Q(counter_reg[17]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[18] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__1_n_5 ),
        .Q(counter_reg[18]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[19] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[16]_i_1__1_n_4 ),
        .Q(counter_reg[19]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__1_n_6 ),
        .Q(counter_reg[1]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[20] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__1_n_7 ),
        .Q(counter_reg[20]),
        .R(\counter[0]_i_1__1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[20]_i_1__1 
       (.CI(\counter_reg[16]_i_1__1_n_0 ),
        .CO({\counter_reg[20]_i_1__1_n_0 ,\NLW_counter_reg[20]_i_1__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[20]_i_1__1_n_4 ,\counter_reg[20]_i_1__1_n_5 ,\counter_reg[20]_i_1__1_n_6 ,\counter_reg[20]_i_1__1_n_7 }),
        .S(counter_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[21] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__1_n_6 ),
        .Q(counter_reg[21]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[22] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__1_n_5 ),
        .Q(counter_reg[22]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[23] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[20]_i_1__1_n_4 ),
        .Q(counter_reg[23]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[24] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__1_n_7 ),
        .Q(counter_reg[24]),
        .R(\counter[0]_i_1__1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[24]_i_1__1 
       (.CI(\counter_reg[20]_i_1__1_n_0 ),
        .CO(\NLW_counter_reg[24]_i_1__1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[24]_i_1__1_n_4 ,\counter_reg[24]_i_1__1_n_5 ,\counter_reg[24]_i_1__1_n_6 ,\counter_reg[24]_i_1__1_n_7 }),
        .S(counter_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[25] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__1_n_6 ),
        .Q(counter_reg[25]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[26] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__1_n_5 ),
        .Q(counter_reg[26]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[27] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[24]_i_1__1_n_4 ),
        .Q(counter_reg[27]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__1_n_5 ),
        .Q(counter_reg[2]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[0]_i_2__1_n_4 ),
        .Q(counter_reg[3]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__1_n_7 ),
        .Q(counter_reg[4]),
        .R(\counter[0]_i_1__1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[4]_i_1__1 
       (.CI(\counter_reg[0]_i_2__1_n_0 ),
        .CO({\counter_reg[4]_i_1__1_n_0 ,\NLW_counter_reg[4]_i_1__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[4]_i_1__1_n_4 ,\counter_reg[4]_i_1__1_n_5 ,\counter_reg[4]_i_1__1_n_6 ,\counter_reg[4]_i_1__1_n_7 }),
        .S(counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[5] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__1_n_6 ),
        .Q(counter_reg[5]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[6] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__1_n_5 ),
        .Q(counter_reg[6]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[7] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[4]_i_1__1_n_4 ),
        .Q(counter_reg[7]),
        .R(\counter[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[8] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__1_n_7 ),
        .Q(counter_reg[8]),
        .R(\counter[0]_i_1__1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[8]_i_1__1 
       (.CI(\counter_reg[4]_i_1__1_n_0 ),
        .CO({\counter_reg[8]_i_1__1_n_0 ,\NLW_counter_reg[8]_i_1__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[8]_i_1__1_n_4 ,\counter_reg[8]_i_1__1_n_5 ,\counter_reg[8]_i_1__1_n_6 ,\counter_reg[8]_i_1__1_n_7 }),
        .S(counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[9] 
       (.C(clk0),
        .CE(1'b1),
        .D(\counter_reg[8]_i_1__1_n_6 ),
        .Q(counter_reg[9]),
        .R(\counter[0]_i_1__1_n_0 ));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_ID_selector_0_0,ID_selector,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* ip_definition_source = "package_project" *) 
(* x_core_info = "ID_selector,Vivado 2020.1" *) 
module design_1_ID_selector_0_0
   (sw,
    state,
    ID);
  input [2:0]sw;
  input state;
  output [3:0]ID;

  wire [3:0]ID;
  wire state;
  wire [2:0]sw;

  design_1_ID_selector_0_0_ID_selector U0
       (.ID(ID[2:0]),
        .state(state),
        .sw(sw));
endmodule

(* ORIG_REF_NAME = "ID_selector" *) 
module design_1_ID_selector_0_0_ID_selector
   (ID,
    sw,
    state);
  output [2:0]ID;
  input [2:0]sw;
  input state;

  wire [2:0]ID;
  wire state;
  wire [2:0]sw;

  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0)) 
    \ID_reg[0] 
       (.CLR(1'b0),
        .D(sw[0]),
        .G(state),
        .GE(1'b1),
        .Q(ID[0]));
  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0)) 
    \ID_reg[1] 
       (.CLR(1'b0),
        .D(sw[1]),
        .G(state),
        .GE(1'b1),
        .Q(ID[1]));
  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0)) 
    \ID_reg[2] 
       (.CLR(1'b0),
        .D(sw[2]),
        .G(state),
        .GE(1'b1),
        .Q(ID[2]));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_Init_0_0,Init_v1_0,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "Init_v1_0,Vivado 2020.1" *) 
module design_1_Init_0_0
   (clk,
    sm_state,
    active,
    leds,
    s00_axi_aclk,
    s00_axi_aresetn,
    s00_axi_awaddr,
    s00_axi_awprot,
    s00_axi_awvalid,
    s00_axi_awready,
    s00_axi_wdata,
    s00_axi_wstrb,
    s00_axi_wvalid,
    s00_axi_wready,
    s00_axi_bresp,
    s00_axi_bvalid,
    s00_axi_bready,
    s00_axi_araddr,
    s00_axi_arprot,
    s00_axi_arvalid,
    s00_axi_arready,
    s00_axi_rdata,
    s00_axi_rresp,
    s00_axi_rvalid,
    s00_axi_rready);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME clk, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.000, CLK_DOMAIN design_1_clk_0, INSERT_VIP 0" *) input clk;
  input [2:0]sm_state;
  output active;
  output [3:0]leds;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 S00_AXI_CLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME S00_AXI_CLK, ASSOCIATED_BUSIF S00_AXI, ASSOCIATED_RESET s00_axi_aresetn, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, INSERT_VIP 0" *) input s00_axi_aclk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 S00_AXI_RST RST" *) (* x_interface_parameter = "XIL_INTERFACENAME S00_AXI_RST, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input s00_axi_aresetn;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWADDR" *) (* x_interface_parameter = "XIL_INTERFACENAME S00_AXI, WIZ_DATA_WIDTH 32, WIZ_NUM_REG 4, SUPPORTS_NARROW_BURST 0, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 4, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [3:0]s00_axi_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWPROT" *) input [2:0]s00_axi_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWVALID" *) input s00_axi_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWREADY" *) output s00_axi_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WDATA" *) input [31:0]s00_axi_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WSTRB" *) input [3:0]s00_axi_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WVALID" *) input s00_axi_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WREADY" *) output s00_axi_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI BRESP" *) output [1:0]s00_axi_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI BVALID" *) output s00_axi_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI BREADY" *) input s00_axi_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARADDR" *) input [3:0]s00_axi_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARPROT" *) input [2:0]s00_axi_arprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARVALID" *) input s00_axi_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARREADY" *) output s00_axi_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RDATA" *) output [31:0]s00_axi_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RRESP" *) output [1:0]s00_axi_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RVALID" *) output s00_axi_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RREADY" *) input s00_axi_rready;

  wire active;
  wire clk;
  wire [3:0]leds;
  wire s00_axi_aclk;
  wire [3:0]s00_axi_araddr;
  wire s00_axi_aresetn;
  wire s00_axi_arready;
  wire s00_axi_arvalid;
  wire [3:0]s00_axi_awaddr;
  wire s00_axi_awready;
  wire s00_axi_awvalid;
  wire s00_axi_bready;
  wire s00_axi_bvalid;
  wire [31:0]s00_axi_rdata;
  wire s00_axi_rready;
  wire s00_axi_rvalid;
  wire [31:0]s00_axi_wdata;
  wire s00_axi_wready;
  wire s00_axi_wvalid;
  wire [2:0]sm_state;
  wire [3:0]NLW_U0_s00_axi_wstrb_UNCONNECTED;

  design_1_Init_0_0_Init_v1_0 U0
       (.S_AXI_ARREADY(s00_axi_arready),
        .S_AXI_AWREADY(s00_axi_awready),
        .S_AXI_WREADY(s00_axi_wready),
        .active(active),
        .clk(clk),
        .leds(leds),
        .s00_axi_aclk(s00_axi_aclk),
        .s00_axi_araddr(s00_axi_araddr[3:2]),
        .s00_axi_aresetn(s00_axi_aresetn),
        .s00_axi_arvalid(s00_axi_arvalid),
        .s00_axi_awaddr(s00_axi_awaddr[3:2]),
        .s00_axi_awvalid(s00_axi_awvalid),
        .s00_axi_bready(s00_axi_bready),
        .s00_axi_bvalid(s00_axi_bvalid),
        .s00_axi_rdata(s00_axi_rdata),
        .s00_axi_rready(s00_axi_rready),
        .s00_axi_rvalid(s00_axi_rvalid),
        .s00_axi_wdata(s00_axi_wdata),
        .s00_axi_wstrb(NLW_U0_s00_axi_wstrb_UNCONNECTED[3:0]),
        .s00_axi_wvalid(s00_axi_wvalid),
        .sm_state(sm_state));
endmodule

(* ORIG_REF_NAME = "Init_v1_0" *) 
module design_1_Init_0_0_Init_v1_0
   (S_AXI_AWREADY,
    S_AXI_WREADY,
    leds,
    S_AXI_ARREADY,
    s00_axi_rdata,
    active,
    s00_axi_rvalid,
    s00_axi_bvalid,
    sm_state,
    s00_axi_aclk,
    s00_axi_awaddr,
    s00_axi_awvalid,
    s00_axi_wvalid,
    s00_axi_wdata,
    clk,
    s00_axi_araddr,
    s00_axi_arvalid,
    s00_axi_wstrb,
    s00_axi_aresetn,
    s00_axi_bready,
    s00_axi_rready);
  output S_AXI_AWREADY;
  output S_AXI_WREADY;
  output [3:0]leds;
  output S_AXI_ARREADY;
  output [31:0]s00_axi_rdata;
  output active;
  output s00_axi_rvalid;
  output s00_axi_bvalid;
  input [2:0]sm_state;
  input s00_axi_aclk;
  input [1:0]s00_axi_awaddr;
  input s00_axi_awvalid;
  input s00_axi_wvalid;
  input [31:0]s00_axi_wdata;
  input clk;
  input [1:0]s00_axi_araddr;
  input s00_axi_arvalid;
  input [3:0]s00_axi_wstrb;
  input s00_axi_aresetn;
  input s00_axi_bready;
  input s00_axi_rready;

  wire S_AXI_ARREADY;
  wire S_AXI_AWREADY;
  wire S_AXI_WREADY;
  wire active;
  wire clk;
  wire [3:0]leds;
  wire s00_axi_aclk;
  wire [1:0]s00_axi_araddr;
  wire s00_axi_aresetn;
  wire s00_axi_arvalid;
  wire [1:0]s00_axi_awaddr;
  wire s00_axi_awvalid;
  wire s00_axi_bready;
  wire s00_axi_bvalid;
  wire [31:0]s00_axi_rdata;
  wire s00_axi_rready;
  wire s00_axi_rvalid;
  wire [31:0]s00_axi_wdata;
  wire s00_axi_wvalid;
  wire [2:0]sm_state;
  wire [3:0]NLW_Init_v1_0_S00_AXI_inst_s00_axi_wstrb_UNCONNECTED;

  design_1_Init_0_0_Init_v1_0_S00_AXI Init_v1_0_S00_AXI_inst
       (.S_AXI_ARREADY(S_AXI_ARREADY),
        .S_AXI_AWREADY(S_AXI_AWREADY),
        .S_AXI_WREADY(S_AXI_WREADY),
        .active(active),
        .clk(clk),
        .leds(leds),
        .s00_axi_aclk(s00_axi_aclk),
        .s00_axi_araddr(s00_axi_araddr),
        .s00_axi_aresetn(s00_axi_aresetn),
        .s00_axi_arvalid(s00_axi_arvalid),
        .s00_axi_awaddr(s00_axi_awaddr),
        .s00_axi_awvalid(s00_axi_awvalid),
        .s00_axi_bready(s00_axi_bready),
        .s00_axi_bvalid(s00_axi_bvalid),
        .s00_axi_rdata(s00_axi_rdata),
        .s00_axi_rready(s00_axi_rready),
        .s00_axi_rvalid(s00_axi_rvalid),
        .s00_axi_wdata(s00_axi_wdata),
        .s00_axi_wstrb(NLW_Init_v1_0_S00_AXI_inst_s00_axi_wstrb_UNCONNECTED[3:0]),
        .s00_axi_wvalid(s00_axi_wvalid),
        .sm_state(sm_state));
endmodule

(* ORIG_REF_NAME = "Init_v1_0_S00_AXI" *) 
module design_1_Init_0_0_Init_v1_0_S00_AXI
   (S_AXI_AWREADY,
    S_AXI_WREADY,
    leds,
    S_AXI_ARREADY,
    s00_axi_rdata,
    active,
    s00_axi_rvalid,
    s00_axi_bvalid,
    sm_state,
    s00_axi_aclk,
    s00_axi_awaddr,
    s00_axi_awvalid,
    s00_axi_wvalid,
    s00_axi_wdata,
    clk,
    s00_axi_araddr,
    s00_axi_arvalid,
    s00_axi_wstrb,
    s00_axi_aresetn,
    s00_axi_bready,
    s00_axi_rready);
  output S_AXI_AWREADY;
  output S_AXI_WREADY;
  output [3:0]leds;
  output S_AXI_ARREADY;
  output [31:0]s00_axi_rdata;
  output active;
  output s00_axi_rvalid;
  output s00_axi_bvalid;
  input [2:0]sm_state;
  input s00_axi_aclk;
  input [1:0]s00_axi_awaddr;
  input s00_axi_awvalid;
  input s00_axi_wvalid;
  input [31:0]s00_axi_wdata;
  input clk;
  input [1:0]s00_axi_araddr;
  input s00_axi_arvalid;
  input [3:0]s00_axi_wstrb;
  input s00_axi_aresetn;
  input s00_axi_bready;
  input s00_axi_rready;

  wire S_AXI_ARREADY;
  wire S_AXI_AWREADY;
  wire S_AXI_WREADY;
  wire active;
  wire active0_carry__0_i_1_n_0;
  wire active0_carry__0_i_2_n_0;
  wire active0_carry__0_i_3_n_0;
  wire active0_carry__0_i_4_n_0;
  wire active0_carry__0_i_5_n_0;
  wire active0_carry__0_i_6_n_0;
  wire active0_carry__0_i_7_n_0;
  wire active0_carry__0_i_8_n_0;
  wire active0_carry__0_n_0;
  wire active0_carry__1_i_1_n_0;
  wire active0_carry__1_i_2_n_0;
  wire active0_carry__1_i_3_n_0;
  wire active0_carry__1_i_4_n_0;
  wire active0_carry__1_i_5_n_0;
  wire active0_carry__1_i_6_n_0;
  wire active0_carry__1_i_7_n_0;
  wire active0_carry__1_i_8_n_0;
  wire active0_carry__1_n_0;
  wire active0_carry__2_i_1_n_0;
  wire active0_carry__2_i_2_n_0;
  wire active0_carry__2_i_3_n_0;
  wire active0_carry__2_i_4_n_0;
  wire active0_carry__2_i_5_n_0;
  wire active0_carry__2_i_6_n_0;
  wire active0_carry_i_1_n_0;
  wire active0_carry_i_2_n_0;
  wire active0_carry_i_3_n_0;
  wire active0_carry_i_4_n_0;
  wire active0_carry_i_5_n_0;
  wire active0_carry_i_6_n_0;
  wire active0_carry_i_7_n_0;
  wire active0_carry_i_8_n_0;
  wire active0_carry_n_0;
  wire \active0_inferred__0/i__carry__0_n_0 ;
  wire \active0_inferred__0/i__carry__1_n_0 ;
  wire \active0_inferred__0/i__carry__2_n_0 ;
  wire \active0_inferred__0/i__carry_n_0 ;
  wire [31:0]active1;
  wire \active1_inferred__0/i__carry__0_n_0 ;
  wire \active1_inferred__0/i__carry__1_n_0 ;
  wire \active1_inferred__0/i__carry__2_n_0 ;
  wire \active1_inferred__0/i__carry_n_0 ;
  wire \active1_inferred__1/i__carry__0_n_0 ;
  wire \active1_inferred__1/i__carry__1_n_0 ;
  wire \active1_inferred__1/i__carry__2_n_0 ;
  wire \active1_inferred__1/i__carry__3_n_0 ;
  wire \active1_inferred__1/i__carry__4_n_0 ;
  wire \active1_inferred__1/i__carry__5_n_0 ;
  wire \active1_inferred__1/i__carry_n_0 ;
  wire \active1_inferred__2/i__carry__0_n_0 ;
  wire \active1_inferred__2/i__carry__1_n_0 ;
  wire \active1_inferred__2/i__carry__2_n_0 ;
  wire \active1_inferred__2/i__carry_n_0 ;
  wire [31:1]active2;
  wire active_i_1_n_0;
  wire active_i_2_n_0;
  wire active_i_3_n_0;
  wire aw_en_i_1_n_0;
  wire aw_en_reg_n_0;
  wire [3:2]axi_araddr;
  wire \axi_araddr[2]_i_1_n_0 ;
  wire \axi_araddr[3]_i_1_n_0 ;
  wire axi_arready0;
  wire \axi_awaddr[2]_i_1_n_0 ;
  wire \axi_awaddr[3]_i_1_n_0 ;
  wire axi_awready0;
  wire axi_awready_i_1_n_0;
  wire axi_bvalid_i_1_n_0;
  wire axi_rvalid_i_1_n_0;
  wire axi_wready0;
  wire clk;
  wire complete;
  wire complete_0;
  wire complete_inv_i_1_n_0;
  wire \counter[0]_i_3_n_0 ;
  wire [31:0]counter_reg;
  wire \counter_reg[0]_i_2_n_0 ;
  wire \counter_reg[0]_i_2_n_4 ;
  wire \counter_reg[0]_i_2_n_5 ;
  wire \counter_reg[0]_i_2_n_6 ;
  wire \counter_reg[0]_i_2_n_7 ;
  wire \counter_reg[12]_i_1_n_0 ;
  wire \counter_reg[12]_i_1_n_4 ;
  wire \counter_reg[12]_i_1_n_5 ;
  wire \counter_reg[12]_i_1_n_6 ;
  wire \counter_reg[12]_i_1_n_7 ;
  wire \counter_reg[16]_i_1_n_0 ;
  wire \counter_reg[16]_i_1_n_4 ;
  wire \counter_reg[16]_i_1_n_5 ;
  wire \counter_reg[16]_i_1_n_6 ;
  wire \counter_reg[16]_i_1_n_7 ;
  wire \counter_reg[20]_i_1_n_0 ;
  wire \counter_reg[20]_i_1_n_4 ;
  wire \counter_reg[20]_i_1_n_5 ;
  wire \counter_reg[20]_i_1_n_6 ;
  wire \counter_reg[20]_i_1_n_7 ;
  wire \counter_reg[24]_i_1_n_0 ;
  wire \counter_reg[24]_i_1_n_4 ;
  wire \counter_reg[24]_i_1_n_5 ;
  wire \counter_reg[24]_i_1_n_6 ;
  wire \counter_reg[24]_i_1_n_7 ;
  wire \counter_reg[28]_i_1_n_4 ;
  wire \counter_reg[28]_i_1_n_5 ;
  wire \counter_reg[28]_i_1_n_6 ;
  wire \counter_reg[28]_i_1_n_7 ;
  wire \counter_reg[4]_i_1_n_0 ;
  wire \counter_reg[4]_i_1_n_4 ;
  wire \counter_reg[4]_i_1_n_5 ;
  wire \counter_reg[4]_i_1_n_6 ;
  wire \counter_reg[4]_i_1_n_7 ;
  wire \counter_reg[8]_i_1_n_0 ;
  wire \counter_reg[8]_i_1_n_4 ;
  wire \counter_reg[8]_i_1_n_5 ;
  wire \counter_reg[8]_i_1_n_6 ;
  wire \counter_reg[8]_i_1_n_7 ;
  wire i__carry__0_i_10_n_0;
  wire i__carry__0_i_10_n_4;
  wire i__carry__0_i_10_n_5;
  wire i__carry__0_i_10_n_6;
  wire i__carry__0_i_10_n_7;
  wire i__carry__0_i_1__0_n_0;
  wire i__carry__0_i_1__1_n_0;
  wire i__carry__0_i_1__2_n_0;
  wire i__carry__0_i_1_n_0;
  wire i__carry__0_i_2__0_n_0;
  wire i__carry__0_i_2__1_n_0;
  wire i__carry__0_i_2__2_n_0;
  wire i__carry__0_i_2_n_0;
  wire i__carry__0_i_3__0_n_0;
  wire i__carry__0_i_3__1_n_0;
  wire i__carry__0_i_3__2_n_0;
  wire i__carry__0_i_3_n_0;
  wire i__carry__0_i_4__0_n_0;
  wire i__carry__0_i_4__1_n_0;
  wire i__carry__0_i_4__2_n_0;
  wire i__carry__0_i_4_n_0;
  wire i__carry__0_i_5__0_n_0;
  wire i__carry__0_i_5__1_n_0;
  wire i__carry__0_i_5_n_0;
  wire i__carry__0_i_6__0_n_0;
  wire i__carry__0_i_6__1_n_0;
  wire i__carry__0_i_6_n_0;
  wire i__carry__0_i_7__0_n_0;
  wire i__carry__0_i_7__1_n_0;
  wire i__carry__0_i_7_n_0;
  wire i__carry__0_i_8__0_n_0;
  wire i__carry__0_i_8__1_n_0;
  wire i__carry__0_i_8_n_0;
  wire i__carry__0_i_9_n_0;
  wire i__carry__0_i_9_n_4;
  wire i__carry__0_i_9_n_5;
  wire i__carry__0_i_9_n_6;
  wire i__carry__0_i_9_n_7;
  wire i__carry__1_i_10_n_0;
  wire i__carry__1_i_10_n_4;
  wire i__carry__1_i_10_n_5;
  wire i__carry__1_i_10_n_6;
  wire i__carry__1_i_10_n_7;
  wire i__carry__1_i_1__0_n_0;
  wire i__carry__1_i_1__1_n_0;
  wire i__carry__1_i_1__2_n_0;
  wire i__carry__1_i_1_n_0;
  wire i__carry__1_i_2__0_n_0;
  wire i__carry__1_i_2__1_n_0;
  wire i__carry__1_i_2__2_n_0;
  wire i__carry__1_i_2_n_0;
  wire i__carry__1_i_3__0_n_0;
  wire i__carry__1_i_3__1_n_0;
  wire i__carry__1_i_3__2_n_0;
  wire i__carry__1_i_3_n_0;
  wire i__carry__1_i_4__0_n_0;
  wire i__carry__1_i_4__1_n_0;
  wire i__carry__1_i_4__2_n_0;
  wire i__carry__1_i_4_n_0;
  wire i__carry__1_i_5__0_n_0;
  wire i__carry__1_i_5__1_n_0;
  wire i__carry__1_i_5_n_0;
  wire i__carry__1_i_6__0_n_0;
  wire i__carry__1_i_6__1_n_0;
  wire i__carry__1_i_6_n_0;
  wire i__carry__1_i_7__0_n_0;
  wire i__carry__1_i_7__1_n_0;
  wire i__carry__1_i_7_n_0;
  wire i__carry__1_i_8__0_n_0;
  wire i__carry__1_i_8__1_n_0;
  wire i__carry__1_i_8_n_0;
  wire i__carry__1_i_9_n_0;
  wire i__carry__1_i_9_n_4;
  wire i__carry__1_i_9_n_5;
  wire i__carry__1_i_9_n_6;
  wire i__carry__1_i_9_n_7;
  wire i__carry__2_i_10_n_0;
  wire i__carry__2_i_10_n_4;
  wire i__carry__2_i_10_n_5;
  wire i__carry__2_i_10_n_6;
  wire i__carry__2_i_10_n_7;
  wire i__carry__2_i_1__0_n_0;
  wire i__carry__2_i_1__1_n_0;
  wire i__carry__2_i_1__2_n_0;
  wire i__carry__2_i_1_n_0;
  wire i__carry__2_i_2__0_n_0;
  wire i__carry__2_i_2__1_n_0;
  wire i__carry__2_i_2__2_n_0;
  wire i__carry__2_i_2_n_0;
  wire i__carry__2_i_3__0_n_0;
  wire i__carry__2_i_3__1_n_0;
  wire i__carry__2_i_3__2_n_0;
  wire i__carry__2_i_3_n_0;
  wire i__carry__2_i_4__0_n_0;
  wire i__carry__2_i_4__1_n_0;
  wire i__carry__2_i_4__2_n_0;
  wire i__carry__2_i_4_n_0;
  wire i__carry__2_i_5__0_n_0;
  wire i__carry__2_i_5__1_n_0;
  wire i__carry__2_i_5_n_0;
  wire i__carry__2_i_6__0_n_0;
  wire i__carry__2_i_6__1_n_0;
  wire i__carry__2_i_6_n_0;
  wire i__carry__2_i_7__0_n_0;
  wire i__carry__2_i_7__1_n_0;
  wire i__carry__2_i_7_n_0;
  wire i__carry__2_i_8__0_n_0;
  wire i__carry__2_i_8__1_n_0;
  wire i__carry__2_i_8_n_0;
  wire i__carry__2_i_9_n_5;
  wire i__carry__2_i_9_n_6;
  wire i__carry__2_i_9_n_7;
  wire i__carry__3_i_1_n_0;
  wire i__carry__3_i_2_n_0;
  wire i__carry__3_i_3_n_0;
  wire i__carry__3_i_4_n_0;
  wire i__carry__4_i_1_n_0;
  wire i__carry__4_i_2_n_0;
  wire i__carry__4_i_3_n_0;
  wire i__carry__4_i_4_n_0;
  wire i__carry__5_i_1_n_0;
  wire i__carry__5_i_2_n_0;
  wire i__carry__5_i_3_n_0;
  wire i__carry__5_i_4_n_0;
  wire i__carry__6_i_1_n_0;
  wire i__carry__6_i_2_n_0;
  wire i__carry__6_i_3_n_0;
  wire i__carry__6_i_4_n_0;
  wire i__carry_i_10_n_0;
  wire i__carry_i_10_n_4;
  wire i__carry_i_10_n_5;
  wire i__carry_i_10_n_6;
  wire i__carry_i_10_n_7;
  wire i__carry_i_1__0_n_0;
  wire i__carry_i_1__1_n_0;
  wire i__carry_i_1__2_n_0;
  wire i__carry_i_1_n_0;
  wire i__carry_i_2__0_n_0;
  wire i__carry_i_2__1_n_0;
  wire i__carry_i_2__2_n_0;
  wire i__carry_i_2_n_0;
  wire i__carry_i_3__0_n_0;
  wire i__carry_i_3__1_n_0;
  wire i__carry_i_3__2_n_0;
  wire i__carry_i_3_n_0;
  wire i__carry_i_4__0_n_0;
  wire i__carry_i_4__1_n_0;
  wire i__carry_i_4_n_0;
  wire i__carry_i_5__0_n_0;
  wire i__carry_i_5__1_n_0;
  wire i__carry_i_5_n_0;
  wire i__carry_i_6__0_n_0;
  wire i__carry_i_6__1_n_0;
  wire i__carry_i_6_n_0;
  wire i__carry_i_7__0_n_0;
  wire i__carry_i_7__1_n_0;
  wire i__carry_i_7_n_0;
  wire i__carry_i_8__0_n_0;
  wire i__carry_i_8__1_n_0;
  wire i__carry_i_8_n_0;
  wire i__carry_i_9_n_0;
  wire i__carry_i_9_n_4;
  wire i__carry_i_9_n_5;
  wire i__carry_i_9_n_6;
  wire i__carry_i_9_n_7;
  wire [3:0]leds;
  wire \leds[0]_i_1_n_0 ;
  wire \leds[1]_i_1_n_0 ;
  wire \leds[2]_i_1_n_0 ;
  wire \leds[3]_i_1_n_0 ;
  wire \leds[3]_i_2_n_0 ;
  wire [1:0]p_0_in;
  wire p_1_in;
  wire [31:0]reg_data_out;
  wire s00_axi_aclk;
  wire [1:0]s00_axi_araddr;
  wire s00_axi_aresetn;
  wire s00_axi_arvalid;
  wire [1:0]s00_axi_awaddr;
  wire s00_axi_awvalid;
  wire s00_axi_bready;
  wire s00_axi_bvalid;
  wire [31:0]s00_axi_rdata;
  wire s00_axi_rready;
  wire s00_axi_rvalid;
  wire [31:0]s00_axi_wdata;
  wire s00_axi_wvalid;
  wire \slv_reg0[15]_i_1_n_0 ;
  wire \slv_reg0[23]_i_1_n_0 ;
  wire \slv_reg0[31]_i_1_n_0 ;
  wire \slv_reg0[7]_i_1_n_0 ;
  wire \slv_reg0_reg_n_0_[31] ;
  wire [31:0]slv_reg1;
  wire \slv_reg1[15]_i_1_n_0 ;
  wire \slv_reg1[23]_i_1_n_0 ;
  wire \slv_reg1[31]_i_1_n_0 ;
  wire \slv_reg1[7]_i_1_n_0 ;
  wire [31:0]slv_reg2;
  wire \slv_reg2[15]_i_1_n_0 ;
  wire \slv_reg2[23]_i_1_n_0 ;
  wire \slv_reg2[31]_i_1_n_0 ;
  wire \slv_reg2[7]_i_1_n_0 ;
  wire [31:0]slv_reg3;
  wire \slv_reg3[15]_i_1_n_0 ;
  wire \slv_reg3[23]_i_1_n_0 ;
  wire \slv_reg3[31]_i_1_n_0 ;
  wire \slv_reg3[7]_i_1_n_0 ;
  wire slv_reg_rden;
  wire slv_reg_wren__2;
  wire [2:0]sm_state;
  wire [2:0]NLW_active0_carry_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry_O_UNCONNECTED;
  wire [2:0]NLW_active0_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_active0_carry__1_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry__1_O_UNCONNECTED;
  wire [3:0]NLW_active0_carry__2_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry__2_O_UNCONNECTED;
  wire [2:0]\NLW_active0_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_active0_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_active0_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_active0_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [2:0]\NLW_active0_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_active0_inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [2:0]\NLW_active0_inferred__0/i__carry__2_CO_UNCONNECTED ;
  wire [3:0]\NLW_active0_inferred__0/i__carry__2_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__0/i__carry__2_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__0/i__carry__2_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__1/i__carry_CO_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__1/i__carry__0_CO_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__1/i__carry__1_CO_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__1/i__carry__2_CO_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__1/i__carry__3_CO_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__1/i__carry__4_CO_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__1/i__carry__5_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__1/i__carry__6_CO_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__2/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__2/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__2/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__2/i__carry__0_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__2/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__2/i__carry__1_O_UNCONNECTED ;
  wire [2:0]\NLW_active1_inferred__2/i__carry__2_CO_UNCONNECTED ;
  wire [3:0]\NLW_active1_inferred__2/i__carry__2_O_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[0]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[16]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[20]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter_reg[28]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[8]_i_1_CO_UNCONNECTED ;
  wire [2:0]NLW_i__carry__0_i_10_CO_UNCONNECTED;
  wire [2:0]NLW_i__carry__0_i_9_CO_UNCONNECTED;
  wire [2:0]NLW_i__carry__1_i_10_CO_UNCONNECTED;
  wire [2:0]NLW_i__carry__1_i_9_CO_UNCONNECTED;
  wire [2:0]NLW_i__carry__2_i_10_CO_UNCONNECTED;
  wire [3:0]NLW_i__carry__2_i_9_CO_UNCONNECTED;
  wire [3:3]NLW_i__carry__2_i_9_O_UNCONNECTED;
  wire [2:0]NLW_i__carry_i_10_CO_UNCONNECTED;
  wire [2:0]NLW_i__carry_i_9_CO_UNCONNECTED;

  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry
       (.CI(1'b0),
        .CO({active0_carry_n_0,NLW_active0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({active0_carry_i_1_n_0,active0_carry_i_2_n_0,active0_carry_i_3_n_0,active0_carry_i_4_n_0}),
        .O(NLW_active0_carry_O_UNCONNECTED[3:0]),
        .S({active0_carry_i_5_n_0,active0_carry_i_6_n_0,active0_carry_i_7_n_0,active0_carry_i_8_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__0
       (.CI(active0_carry_n_0),
        .CO({active0_carry__0_n_0,NLW_active0_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({active0_carry__0_i_1_n_0,active0_carry__0_i_2_n_0,active0_carry__0_i_3_n_0,active0_carry__0_i_4_n_0}),
        .O(NLW_active0_carry__0_O_UNCONNECTED[3:0]),
        .S({active0_carry__0_i_5_n_0,active0_carry__0_i_6_n_0,active0_carry__0_i_7_n_0,active0_carry__0_i_8_n_0}));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__0_i_1
       (.I0(active2[15]),
        .I1(i__carry__0_i_9_n_4),
        .I2(i__carry__1_i_10_n_7),
        .I3(active2[16]),
        .O(active0_carry__0_i_1_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__0_i_2
       (.I0(active2[13]),
        .I1(i__carry__0_i_9_n_6),
        .I2(i__carry__0_i_9_n_5),
        .I3(active2[14]),
        .O(active0_carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__0_i_3
       (.I0(active2[11]),
        .I1(i__carry__0_i_10_n_4),
        .I2(i__carry__0_i_9_n_7),
        .I3(active2[12]),
        .O(active0_carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__0_i_4
       (.I0(active2[9]),
        .I1(i__carry__0_i_10_n_6),
        .I2(i__carry__0_i_10_n_5),
        .I3(active2[10]),
        .O(active0_carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__0_i_5
       (.I0(active2[15]),
        .I1(i__carry__0_i_9_n_4),
        .I2(active2[16]),
        .I3(i__carry__1_i_10_n_7),
        .O(active0_carry__0_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__0_i_6
       (.I0(active2[13]),
        .I1(i__carry__0_i_9_n_6),
        .I2(active2[14]),
        .I3(i__carry__0_i_9_n_5),
        .O(active0_carry__0_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__0_i_7
       (.I0(active2[11]),
        .I1(i__carry__0_i_10_n_4),
        .I2(active2[12]),
        .I3(i__carry__0_i_9_n_7),
        .O(active0_carry__0_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__0_i_8
       (.I0(active2[9]),
        .I1(i__carry__0_i_10_n_6),
        .I2(active2[10]),
        .I3(i__carry__0_i_10_n_5),
        .O(active0_carry__0_i_8_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__1
       (.CI(active0_carry__0_n_0),
        .CO({active0_carry__1_n_0,NLW_active0_carry__1_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({active0_carry__1_i_1_n_0,active0_carry__1_i_2_n_0,active0_carry__1_i_3_n_0,active0_carry__1_i_4_n_0}),
        .O(NLW_active0_carry__1_O_UNCONNECTED[3:0]),
        .S({active0_carry__1_i_5_n_0,active0_carry__1_i_6_n_0,active0_carry__1_i_7_n_0,active0_carry__1_i_8_n_0}));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__1_i_1
       (.I0(active2[23]),
        .I1(i__carry__1_i_9_n_4),
        .I2(i__carry__2_i_10_n_7),
        .I3(active2[24]),
        .O(active0_carry__1_i_1_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__1_i_2
       (.I0(active2[21]),
        .I1(i__carry__1_i_9_n_6),
        .I2(i__carry__1_i_9_n_5),
        .I3(active2[22]),
        .O(active0_carry__1_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__1_i_3
       (.I0(active2[19]),
        .I1(i__carry__1_i_10_n_4),
        .I2(i__carry__1_i_9_n_7),
        .I3(active2[20]),
        .O(active0_carry__1_i_3_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__1_i_4
       (.I0(active2[17]),
        .I1(i__carry__1_i_10_n_6),
        .I2(i__carry__1_i_10_n_5),
        .I3(active2[18]),
        .O(active0_carry__1_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__1_i_5
       (.I0(active2[23]),
        .I1(i__carry__1_i_9_n_4),
        .I2(active2[24]),
        .I3(i__carry__2_i_10_n_7),
        .O(active0_carry__1_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__1_i_6
       (.I0(active2[21]),
        .I1(i__carry__1_i_9_n_6),
        .I2(active2[22]),
        .I3(i__carry__1_i_9_n_5),
        .O(active0_carry__1_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__1_i_7
       (.I0(active2[19]),
        .I1(i__carry__1_i_10_n_4),
        .I2(active2[20]),
        .I3(i__carry__1_i_9_n_7),
        .O(active0_carry__1_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__1_i_8
       (.I0(active2[17]),
        .I1(i__carry__1_i_10_n_6),
        .I2(active2[18]),
        .I3(i__carry__1_i_10_n_5),
        .O(active0_carry__1_i_8_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__2
       (.CI(active0_carry__1_n_0),
        .CO({NLW_active0_carry__2_CO_UNCONNECTED[3],p_1_in,NLW_active0_carry__2_CO_UNCONNECTED[1:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,active0_carry__2_i_1_n_0,active0_carry__2_i_2_n_0,active0_carry__2_i_3_n_0}),
        .O(NLW_active0_carry__2_O_UNCONNECTED[3:0]),
        .S({1'b0,active0_carry__2_i_4_n_0,active0_carry__2_i_5_n_0,active0_carry__2_i_6_n_0}));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__2_i_1
       (.I0(active2[29]),
        .I1(i__carry__2_i_9_n_6),
        .I2(active2[30]),
        .I3(i__carry__2_i_9_n_5),
        .O(active0_carry__2_i_1_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__2_i_2
       (.I0(active2[27]),
        .I1(i__carry__2_i_10_n_4),
        .I2(i__carry__2_i_9_n_7),
        .I3(active2[28]),
        .O(active0_carry__2_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry__2_i_3
       (.I0(active2[25]),
        .I1(i__carry__2_i_10_n_6),
        .I2(i__carry__2_i_10_n_5),
        .I3(active2[26]),
        .O(active0_carry__2_i_3_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__2_i_4
       (.I0(active2[29]),
        .I1(i__carry__2_i_9_n_6),
        .I2(i__carry__2_i_9_n_5),
        .I3(active2[30]),
        .O(active0_carry__2_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__2_i_5
       (.I0(active2[27]),
        .I1(i__carry__2_i_10_n_4),
        .I2(active2[28]),
        .I3(i__carry__2_i_9_n_7),
        .O(active0_carry__2_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry__2_i_6
       (.I0(active2[25]),
        .I1(i__carry__2_i_10_n_6),
        .I2(active2[26]),
        .I3(i__carry__2_i_10_n_5),
        .O(active0_carry__2_i_6_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry_i_1
       (.I0(active2[7]),
        .I1(i__carry_i_9_n_4),
        .I2(i__carry__0_i_10_n_7),
        .I3(active2[8]),
        .O(active0_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry_i_2
       (.I0(active2[5]),
        .I1(i__carry_i_9_n_6),
        .I2(i__carry_i_9_n_5),
        .I3(active2[6]),
        .O(active0_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry_i_3
       (.I0(active2[3]),
        .I1(i__carry_i_10_n_4),
        .I2(i__carry_i_9_n_7),
        .I3(active2[4]),
        .O(active0_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    active0_carry_i_4
       (.I0(active2[1]),
        .I1(i__carry_i_10_n_6),
        .I2(i__carry_i_10_n_5),
        .I3(active2[2]),
        .O(active0_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry_i_5
       (.I0(active2[7]),
        .I1(i__carry_i_9_n_4),
        .I2(active2[8]),
        .I3(i__carry__0_i_10_n_7),
        .O(active0_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry_i_6
       (.I0(active2[5]),
        .I1(i__carry_i_9_n_6),
        .I2(active2[6]),
        .I3(i__carry_i_9_n_5),
        .O(active0_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry_i_7
       (.I0(active2[3]),
        .I1(i__carry_i_10_n_4),
        .I2(active2[4]),
        .I3(i__carry_i_9_n_7),
        .O(active0_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    active0_carry_i_8
       (.I0(active2[1]),
        .I1(i__carry_i_10_n_6),
        .I2(active2[2]),
        .I3(i__carry_i_10_n_5),
        .O(active0_carry_i_8_n_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active0_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\active0_inferred__0/i__carry_n_0 ,\NLW_active0_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry_i_1__0_n_0,i__carry_i_2__0_n_0,i__carry_i_3__1_n_0,i__carry_i_4_n_0}),
        .O(\NLW_active0_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_5__0_n_0,i__carry_i_6__0_n_0,i__carry_i_7__0_n_0,i__carry_i_8__0_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active0_inferred__0/i__carry__0 
       (.CI(\active0_inferred__0/i__carry_n_0 ),
        .CO({\active0_inferred__0/i__carry__0_n_0 ,\NLW_active0_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__0_i_1__0_n_0,i__carry__0_i_2__0_n_0,i__carry__0_i_3__0_n_0,i__carry__0_i_4__0_n_0}),
        .O(\NLW_active0_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_5__0_n_0,i__carry__0_i_6__0_n_0,i__carry__0_i_7__0_n_0,i__carry__0_i_8__0_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active0_inferred__0/i__carry__1 
       (.CI(\active0_inferred__0/i__carry__0_n_0 ),
        .CO({\active0_inferred__0/i__carry__1_n_0 ,\NLW_active0_inferred__0/i__carry__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__1_i_1__0_n_0,i__carry__1_i_2__0_n_0,i__carry__1_i_3__0_n_0,i__carry__1_i_4__0_n_0}),
        .O(\NLW_active0_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({i__carry__1_i_5__0_n_0,i__carry__1_i_6__0_n_0,i__carry__1_i_7__0_n_0,i__carry__1_i_8__0_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active0_inferred__0/i__carry__2 
       (.CI(\active0_inferred__0/i__carry__1_n_0 ),
        .CO({\active0_inferred__0/i__carry__2_n_0 ,\NLW_active0_inferred__0/i__carry__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__2_i_1__0_n_0,i__carry__2_i_2__0_n_0,i__carry__2_i_3__0_n_0,i__carry__2_i_4__0_n_0}),
        .O(\NLW_active0_inferred__0/i__carry__2_O_UNCONNECTED [3:0]),
        .S({i__carry__2_i_5__0_n_0,i__carry__2_i_6__0_n_0,i__carry__2_i_7__0_n_0,i__carry__2_i_8__0_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\active1_inferred__0/i__carry_n_0 ,\NLW_active1_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry_i_1_n_0,i__carry_i_2_n_0,i__carry_i_3_n_0,i__carry_i_4__1_n_0}),
        .O(\NLW_active1_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_5_n_0,i__carry_i_6_n_0,i__carry_i_7_n_0,i__carry_i_8_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__0/i__carry__0 
       (.CI(\active1_inferred__0/i__carry_n_0 ),
        .CO({\active1_inferred__0/i__carry__0_n_0 ,\NLW_active1_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__0_i_1_n_0,i__carry__0_i_2_n_0,i__carry__0_i_3_n_0,i__carry__0_i_4_n_0}),
        .O(\NLW_active1_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_5_n_0,i__carry__0_i_6_n_0,i__carry__0_i_7_n_0,i__carry__0_i_8_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__0/i__carry__1 
       (.CI(\active1_inferred__0/i__carry__0_n_0 ),
        .CO({\active1_inferred__0/i__carry__1_n_0 ,\NLW_active1_inferred__0/i__carry__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__1_i_1_n_0,i__carry__1_i_2_n_0,i__carry__1_i_3_n_0,i__carry__1_i_4_n_0}),
        .O(\NLW_active1_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({i__carry__1_i_5_n_0,i__carry__1_i_6_n_0,i__carry__1_i_7_n_0,i__carry__1_i_8_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__0/i__carry__2 
       (.CI(\active1_inferred__0/i__carry__1_n_0 ),
        .CO({\active1_inferred__0/i__carry__2_n_0 ,\NLW_active1_inferred__0/i__carry__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__2_i_1_n_0,i__carry__2_i_2_n_0,i__carry__2_i_3_n_0,i__carry__2_i_4_n_0}),
        .O(\NLW_active1_inferred__0/i__carry__2_O_UNCONNECTED [3:0]),
        .S({i__carry__2_i_5_n_0,i__carry__2_i_6_n_0,i__carry__2_i_7_n_0,i__carry__2_i_8_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry 
       (.CI(1'b0),
        .CO({\active1_inferred__1/i__carry_n_0 ,\NLW_active1_inferred__1/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({active2[2:1],1'b0,1'b1}),
        .O(active1[3:0]),
        .S({i__carry_i_1__2_n_0,i__carry_i_2__2_n_0,i__carry_i_3__0_n_0,active2[1]}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry__0 
       (.CI(\active1_inferred__1/i__carry_n_0 ),
        .CO({\active1_inferred__1/i__carry__0_n_0 ,\NLW_active1_inferred__1/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(active2[6:3]),
        .O(active1[7:4]),
        .S({i__carry__0_i_1__2_n_0,i__carry__0_i_2__2_n_0,i__carry__0_i_3__2_n_0,i__carry__0_i_4__2_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry__1 
       (.CI(\active1_inferred__1/i__carry__0_n_0 ),
        .CO({\active1_inferred__1/i__carry__1_n_0 ,\NLW_active1_inferred__1/i__carry__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(active2[10:7]),
        .O(active1[11:8]),
        .S({i__carry__1_i_1__2_n_0,i__carry__1_i_2__2_n_0,i__carry__1_i_3__2_n_0,i__carry__1_i_4__2_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry__2 
       (.CI(\active1_inferred__1/i__carry__1_n_0 ),
        .CO({\active1_inferred__1/i__carry__2_n_0 ,\NLW_active1_inferred__1/i__carry__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(active2[14:11]),
        .O(active1[15:12]),
        .S({i__carry__2_i_1__2_n_0,i__carry__2_i_2__2_n_0,i__carry__2_i_3__2_n_0,i__carry__2_i_4__2_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry__3 
       (.CI(\active1_inferred__1/i__carry__2_n_0 ),
        .CO({\active1_inferred__1/i__carry__3_n_0 ,\NLW_active1_inferred__1/i__carry__3_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(active2[18:15]),
        .O(active1[19:16]),
        .S({i__carry__3_i_1_n_0,i__carry__3_i_2_n_0,i__carry__3_i_3_n_0,i__carry__3_i_4_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry__4 
       (.CI(\active1_inferred__1/i__carry__3_n_0 ),
        .CO({\active1_inferred__1/i__carry__4_n_0 ,\NLW_active1_inferred__1/i__carry__4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(active2[22:19]),
        .O(active1[23:20]),
        .S({i__carry__4_i_1_n_0,i__carry__4_i_2_n_0,i__carry__4_i_3_n_0,i__carry__4_i_4_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry__5 
       (.CI(\active1_inferred__1/i__carry__4_n_0 ),
        .CO({\active1_inferred__1/i__carry__5_n_0 ,\NLW_active1_inferred__1/i__carry__5_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(active2[26:23]),
        .O(active1[27:24]),
        .S({i__carry__5_i_1_n_0,i__carry__5_i_2_n_0,i__carry__5_i_3_n_0,i__carry__5_i_4_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__1/i__carry__6 
       (.CI(\active1_inferred__1/i__carry__5_n_0 ),
        .CO(\NLW_active1_inferred__1/i__carry__6_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,active2[29:27]}),
        .O(active1[31:28]),
        .S({i__carry__6_i_1_n_0,i__carry__6_i_2_n_0,i__carry__6_i_3_n_0,i__carry__6_i_4_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__2/i__carry 
       (.CI(1'b0),
        .CO({\active1_inferred__2/i__carry_n_0 ,\NLW_active1_inferred__2/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry_i_1__1_n_0,i__carry_i_2__1_n_0,i__carry_i_3__2_n_0,i__carry_i_4__0_n_0}),
        .O(\NLW_active1_inferred__2/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_5__1_n_0,i__carry_i_6__1_n_0,i__carry_i_7__1_n_0,i__carry_i_8__1_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__2/i__carry__0 
       (.CI(\active1_inferred__2/i__carry_n_0 ),
        .CO({\active1_inferred__2/i__carry__0_n_0 ,\NLW_active1_inferred__2/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__0_i_1__1_n_0,i__carry__0_i_2__1_n_0,i__carry__0_i_3__1_n_0,i__carry__0_i_4__1_n_0}),
        .O(\NLW_active1_inferred__2/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_5__1_n_0,i__carry__0_i_6__1_n_0,i__carry__0_i_7__1_n_0,i__carry__0_i_8__1_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__2/i__carry__1 
       (.CI(\active1_inferred__2/i__carry__0_n_0 ),
        .CO({\active1_inferred__2/i__carry__1_n_0 ,\NLW_active1_inferred__2/i__carry__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__1_i_1__1_n_0,i__carry__1_i_2__1_n_0,i__carry__1_i_3__1_n_0,i__carry__1_i_4__1_n_0}),
        .O(\NLW_active1_inferred__2/i__carry__1_O_UNCONNECTED [3:0]),
        .S({i__carry__1_i_5__1_n_0,i__carry__1_i_6__1_n_0,i__carry__1_i_7__1_n_0,i__carry__1_i_8__1_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \active1_inferred__2/i__carry__2 
       (.CI(\active1_inferred__2/i__carry__1_n_0 ),
        .CO({\active1_inferred__2/i__carry__2_n_0 ,\NLW_active1_inferred__2/i__carry__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({i__carry__2_i_1__1_n_0,i__carry__2_i_2__1_n_0,i__carry__2_i_3__1_n_0,i__carry__2_i_4__1_n_0}),
        .O(\NLW_active1_inferred__2/i__carry__2_O_UNCONNECTED [3:0]),
        .S({i__carry__2_i_5__1_n_0,i__carry__2_i_6__1_n_0,i__carry__2_i_7__1_n_0,i__carry__2_i_8__1_n_0}));
  LUT6 #(
    .INIT(64'h00000000E020FFFF)) 
    active_i_1
       (.I0(active),
        .I1(complete),
        .I2(sm_state[1]),
        .I3(p_1_in),
        .I4(active_i_2_n_0),
        .I5(active_i_3_n_0),
        .O(active_i_1_n_0));
  LUT5 #(
    .INIT(32'h5557FFFF)) 
    active_i_2
       (.I0(complete),
        .I1(\active1_inferred__2/i__carry__2_n_0 ),
        .I2(\active0_inferred__0/i__carry__2_n_0 ),
        .I3(\active1_inferred__0/i__carry__2_n_0 ),
        .I4(sm_state[1]),
        .O(active_i_2_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    active_i_3
       (.I0(sm_state[2]),
        .I1(sm_state[0]),
        .O(active_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    active_reg
       (.C(clk),
        .CE(1'b1),
        .D(active_i_1_n_0),
        .Q(active),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBFFF8CCC8CCC8CCC)) 
    aw_en_i_1
       (.I0(S_AXI_AWREADY),
        .I1(aw_en_reg_n_0),
        .I2(s00_axi_wvalid),
        .I3(s00_axi_awvalid),
        .I4(s00_axi_bready),
        .I5(s00_axi_bvalid),
        .O(aw_en_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    aw_en_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(aw_en_i_1_n_0),
        .Q(aw_en_reg_n_0),
        .S(axi_awready_i_1_n_0));
  LUT4 #(
    .INIT(16'hFB08)) 
    \axi_araddr[2]_i_1 
       (.I0(s00_axi_araddr[0]),
        .I1(s00_axi_arvalid),
        .I2(S_AXI_ARREADY),
        .I3(axi_araddr[2]),
        .O(\axi_araddr[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \axi_araddr[3]_i_1 
       (.I0(s00_axi_araddr[1]),
        .I1(s00_axi_arvalid),
        .I2(S_AXI_ARREADY),
        .I3(axi_araddr[3]),
        .O(\axi_araddr[3]_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \axi_araddr_reg[2] 
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(\axi_araddr[2]_i_1_n_0 ),
        .Q(axi_araddr[2]),
        .S(axi_awready_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    \axi_araddr_reg[3] 
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(\axi_araddr[3]_i_1_n_0 ),
        .Q(axi_araddr[3]),
        .S(axi_awready_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h2)) 
    axi_arready_i_1
       (.I0(s00_axi_arvalid),
        .I1(S_AXI_ARREADY),
        .O(axi_arready0));
  FDRE #(
    .INIT(1'b0)) 
    axi_arready_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_arready0),
        .Q(S_AXI_ARREADY),
        .R(axi_awready_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \axi_awaddr[2]_i_1 
       (.I0(s00_axi_awaddr[0]),
        .I1(s00_axi_awvalid),
        .I2(s00_axi_wvalid),
        .I3(aw_en_reg_n_0),
        .I4(S_AXI_AWREADY),
        .I5(p_0_in[0]),
        .O(\axi_awaddr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \axi_awaddr[3]_i_1 
       (.I0(s00_axi_awaddr[1]),
        .I1(s00_axi_awvalid),
        .I2(s00_axi_wvalid),
        .I3(aw_en_reg_n_0),
        .I4(S_AXI_AWREADY),
        .I5(p_0_in[1]),
        .O(\axi_awaddr[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \axi_awaddr_reg[2] 
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(\axi_awaddr[2]_i_1_n_0 ),
        .Q(p_0_in[0]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_awaddr_reg[3] 
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(\axi_awaddr[3]_i_1_n_0 ),
        .Q(p_0_in[1]),
        .R(axi_awready_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    axi_awready_i_1
       (.I0(s00_axi_aresetn),
        .O(axi_awready_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    axi_awready_i_2
       (.I0(s00_axi_awvalid),
        .I1(s00_axi_wvalid),
        .I2(aw_en_reg_n_0),
        .I3(S_AXI_AWREADY),
        .O(axi_awready0));
  FDRE #(
    .INIT(1'b0)) 
    axi_awready_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_awready0),
        .Q(S_AXI_AWREADY),
        .R(axi_awready_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000FFFF80008000)) 
    axi_bvalid_i_1
       (.I0(s00_axi_awvalid),
        .I1(S_AXI_AWREADY),
        .I2(S_AXI_WREADY),
        .I3(s00_axi_wvalid),
        .I4(s00_axi_bready),
        .I5(s00_axi_bvalid),
        .O(axi_bvalid_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    axi_bvalid_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_bvalid_i_1_n_0),
        .Q(s00_axi_bvalid),
        .R(axi_awready_i_1_n_0));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[0]_i_1 
       (.I0(slv_reg1[0]),
        .I1(active2[1]),
        .I2(slv_reg3[0]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[0]),
        .O(reg_data_out[0]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[10]_i_1 
       (.I0(slv_reg1[10]),
        .I1(active2[11]),
        .I2(slv_reg3[10]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[10]),
        .O(reg_data_out[10]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[11]_i_1 
       (.I0(slv_reg1[11]),
        .I1(active2[12]),
        .I2(slv_reg3[11]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[11]),
        .O(reg_data_out[11]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[12]_i_1 
       (.I0(slv_reg1[12]),
        .I1(active2[13]),
        .I2(slv_reg3[12]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[12]),
        .O(reg_data_out[12]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[13]_i_1 
       (.I0(slv_reg1[13]),
        .I1(active2[14]),
        .I2(slv_reg3[13]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[13]),
        .O(reg_data_out[13]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[14]_i_1 
       (.I0(slv_reg1[14]),
        .I1(active2[15]),
        .I2(slv_reg3[14]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[14]),
        .O(reg_data_out[14]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[15]_i_1 
       (.I0(slv_reg1[15]),
        .I1(active2[16]),
        .I2(slv_reg3[15]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[15]),
        .O(reg_data_out[15]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[16]_i_1 
       (.I0(slv_reg1[16]),
        .I1(active2[17]),
        .I2(slv_reg3[16]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[16]),
        .O(reg_data_out[16]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[17]_i_1 
       (.I0(slv_reg1[17]),
        .I1(active2[18]),
        .I2(slv_reg3[17]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[17]),
        .O(reg_data_out[17]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[18]_i_1 
       (.I0(slv_reg1[18]),
        .I1(active2[19]),
        .I2(slv_reg3[18]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[18]),
        .O(reg_data_out[18]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[19]_i_1 
       (.I0(slv_reg1[19]),
        .I1(active2[20]),
        .I2(slv_reg3[19]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[19]),
        .O(reg_data_out[19]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[1]_i_1 
       (.I0(slv_reg1[1]),
        .I1(active2[2]),
        .I2(slv_reg3[1]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[1]),
        .O(reg_data_out[1]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[20]_i_1 
       (.I0(slv_reg1[20]),
        .I1(active2[21]),
        .I2(slv_reg3[20]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[20]),
        .O(reg_data_out[20]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[21]_i_1 
       (.I0(slv_reg1[21]),
        .I1(active2[22]),
        .I2(slv_reg3[21]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[21]),
        .O(reg_data_out[21]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[22]_i_1 
       (.I0(slv_reg1[22]),
        .I1(active2[23]),
        .I2(slv_reg3[22]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[22]),
        .O(reg_data_out[22]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[23]_i_1 
       (.I0(slv_reg1[23]),
        .I1(active2[24]),
        .I2(slv_reg3[23]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[23]),
        .O(reg_data_out[23]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[24]_i_1 
       (.I0(slv_reg1[24]),
        .I1(active2[25]),
        .I2(slv_reg3[24]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[24]),
        .O(reg_data_out[24]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[25]_i_1 
       (.I0(slv_reg1[25]),
        .I1(active2[26]),
        .I2(slv_reg3[25]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[25]),
        .O(reg_data_out[25]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[26]_i_1 
       (.I0(slv_reg1[26]),
        .I1(active2[27]),
        .I2(slv_reg3[26]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[26]),
        .O(reg_data_out[26]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[27]_i_1 
       (.I0(slv_reg1[27]),
        .I1(active2[28]),
        .I2(slv_reg3[27]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[27]),
        .O(reg_data_out[27]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[28]_i_1 
       (.I0(slv_reg1[28]),
        .I1(active2[29]),
        .I2(slv_reg3[28]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[28]),
        .O(reg_data_out[28]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[29]_i_1 
       (.I0(slv_reg1[29]),
        .I1(active2[30]),
        .I2(slv_reg3[29]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[29]),
        .O(reg_data_out[29]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[2]_i_1 
       (.I0(slv_reg1[2]),
        .I1(active2[3]),
        .I2(slv_reg3[2]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[2]),
        .O(reg_data_out[2]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[30]_i_1 
       (.I0(slv_reg1[30]),
        .I1(active2[31]),
        .I2(slv_reg3[30]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[30]),
        .O(reg_data_out[30]));
  LUT3 #(
    .INIT(8'h08)) 
    \axi_rdata[31]_i_1 
       (.I0(S_AXI_ARREADY),
        .I1(s00_axi_arvalid),
        .I2(s00_axi_rvalid),
        .O(slv_reg_rden));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[31]_i_2 
       (.I0(slv_reg1[31]),
        .I1(\slv_reg0_reg_n_0_[31] ),
        .I2(slv_reg3[31]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[31]),
        .O(reg_data_out[31]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[3]_i_1 
       (.I0(slv_reg1[3]),
        .I1(active2[4]),
        .I2(slv_reg3[3]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[3]),
        .O(reg_data_out[3]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[4]_i_1 
       (.I0(slv_reg1[4]),
        .I1(active2[5]),
        .I2(slv_reg3[4]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[4]),
        .O(reg_data_out[4]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[5]_i_1 
       (.I0(slv_reg1[5]),
        .I1(active2[6]),
        .I2(slv_reg3[5]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[5]),
        .O(reg_data_out[5]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[6]_i_1 
       (.I0(slv_reg1[6]),
        .I1(active2[7]),
        .I2(slv_reg3[6]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[6]),
        .O(reg_data_out[6]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[7]_i_1 
       (.I0(slv_reg1[7]),
        .I1(active2[8]),
        .I2(slv_reg3[7]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[7]),
        .O(reg_data_out[7]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[8]_i_1 
       (.I0(slv_reg1[8]),
        .I1(active2[9]),
        .I2(slv_reg3[8]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[8]),
        .O(reg_data_out[8]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \axi_rdata[9]_i_1 
       (.I0(slv_reg1[9]),
        .I1(active2[10]),
        .I2(slv_reg3[9]),
        .I3(axi_araddr[3]),
        .I4(axi_araddr[2]),
        .I5(slv_reg2[9]),
        .O(reg_data_out[9]));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[0] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[0]),
        .Q(s00_axi_rdata[0]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[10] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[10]),
        .Q(s00_axi_rdata[10]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[11] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[11]),
        .Q(s00_axi_rdata[11]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[12] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[12]),
        .Q(s00_axi_rdata[12]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[13] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[13]),
        .Q(s00_axi_rdata[13]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[14] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[14]),
        .Q(s00_axi_rdata[14]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[15] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[15]),
        .Q(s00_axi_rdata[15]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[16] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[16]),
        .Q(s00_axi_rdata[16]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[17] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[17]),
        .Q(s00_axi_rdata[17]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[18] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[18]),
        .Q(s00_axi_rdata[18]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[19] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[19]),
        .Q(s00_axi_rdata[19]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[1] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[1]),
        .Q(s00_axi_rdata[1]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[20] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[20]),
        .Q(s00_axi_rdata[20]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[21] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[21]),
        .Q(s00_axi_rdata[21]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[22] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[22]),
        .Q(s00_axi_rdata[22]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[23] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[23]),
        .Q(s00_axi_rdata[23]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[24] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[24]),
        .Q(s00_axi_rdata[24]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[25] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[25]),
        .Q(s00_axi_rdata[25]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[26] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[26]),
        .Q(s00_axi_rdata[26]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[27] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[27]),
        .Q(s00_axi_rdata[27]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[28] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[28]),
        .Q(s00_axi_rdata[28]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[29] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[29]),
        .Q(s00_axi_rdata[29]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[2] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[2]),
        .Q(s00_axi_rdata[2]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[30] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[30]),
        .Q(s00_axi_rdata[30]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[31] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[31]),
        .Q(s00_axi_rdata[31]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[3] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[3]),
        .Q(s00_axi_rdata[3]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[4] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[4]),
        .Q(s00_axi_rdata[4]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[5] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[5]),
        .Q(s00_axi_rdata[5]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[6] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[6]),
        .Q(s00_axi_rdata[6]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[7] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[7]),
        .Q(s00_axi_rdata[7]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[8] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[8]),
        .Q(s00_axi_rdata[8]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \axi_rdata_reg[9] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[9]),
        .Q(s00_axi_rdata[9]),
        .R(axi_awready_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h08F8)) 
    axi_rvalid_i_1
       (.I0(s00_axi_arvalid),
        .I1(S_AXI_ARREADY),
        .I2(s00_axi_rvalid),
        .I3(s00_axi_rready),
        .O(axi_rvalid_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    axi_rvalid_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_rvalid_i_1_n_0),
        .Q(s00_axi_rvalid),
        .R(axi_awready_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    axi_wready_i_1
       (.I0(s00_axi_awvalid),
        .I1(s00_axi_wvalid),
        .I2(aw_en_reg_n_0),
        .I3(S_AXI_WREADY),
        .O(axi_wready0));
  FDRE #(
    .INIT(1'b0)) 
    axi_wready_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_wready0),
        .Q(S_AXI_WREADY),
        .R(axi_awready_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAAAA8)) 
    complete_inv_i_1
       (.I0(complete),
        .I1(\active1_inferred__0/i__carry__2_n_0 ),
        .I2(\active0_inferred__0/i__carry__2_n_0 ),
        .I3(p_1_in),
        .I4(\active1_inferred__2/i__carry__2_n_0 ),
        .I5(complete_0),
        .O(complete_inv_i_1_n_0));
  FDRE #(
    .INIT(1'b1)) 
    complete_reg_inv
       (.C(clk),
        .CE(1'b1),
        .D(complete_inv_i_1_n_0),
        .Q(complete),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hFD)) 
    \counter[0]_i_1 
       (.I0(sm_state[1]),
        .I1(sm_state[2]),
        .I2(sm_state[0]),
        .O(complete_0));
  LUT1 #(
    .INIT(2'h1)) 
    \counter[0]_i_3 
       (.I0(counter_reg[0]),
        .O(\counter[0]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_2_n_7 ),
        .Q(counter_reg[0]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\counter_reg[0]_i_2_n_0 ,\NLW_counter_reg[0]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_reg[0]_i_2_n_4 ,\counter_reg[0]_i_2_n_5 ,\counter_reg[0]_i_2_n_6 ,\counter_reg[0]_i_2_n_7 }),
        .S({counter_reg[3:1],\counter[0]_i_3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[10] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_5 ),
        .Q(counter_reg[10]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[11] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_4 ),
        .Q(counter_reg[11]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[12] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_7 ),
        .Q(counter_reg[12]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[12]_i_1 
       (.CI(\counter_reg[8]_i_1_n_0 ),
        .CO({\counter_reg[12]_i_1_n_0 ,\NLW_counter_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[12]_i_1_n_4 ,\counter_reg[12]_i_1_n_5 ,\counter_reg[12]_i_1_n_6 ,\counter_reg[12]_i_1_n_7 }),
        .S(counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[13] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_6 ),
        .Q(counter_reg[13]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[14] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_5 ),
        .Q(counter_reg[14]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[15] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_4 ),
        .Q(counter_reg[15]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[16] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_7 ),
        .Q(counter_reg[16]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[16]_i_1 
       (.CI(\counter_reg[12]_i_1_n_0 ),
        .CO({\counter_reg[16]_i_1_n_0 ,\NLW_counter_reg[16]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[16]_i_1_n_4 ,\counter_reg[16]_i_1_n_5 ,\counter_reg[16]_i_1_n_6 ,\counter_reg[16]_i_1_n_7 }),
        .S(counter_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[17] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_6 ),
        .Q(counter_reg[17]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[18] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_5 ),
        .Q(counter_reg[18]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[19] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_4 ),
        .Q(counter_reg[19]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_2_n_6 ),
        .Q(counter_reg[1]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[20] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_7 ),
        .Q(counter_reg[20]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[20]_i_1 
       (.CI(\counter_reg[16]_i_1_n_0 ),
        .CO({\counter_reg[20]_i_1_n_0 ,\NLW_counter_reg[20]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[20]_i_1_n_4 ,\counter_reg[20]_i_1_n_5 ,\counter_reg[20]_i_1_n_6 ,\counter_reg[20]_i_1_n_7 }),
        .S(counter_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[21] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_6 ),
        .Q(counter_reg[21]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[22] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_5 ),
        .Q(counter_reg[22]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[23] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_4 ),
        .Q(counter_reg[23]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[24] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_7 ),
        .Q(counter_reg[24]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[24]_i_1 
       (.CI(\counter_reg[20]_i_1_n_0 ),
        .CO({\counter_reg[24]_i_1_n_0 ,\NLW_counter_reg[24]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[24]_i_1_n_4 ,\counter_reg[24]_i_1_n_5 ,\counter_reg[24]_i_1_n_6 ,\counter_reg[24]_i_1_n_7 }),
        .S(counter_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[25] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_6 ),
        .Q(counter_reg[25]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[26] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_5 ),
        .Q(counter_reg[26]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[27] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_4 ),
        .Q(counter_reg[27]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[28] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_7 ),
        .Q(counter_reg[28]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[28]_i_1 
       (.CI(\counter_reg[24]_i_1_n_0 ),
        .CO(\NLW_counter_reg[28]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[28]_i_1_n_4 ,\counter_reg[28]_i_1_n_5 ,\counter_reg[28]_i_1_n_6 ,\counter_reg[28]_i_1_n_7 }),
        .S(counter_reg[31:28]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[29] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_6 ),
        .Q(counter_reg[29]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_2_n_5 ),
        .Q(counter_reg[2]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[30] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_5 ),
        .Q(counter_reg[30]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[31] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_4 ),
        .Q(counter_reg[31]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_2_n_4 ),
        .Q(counter_reg[3]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_7 ),
        .Q(counter_reg[4]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[4]_i_1 
       (.CI(\counter_reg[0]_i_2_n_0 ),
        .CO({\counter_reg[4]_i_1_n_0 ,\NLW_counter_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[4]_i_1_n_4 ,\counter_reg[4]_i_1_n_5 ,\counter_reg[4]_i_1_n_6 ,\counter_reg[4]_i_1_n_7 }),
        .S(counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[5] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_6 ),
        .Q(counter_reg[5]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[6] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_5 ),
        .Q(counter_reg[6]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[7] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_4 ),
        .Q(counter_reg[7]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[8] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_7 ),
        .Q(counter_reg[8]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[8]_i_1 
       (.CI(\counter_reg[4]_i_1_n_0 ),
        .CO({\counter_reg[8]_i_1_n_0 ,\NLW_counter_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[8]_i_1_n_4 ,\counter_reg[8]_i_1_n_5 ,\counter_reg[8]_i_1_n_6 ,\counter_reg[8]_i_1_n_7 }),
        .S(counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[9] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_6 ),
        .Q(counter_reg[9]),
        .R(complete_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_1
       (.I0(active2[14]),
        .I1(i__carry__0_i_9_n_6),
        .I2(i__carry__0_i_9_n_5),
        .I3(active2[15]),
        .O(i__carry__0_i_1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry__0_i_10
       (.CI(i__carry_i_9_n_0),
        .CO({i__carry__0_i_10_n_0,NLW_i__carry__0_i_10_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({i__carry__0_i_10_n_4,i__carry__0_i_10_n_5,i__carry__0_i_10_n_6,i__carry__0_i_10_n_7}),
        .S(counter_reg[12:9]));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_1__0
       (.I0(active1[14]),
        .I1(i__carry__0_i_9_n_6),
        .I2(i__carry__0_i_9_n_5),
        .I3(active1[15]),
        .O(i__carry__0_i_1__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_1__1
       (.I0(active2[15]),
        .I1(i__carry__0_i_9_n_6),
        .I2(i__carry__0_i_9_n_5),
        .I3(active2[16]),
        .O(i__carry__0_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__0_i_1__2
       (.I0(active2[6]),
        .I1(active2[8]),
        .O(i__carry__0_i_1__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_2
       (.I0(active2[12]),
        .I1(i__carry__0_i_10_n_4),
        .I2(i__carry__0_i_9_n_7),
        .I3(active2[13]),
        .O(i__carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_2__0
       (.I0(active1[12]),
        .I1(i__carry__0_i_10_n_4),
        .I2(i__carry__0_i_9_n_7),
        .I3(active1[13]),
        .O(i__carry__0_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_2__1
       (.I0(active2[13]),
        .I1(i__carry__0_i_10_n_4),
        .I2(i__carry__0_i_9_n_7),
        .I3(active2[14]),
        .O(i__carry__0_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__0_i_2__2
       (.I0(active2[5]),
        .I1(active2[7]),
        .O(i__carry__0_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_3
       (.I0(active2[10]),
        .I1(i__carry__0_i_10_n_6),
        .I2(i__carry__0_i_10_n_5),
        .I3(active2[11]),
        .O(i__carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_3__0
       (.I0(active1[10]),
        .I1(i__carry__0_i_10_n_6),
        .I2(i__carry__0_i_10_n_5),
        .I3(active1[11]),
        .O(i__carry__0_i_3__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_3__1
       (.I0(active2[11]),
        .I1(i__carry__0_i_10_n_6),
        .I2(i__carry__0_i_10_n_5),
        .I3(active2[12]),
        .O(i__carry__0_i_3__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__0_i_3__2
       (.I0(active2[4]),
        .I1(active2[6]),
        .O(i__carry__0_i_3__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_4
       (.I0(active2[8]),
        .I1(i__carry_i_9_n_4),
        .I2(i__carry__0_i_10_n_7),
        .I3(active2[9]),
        .O(i__carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_4__0
       (.I0(active1[8]),
        .I1(i__carry_i_9_n_4),
        .I2(i__carry__0_i_10_n_7),
        .I3(active1[9]),
        .O(i__carry__0_i_4__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__0_i_4__1
       (.I0(active2[9]),
        .I1(i__carry_i_9_n_4),
        .I2(i__carry__0_i_10_n_7),
        .I3(active2[10]),
        .O(i__carry__0_i_4__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__0_i_4__2
       (.I0(active2[3]),
        .I1(active2[5]),
        .O(i__carry__0_i_4__2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_5
       (.I0(active2[14]),
        .I1(i__carry__0_i_9_n_6),
        .I2(active2[15]),
        .I3(i__carry__0_i_9_n_5),
        .O(i__carry__0_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_5__0
       (.I0(active1[14]),
        .I1(i__carry__0_i_9_n_6),
        .I2(active1[15]),
        .I3(i__carry__0_i_9_n_5),
        .O(i__carry__0_i_5__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_5__1
       (.I0(active2[15]),
        .I1(i__carry__0_i_9_n_6),
        .I2(active2[16]),
        .I3(i__carry__0_i_9_n_5),
        .O(i__carry__0_i_5__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_6
       (.I0(active2[12]),
        .I1(i__carry__0_i_10_n_4),
        .I2(active2[13]),
        .I3(i__carry__0_i_9_n_7),
        .O(i__carry__0_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_6__0
       (.I0(active1[12]),
        .I1(i__carry__0_i_10_n_4),
        .I2(active1[13]),
        .I3(i__carry__0_i_9_n_7),
        .O(i__carry__0_i_6__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_6__1
       (.I0(active2[13]),
        .I1(i__carry__0_i_10_n_4),
        .I2(active2[14]),
        .I3(i__carry__0_i_9_n_7),
        .O(i__carry__0_i_6__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_7
       (.I0(active2[10]),
        .I1(i__carry__0_i_10_n_6),
        .I2(active2[11]),
        .I3(i__carry__0_i_10_n_5),
        .O(i__carry__0_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_7__0
       (.I0(active1[10]),
        .I1(i__carry__0_i_10_n_6),
        .I2(active1[11]),
        .I3(i__carry__0_i_10_n_5),
        .O(i__carry__0_i_7__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_7__1
       (.I0(active2[11]),
        .I1(i__carry__0_i_10_n_6),
        .I2(active2[12]),
        .I3(i__carry__0_i_10_n_5),
        .O(i__carry__0_i_7__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_8
       (.I0(active2[8]),
        .I1(i__carry_i_9_n_4),
        .I2(active2[9]),
        .I3(i__carry__0_i_10_n_7),
        .O(i__carry__0_i_8_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_8__0
       (.I0(active1[8]),
        .I1(i__carry_i_9_n_4),
        .I2(active1[9]),
        .I3(i__carry__0_i_10_n_7),
        .O(i__carry__0_i_8__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_8__1
       (.I0(active2[9]),
        .I1(i__carry_i_9_n_4),
        .I2(active2[10]),
        .I3(i__carry__0_i_10_n_7),
        .O(i__carry__0_i_8__1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry__0_i_9
       (.CI(i__carry__0_i_10_n_0),
        .CO({i__carry__0_i_9_n_0,NLW_i__carry__0_i_9_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({i__carry__0_i_9_n_4,i__carry__0_i_9_n_5,i__carry__0_i_9_n_6,i__carry__0_i_9_n_7}),
        .S(counter_reg[16:13]));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_1
       (.I0(active2[22]),
        .I1(i__carry__1_i_9_n_6),
        .I2(i__carry__1_i_9_n_5),
        .I3(active2[23]),
        .O(i__carry__1_i_1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry__1_i_10
       (.CI(i__carry__0_i_9_n_0),
        .CO({i__carry__1_i_10_n_0,NLW_i__carry__1_i_10_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({i__carry__1_i_10_n_4,i__carry__1_i_10_n_5,i__carry__1_i_10_n_6,i__carry__1_i_10_n_7}),
        .S(counter_reg[20:17]));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_1__0
       (.I0(active1[22]),
        .I1(i__carry__1_i_9_n_6),
        .I2(i__carry__1_i_9_n_5),
        .I3(active1[23]),
        .O(i__carry__1_i_1__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_1__1
       (.I0(active2[23]),
        .I1(i__carry__1_i_9_n_6),
        .I2(i__carry__1_i_9_n_5),
        .I3(active2[24]),
        .O(i__carry__1_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_1__2
       (.I0(active2[10]),
        .I1(active2[12]),
        .O(i__carry__1_i_1__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_2
       (.I0(active2[20]),
        .I1(i__carry__1_i_10_n_4),
        .I2(i__carry__1_i_9_n_7),
        .I3(active2[21]),
        .O(i__carry__1_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_2__0
       (.I0(active1[20]),
        .I1(i__carry__1_i_10_n_4),
        .I2(i__carry__1_i_9_n_7),
        .I3(active1[21]),
        .O(i__carry__1_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_2__1
       (.I0(active2[21]),
        .I1(i__carry__1_i_10_n_4),
        .I2(i__carry__1_i_9_n_7),
        .I3(active2[22]),
        .O(i__carry__1_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_2__2
       (.I0(active2[9]),
        .I1(active2[11]),
        .O(i__carry__1_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_3
       (.I0(active2[18]),
        .I1(i__carry__1_i_10_n_6),
        .I2(i__carry__1_i_10_n_5),
        .I3(active2[19]),
        .O(i__carry__1_i_3_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_3__0
       (.I0(active1[18]),
        .I1(i__carry__1_i_10_n_6),
        .I2(i__carry__1_i_10_n_5),
        .I3(active1[19]),
        .O(i__carry__1_i_3__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_3__1
       (.I0(active2[19]),
        .I1(i__carry__1_i_10_n_6),
        .I2(i__carry__1_i_10_n_5),
        .I3(active2[20]),
        .O(i__carry__1_i_3__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_3__2
       (.I0(active2[8]),
        .I1(active2[10]),
        .O(i__carry__1_i_3__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_4
       (.I0(active2[16]),
        .I1(i__carry__0_i_9_n_4),
        .I2(i__carry__1_i_10_n_7),
        .I3(active2[17]),
        .O(i__carry__1_i_4_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_4__0
       (.I0(active1[16]),
        .I1(i__carry__0_i_9_n_4),
        .I2(i__carry__1_i_10_n_7),
        .I3(active1[17]),
        .O(i__carry__1_i_4__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__1_i_4__1
       (.I0(active2[17]),
        .I1(i__carry__0_i_9_n_4),
        .I2(i__carry__1_i_10_n_7),
        .I3(active2[18]),
        .O(i__carry__1_i_4__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__1_i_4__2
       (.I0(active2[7]),
        .I1(active2[9]),
        .O(i__carry__1_i_4__2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_5
       (.I0(active2[22]),
        .I1(i__carry__1_i_9_n_6),
        .I2(active2[23]),
        .I3(i__carry__1_i_9_n_5),
        .O(i__carry__1_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_5__0
       (.I0(active1[22]),
        .I1(i__carry__1_i_9_n_6),
        .I2(active1[23]),
        .I3(i__carry__1_i_9_n_5),
        .O(i__carry__1_i_5__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_5__1
       (.I0(active2[23]),
        .I1(i__carry__1_i_9_n_6),
        .I2(active2[24]),
        .I3(i__carry__1_i_9_n_5),
        .O(i__carry__1_i_5__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_6
       (.I0(active2[20]),
        .I1(i__carry__1_i_10_n_4),
        .I2(active2[21]),
        .I3(i__carry__1_i_9_n_7),
        .O(i__carry__1_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_6__0
       (.I0(active1[20]),
        .I1(i__carry__1_i_10_n_4),
        .I2(active1[21]),
        .I3(i__carry__1_i_9_n_7),
        .O(i__carry__1_i_6__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_6__1
       (.I0(active2[21]),
        .I1(i__carry__1_i_10_n_4),
        .I2(active2[22]),
        .I3(i__carry__1_i_9_n_7),
        .O(i__carry__1_i_6__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_7
       (.I0(active2[18]),
        .I1(i__carry__1_i_10_n_6),
        .I2(active2[19]),
        .I3(i__carry__1_i_10_n_5),
        .O(i__carry__1_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_7__0
       (.I0(active1[18]),
        .I1(i__carry__1_i_10_n_6),
        .I2(active1[19]),
        .I3(i__carry__1_i_10_n_5),
        .O(i__carry__1_i_7__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_7__1
       (.I0(active2[19]),
        .I1(i__carry__1_i_10_n_6),
        .I2(active2[20]),
        .I3(i__carry__1_i_10_n_5),
        .O(i__carry__1_i_7__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_8
       (.I0(active2[16]),
        .I1(i__carry__0_i_9_n_4),
        .I2(active2[17]),
        .I3(i__carry__1_i_10_n_7),
        .O(i__carry__1_i_8_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_8__0
       (.I0(active1[16]),
        .I1(i__carry__0_i_9_n_4),
        .I2(active1[17]),
        .I3(i__carry__1_i_10_n_7),
        .O(i__carry__1_i_8__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_8__1
       (.I0(active2[17]),
        .I1(i__carry__0_i_9_n_4),
        .I2(active2[18]),
        .I3(i__carry__1_i_10_n_7),
        .O(i__carry__1_i_8__1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry__1_i_9
       (.CI(i__carry__1_i_10_n_0),
        .CO({i__carry__1_i_9_n_0,NLW_i__carry__1_i_9_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({i__carry__1_i_9_n_4,i__carry__1_i_9_n_5,i__carry__1_i_9_n_6,i__carry__1_i_9_n_7}),
        .S(counter_reg[24:21]));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_1
       (.I0(active2[30]),
        .I1(i__carry__2_i_9_n_6),
        .I2(active2[31]),
        .I3(i__carry__2_i_9_n_5),
        .O(i__carry__2_i_1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry__2_i_10
       (.CI(i__carry__1_i_9_n_0),
        .CO({i__carry__2_i_10_n_0,NLW_i__carry__2_i_10_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({i__carry__2_i_10_n_4,i__carry__2_i_10_n_5,i__carry__2_i_10_n_6,i__carry__2_i_10_n_7}),
        .S(counter_reg[28:25]));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_1__0
       (.I0(active1[30]),
        .I1(i__carry__2_i_9_n_6),
        .I2(active1[31]),
        .I3(i__carry__2_i_9_n_5),
        .O(i__carry__2_i_1__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_1__1
       (.I0(active2[31]),
        .I1(i__carry__2_i_9_n_6),
        .I2(\slv_reg0_reg_n_0_[31] ),
        .I3(i__carry__2_i_9_n_5),
        .O(i__carry__2_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_1__2
       (.I0(active2[14]),
        .I1(active2[16]),
        .O(i__carry__2_i_1__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_2
       (.I0(active2[28]),
        .I1(i__carry__2_i_10_n_4),
        .I2(i__carry__2_i_9_n_7),
        .I3(active2[29]),
        .O(i__carry__2_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_2__0
       (.I0(active1[28]),
        .I1(i__carry__2_i_10_n_4),
        .I2(i__carry__2_i_9_n_7),
        .I3(active1[29]),
        .O(i__carry__2_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_2__1
       (.I0(active2[29]),
        .I1(i__carry__2_i_10_n_4),
        .I2(i__carry__2_i_9_n_7),
        .I3(active2[30]),
        .O(i__carry__2_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_2__2
       (.I0(active2[13]),
        .I1(active2[15]),
        .O(i__carry__2_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_3
       (.I0(active2[26]),
        .I1(i__carry__2_i_10_n_6),
        .I2(i__carry__2_i_10_n_5),
        .I3(active2[27]),
        .O(i__carry__2_i_3_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_3__0
       (.I0(active1[26]),
        .I1(i__carry__2_i_10_n_6),
        .I2(i__carry__2_i_10_n_5),
        .I3(active1[27]),
        .O(i__carry__2_i_3__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_3__1
       (.I0(active2[27]),
        .I1(i__carry__2_i_10_n_6),
        .I2(i__carry__2_i_10_n_5),
        .I3(active2[28]),
        .O(i__carry__2_i_3__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_3__2
       (.I0(active2[12]),
        .I1(active2[14]),
        .O(i__carry__2_i_3__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_4
       (.I0(active2[24]),
        .I1(i__carry__1_i_9_n_4),
        .I2(i__carry__2_i_10_n_7),
        .I3(active2[25]),
        .O(i__carry__2_i_4_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_4__0
       (.I0(active1[24]),
        .I1(i__carry__1_i_9_n_4),
        .I2(i__carry__2_i_10_n_7),
        .I3(active1[25]),
        .O(i__carry__2_i_4__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry__2_i_4__1
       (.I0(active2[25]),
        .I1(i__carry__1_i_9_n_4),
        .I2(i__carry__2_i_10_n_7),
        .I3(active2[26]),
        .O(i__carry__2_i_4__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__2_i_4__2
       (.I0(active2[11]),
        .I1(active2[13]),
        .O(i__carry__2_i_4__2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_5
       (.I0(active2[30]),
        .I1(i__carry__2_i_9_n_6),
        .I2(i__carry__2_i_9_n_5),
        .I3(active2[31]),
        .O(i__carry__2_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_5__0
       (.I0(active1[30]),
        .I1(i__carry__2_i_9_n_6),
        .I2(i__carry__2_i_9_n_5),
        .I3(active1[31]),
        .O(i__carry__2_i_5__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_5__1
       (.I0(active2[31]),
        .I1(i__carry__2_i_9_n_6),
        .I2(i__carry__2_i_9_n_5),
        .I3(\slv_reg0_reg_n_0_[31] ),
        .O(i__carry__2_i_5__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_6
       (.I0(active2[28]),
        .I1(i__carry__2_i_10_n_4),
        .I2(active2[29]),
        .I3(i__carry__2_i_9_n_7),
        .O(i__carry__2_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_6__0
       (.I0(active1[28]),
        .I1(i__carry__2_i_10_n_4),
        .I2(active1[29]),
        .I3(i__carry__2_i_9_n_7),
        .O(i__carry__2_i_6__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_6__1
       (.I0(active2[29]),
        .I1(i__carry__2_i_10_n_4),
        .I2(active2[30]),
        .I3(i__carry__2_i_9_n_7),
        .O(i__carry__2_i_6__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_7
       (.I0(active2[26]),
        .I1(i__carry__2_i_10_n_6),
        .I2(active2[27]),
        .I3(i__carry__2_i_10_n_5),
        .O(i__carry__2_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_7__0
       (.I0(active1[26]),
        .I1(i__carry__2_i_10_n_6),
        .I2(active1[27]),
        .I3(i__carry__2_i_10_n_5),
        .O(i__carry__2_i_7__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_7__1
       (.I0(active2[27]),
        .I1(i__carry__2_i_10_n_6),
        .I2(active2[28]),
        .I3(i__carry__2_i_10_n_5),
        .O(i__carry__2_i_7__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_8
       (.I0(active2[24]),
        .I1(i__carry__1_i_9_n_4),
        .I2(active2[25]),
        .I3(i__carry__2_i_10_n_7),
        .O(i__carry__2_i_8_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_8__0
       (.I0(active1[24]),
        .I1(i__carry__1_i_9_n_4),
        .I2(active1[25]),
        .I3(i__carry__2_i_10_n_7),
        .O(i__carry__2_i_8__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__2_i_8__1
       (.I0(active2[25]),
        .I1(i__carry__1_i_9_n_4),
        .I2(active2[26]),
        .I3(i__carry__2_i_10_n_7),
        .O(i__carry__2_i_8__1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry__2_i_9
       (.CI(i__carry__2_i_10_n_0),
        .CO(NLW_i__carry__2_i_9_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_i__carry__2_i_9_O_UNCONNECTED[3],i__carry__2_i_9_n_5,i__carry__2_i_9_n_6,i__carry__2_i_9_n_7}),
        .S({1'b0,counter_reg[31:29]}));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_1
       (.I0(active2[18]),
        .I1(active2[20]),
        .O(i__carry__3_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_2
       (.I0(active2[17]),
        .I1(active2[19]),
        .O(i__carry__3_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_3
       (.I0(active2[16]),
        .I1(active2[18]),
        .O(i__carry__3_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__3_i_4
       (.I0(active2[15]),
        .I1(active2[17]),
        .O(i__carry__3_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_1
       (.I0(active2[22]),
        .I1(active2[24]),
        .O(i__carry__4_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_2
       (.I0(active2[21]),
        .I1(active2[23]),
        .O(i__carry__4_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_3
       (.I0(active2[20]),
        .I1(active2[22]),
        .O(i__carry__4_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__4_i_4
       (.I0(active2[19]),
        .I1(active2[21]),
        .O(i__carry__4_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_1
       (.I0(active2[26]),
        .I1(active2[28]),
        .O(i__carry__5_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_2
       (.I0(active2[25]),
        .I1(active2[27]),
        .O(i__carry__5_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_3
       (.I0(active2[24]),
        .I1(active2[26]),
        .O(i__carry__5_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__5_i_4
       (.I0(active2[23]),
        .I1(active2[25]),
        .O(i__carry__5_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__6_i_1
       (.I0(active2[30]),
        .I1(\slv_reg0_reg_n_0_[31] ),
        .O(i__carry__6_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__6_i_2
       (.I0(active2[29]),
        .I1(active2[31]),
        .O(i__carry__6_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__6_i_3
       (.I0(active2[28]),
        .I1(active2[30]),
        .O(i__carry__6_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry__6_i_4
       (.I0(active2[27]),
        .I1(active2[29]),
        .O(i__carry__6_i_4_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_1
       (.I0(active2[6]),
        .I1(i__carry_i_9_n_6),
        .I2(i__carry_i_9_n_5),
        .I3(active2[7]),
        .O(i__carry_i_1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry_i_10
       (.CI(1'b0),
        .CO({i__carry_i_10_n_0,NLW_i__carry_i_10_CO_UNCONNECTED[2:0]}),
        .CYINIT(counter_reg[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({i__carry_i_10_n_4,i__carry_i_10_n_5,i__carry_i_10_n_6,i__carry_i_10_n_7}),
        .S(counter_reg[4:1]));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_1__0
       (.I0(active1[6]),
        .I1(i__carry_i_9_n_6),
        .I2(i__carry_i_9_n_5),
        .I3(active1[7]),
        .O(i__carry_i_1__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_1__1
       (.I0(active2[7]),
        .I1(i__carry_i_9_n_6),
        .I2(i__carry_i_9_n_5),
        .I3(active2[8]),
        .O(i__carry_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry_i_1__2
       (.I0(active2[2]),
        .I1(active2[4]),
        .O(i__carry_i_1__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_2
       (.I0(active2[4]),
        .I1(i__carry_i_10_n_4),
        .I2(i__carry_i_9_n_7),
        .I3(active2[5]),
        .O(i__carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_2__0
       (.I0(active1[4]),
        .I1(i__carry_i_10_n_4),
        .I2(i__carry_i_9_n_7),
        .I3(active1[5]),
        .O(i__carry_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_2__1
       (.I0(active2[5]),
        .I1(i__carry_i_10_n_4),
        .I2(i__carry_i_9_n_7),
        .I3(active2[6]),
        .O(i__carry_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    i__carry_i_2__2
       (.I0(active2[1]),
        .I1(active2[3]),
        .O(i__carry_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_3
       (.I0(active2[2]),
        .I1(i__carry_i_10_n_6),
        .I2(i__carry_i_10_n_5),
        .I3(active2[3]),
        .O(i__carry_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    i__carry_i_3__0
       (.I0(active2[2]),
        .O(i__carry_i_3__0_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_3__1
       (.I0(active1[2]),
        .I1(i__carry_i_10_n_6),
        .I2(i__carry_i_10_n_5),
        .I3(active1[3]),
        .O(i__carry_i_3__1_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    i__carry_i_3__2
       (.I0(active2[3]),
        .I1(i__carry_i_10_n_6),
        .I2(i__carry_i_10_n_5),
        .I3(active2[4]),
        .O(i__carry_i_3__2_n_0));
  LUT4 #(
    .INIT(16'h8F08)) 
    i__carry_i_4
       (.I0(counter_reg[0]),
        .I1(active1[0]),
        .I2(i__carry_i_10_n_7),
        .I3(active1[1]),
        .O(i__carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h8F08)) 
    i__carry_i_4__0
       (.I0(counter_reg[0]),
        .I1(active2[1]),
        .I2(i__carry_i_10_n_7),
        .I3(active2[2]),
        .O(i__carry_i_4__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry_i_4__1
       (.I0(active2[1]),
        .I1(i__carry_i_10_n_7),
        .O(i__carry_i_4__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_5
       (.I0(active2[6]),
        .I1(i__carry_i_9_n_6),
        .I2(active2[7]),
        .I3(i__carry_i_9_n_5),
        .O(i__carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_5__0
       (.I0(active1[6]),
        .I1(i__carry_i_9_n_6),
        .I2(active1[7]),
        .I3(i__carry_i_9_n_5),
        .O(i__carry_i_5__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_5__1
       (.I0(active2[7]),
        .I1(i__carry_i_9_n_6),
        .I2(active2[8]),
        .I3(i__carry_i_9_n_5),
        .O(i__carry_i_5__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_6
       (.I0(active2[4]),
        .I1(i__carry_i_10_n_4),
        .I2(active2[5]),
        .I3(i__carry_i_9_n_7),
        .O(i__carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_6__0
       (.I0(active1[4]),
        .I1(i__carry_i_10_n_4),
        .I2(active1[5]),
        .I3(i__carry_i_9_n_7),
        .O(i__carry_i_6__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_6__1
       (.I0(active2[5]),
        .I1(i__carry_i_10_n_4),
        .I2(active2[6]),
        .I3(i__carry_i_9_n_7),
        .O(i__carry_i_6__1_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_7
       (.I0(active2[2]),
        .I1(i__carry_i_10_n_6),
        .I2(active2[3]),
        .I3(i__carry_i_10_n_5),
        .O(i__carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_7__0
       (.I0(active1[2]),
        .I1(i__carry_i_10_n_6),
        .I2(active1[3]),
        .I3(i__carry_i_10_n_5),
        .O(i__carry_i_7__0_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry_i_7__1
       (.I0(active2[3]),
        .I1(i__carry_i_10_n_6),
        .I2(active2[4]),
        .I3(i__carry_i_10_n_5),
        .O(i__carry_i_7__1_n_0));
  LUT3 #(
    .INIT(8'h82)) 
    i__carry_i_8
       (.I0(counter_reg[0]),
        .I1(active2[1]),
        .I2(i__carry_i_10_n_7),
        .O(i__carry_i_8_n_0));
  LUT4 #(
    .INIT(16'h6006)) 
    i__carry_i_8__0
       (.I0(active1[0]),
        .I1(counter_reg[0]),
        .I2(active1[1]),
        .I3(i__carry_i_10_n_7),
        .O(i__carry_i_8__0_n_0));
  LUT4 #(
    .INIT(16'h6006)) 
    i__carry_i_8__1
       (.I0(active2[1]),
        .I1(counter_reg[0]),
        .I2(active2[2]),
        .I3(i__carry_i_10_n_7),
        .O(i__carry_i_8__1_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 i__carry_i_9
       (.CI(i__carry_i_10_n_0),
        .CO({i__carry_i_9_n_0,NLW_i__carry_i_9_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({i__carry_i_9_n_4,i__carry_i_9_n_5,i__carry_i_9_n_6,i__carry_i_9_n_7}),
        .S(counter_reg[8:5]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'hAABA)) 
    \leds[0]_i_1 
       (.I0(\active1_inferred__2/i__carry__2_n_0 ),
        .I1(\active1_inferred__0/i__carry__2_n_0 ),
        .I2(p_1_in),
        .I3(\active0_inferred__0/i__carry__2_n_0 ),
        .O(\leds[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h00F2)) 
    \leds[1]_i_1 
       (.I0(p_1_in),
        .I1(\active0_inferred__0/i__carry__2_n_0 ),
        .I2(\active1_inferred__0/i__carry__2_n_0 ),
        .I3(\active1_inferred__2/i__carry__2_n_0 ),
        .O(\leds[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h0054)) 
    \leds[2]_i_1 
       (.I0(\active1_inferred__0/i__carry__2_n_0 ),
        .I1(\active0_inferred__0/i__carry__2_n_0 ),
        .I2(p_1_in),
        .I3(\active1_inferred__2/i__carry__2_n_0 ),
        .O(\leds[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h1000)) 
    \leds[3]_i_1 
       (.I0(sm_state[0]),
        .I1(sm_state[2]),
        .I2(sm_state[1]),
        .I3(complete),
        .O(\leds[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \leds[3]_i_2 
       (.I0(\active1_inferred__0/i__carry__2_n_0 ),
        .I1(p_1_in),
        .I2(\active0_inferred__0/i__carry__2_n_0 ),
        .I3(\active1_inferred__2/i__carry__2_n_0 ),
        .O(\leds[3]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \leds_reg[0] 
       (.C(clk),
        .CE(\leds[3]_i_1_n_0 ),
        .D(\leds[0]_i_1_n_0 ),
        .Q(leds[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \leds_reg[1] 
       (.C(clk),
        .CE(\leds[3]_i_1_n_0 ),
        .D(\leds[1]_i_1_n_0 ),
        .Q(leds[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \leds_reg[2] 
       (.C(clk),
        .CE(\leds[3]_i_1_n_0 ),
        .D(\leds[2]_i_1_n_0 ),
        .Q(leds[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \leds_reg[3] 
       (.C(clk),
        .CE(\leds[3]_i_1_n_0 ),
        .D(\leds[3]_i_2_n_0 ),
        .Q(leds[3]),
        .R(1'b0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \slv_reg0[15]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg0[15]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \slv_reg0[23]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg0[23]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \slv_reg0[31]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg0[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \slv_reg0[31]_i_2 
       (.I0(s00_axi_awvalid),
        .I1(S_AXI_AWREADY),
        .I2(S_AXI_WREADY),
        .I3(s00_axi_wvalid),
        .O(slv_reg_wren__2));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \slv_reg0[7]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg0[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(active2[1]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[10] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[10]),
        .Q(active2[11]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[11] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[11]),
        .Q(active2[12]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[12] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[12]),
        .Q(active2[13]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[13] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[13]),
        .Q(active2[14]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[14] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[14]),
        .Q(active2[15]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[15] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[15]),
        .Q(active2[16]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[16] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[16]),
        .Q(active2[17]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[17] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[17]),
        .Q(active2[18]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[18] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[18]),
        .Q(active2[19]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[19] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[19]),
        .Q(active2[20]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(active2[2]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[20] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[20]),
        .Q(active2[21]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[21] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[21]),
        .Q(active2[22]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[22] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[22]),
        .Q(active2[23]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[23] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[23]_i_1_n_0 ),
        .D(s00_axi_wdata[23]),
        .Q(active2[24]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[24] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[24]),
        .Q(active2[25]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[25] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[25]),
        .Q(active2[26]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[26] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[26]),
        .Q(active2[27]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[27] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[27]),
        .Q(active2[28]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[28] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[28]),
        .Q(active2[29]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[29] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[29]),
        .Q(active2[30]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(active2[3]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[30] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[30]),
        .Q(active2[31]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[31] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[31]_i_1_n_0 ),
        .D(s00_axi_wdata[31]),
        .Q(\slv_reg0_reg_n_0_[31] ),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[3] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[3]),
        .Q(active2[4]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[4] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[4]),
        .Q(active2[5]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[5] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[5]),
        .Q(active2[6]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[6] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[6]),
        .Q(active2[7]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[7] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[7]_i_1_n_0 ),
        .D(s00_axi_wdata[7]),
        .Q(active2[8]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[8] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[8]),
        .Q(active2[9]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg0_reg[9] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg0[15]_i_1_n_0 ),
        .D(s00_axi_wdata[9]),
        .Q(active2[10]),
        .R(axi_awready_i_1_n_0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \slv_reg1[15]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg1[15]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \slv_reg1[23]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg1[23]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \slv_reg1[31]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg1[31]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \slv_reg1[7]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg1[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(slv_reg1[0]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[10] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[10]),
        .Q(slv_reg1[10]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[11] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[11]),
        .Q(slv_reg1[11]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[12] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[12]),
        .Q(slv_reg1[12]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[13] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[13]),
        .Q(slv_reg1[13]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[14] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[14]),
        .Q(slv_reg1[14]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[15] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[15]),
        .Q(slv_reg1[15]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[16] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[16]),
        .Q(slv_reg1[16]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[17] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[17]),
        .Q(slv_reg1[17]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[18] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[18]),
        .Q(slv_reg1[18]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[19] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[19]),
        .Q(slv_reg1[19]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(slv_reg1[1]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[20] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[20]),
        .Q(slv_reg1[20]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[21] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[21]),
        .Q(slv_reg1[21]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[22] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[22]),
        .Q(slv_reg1[22]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[23] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[23]_i_1_n_0 ),
        .D(s00_axi_wdata[23]),
        .Q(slv_reg1[23]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[24] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[24]),
        .Q(slv_reg1[24]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[25] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[25]),
        .Q(slv_reg1[25]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[26] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[26]),
        .Q(slv_reg1[26]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[27] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[27]),
        .Q(slv_reg1[27]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[28] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[28]),
        .Q(slv_reg1[28]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[29] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[29]),
        .Q(slv_reg1[29]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(slv_reg1[2]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[30] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[30]),
        .Q(slv_reg1[30]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[31] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[31]_i_1_n_0 ),
        .D(s00_axi_wdata[31]),
        .Q(slv_reg1[31]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[3] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[3]),
        .Q(slv_reg1[3]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[4] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[4]),
        .Q(slv_reg1[4]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[5] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[5]),
        .Q(slv_reg1[5]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[6] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[6]),
        .Q(slv_reg1[6]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[7] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[7]_i_1_n_0 ),
        .D(s00_axi_wdata[7]),
        .Q(slv_reg1[7]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[8] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[8]),
        .Q(slv_reg1[8]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg1_reg[9] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg1[15]_i_1_n_0 ),
        .D(s00_axi_wdata[9]),
        .Q(slv_reg1[9]),
        .R(axi_awready_i_1_n_0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \slv_reg2[15]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg2[15]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \slv_reg2[23]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg2[23]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \slv_reg2[31]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg2[31]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \slv_reg2[7]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .O(\slv_reg2[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(slv_reg2[0]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[10] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[10]),
        .Q(slv_reg2[10]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[11] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[11]),
        .Q(slv_reg2[11]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[12] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[12]),
        .Q(slv_reg2[12]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[13] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[13]),
        .Q(slv_reg2[13]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[14] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[14]),
        .Q(slv_reg2[14]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[15] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[15]),
        .Q(slv_reg2[15]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[16] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[16]),
        .Q(slv_reg2[16]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[17] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[17]),
        .Q(slv_reg2[17]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[18] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[18]),
        .Q(slv_reg2[18]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[19] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[19]),
        .Q(slv_reg2[19]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(slv_reg2[1]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[20] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[20]),
        .Q(slv_reg2[20]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[21] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[21]),
        .Q(slv_reg2[21]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[22] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[22]),
        .Q(slv_reg2[22]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[23] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[23]_i_1_n_0 ),
        .D(s00_axi_wdata[23]),
        .Q(slv_reg2[23]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[24] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[24]),
        .Q(slv_reg2[24]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[25] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[25]),
        .Q(slv_reg2[25]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[26] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[26]),
        .Q(slv_reg2[26]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[27] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[27]),
        .Q(slv_reg2[27]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[28] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[28]),
        .Q(slv_reg2[28]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[29] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[29]),
        .Q(slv_reg2[29]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(slv_reg2[2]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[30] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[30]),
        .Q(slv_reg2[30]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[31] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[31]_i_1_n_0 ),
        .D(s00_axi_wdata[31]),
        .Q(slv_reg2[31]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[3] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[3]),
        .Q(slv_reg2[3]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[4] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[4]),
        .Q(slv_reg2[4]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[5] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[5]),
        .Q(slv_reg2[5]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[6] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[6]),
        .Q(slv_reg2[6]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[7] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[7]_i_1_n_0 ),
        .D(s00_axi_wdata[7]),
        .Q(slv_reg2[7]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[8] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[8]),
        .Q(slv_reg2[8]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg2_reg[9] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg2[15]_i_1_n_0 ),
        .D(s00_axi_wdata[9]),
        .Q(slv_reg2[9]),
        .R(axi_awready_i_1_n_0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \slv_reg3[15]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[0]),
        .I2(p_0_in[1]),
        .O(\slv_reg3[15]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \slv_reg3[23]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[0]),
        .I2(p_0_in[1]),
        .O(\slv_reg3[23]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \slv_reg3[31]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[0]),
        .I2(p_0_in[1]),
        .O(\slv_reg3[31]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \slv_reg3[7]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in[0]),
        .I2(p_0_in[1]),
        .O(\slv_reg3[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(slv_reg3[0]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[10] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[10]),
        .Q(slv_reg3[10]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[11] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[11]),
        .Q(slv_reg3[11]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[12] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[12]),
        .Q(slv_reg3[12]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[13] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[13]),
        .Q(slv_reg3[13]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[14] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[14]),
        .Q(slv_reg3[14]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[15] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[15]),
        .Q(slv_reg3[15]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[16] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[16]),
        .Q(slv_reg3[16]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[17] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[17]),
        .Q(slv_reg3[17]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[18] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[18]),
        .Q(slv_reg3[18]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[19] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[19]),
        .Q(slv_reg3[19]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(slv_reg3[1]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[20] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[20]),
        .Q(slv_reg3[20]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[21] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[21]),
        .Q(slv_reg3[21]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[22] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[22]),
        .Q(slv_reg3[22]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[23] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[23]_i_1_n_0 ),
        .D(s00_axi_wdata[23]),
        .Q(slv_reg3[23]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[24] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[24]),
        .Q(slv_reg3[24]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[25] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[25]),
        .Q(slv_reg3[25]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[26] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[26]),
        .Q(slv_reg3[26]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[27] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[27]),
        .Q(slv_reg3[27]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[28] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[28]),
        .Q(slv_reg3[28]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[29] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[29]),
        .Q(slv_reg3[29]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(slv_reg3[2]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[30] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[30]),
        .Q(slv_reg3[30]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[31] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[31]_i_1_n_0 ),
        .D(s00_axi_wdata[31]),
        .Q(slv_reg3[31]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[3] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[3]),
        .Q(slv_reg3[3]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[4] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[4]),
        .Q(slv_reg3[4]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[5] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[5]),
        .Q(slv_reg3[5]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[6] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[6]),
        .Q(slv_reg3[6]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[7] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[7]_i_1_n_0 ),
        .D(s00_axi_wdata[7]),
        .Q(slv_reg3[7]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[8] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[8]),
        .Q(slv_reg3[8]),
        .R(axi_awready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \slv_reg3_reg[9] 
       (.C(s00_axi_aclk),
        .CE(\slv_reg3[15]_i_1_n_0 ),
        .D(s00_axi_wdata[9]),
        .Q(slv_reg3[9]),
        .R(axi_awready_i_1_n_0));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_LightController_0_0,LightController,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* ip_definition_source = "package_project" *) 
(* x_core_info = "LightController,Vivado 2020.1" *) 
module design_1_LightController_0_0
   (led1,
    led2,
    state,
    result,
    rgb_in,
    led_out,
    rgb);
  input [3:0]led1;
  input [3:0]led2;
  input [2:0]state;
  input result;
  input [2:0]rgb_in;
  output [3:0]led_out;
  output [2:0]rgb;

  wire [3:0]led1;
  wire [3:0]led2;
  wire [3:0]led_out;
  wire [2:0]rgb;
  wire [2:0]rgb_in;
  wire [2:0]state;
  wire NLW_U0_result_UNCONNECTED;
  wire [1:1]NLW_U0_rgb_in_UNCONNECTED;

  (* blue = "3'b100" *) 
  (* green = "3'b010" *) 
  (* red = "3'b001" *) 
  (* state_game = "3'b011" *) 
  (* state_init = "3'b001" *) 
  (* state_result = "3'b100" *) 
  design_1_LightController_0_0_LightController U0
       (.led1(led1),
        .led2(led2),
        .led_out(led_out),
        .result(NLW_U0_result_UNCONNECTED),
        .rgb(rgb),
        .rgb_in({rgb_in[2],NLW_U0_rgb_in_UNCONNECTED[1],rgb_in[0]}),
        .state(state));
endmodule

(* ORIG_REF_NAME = "LightController" *) (* blue = "3'b100" *) (* green = "3'b010" *) 
(* red = "3'b001" *) (* state_game = "3'b011" *) (* state_init = "3'b001" *) 
(* state_result = "3'b100" *) 
module design_1_LightController_0_0_LightController
   (led1,
    led2,
    state,
    result,
    rgb_in,
    led_out,
    rgb);
  input [3:0]led1;
  input [3:0]led2;
  input [2:0]state;
  input result;
  input [2:0]rgb_in;
  output [3:0]led_out;
  output [2:0]rgb;

  wire [3:0]led1;
  wire [3:0]led2;
  wire [3:0]led_out;
  wire [2:0]rgb;
  wire [2:0]rgb_in;
  wire [2:0]state;

  LUT5 #(
    .INIT(32'h0000B800)) 
    \led_out[0]_INST_0 
       (.I0(led2[0]),
        .I1(state[1]),
        .I2(led1[0]),
        .I3(state[0]),
        .I4(state[2]),
        .O(led_out[0]));
  LUT5 #(
    .INIT(32'h0000B800)) 
    \led_out[1]_INST_0 
       (.I0(led2[1]),
        .I1(state[1]),
        .I2(led1[1]),
        .I3(state[0]),
        .I4(state[2]),
        .O(led_out[1]));
  LUT5 #(
    .INIT(32'h0000B800)) 
    \led_out[2]_INST_0 
       (.I0(led2[2]),
        .I1(state[1]),
        .I2(led1[2]),
        .I3(state[0]),
        .I4(state[2]),
        .O(led_out[2]));
  LUT5 #(
    .INIT(32'h0000B800)) 
    \led_out[3]_INST_0 
       (.I0(led2[3]),
        .I1(state[1]),
        .I2(led1[3]),
        .I3(state[0]),
        .I4(state[2]),
        .O(led_out[3]));
  LUT4 #(
    .INIT(16'h1000)) 
    \rgb[0]_INST_0 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(rgb_in[0]),
        .I3(state[2]),
        .O(rgb[0]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \rgb[1]_INST_0 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .O(rgb[1]));
  LUT4 #(
    .INIT(16'h1000)) 
    \rgb[2]_INST_0 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(rgb_in[2]),
        .I3(state[2]),
        .O(rgb[2]));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_axi_traffic_gen_0_0,axi_traffic_gen_v3_0_7_top,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "axi_traffic_gen_v3_0_7_top,Vivado 2020.1" *) 
module design_1_axi_traffic_gen_0_0
   (s_axi_aclk,
    s_axi_aresetn,
    m_axi_lite_ch1_awaddr,
    m_axi_lite_ch1_awprot,
    m_axi_lite_ch1_awvalid,
    m_axi_lite_ch1_awready,
    m_axi_lite_ch1_wdata,
    m_axi_lite_ch1_wstrb,
    m_axi_lite_ch1_wvalid,
    m_axi_lite_ch1_wready,
    m_axi_lite_ch1_bresp,
    m_axi_lite_ch1_bvalid,
    m_axi_lite_ch1_bready,
    m_axi_lite_ch1_araddr,
    m_axi_lite_ch1_arvalid,
    m_axi_lite_ch1_arready,
    m_axi_lite_ch1_rdata,
    m_axi_lite_ch1_rvalid,
    m_axi_lite_ch1_rresp,
    m_axi_lite_ch1_rready,
    done,
    status);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 clock CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME clock, ASSOCIATED_BUSIF S_AXI:M_AXI:M_AXIS_MASTER:S_AXIS_MASTER:M_AXIS_SLAVE:S_AXIS_SLAVE:M_AXI_LITE_CH1:M_AXI_LITE_CH2:M_AXI_LITE_CH3:M_AXI_LITE_CH4:M_AXI_LITE_CH5, ASSOCIATED_RESET s_axi_aresetn, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, INSERT_VIP 0" *) input s_axi_aclk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 reset RST" *) (* x_interface_parameter = "XIL_INTERFACENAME reset, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input s_axi_aresetn;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 AWADDR" *) output [31:0]m_axi_lite_ch1_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 AWPROT" *) output [2:0]m_axi_lite_ch1_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 AWVALID" *) output m_axi_lite_ch1_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 AWREADY" *) input m_axi_lite_ch1_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 WDATA" *) output [31:0]m_axi_lite_ch1_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 WSTRB" *) output [3:0]m_axi_lite_ch1_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 WVALID" *) output m_axi_lite_ch1_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 WREADY" *) input m_axi_lite_ch1_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 BRESP" *) input [1:0]m_axi_lite_ch1_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 BVALID" *) input m_axi_lite_ch1_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 BREADY" *) output m_axi_lite_ch1_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 ARADDR" *) output [31:0]m_axi_lite_ch1_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 ARVALID" *) output m_axi_lite_ch1_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 ARREADY" *) input m_axi_lite_ch1_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 RDATA" *) input [31:0]m_axi_lite_ch1_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 RVALID" *) input m_axi_lite_ch1_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 RRESP" *) input [1:0]m_axi_lite_ch1_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_LITE_CH1 RREADY" *) (* x_interface_parameter = "XIL_INTERFACENAME M_AXI_LITE_CH1, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output m_axi_lite_ch1_rready;
  output done;
  output [31:0]status;

  wire [31:0]m_axi_lite_ch1_araddr;
  wire m_axi_lite_ch1_arready;
  wire m_axi_lite_ch1_arvalid;
  wire [31:0]m_axi_lite_ch1_awaddr;
  wire m_axi_lite_ch1_awready;
  wire m_axi_lite_ch1_awvalid;
  wire m_axi_lite_ch1_bready;
  wire m_axi_lite_ch1_bvalid;
  wire [31:0]m_axi_lite_ch1_rdata;
  wire m_axi_lite_ch1_rready;
  wire m_axi_lite_ch1_rvalid;
  wire [31:0]m_axi_lite_ch1_wdata;
  wire m_axi_lite_ch1_wready;
  wire m_axi_lite_ch1_wvalid;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire NLW_inst_done_UNCONNECTED;
  wire NLW_inst_err_out_UNCONNECTED;
  wire NLW_inst_irq_out_UNCONNECTED;
  wire NLW_inst_m_axi_arready_UNCONNECTED;
  wire NLW_inst_m_axi_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_awready_UNCONNECTED;
  wire NLW_inst_m_axi_awvalid_UNCONNECTED;
  wire NLW_inst_m_axi_bready_UNCONNECTED;
  wire NLW_inst_m_axi_bvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_arready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_awready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_awvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_bready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_bvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_rready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_rvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_wready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch2_wvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_arready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_awready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_awvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_bready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_bvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_rready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_rvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_wready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch3_wvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_arready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_awready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_awvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_bready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_bvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_rready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_rvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_wready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch4_wvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_arready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_awready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_awvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_bready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_bvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_rready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_rvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_wready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_ch5_wvalid_UNCONNECTED;
  wire NLW_inst_m_axi_rlast_UNCONNECTED;
  wire NLW_inst_m_axi_rready_UNCONNECTED;
  wire NLW_inst_m_axi_rvalid_UNCONNECTED;
  wire NLW_inst_m_axi_wlast_UNCONNECTED;
  wire NLW_inst_m_axi_wready_UNCONNECTED;
  wire NLW_inst_m_axi_wvalid_UNCONNECTED;
  wire NLW_inst_m_axis_1_tlast_UNCONNECTED;
  wire NLW_inst_m_axis_1_tready_UNCONNECTED;
  wire NLW_inst_m_axis_1_tvalid_UNCONNECTED;
  wire NLW_inst_m_axis_2_tlast_UNCONNECTED;
  wire NLW_inst_m_axis_2_tready_UNCONNECTED;
  wire NLW_inst_m_axis_2_tvalid_UNCONNECTED;
  wire NLW_inst_s_axi_arready_UNCONNECTED;
  wire NLW_inst_s_axi_arvalid_UNCONNECTED;
  wire NLW_inst_s_axi_awready_UNCONNECTED;
  wire NLW_inst_s_axi_awvalid_UNCONNECTED;
  wire NLW_inst_s_axi_bready_UNCONNECTED;
  wire NLW_inst_s_axi_bvalid_UNCONNECTED;
  wire NLW_inst_s_axi_rlast_UNCONNECTED;
  wire NLW_inst_s_axi_rready_UNCONNECTED;
  wire NLW_inst_s_axi_rvalid_UNCONNECTED;
  wire NLW_inst_s_axi_wlast_UNCONNECTED;
  wire NLW_inst_s_axi_wready_UNCONNECTED;
  wire NLW_inst_s_axi_wvalid_UNCONNECTED;
  wire NLW_inst_s_axis_1_tlast_UNCONNECTED;
  wire NLW_inst_s_axis_1_tready_UNCONNECTED;
  wire NLW_inst_s_axis_1_tvalid_UNCONNECTED;
  wire NLW_inst_s_axis_2_tlast_UNCONNECTED;
  wire NLW_inst_s_axis_2_tready_UNCONNECTED;
  wire NLW_inst_s_axis_2_tvalid_UNCONNECTED;
  wire [15:0]NLW_inst_axis_err_count_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_inst_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arqos_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_arsize_UNCONNECTED;
  wire [7:0]NLW_inst_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_inst_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_awqos_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_awsize_UNCONNECTED;
  wire [7:0]NLW_inst_m_axi_awuser_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_bid_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch1_araddr_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch1_awaddr_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_lite_ch1_awprot_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch1_bresp_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch1_rresp_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_lite_ch1_wstrb_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch2_araddr_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch2_awaddr_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_lite_ch2_awprot_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch2_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch2_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch2_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch2_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_lite_ch2_wstrb_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch3_araddr_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch3_awaddr_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_lite_ch3_awprot_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch3_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch3_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch3_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch3_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_lite_ch3_wstrb_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch4_araddr_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch4_awaddr_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_lite_ch4_awprot_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch4_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch4_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch4_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch4_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_lite_ch4_wstrb_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch5_araddr_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch5_awaddr_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_lite_ch5_awprot_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch5_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch5_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_ch5_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_ch5_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_lite_ch5_wstrb_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_rid_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_wstrb_UNCONNECTED;
  wire [31:0]NLW_inst_m_axis_1_tdata_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_1_tdest_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_1_tid_UNCONNECTED;
  wire [3:0]NLW_inst_m_axis_1_tkeep_UNCONNECTED;
  wire [3:0]NLW_inst_m_axis_1_tstrb_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_1_tuser_UNCONNECTED;
  wire [31:0]NLW_inst_m_axis_2_tdata_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_2_tdest_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_2_tid_UNCONNECTED;
  wire [3:0]NLW_inst_m_axis_2_tkeep_UNCONNECTED;
  wire [3:0]NLW_inst_m_axis_2_tstrb_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_2_tuser_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_inst_s_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_arid_UNCONNECTED;
  wire [7:0]NLW_inst_s_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_inst_s_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_inst_s_axi_arqos_UNCONNECTED;
  wire [2:0]NLW_inst_s_axi_arsize_UNCONNECTED;
  wire [7:0]NLW_inst_s_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_inst_s_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_awid_UNCONNECTED;
  wire [7:0]NLW_inst_s_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_inst_s_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_inst_s_axi_awqos_UNCONNECTED;
  wire [2:0]NLW_inst_s_axi_awsize_UNCONNECTED;
  wire [7:0]NLW_inst_s_axi_awuser_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_s_axi_wstrb_UNCONNECTED;
  wire [31:0]NLW_inst_s_axis_1_tdata_UNCONNECTED;
  wire [7:0]NLW_inst_s_axis_1_tdest_UNCONNECTED;
  wire [7:0]NLW_inst_s_axis_1_tid_UNCONNECTED;
  wire [3:0]NLW_inst_s_axis_1_tkeep_UNCONNECTED;
  wire [3:0]NLW_inst_s_axis_1_tstrb_UNCONNECTED;
  wire [7:0]NLW_inst_s_axis_1_tuser_UNCONNECTED;
  wire [31:0]NLW_inst_s_axis_2_tdata_UNCONNECTED;
  wire [7:0]NLW_inst_s_axis_2_tdest_UNCONNECTED;
  wire [7:0]NLW_inst_s_axis_2_tid_UNCONNECTED;
  wire [3:0]NLW_inst_s_axis_2_tkeep_UNCONNECTED;
  wire [3:0]NLW_inst_s_axis_2_tstrb_UNCONNECTED;
  wire [7:0]NLW_inst_s_axis_2_tuser_UNCONNECTED;
  wire [31:0]NLW_inst_status_UNCONNECTED;

  (* ATG_VERSAL_400 = "0" *) 
  (* C_ADDR_F = "none" *) 
  (* C_ATG_AXIS_DATA_GEN_TYPE = "0" *) 
  (* C_ATG_BASIC_AXI4 = "0" *) 
  (* C_ATG_HLTP_MODE = "0" *) 
  (* C_ATG_MIF_ADDR_BITS = "4" *) 
  (* C_ATG_MIF_DATA_DEPTH = "16" *) 
  (* C_ATG_REPEAT_TYPE = "0" *) 
  (* C_ATG_SLAVE_ONLY = "0" *) 
  (* C_ATG_STATIC = "0" *) 
  (* C_ATG_STATIC_EN_READ = "1" *) 
  (* C_ATG_STATIC_EN_WRITE = "1" *) 
  (* C_ATG_STATIC_FREE_RUN = "1" *) 
  (* C_ATG_STATIC_INCR = "0" *) 
  (* C_ATG_STATIC_LENGTH = "16" *) 
  (* C_ATG_STATIC_RD_ADDRESS = "64'b0000000000000000000000000000000000010011101000000000000000000000" *) 
  (* C_ATG_STATIC_RD_HIGH_ADDRESS = "64'b0000000000000000000000000000000000010011101000000000111111111111" *) 
  (* C_ATG_STATIC_RD_PIPELINE = "3" *) 
  (* C_ATG_STATIC_TRANGAP = "0" *) 
  (* C_ATG_STATIC_WR_ADDRESS = "64'b0000000000000000000000000000000000010010101000000000000000000000" *) 
  (* C_ATG_STATIC_WR_HIGH_ADDRESS = "64'b0000000000000000000000000000000000010010101000000000111111111111" *) 
  (* C_ATG_STATIC_WR_PIPELINE = "3" *) 
  (* C_ATG_STREAMING = "0" *) 
  (* C_ATG_STREAMING_MAX_LEN_BITS = "16" *) 
  (* C_ATG_STREAMING_MEM_FILE = "no_mem_file_loaded" *) 
  (* C_ATG_STREAMING_MST_LPBK = "0" *) 
  (* C_ATG_STREAMING_MST_ONLY = "1" *) 
  (* C_ATG_STREAMING_SLV_LPBK = "0" *) 
  (* C_ATG_SYSTEM_CH1_HIGH = "-1" *) 
  (* C_ATG_SYSTEM_CH1_LOW = "0" *) 
  (* C_ATG_SYSTEM_CH2_HIGH = "511" *) 
  (* C_ATG_SYSTEM_CH2_LOW = "256" *) 
  (* C_ATG_SYSTEM_CH3_HIGH = "767" *) 
  (* C_ATG_SYSTEM_CH3_LOW = "512" *) 
  (* C_ATG_SYSTEM_CH4_HIGH = "1023" *) 
  (* C_ATG_SYSTEM_CH4_LOW = "768" *) 
  (* C_ATG_SYSTEM_CH5_HIGH = "1279" *) 
  (* C_ATG_SYSTEM_CH5_LOW = "1024" *) 
  (* C_ATG_SYSTEM_CMD_MAX_RETRY = "2147483647" *) 
  (* C_ATG_SYSTEM_INIT = "0" *) 
  (* C_ATG_SYSTEM_INIT_ADDR_MIF = "design_1_axi_traffic_gen_0_0_addr.mem" *) 
  (* C_ATG_SYSTEM_INIT_CTRL_MIF = "design_1_axi_traffic_gen_0_0_ctrl.mem" *) 
  (* C_ATG_SYSTEM_INIT_DATA_MIF = "design_1_axi_traffic_gen_0_0_data.mem" *) 
  (* C_ATG_SYSTEM_INIT_MASK_MIF = "design_1_axi_traffic_gen_0_0_mask.mem" *) 
  (* C_ATG_SYSTEM_MAX_CHANNELS = "1" *) 
  (* C_ATG_SYSTEM_TEST = "1" *) 
  (* C_ATG_SYSTEM_TEST_MAX_CLKS = "5000" *) 
  (* C_AXIS1_HAS_TKEEP = "1" *) 
  (* C_AXIS1_HAS_TSTRB = "1" *) 
  (* C_AXIS2_HAS_TKEEP = "0" *) 
  (* C_AXIS2_HAS_TSTRB = "0" *) 
  (* C_AXIS_SPARSE_EN = "1" *) 
  (* C_AXIS_TDATA_WIDTH = "32" *) 
  (* C_AXIS_TDEST_WIDTH = "8" *) 
  (* C_AXIS_TID_WIDTH = "8" *) 
  (* C_AXIS_TUSER_WIDTH = "8" *) 
  (* C_AXI_RD_ADDR_SEED = "23130" *) 
  (* C_AXI_WR_ADDR_SEED = "31899" *) 
  (* C_BASEADDR = "0" *) 
  (* C_CMDRAM_F = "none" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_HIGHADDR = "65535" *) 
  (* C_M_AXI_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_ARUSER_WIDTH = "8" *) 
  (* C_M_AXI_AWUSER_WIDTH = "8" *) 
  (* C_M_AXI_DATA_WIDTH = "32" *) 
  (* C_M_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_NO_EXCL = "0" *) 
  (* C_PRAM_F = "none" *) 
  (* C_RAMINIT_ADDRRAM0_F = "design_1_axi_traffic_gen_0_0_default_addrram.mem" *) 
  (* C_RAMINIT_CMDRAM0_F = "design_1_axi_traffic_gen_0_0_default_cmdram.mem" *) 
  (* C_RAMINIT_CMDRAM1_F = "NONE" *) 
  (* C_RAMINIT_CMDRAM2_F = "NONE" *) 
  (* C_RAMINIT_CMDRAM3_F = "NONE" *) 
  (* C_RAMINIT_PARAMRAM0_F = "design_1_axi_traffic_gen_0_0_default_prmram.mem" *) 
  (* C_RAMINIT_SRAM0_F = "design_1_axi_traffic_gen_0_0_default_mstram.mem" *) 
  (* C_READ_ONLY = "0" *) 
  (* C_REPEAT_COUNT = "254" *) 
  (* C_SRAM_F = "none" *) 
  (* C_STRM_DATA_SEED = "43981" *) 
  (* C_S_AXI_ARUSER_WIDTH = "8" *) 
  (* C_S_AXI_AWUSER_WIDTH = "8" *) 
  (* C_S_AXI_DATA_WIDTH = "32" *) 
  (* C_S_AXI_ID_WIDTH = "1" *) 
  (* C_WRITE_ONLY = "0" *) 
  (* C_ZERO_INVALID = "1" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_top inst
       (.axis_err_count(NLW_inst_axis_err_count_UNCONNECTED[15:0]),
        .core_ext_start(1'b0),
        .core_ext_stop(1'b0),
        .done(NLW_inst_done_UNCONNECTED),
        .err_out(NLW_inst_err_out_UNCONNECTED),
        .irq_out(NLW_inst_irq_out_UNCONNECTED),
        .m_axi_araddr(NLW_inst_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_inst_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_inst_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_inst_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_inst_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_inst_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_inst_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_inst_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(NLW_inst_m_axi_arready_UNCONNECTED),
        .m_axi_arsize(NLW_inst_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_inst_m_axi_aruser_UNCONNECTED[7:0]),
        .m_axi_arvalid(NLW_inst_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_inst_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_inst_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_inst_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_inst_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_inst_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_inst_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_inst_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_inst_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(NLW_inst_m_axi_awready_UNCONNECTED),
        .m_axi_awsize(NLW_inst_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_inst_m_axi_awuser_UNCONNECTED[7:0]),
        .m_axi_awvalid(NLW_inst_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(NLW_inst_m_axi_bid_UNCONNECTED[0]),
        .m_axi_bready(NLW_inst_m_axi_bready_UNCONNECTED),
        .m_axi_bresp(NLW_inst_m_axi_bresp_UNCONNECTED[1:0]),
        .m_axi_bvalid(NLW_inst_m_axi_bvalid_UNCONNECTED),
        .m_axi_lite_ch1_araddr({NLW_inst_m_axi_lite_ch1_araddr_UNCONNECTED[31:4],m_axi_lite_ch1_araddr[3:2],NLW_inst_m_axi_lite_ch1_araddr_UNCONNECTED[1:0]}),
        .m_axi_lite_ch1_arready(m_axi_lite_ch1_arready),
        .m_axi_lite_ch1_arvalid(m_axi_lite_ch1_arvalid),
        .m_axi_lite_ch1_awaddr({NLW_inst_m_axi_lite_ch1_awaddr_UNCONNECTED[31:4],m_axi_lite_ch1_awaddr[3:2],NLW_inst_m_axi_lite_ch1_awaddr_UNCONNECTED[1:0]}),
        .m_axi_lite_ch1_awprot(NLW_inst_m_axi_lite_ch1_awprot_UNCONNECTED[2:0]),
        .m_axi_lite_ch1_awready(m_axi_lite_ch1_awready),
        .m_axi_lite_ch1_awvalid(m_axi_lite_ch1_awvalid),
        .m_axi_lite_ch1_bready(m_axi_lite_ch1_bready),
        .m_axi_lite_ch1_bresp(NLW_inst_m_axi_lite_ch1_bresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch1_bvalid(m_axi_lite_ch1_bvalid),
        .m_axi_lite_ch1_rdata(m_axi_lite_ch1_rdata),
        .m_axi_lite_ch1_rready(m_axi_lite_ch1_rready),
        .m_axi_lite_ch1_rresp(NLW_inst_m_axi_lite_ch1_rresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch1_rvalid(m_axi_lite_ch1_rvalid),
        .m_axi_lite_ch1_wdata(m_axi_lite_ch1_wdata),
        .m_axi_lite_ch1_wready(m_axi_lite_ch1_wready),
        .m_axi_lite_ch1_wstrb(NLW_inst_m_axi_lite_ch1_wstrb_UNCONNECTED[3:0]),
        .m_axi_lite_ch1_wvalid(m_axi_lite_ch1_wvalid),
        .m_axi_lite_ch2_araddr(NLW_inst_m_axi_lite_ch2_araddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch2_arready(NLW_inst_m_axi_lite_ch2_arready_UNCONNECTED),
        .m_axi_lite_ch2_arvalid(NLW_inst_m_axi_lite_ch2_arvalid_UNCONNECTED),
        .m_axi_lite_ch2_awaddr(NLW_inst_m_axi_lite_ch2_awaddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch2_awprot(NLW_inst_m_axi_lite_ch2_awprot_UNCONNECTED[2:0]),
        .m_axi_lite_ch2_awready(NLW_inst_m_axi_lite_ch2_awready_UNCONNECTED),
        .m_axi_lite_ch2_awvalid(NLW_inst_m_axi_lite_ch2_awvalid_UNCONNECTED),
        .m_axi_lite_ch2_bready(NLW_inst_m_axi_lite_ch2_bready_UNCONNECTED),
        .m_axi_lite_ch2_bresp(NLW_inst_m_axi_lite_ch2_bresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch2_bvalid(NLW_inst_m_axi_lite_ch2_bvalid_UNCONNECTED),
        .m_axi_lite_ch2_rdata(NLW_inst_m_axi_lite_ch2_rdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch2_rready(NLW_inst_m_axi_lite_ch2_rready_UNCONNECTED),
        .m_axi_lite_ch2_rresp(NLW_inst_m_axi_lite_ch2_rresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch2_rvalid(NLW_inst_m_axi_lite_ch2_rvalid_UNCONNECTED),
        .m_axi_lite_ch2_wdata(NLW_inst_m_axi_lite_ch2_wdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch2_wready(NLW_inst_m_axi_lite_ch2_wready_UNCONNECTED),
        .m_axi_lite_ch2_wstrb(NLW_inst_m_axi_lite_ch2_wstrb_UNCONNECTED[3:0]),
        .m_axi_lite_ch2_wvalid(NLW_inst_m_axi_lite_ch2_wvalid_UNCONNECTED),
        .m_axi_lite_ch3_araddr(NLW_inst_m_axi_lite_ch3_araddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch3_arready(NLW_inst_m_axi_lite_ch3_arready_UNCONNECTED),
        .m_axi_lite_ch3_arvalid(NLW_inst_m_axi_lite_ch3_arvalid_UNCONNECTED),
        .m_axi_lite_ch3_awaddr(NLW_inst_m_axi_lite_ch3_awaddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch3_awprot(NLW_inst_m_axi_lite_ch3_awprot_UNCONNECTED[2:0]),
        .m_axi_lite_ch3_awready(NLW_inst_m_axi_lite_ch3_awready_UNCONNECTED),
        .m_axi_lite_ch3_awvalid(NLW_inst_m_axi_lite_ch3_awvalid_UNCONNECTED),
        .m_axi_lite_ch3_bready(NLW_inst_m_axi_lite_ch3_bready_UNCONNECTED),
        .m_axi_lite_ch3_bresp(NLW_inst_m_axi_lite_ch3_bresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch3_bvalid(NLW_inst_m_axi_lite_ch3_bvalid_UNCONNECTED),
        .m_axi_lite_ch3_rdata(NLW_inst_m_axi_lite_ch3_rdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch3_rready(NLW_inst_m_axi_lite_ch3_rready_UNCONNECTED),
        .m_axi_lite_ch3_rresp(NLW_inst_m_axi_lite_ch3_rresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch3_rvalid(NLW_inst_m_axi_lite_ch3_rvalid_UNCONNECTED),
        .m_axi_lite_ch3_wdata(NLW_inst_m_axi_lite_ch3_wdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch3_wready(NLW_inst_m_axi_lite_ch3_wready_UNCONNECTED),
        .m_axi_lite_ch3_wstrb(NLW_inst_m_axi_lite_ch3_wstrb_UNCONNECTED[3:0]),
        .m_axi_lite_ch3_wvalid(NLW_inst_m_axi_lite_ch3_wvalid_UNCONNECTED),
        .m_axi_lite_ch4_araddr(NLW_inst_m_axi_lite_ch4_araddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch4_arready(NLW_inst_m_axi_lite_ch4_arready_UNCONNECTED),
        .m_axi_lite_ch4_arvalid(NLW_inst_m_axi_lite_ch4_arvalid_UNCONNECTED),
        .m_axi_lite_ch4_awaddr(NLW_inst_m_axi_lite_ch4_awaddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch4_awprot(NLW_inst_m_axi_lite_ch4_awprot_UNCONNECTED[2:0]),
        .m_axi_lite_ch4_awready(NLW_inst_m_axi_lite_ch4_awready_UNCONNECTED),
        .m_axi_lite_ch4_awvalid(NLW_inst_m_axi_lite_ch4_awvalid_UNCONNECTED),
        .m_axi_lite_ch4_bready(NLW_inst_m_axi_lite_ch4_bready_UNCONNECTED),
        .m_axi_lite_ch4_bresp(NLW_inst_m_axi_lite_ch4_bresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch4_bvalid(NLW_inst_m_axi_lite_ch4_bvalid_UNCONNECTED),
        .m_axi_lite_ch4_rdata(NLW_inst_m_axi_lite_ch4_rdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch4_rready(NLW_inst_m_axi_lite_ch4_rready_UNCONNECTED),
        .m_axi_lite_ch4_rresp(NLW_inst_m_axi_lite_ch4_rresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch4_rvalid(NLW_inst_m_axi_lite_ch4_rvalid_UNCONNECTED),
        .m_axi_lite_ch4_wdata(NLW_inst_m_axi_lite_ch4_wdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch4_wready(NLW_inst_m_axi_lite_ch4_wready_UNCONNECTED),
        .m_axi_lite_ch4_wstrb(NLW_inst_m_axi_lite_ch4_wstrb_UNCONNECTED[3:0]),
        .m_axi_lite_ch4_wvalid(NLW_inst_m_axi_lite_ch4_wvalid_UNCONNECTED),
        .m_axi_lite_ch5_araddr(NLW_inst_m_axi_lite_ch5_araddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch5_arready(NLW_inst_m_axi_lite_ch5_arready_UNCONNECTED),
        .m_axi_lite_ch5_arvalid(NLW_inst_m_axi_lite_ch5_arvalid_UNCONNECTED),
        .m_axi_lite_ch5_awaddr(NLW_inst_m_axi_lite_ch5_awaddr_UNCONNECTED[31:0]),
        .m_axi_lite_ch5_awprot(NLW_inst_m_axi_lite_ch5_awprot_UNCONNECTED[2:0]),
        .m_axi_lite_ch5_awready(NLW_inst_m_axi_lite_ch5_awready_UNCONNECTED),
        .m_axi_lite_ch5_awvalid(NLW_inst_m_axi_lite_ch5_awvalid_UNCONNECTED),
        .m_axi_lite_ch5_bready(NLW_inst_m_axi_lite_ch5_bready_UNCONNECTED),
        .m_axi_lite_ch5_bresp(NLW_inst_m_axi_lite_ch5_bresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch5_bvalid(NLW_inst_m_axi_lite_ch5_bvalid_UNCONNECTED),
        .m_axi_lite_ch5_rdata(NLW_inst_m_axi_lite_ch5_rdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch5_rready(NLW_inst_m_axi_lite_ch5_rready_UNCONNECTED),
        .m_axi_lite_ch5_rresp(NLW_inst_m_axi_lite_ch5_rresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch5_rvalid(NLW_inst_m_axi_lite_ch5_rvalid_UNCONNECTED),
        .m_axi_lite_ch5_wdata(NLW_inst_m_axi_lite_ch5_wdata_UNCONNECTED[31:0]),
        .m_axi_lite_ch5_wready(NLW_inst_m_axi_lite_ch5_wready_UNCONNECTED),
        .m_axi_lite_ch5_wstrb(NLW_inst_m_axi_lite_ch5_wstrb_UNCONNECTED[3:0]),
        .m_axi_lite_ch5_wvalid(NLW_inst_m_axi_lite_ch5_wvalid_UNCONNECTED),
        .m_axi_rdata(NLW_inst_m_axi_rdata_UNCONNECTED[31:0]),
        .m_axi_rid(NLW_inst_m_axi_rid_UNCONNECTED[0]),
        .m_axi_rlast(NLW_inst_m_axi_rlast_UNCONNECTED),
        .m_axi_rready(NLW_inst_m_axi_rready_UNCONNECTED),
        .m_axi_rresp(NLW_inst_m_axi_rresp_UNCONNECTED[1:0]),
        .m_axi_rvalid(NLW_inst_m_axi_rvalid_UNCONNECTED),
        .m_axi_wdata(NLW_inst_m_axi_wdata_UNCONNECTED[31:0]),
        .m_axi_wlast(NLW_inst_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(NLW_inst_m_axi_wready_UNCONNECTED),
        .m_axi_wstrb(NLW_inst_m_axi_wstrb_UNCONNECTED[3:0]),
        .m_axi_wvalid(NLW_inst_m_axi_wvalid_UNCONNECTED),
        .m_axis_1_tdata(NLW_inst_m_axis_1_tdata_UNCONNECTED[31:0]),
        .m_axis_1_tdest(NLW_inst_m_axis_1_tdest_UNCONNECTED[7:0]),
        .m_axis_1_tid(NLW_inst_m_axis_1_tid_UNCONNECTED[7:0]),
        .m_axis_1_tkeep(NLW_inst_m_axis_1_tkeep_UNCONNECTED[3:0]),
        .m_axis_1_tlast(NLW_inst_m_axis_1_tlast_UNCONNECTED),
        .m_axis_1_tready(NLW_inst_m_axis_1_tready_UNCONNECTED),
        .m_axis_1_tstrb(NLW_inst_m_axis_1_tstrb_UNCONNECTED[3:0]),
        .m_axis_1_tuser(NLW_inst_m_axis_1_tuser_UNCONNECTED[7:0]),
        .m_axis_1_tvalid(NLW_inst_m_axis_1_tvalid_UNCONNECTED),
        .m_axis_2_tdata(NLW_inst_m_axis_2_tdata_UNCONNECTED[31:0]),
        .m_axis_2_tdest(NLW_inst_m_axis_2_tdest_UNCONNECTED[7:0]),
        .m_axis_2_tid(NLW_inst_m_axis_2_tid_UNCONNECTED[7:0]),
        .m_axis_2_tkeep(NLW_inst_m_axis_2_tkeep_UNCONNECTED[3:0]),
        .m_axis_2_tlast(NLW_inst_m_axis_2_tlast_UNCONNECTED),
        .m_axis_2_tready(NLW_inst_m_axis_2_tready_UNCONNECTED),
        .m_axis_2_tstrb(NLW_inst_m_axis_2_tstrb_UNCONNECTED[3:0]),
        .m_axis_2_tuser(NLW_inst_m_axis_2_tuser_UNCONNECTED[7:0]),
        .m_axis_2_tvalid(NLW_inst_m_axis_2_tvalid_UNCONNECTED),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(NLW_inst_s_axi_araddr_UNCONNECTED[31:0]),
        .s_axi_arburst(NLW_inst_s_axi_arburst_UNCONNECTED[1:0]),
        .s_axi_arcache(NLW_inst_s_axi_arcache_UNCONNECTED[3:0]),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arid(NLW_inst_s_axi_arid_UNCONNECTED[0]),
        .s_axi_arlen(NLW_inst_s_axi_arlen_UNCONNECTED[7:0]),
        .s_axi_arlock(NLW_inst_s_axi_arlock_UNCONNECTED[0]),
        .s_axi_arprot(NLW_inst_s_axi_arprot_UNCONNECTED[2:0]),
        .s_axi_arqos(NLW_inst_s_axi_arqos_UNCONNECTED[3:0]),
        .s_axi_arready(NLW_inst_s_axi_arready_UNCONNECTED),
        .s_axi_arsize(NLW_inst_s_axi_arsize_UNCONNECTED[2:0]),
        .s_axi_aruser(NLW_inst_s_axi_aruser_UNCONNECTED[7:0]),
        .s_axi_arvalid(NLW_inst_s_axi_arvalid_UNCONNECTED),
        .s_axi_awaddr(NLW_inst_s_axi_awaddr_UNCONNECTED[31:0]),
        .s_axi_awburst(NLW_inst_s_axi_awburst_UNCONNECTED[1:0]),
        .s_axi_awcache(NLW_inst_s_axi_awcache_UNCONNECTED[3:0]),
        .s_axi_awid(NLW_inst_s_axi_awid_UNCONNECTED[0]),
        .s_axi_awlen(NLW_inst_s_axi_awlen_UNCONNECTED[7:0]),
        .s_axi_awlock(NLW_inst_s_axi_awlock_UNCONNECTED[0]),
        .s_axi_awprot(NLW_inst_s_axi_awprot_UNCONNECTED[2:0]),
        .s_axi_awqos(NLW_inst_s_axi_awqos_UNCONNECTED[3:0]),
        .s_axi_awready(NLW_inst_s_axi_awready_UNCONNECTED),
        .s_axi_awsize(NLW_inst_s_axi_awsize_UNCONNECTED[2:0]),
        .s_axi_awuser(NLW_inst_s_axi_awuser_UNCONNECTED[7:0]),
        .s_axi_awvalid(NLW_inst_s_axi_awvalid_UNCONNECTED),
        .s_axi_bid(NLW_inst_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(NLW_inst_s_axi_bready_UNCONNECTED),
        .s_axi_bresp(NLW_inst_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_bvalid(NLW_inst_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_inst_s_axi_rdata_UNCONNECTED[31:0]),
        .s_axi_rid(NLW_inst_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_inst_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(NLW_inst_s_axi_rready_UNCONNECTED),
        .s_axi_rresp(NLW_inst_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_rvalid(NLW_inst_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata(NLW_inst_s_axi_wdata_UNCONNECTED[31:0]),
        .s_axi_wlast(NLW_inst_s_axi_wlast_UNCONNECTED),
        .s_axi_wready(NLW_inst_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb(NLW_inst_s_axi_wstrb_UNCONNECTED[3:0]),
        .s_axi_wvalid(NLW_inst_s_axi_wvalid_UNCONNECTED),
        .s_axis_1_tdata(NLW_inst_s_axis_1_tdata_UNCONNECTED[31:0]),
        .s_axis_1_tdest(NLW_inst_s_axis_1_tdest_UNCONNECTED[7:0]),
        .s_axis_1_tid(NLW_inst_s_axis_1_tid_UNCONNECTED[7:0]),
        .s_axis_1_tkeep(NLW_inst_s_axis_1_tkeep_UNCONNECTED[3:0]),
        .s_axis_1_tlast(NLW_inst_s_axis_1_tlast_UNCONNECTED),
        .s_axis_1_tready(NLW_inst_s_axis_1_tready_UNCONNECTED),
        .s_axis_1_tstrb(NLW_inst_s_axis_1_tstrb_UNCONNECTED[3:0]),
        .s_axis_1_tuser(NLW_inst_s_axis_1_tuser_UNCONNECTED[7:0]),
        .s_axis_1_tvalid(NLW_inst_s_axis_1_tvalid_UNCONNECTED),
        .s_axis_2_tdata(NLW_inst_s_axis_2_tdata_UNCONNECTED[31:0]),
        .s_axis_2_tdest(NLW_inst_s_axis_2_tdest_UNCONNECTED[7:0]),
        .s_axis_2_tid(NLW_inst_s_axis_2_tid_UNCONNECTED[7:0]),
        .s_axis_2_tkeep(NLW_inst_s_axis_2_tkeep_UNCONNECTED[3:0]),
        .s_axis_2_tlast(NLW_inst_s_axis_2_tlast_UNCONNECTED),
        .s_axis_2_tready(NLW_inst_s_axis_2_tready_UNCONNECTED),
        .s_axis_2_tstrb(NLW_inst_s_axis_2_tstrb_UNCONNECTED[3:0]),
        .s_axis_2_tuser(NLW_inst_s_axis_2_tuser_UNCONNECTED[7:0]),
        .s_axis_2_tvalid(NLW_inst_s_axis_2_tvalid_UNCONNECTED),
        .status(NLW_inst_status_UNCONNECTED[31:0]));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_asynch_rst_ff" *) (* dont_touch = "true" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff
   (data,
    clk,
    reset,
    q);
  input data;
  input clk;
  input reset;
  (* INIT = "0" *) (* async_reg = "true" *) output q;

  wire clk;
  wire data;
  (* INIT = "0" *) (* async_reg = "true" *) wire q;
  wire reset;

  initial assign q_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    q_reg
       (.C(clk),
        .CE(1'b1),
        .D(data),
        .PRE(reset),
        .Q(q));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_asynch_rst_ff" *) (* dont_touch = "true" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff__1
   (data,
    clk,
    reset,
    q);
  input data;
  input clk;
  input reset;
  (* INIT = "0" *) (* async_reg = "true" *) output q;

  wire clk;
  wire data;
  (* INIT = "0" *) (* async_reg = "true" *) wire q;
  wire reset;

  initial assign q_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    q_reg
       (.C(clk),
        .CE(1'b1),
        .D(data),
        .PRE(reset),
        .Q(q));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_asynch_rst_ff" *) (* dont_touch = "true" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff__2
   (data,
    clk,
    reset,
    q);
  input data;
  input clk;
  input reset;
  (* INIT = "0" *) (* async_reg = "true" *) output q;

  wire clk;
  wire data;
  (* INIT = "0" *) (* async_reg = "true" *) wire q;
  wire reset;

  initial assign q_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    q_reg
       (.C(clk),
        .CE(1'b1),
        .D(data),
        .PRE(reset),
        .Q(q));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_asynch_rst_ff" *) (* dont_touch = "true" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff__3
   (data,
    clk,
    reset,
    q);
  input data;
  input clk;
  input reset;
  (* INIT = "0" *) (* async_reg = "true" *) output q;

  wire clk;
  wire data;
  (* INIT = "0" *) (* async_reg = "true" *) wire q;
  wire reset;

  initial assign q_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    q_reg
       (.C(clk),
        .CE(1'b1),
        .D(data),
        .PRE(reset),
        .Q(q));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_systeminit_dmg" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg
   (douta,
    S,
    DI,
    \m_axi_lite_ch1_rdata[6] ,
    \m_axi_lite_ch1_rdata[3] ,
    \m_axi_lite_ch1_rdata[15] ,
    \m_axi_lite_ch1_rdata[15]_0 ,
    \m_axi_lite_ch1_rdata[12] ,
    \m_axi_lite_ch1_rdata[21] ,
    \m_axi_lite_ch1_rdata[22] ,
    \m_axi_lite_ch1_rdata[22]_0 ,
    \m_axi_lite_ch1_rdata[21]_0 ,
    \m_axi_lite_ch1_rdata[30] ,
    \m_axi_lite_ch1_rdata[30]_0 ,
    \m_axi_lite_ch1_rdata[30]_1 ,
    \m_axi_lite_ch1_rdata[27] ,
    \gen_rd_a.douta_reg_reg[21] ,
    \m_axi_lite_ch1_rdata[6]_0 ,
    \m_axi_lite_ch1_rdata[15]_1 ,
    \m_axi_lite_ch1_rdata[22]_1 ,
    \m_axi_lite_ch1_rdata[30]_2 ,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[31] ,
    addra,
    m_axi_lite_ch1_rdata,
    \rd_check2_inferred__0/i__carry__1 ,
    CO,
    cur_trn_status_reg,
    cur_trn_status_reg_0,
    cur_trn_status_reg_1,
    cur_trn_status_reg_2);
  output [31:0]douta;
  output [3:0]S;
  output [2:0]DI;
  output [3:0]\m_axi_lite_ch1_rdata[6] ;
  output [0:0]\m_axi_lite_ch1_rdata[3] ;
  output [3:0]\m_axi_lite_ch1_rdata[15] ;
  output [1:0]\m_axi_lite_ch1_rdata[15]_0 ;
  output [1:0]\m_axi_lite_ch1_rdata[12] ;
  output [3:0]\m_axi_lite_ch1_rdata[21] ;
  output [2:0]\m_axi_lite_ch1_rdata[22] ;
  output [3:0]\m_axi_lite_ch1_rdata[22]_0 ;
  output [0:0]\m_axi_lite_ch1_rdata[21]_0 ;
  output [2:0]\m_axi_lite_ch1_rdata[30] ;
  output [2:0]\m_axi_lite_ch1_rdata[30]_0 ;
  output [3:0]\m_axi_lite_ch1_rdata[30]_1 ;
  output [0:0]\m_axi_lite_ch1_rdata[27] ;
  output \gen_rd_a.douta_reg_reg[21] ;
  output [3:0]\m_axi_lite_ch1_rdata[6]_0 ;
  output [3:0]\m_axi_lite_ch1_rdata[15]_1 ;
  output [3:0]\m_axi_lite_ch1_rdata[22]_1 ;
  output [3:0]\m_axi_lite_ch1_rdata[30]_2 ;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[31] ;
  input [3:0]addra;
  input [31:0]m_axi_lite_ch1_rdata;
  input [31:0]\rd_check2_inferred__0/i__carry__1 ;
  input [0:0]CO;
  input [1:0]cur_trn_status_reg;
  input [0:0]cur_trn_status_reg_0;
  input [0:0]cur_trn_status_reg_1;
  input cur_trn_status_reg_2;

  wire [0:0]CO;
  wire [2:0]DI;
  wire [3:0]S;
  wire [3:0]addra;
  wire [1:0]cur_trn_status_reg;
  wire [0:0]cur_trn_status_reg_0;
  wire [0:0]cur_trn_status_reg_1;
  wire [31:0]douta;
  wire \gen_rd_a.douta_reg_reg[21] ;
  wire \gen_rd_a.douta_reg_reg[31] ;
  wire [31:0]m_axi_lite_ch1_rdata;
  wire [1:0]\m_axi_lite_ch1_rdata[12] ;
  wire [3:0]\m_axi_lite_ch1_rdata[15] ;
  wire [1:0]\m_axi_lite_ch1_rdata[15]_0 ;
  wire [3:0]\m_axi_lite_ch1_rdata[15]_1 ;
  wire [3:0]\m_axi_lite_ch1_rdata[21] ;
  wire [0:0]\m_axi_lite_ch1_rdata[21]_0 ;
  wire [2:0]\m_axi_lite_ch1_rdata[22] ;
  wire [3:0]\m_axi_lite_ch1_rdata[22]_0 ;
  wire [3:0]\m_axi_lite_ch1_rdata[22]_1 ;
  wire [0:0]\m_axi_lite_ch1_rdata[27] ;
  wire [2:0]\m_axi_lite_ch1_rdata[30] ;
  wire [2:0]\m_axi_lite_ch1_rdata[30]_0 ;
  wire [3:0]\m_axi_lite_ch1_rdata[30]_1 ;
  wire [3:0]\m_axi_lite_ch1_rdata[30]_2 ;
  wire [0:0]\m_axi_lite_ch1_rdata[3] ;
  wire [3:0]\m_axi_lite_ch1_rdata[6] ;
  wire [3:0]\m_axi_lite_ch1_rdata[6]_0 ;
  wire [31:0]\rd_check2_inferred__0/i__carry__1 ;
  wire s_axi_aclk;
  wire NLW_xpm_memory_spram_inst_cur_trn_status_reg_2_UNCONNECTED;

  design_1_axi_traffic_gen_0_0_xpm_memory_spram xpm_memory_spram_inst
       (.CO(CO),
        .DI(DI),
        .S(S),
        .addra(addra),
        .cur_trn_status_reg(cur_trn_status_reg),
        .cur_trn_status_reg_0(cur_trn_status_reg_0),
        .cur_trn_status_reg_1(cur_trn_status_reg_1),
        .cur_trn_status_reg_2(NLW_xpm_memory_spram_inst_cur_trn_status_reg_2_UNCONNECTED),
        .douta(douta),
        .\gen_rd_a.douta_reg_reg[21] (\gen_rd_a.douta_reg_reg[21] ),
        .\gen_rd_a.douta_reg_reg[31] (\gen_rd_a.douta_reg_reg[31] ),
        .m_axi_lite_ch1_rdata(m_axi_lite_ch1_rdata),
        .\m_axi_lite_ch1_rdata[12] (\m_axi_lite_ch1_rdata[12] ),
        .\m_axi_lite_ch1_rdata[15] (\m_axi_lite_ch1_rdata[15] ),
        .\m_axi_lite_ch1_rdata[15]_0 (\m_axi_lite_ch1_rdata[15]_0 ),
        .\m_axi_lite_ch1_rdata[15]_1 (\m_axi_lite_ch1_rdata[15]_1 ),
        .\m_axi_lite_ch1_rdata[21] (\m_axi_lite_ch1_rdata[21] ),
        .\m_axi_lite_ch1_rdata[21]_0 (\m_axi_lite_ch1_rdata[21]_0 ),
        .\m_axi_lite_ch1_rdata[22] (\m_axi_lite_ch1_rdata[22] ),
        .\m_axi_lite_ch1_rdata[22]_0 (\m_axi_lite_ch1_rdata[22]_0 ),
        .\m_axi_lite_ch1_rdata[22]_1 (\m_axi_lite_ch1_rdata[22]_1 ),
        .\m_axi_lite_ch1_rdata[27] (\m_axi_lite_ch1_rdata[27] ),
        .\m_axi_lite_ch1_rdata[30] (\m_axi_lite_ch1_rdata[30] ),
        .\m_axi_lite_ch1_rdata[30]_0 (\m_axi_lite_ch1_rdata[30]_0 ),
        .\m_axi_lite_ch1_rdata[30]_1 (\m_axi_lite_ch1_rdata[30]_1 ),
        .\m_axi_lite_ch1_rdata[30]_2 (\m_axi_lite_ch1_rdata[30]_2 ),
        .\m_axi_lite_ch1_rdata[3] (\m_axi_lite_ch1_rdata[3] ),
        .\m_axi_lite_ch1_rdata[6] (\m_axi_lite_ch1_rdata[6] ),
        .\m_axi_lite_ch1_rdata[6]_0 (\m_axi_lite_ch1_rdata[6]_0 ),
        .\rd_check2_inferred__0/i__carry__1 (\rd_check2_inferred__0/i__carry__1 ),
        .s_axi_aclk(s_axi_aclk));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_systeminit_dmg" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg__parameterized0
   (douta,
    D,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[21] ,
    addra,
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] );
  output [3:0]douta;
  output [7:0]D;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[21] ;
  input [3:0]addra;
  input \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ;

  wire \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ;
  wire [7:0]D;
  wire [3:0]addra;
  wire [3:0]douta;
  wire \gen_rd_a.douta_reg_reg[21] ;
  wire s_axi_aclk;
  wire [7:5]NLW_xpm_memory_spram_inst_D_UNCONNECTED;
  wire [1:1]NLW_xpm_memory_spram_inst_douta_UNCONNECTED;

  design_1_axi_traffic_gen_0_0_xpm_memory_spram__parameterized0 xpm_memory_spram_inst
       (.\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] (\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ),
        .D({NLW_xpm_memory_spram_inst_D_UNCONNECTED[7:5],D[4:0]}),
        .addra(addra),
        .douta({douta[3:2],NLW_xpm_memory_spram_inst_douta_UNCONNECTED[1],douta[0]}),
        .\gen_rd_a.douta_reg_reg[21] (\gen_rd_a.douta_reg_reg[21] ),
        .s_axi_aclk(s_axi_aclk));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_systeminit_dmg" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg__parameterized1
   (douta,
    \gen_rd_a.douta_reg_reg[16] ,
    \gen_rd_a.douta_reg_reg[16]_0 ,
    rom_eof0,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[31] ,
    addra,
    bready_m_reg,
    rom_eof_reg);
  output [31:0]douta;
  output \gen_rd_a.douta_reg_reg[16] ;
  output \gen_rd_a.douta_reg_reg[16]_0 ;
  output rom_eof0;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[31] ;
  input [3:0]addra;
  input [0:0]bready_m_reg;
  input rom_eof_reg;

  wire [3:0]addra;
  wire [0:0]bready_m_reg;
  wire [31:0]douta;
  wire \gen_rd_a.douta_reg_reg[16] ;
  wire \gen_rd_a.douta_reg_reg[16]_0 ;
  wire \gen_rd_a.douta_reg_reg[31] ;
  wire rom_eof0;
  wire rom_eof_reg;
  wire s_axi_aclk;

  design_1_axi_traffic_gen_0_0_xpm_memory_spram__parameterized1 xpm_memory_spram_inst
       (.addra(addra),
        .bready_m_reg(bready_m_reg),
        .douta(douta),
        .\gen_rd_a.douta_reg_reg[16] (\gen_rd_a.douta_reg_reg[16] ),
        .\gen_rd_a.douta_reg_reg[16]_0 (\gen_rd_a.douta_reg_reg[16]_0 ),
        .\gen_rd_a.douta_reg_reg[31] (\gen_rd_a.douta_reg_reg[31] ),
        .rom_eof0(rom_eof0),
        .rom_eof_reg(rom_eof_reg),
        .s_axi_aclk(s_axi_aclk));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_systeminit_dmg" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg__parameterized2
   (douta,
    DI,
    \gen_rd_a.douta_reg_reg[3] ,
    \gen_rd_a.douta_reg_reg[15] ,
    \gen_rd_a.douta_reg_reg[12] ,
    \gen_rd_a.douta_reg_reg[22] ,
    \gen_rd_a.douta_reg_reg[21] ,
    \gen_rd_a.douta_reg_reg[30] ,
    \gen_rd_a.douta_reg_reg[27] ,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[31] ,
    addra,
    rd_check2_carry__2,
    m_axi_lite_ch1_rdata);
  output [31:0]douta;
  output [2:0]DI;
  output [0:0]\gen_rd_a.douta_reg_reg[3] ;
  output [1:0]\gen_rd_a.douta_reg_reg[15] ;
  output [1:0]\gen_rd_a.douta_reg_reg[12] ;
  output [2:0]\gen_rd_a.douta_reg_reg[22] ;
  output [0:0]\gen_rd_a.douta_reg_reg[21] ;
  output [2:0]\gen_rd_a.douta_reg_reg[30] ;
  output [0:0]\gen_rd_a.douta_reg_reg[27] ;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[31] ;
  input [3:0]addra;
  input [31:0]rd_check2_carry__2;
  input [31:0]m_axi_lite_ch1_rdata;

  wire [2:0]DI;
  wire [3:0]addra;
  wire [31:0]douta;
  wire [1:0]\gen_rd_a.douta_reg_reg[12] ;
  wire [1:0]\gen_rd_a.douta_reg_reg[15] ;
  wire [0:0]\gen_rd_a.douta_reg_reg[21] ;
  wire [2:0]\gen_rd_a.douta_reg_reg[22] ;
  wire [0:0]\gen_rd_a.douta_reg_reg[27] ;
  wire [2:0]\gen_rd_a.douta_reg_reg[30] ;
  wire \gen_rd_a.douta_reg_reg[31] ;
  wire [0:0]\gen_rd_a.douta_reg_reg[3] ;
  wire [31:0]m_axi_lite_ch1_rdata;
  wire [31:0]rd_check2_carry__2;
  wire s_axi_aclk;

  design_1_axi_traffic_gen_0_0_xpm_memory_spram__parameterized2 xpm_memory_spram_inst
       (.DI(DI),
        .addra(addra),
        .douta(douta),
        .\gen_rd_a.douta_reg_reg[12] (\gen_rd_a.douta_reg_reg[12] ),
        .\gen_rd_a.douta_reg_reg[15] (\gen_rd_a.douta_reg_reg[15] ),
        .\gen_rd_a.douta_reg_reg[21] (\gen_rd_a.douta_reg_reg[21] ),
        .\gen_rd_a.douta_reg_reg[22] (\gen_rd_a.douta_reg_reg[22] ),
        .\gen_rd_a.douta_reg_reg[27] (\gen_rd_a.douta_reg_reg[27] ),
        .\gen_rd_a.douta_reg_reg[30] (\gen_rd_a.douta_reg_reg[30] ),
        .\gen_rd_a.douta_reg_reg[31] (\gen_rd_a.douta_reg_reg[31] ),
        .\gen_rd_a.douta_reg_reg[3] (\gen_rd_a.douta_reg_reg[3] ),
        .m_axi_lite_ch1_rdata(m_axi_lite_ch1_rdata),
        .rd_check2_carry__2(rd_check2_carry__2),
        .s_axi_aclk(s_axi_aclk));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_systeminit_mrdwr" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_mrdwr
   (s_axi_aresetn_0,
    done,
    \gen_rd_a.douta_reg_reg[30] ,
    \m_axi_lite_ch1_rdata[30] ,
    CO,
    bready_m_reg_0,
    rready_m_reg_0,
    awvalid_m_reg_0,
    arvalid_m_reg_0,
    m_axi_lite_ch1_wvalid,
    cur_trn_status_reg_0,
    addra,
    \rom_ptr_ff_reg[4]_0 ,
    m_axi_lite_ch1_awaddr,
    m_axi_lite_ch1_araddr,
    m_axi_lite_ch1_rresp_1_sp_1,
    m_axi_lite_ch5_wdata,
    status,
    s_axi_aresetn,
    s_axi_aclk,
    DI,
    rd_check2_carry__0_0,
    rd_check2_carry__1_0,
    rd_check2_carry__1_1,
    rd_check2_carry__2_0,
    rd_check2_carry__2_1,
    cur_trn_status_i_3,
    cur_trn_status_i_3_0,
    \rd_check1_inferred__0/i__carry__0_0 ,
    \rd_check1_inferred__0/i__carry__0_1 ,
    \rd_check1_inferred__0/i__carry__1_0 ,
    \rd_check1_inferred__0/i__carry__1_1 ,
    \rd_check1_inferred__0/i__carry__2_0 ,
    \rd_check1_inferred__0/i__carry__2_1 ,
    cur_trn_status_i_3_1,
    cur_trn_status_i_3_2,
    S,
    \rd_check2_inferred__0/i__carry__1_0 ,
    cur_trn_status_i_3_3,
    m_axi_lite_ch1_arready,
    m_axi_lite_ch1_awready,
    rready_m_reg_1,
    m_axi_lite_ch1_rvalid,
    rom_eof0,
    douta,
    cur_trn_status_reg_1,
    bready_m_reg_1,
    m_axi_lite_ch1_bvalid,
    m_axi_lite_ch1_wready,
    m_axi_lite_ch1_bresp,
    m_axi_lite_ch1_rresp,
    D,
    \wdata_m_reg[31]_0 ,
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 );
  output s_axi_aresetn_0;
  output done;
  output [0:0]\gen_rd_a.douta_reg_reg[30] ;
  output [0:0]\m_axi_lite_ch1_rdata[30] ;
  output [0:0]CO;
  output bready_m_reg_0;
  output rready_m_reg_0;
  output awvalid_m_reg_0;
  output arvalid_m_reg_0;
  output m_axi_lite_ch1_wvalid;
  output cur_trn_status_reg_0;
  output [3:0]addra;
  output \rom_ptr_ff_reg[4]_0 ;
  output [31:0]m_axi_lite_ch1_awaddr;
  output [31:0]m_axi_lite_ch1_araddr;
  output m_axi_lite_ch1_rresp_1_sp_1;
  output [31:0]m_axi_lite_ch5_wdata;
  output [25:0]status;
  input s_axi_aresetn;
  input s_axi_aclk;
  input [3:0]DI;
  input [3:0]rd_check2_carry__0_0;
  input [3:0]rd_check2_carry__1_0;
  input [3:0]rd_check2_carry__1_1;
  input [3:0]rd_check2_carry__2_0;
  input [3:0]rd_check2_carry__2_1;
  input [3:0]cur_trn_status_i_3;
  input [3:0]cur_trn_status_i_3_0;
  input [3:0]\rd_check1_inferred__0/i__carry__0_0 ;
  input [3:0]\rd_check1_inferred__0/i__carry__0_1 ;
  input [3:0]\rd_check1_inferred__0/i__carry__1_0 ;
  input [3:0]\rd_check1_inferred__0/i__carry__1_1 ;
  input [3:0]\rd_check1_inferred__0/i__carry__2_0 ;
  input [3:0]\rd_check1_inferred__0/i__carry__2_1 ;
  input [3:0]cur_trn_status_i_3_1;
  input [3:0]cur_trn_status_i_3_2;
  input [3:0]S;
  input [3:0]\rd_check2_inferred__0/i__carry__1_0 ;
  input [2:0]cur_trn_status_i_3_3;
  input m_axi_lite_ch1_arready;
  input m_axi_lite_ch1_awready;
  input rready_m_reg_1;
  input m_axi_lite_ch1_rvalid;
  input rom_eof0;
  input [1:0]douta;
  input cur_trn_status_reg_1;
  input bready_m_reg_1;
  input m_axi_lite_ch1_bvalid;
  input m_axi_lite_ch1_wready;
  input [0:0]m_axi_lite_ch1_bresp;
  input [1:0]m_axi_lite_ch1_rresp;
  input [31:0]D;
  input [31:0]\wdata_m_reg[31]_0 ;
  input [7:0]\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 ;

  wire [7:0]\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 ;
  wire \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[0] ;
  wire \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[1] ;
  wire \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[2] ;
  wire \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[3] ;
  wire \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[4] ;
  wire [0:0]CO;
  wire [31:0]D;
  wire [3:0]DI;
  wire [3:0]S;
  wire [3:0]addra;
  wire arvalid_m_i_1_n_0;
  wire arvalid_m_reg_0;
  wire \awaddr_m[31]_i_4_n_0 ;
  wire awvalid_m_i_1_n_0;
  wire awvalid_m_reg_0;
  wire b_complete;
  wire b_complete_2ff;
  wire b_complete_3ff;
  wire b_complete_ff;
  wire bready_m_i_1_n_0;
  wire bready_m_reg_0;
  wire bready_m_reg_1;
  wire [31:0]cur_trn_addr;
  wire cur_trn_addr_0;
  wire cur_trn_done;
  wire cur_trn_status_i_1_n_0;
  wire [3:0]cur_trn_status_i_3;
  wire [3:0]cur_trn_status_i_3_0;
  wire [3:0]cur_trn_status_i_3_1;
  wire [3:0]cur_trn_status_i_3_2;
  wire [2:0]cur_trn_status_i_3_3;
  wire cur_trn_status_reg_0;
  wire cur_trn_status_reg_1;
  wire [1:1]cur_trn_type;
  wire \cur_trn_type[0]_i_1_n_0 ;
  wire \cur_trn_type[1]_i_1_n_0 ;
  wire \cur_trn_type_reg_n_0_[0] ;
  wire \cur_trn_type_reg_n_0_[1] ;
  wire [1:0]douta;
  wire first_tran_done;
  wire first_tran_done_i_1_n_0;
  wire [0:0]\gen_rd_a.douta_reg_reg[30] ;
  wire i__carry__0_i_1_n_0;
  wire i__carry__0_i_2_n_0;
  wire i__carry__0_i_3_n_0;
  wire i__carry__0_i_4_n_0;
  wire i__carry__1_i_1_n_0;
  wire i__carry__1_i_2_n_0;
  wire i__carry__1_i_3_n_0;
  wire i__carry_i_1_n_0;
  wire i__carry_i_2_n_0;
  wire i__carry_i_3_n_0;
  wire i__carry_i_4_n_0;
  wire launch_new_rd;
  wire launch_new_wr;
  wire [31:0]\^m_axi_lite_ch1_araddr ;
  wire m_axi_lite_ch1_arready;
  wire [31:0]\^m_axi_lite_ch1_awaddr ;
  wire m_axi_lite_ch1_awready;
  wire m_axi_lite_ch1_bvalid;
  wire [0:0]\m_axi_lite_ch1_rdata[30] ;
  wire m_axi_lite_ch1_rvalid;
  wire m_axi_lite_ch1_wready;
  wire m_axi_lite_ch1_wvalid;
  wire [31:0]m_axi_lite_ch5_wdata;
  wire max_retry_cntr0;
  wire max_retry_cntr2;
  wire \max_retry_cntr2_inferred__0/i__carry__0_n_0 ;
  wire \max_retry_cntr2_inferred__0/i__carry_n_0 ;
  wire \max_retry_cntr[0]_i_1_n_0 ;
  wire \max_retry_cntr[0]_i_4_n_0 ;
  wire \max_retry_cntr[0]_i_5_n_0 ;
  wire [31:0]max_retry_cntr_reg;
  wire \max_retry_cntr_reg[0]_i_3_n_0 ;
  wire \max_retry_cntr_reg[0]_i_3_n_4 ;
  wire \max_retry_cntr_reg[0]_i_3_n_5 ;
  wire \max_retry_cntr_reg[0]_i_3_n_6 ;
  wire \max_retry_cntr_reg[0]_i_3_n_7 ;
  wire \max_retry_cntr_reg[12]_i_1_n_0 ;
  wire \max_retry_cntr_reg[12]_i_1_n_4 ;
  wire \max_retry_cntr_reg[12]_i_1_n_5 ;
  wire \max_retry_cntr_reg[12]_i_1_n_6 ;
  wire \max_retry_cntr_reg[12]_i_1_n_7 ;
  wire \max_retry_cntr_reg[16]_i_1_n_0 ;
  wire \max_retry_cntr_reg[16]_i_1_n_4 ;
  wire \max_retry_cntr_reg[16]_i_1_n_5 ;
  wire \max_retry_cntr_reg[16]_i_1_n_6 ;
  wire \max_retry_cntr_reg[16]_i_1_n_7 ;
  wire \max_retry_cntr_reg[20]_i_1_n_0 ;
  wire \max_retry_cntr_reg[20]_i_1_n_4 ;
  wire \max_retry_cntr_reg[20]_i_1_n_5 ;
  wire \max_retry_cntr_reg[20]_i_1_n_6 ;
  wire \max_retry_cntr_reg[20]_i_1_n_7 ;
  wire \max_retry_cntr_reg[24]_i_1_n_0 ;
  wire \max_retry_cntr_reg[24]_i_1_n_4 ;
  wire \max_retry_cntr_reg[24]_i_1_n_5 ;
  wire \max_retry_cntr_reg[24]_i_1_n_6 ;
  wire \max_retry_cntr_reg[24]_i_1_n_7 ;
  wire \max_retry_cntr_reg[28]_i_1_n_4 ;
  wire \max_retry_cntr_reg[28]_i_1_n_5 ;
  wire \max_retry_cntr_reg[28]_i_1_n_6 ;
  wire \max_retry_cntr_reg[28]_i_1_n_7 ;
  wire \max_retry_cntr_reg[4]_i_1_n_0 ;
  wire \max_retry_cntr_reg[4]_i_1_n_4 ;
  wire \max_retry_cntr_reg[4]_i_1_n_5 ;
  wire \max_retry_cntr_reg[4]_i_1_n_6 ;
  wire \max_retry_cntr_reg[4]_i_1_n_7 ;
  wire \max_retry_cntr_reg[8]_i_1_n_0 ;
  wire \max_retry_cntr_reg[8]_i_1_n_4 ;
  wire \max_retry_cntr_reg[8]_i_1_n_5 ;
  wire \max_retry_cntr_reg[8]_i_1_n_6 ;
  wire \max_retry_cntr_reg[8]_i_1_n_7 ;
  wire \max_test_time_cntr[0]_i_10_n_0 ;
  wire \max_test_time_cntr[0]_i_11_n_0 ;
  wire \max_test_time_cntr[0]_i_12_n_0 ;
  wire \max_test_time_cntr[0]_i_13_n_0 ;
  wire \max_test_time_cntr[0]_i_14_n_0 ;
  wire \max_test_time_cntr[0]_i_15_n_0 ;
  wire \max_test_time_cntr[0]_i_16_n_0 ;
  wire \max_test_time_cntr[0]_i_17_n_0 ;
  wire \max_test_time_cntr[0]_i_18_n_0 ;
  wire \max_test_time_cntr[0]_i_19_n_0 ;
  wire \max_test_time_cntr[0]_i_1_n_0 ;
  wire \max_test_time_cntr[0]_i_20_n_0 ;
  wire \max_test_time_cntr[0]_i_21_n_0 ;
  wire \max_test_time_cntr[0]_i_22_n_0 ;
  wire \max_test_time_cntr[0]_i_3_n_0 ;
  wire \max_test_time_cntr[0]_i_4_n_0 ;
  wire \max_test_time_cntr[0]_i_5_n_0 ;
  wire \max_test_time_cntr[0]_i_6_n_0 ;
  wire \max_test_time_cntr[0]_i_7_n_0 ;
  wire \max_test_time_cntr[0]_i_8_n_0 ;
  wire \max_test_time_cntr[0]_i_9_n_0 ;
  wire [31:0]max_test_time_cntr_reg;
  wire \max_test_time_cntr_reg[0]_i_2_n_0 ;
  wire \max_test_time_cntr_reg[0]_i_2_n_4 ;
  wire \max_test_time_cntr_reg[0]_i_2_n_5 ;
  wire \max_test_time_cntr_reg[0]_i_2_n_6 ;
  wire \max_test_time_cntr_reg[0]_i_2_n_7 ;
  wire \max_test_time_cntr_reg[12]_i_1_n_0 ;
  wire \max_test_time_cntr_reg[12]_i_1_n_4 ;
  wire \max_test_time_cntr_reg[12]_i_1_n_5 ;
  wire \max_test_time_cntr_reg[12]_i_1_n_6 ;
  wire \max_test_time_cntr_reg[12]_i_1_n_7 ;
  wire \max_test_time_cntr_reg[16]_i_1_n_0 ;
  wire \max_test_time_cntr_reg[16]_i_1_n_4 ;
  wire \max_test_time_cntr_reg[16]_i_1_n_5 ;
  wire \max_test_time_cntr_reg[16]_i_1_n_6 ;
  wire \max_test_time_cntr_reg[16]_i_1_n_7 ;
  wire \max_test_time_cntr_reg[20]_i_1_n_0 ;
  wire \max_test_time_cntr_reg[20]_i_1_n_4 ;
  wire \max_test_time_cntr_reg[20]_i_1_n_5 ;
  wire \max_test_time_cntr_reg[20]_i_1_n_6 ;
  wire \max_test_time_cntr_reg[20]_i_1_n_7 ;
  wire \max_test_time_cntr_reg[24]_i_1_n_0 ;
  wire \max_test_time_cntr_reg[24]_i_1_n_4 ;
  wire \max_test_time_cntr_reg[24]_i_1_n_5 ;
  wire \max_test_time_cntr_reg[24]_i_1_n_6 ;
  wire \max_test_time_cntr_reg[24]_i_1_n_7 ;
  wire \max_test_time_cntr_reg[28]_i_1_n_4 ;
  wire \max_test_time_cntr_reg[28]_i_1_n_5 ;
  wire \max_test_time_cntr_reg[28]_i_1_n_6 ;
  wire \max_test_time_cntr_reg[28]_i_1_n_7 ;
  wire \max_test_time_cntr_reg[4]_i_1_n_0 ;
  wire \max_test_time_cntr_reg[4]_i_1_n_4 ;
  wire \max_test_time_cntr_reg[4]_i_1_n_5 ;
  wire \max_test_time_cntr_reg[4]_i_1_n_6 ;
  wire \max_test_time_cntr_reg[4]_i_1_n_7 ;
  wire \max_test_time_cntr_reg[8]_i_1_n_0 ;
  wire \max_test_time_cntr_reg[8]_i_1_n_4 ;
  wire \max_test_time_cntr_reg[8]_i_1_n_5 ;
  wire \max_test_time_cntr_reg[8]_i_1_n_6 ;
  wire \max_test_time_cntr_reg[8]_i_1_n_7 ;
  wire [31:0]new_trn_addr;
  wire \new_trn_addr[31]_i_1_n_0 ;
  wire \new_trn_addr_reg_n_0_[0] ;
  wire \new_trn_addr_reg_n_0_[10] ;
  wire \new_trn_addr_reg_n_0_[11] ;
  wire \new_trn_addr_reg_n_0_[12] ;
  wire \new_trn_addr_reg_n_0_[13] ;
  wire \new_trn_addr_reg_n_0_[14] ;
  wire \new_trn_addr_reg_n_0_[15] ;
  wire \new_trn_addr_reg_n_0_[16] ;
  wire \new_trn_addr_reg_n_0_[17] ;
  wire \new_trn_addr_reg_n_0_[18] ;
  wire \new_trn_addr_reg_n_0_[19] ;
  wire \new_trn_addr_reg_n_0_[1] ;
  wire \new_trn_addr_reg_n_0_[20] ;
  wire \new_trn_addr_reg_n_0_[21] ;
  wire \new_trn_addr_reg_n_0_[22] ;
  wire \new_trn_addr_reg_n_0_[23] ;
  wire \new_trn_addr_reg_n_0_[24] ;
  wire \new_trn_addr_reg_n_0_[25] ;
  wire \new_trn_addr_reg_n_0_[26] ;
  wire \new_trn_addr_reg_n_0_[27] ;
  wire \new_trn_addr_reg_n_0_[28] ;
  wire \new_trn_addr_reg_n_0_[29] ;
  wire \new_trn_addr_reg_n_0_[2] ;
  wire \new_trn_addr_reg_n_0_[30] ;
  wire \new_trn_addr_reg_n_0_[31] ;
  wire \new_trn_addr_reg_n_0_[3] ;
  wire \new_trn_addr_reg_n_0_[4] ;
  wire \new_trn_addr_reg_n_0_[5] ;
  wire \new_trn_addr_reg_n_0_[6] ;
  wire \new_trn_addr_reg_n_0_[7] ;
  wire \new_trn_addr_reg_n_0_[8] ;
  wire \new_trn_addr_reg_n_0_[9] ;
  wire [1:0]new_trn_type;
  wire \new_trn_type[0]_i_1_n_0 ;
  wire \new_trn_type[1]_i_1_n_0 ;
  wire \new_trn_type[1]_i_2_n_0 ;
  wire r_complete;
  wire r_complete_2ff;
  wire r_complete_3ff;
  wire r_complete_ff;
  wire [3:0]\rd_check1_inferred__0/i__carry__0_0 ;
  wire [3:0]\rd_check1_inferred__0/i__carry__0_1 ;
  wire \rd_check1_inferred__0/i__carry__0_n_0 ;
  wire [3:0]\rd_check1_inferred__0/i__carry__1_0 ;
  wire [3:0]\rd_check1_inferred__0/i__carry__1_1 ;
  wire \rd_check1_inferred__0/i__carry__1_n_0 ;
  wire [3:0]\rd_check1_inferred__0/i__carry__2_0 ;
  wire [3:0]\rd_check1_inferred__0/i__carry__2_1 ;
  wire \rd_check1_inferred__0/i__carry_n_0 ;
  wire [3:0]rd_check2_carry__0_0;
  wire rd_check2_carry__0_n_0;
  wire [3:0]rd_check2_carry__1_0;
  wire [3:0]rd_check2_carry__1_1;
  wire rd_check2_carry__1_n_0;
  wire [3:0]rd_check2_carry__2_0;
  wire [3:0]rd_check2_carry__2_1;
  wire rd_check2_carry_n_0;
  wire \rd_check2_inferred__0/i__carry__0_n_0 ;
  wire [3:0]\rd_check2_inferred__0/i__carry__1_0 ;
  wire \rd_check2_inferred__0/i__carry_n_0 ;
  wire rom_eof;
  wire rom_eof0;
  wire rom_eof_i_1_n_0;
  wire [4:0]rom_ptr_ff;
  wire \rom_ptr_ff[4]_i_1_n_0 ;
  wire \rom_ptr_ff_reg[4]_0 ;
  wire rready_m_i_1_n_0;
  wire rready_m_reg_0;
  wire rready_m_reg_1;
  wire rst_l_2ff;
  wire rst_l_3ff;
  wire rst_l_ff;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire s_axi_aresetn_0;
  wire start_retry_check;
  wire start_retry_check_i_1_n_0;
  wire [31:0]\wdata_m_reg[31]_0 ;
  wire wvalid_m_i_1_n_0;
  wire [2:0]\NLW_max_retry_cntr2_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_max_retry_cntr2_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr2_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_max_retry_cntr2_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]\NLW_max_retry_cntr2_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_max_retry_cntr2_inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr_reg[0]_i_3_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr_reg[16]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr_reg[20]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_max_retry_cntr_reg[28]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_retry_cntr_reg[8]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_test_time_cntr_reg[0]_i_2_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_test_time_cntr_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_test_time_cntr_reg[16]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_test_time_cntr_reg[20]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_test_time_cntr_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_max_test_time_cntr_reg[28]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_test_time_cntr_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_max_test_time_cntr_reg[8]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_rd_check1_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_rd_check1_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_rd_check1_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_rd_check1_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [2:0]\NLW_rd_check1_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_rd_check1_inferred__0/i__carry__1_O_UNCONNECTED ;
  wire [2:0]\NLW_rd_check1_inferred__0/i__carry__2_CO_UNCONNECTED ;
  wire [3:0]\NLW_rd_check1_inferred__0/i__carry__2_O_UNCONNECTED ;
  wire [2:0]NLW_rd_check2_carry_CO_UNCONNECTED;
  wire [3:0]NLW_rd_check2_carry_O_UNCONNECTED;
  wire [2:0]NLW_rd_check2_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_rd_check2_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_rd_check2_carry__1_CO_UNCONNECTED;
  wire [3:0]NLW_rd_check2_carry__1_O_UNCONNECTED;
  wire [2:0]NLW_rd_check2_carry__2_CO_UNCONNECTED;
  wire [3:0]NLW_rd_check2_carry__2_O_UNCONNECTED;
  wire [2:0]\NLW_rd_check2_inferred__0/i__carry_CO_UNCONNECTED ;
  wire [3:0]\NLW_rd_check2_inferred__0/i__carry_O_UNCONNECTED ;
  wire [2:0]\NLW_rd_check2_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_rd_check2_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]\NLW_rd_check2_inferred__0/i__carry__1_CO_UNCONNECTED ;
  wire [3:0]\NLW_rd_check2_inferred__0/i__carry__1_O_UNCONNECTED ;

  assign m_axi_lite_ch1_araddr[3:2] = \^m_axi_lite_ch1_araddr [3:2];
  assign m_axi_lite_ch1_awaddr[3:2] = \^m_axi_lite_ch1_awaddr [3:2];
  LUT2 #(
    .INIT(4'hE)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr[7]_i_1 
       (.I0(r_complete_ff),
        .I1(b_complete_ff),
        .O(cur_trn_done));
  FDRE #(
    .INIT(1'b0)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] 
       (.C(s_axi_aclk),
        .CE(cur_trn_done),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 [0]),
        .Q(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[0] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[1] 
       (.C(s_axi_aclk),
        .CE(cur_trn_done),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 [1]),
        .Q(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[1] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[2] 
       (.C(s_axi_aclk),
        .CE(cur_trn_done),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 [2]),
        .Q(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[2] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[3] 
       (.C(s_axi_aclk),
        .CE(cur_trn_done),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 [3]),
        .Q(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[3] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[4] 
       (.C(s_axi_aclk),
        .CE(cur_trn_done),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 [4]),
        .Q(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[4] ),
        .R(s_axi_aresetn_0));
  LUT4 #(
    .INIT(16'h1000)) 
    \araddr_m[31]_i_1 
       (.I0(rom_eof0),
        .I1(douta[0]),
        .I2(\awaddr_m[31]_i_4_n_0 ),
        .I3(\max_test_time_cntr[0]_i_1_n_0 ),
        .O(launch_new_rd));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[0] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[0]),
        .Q(\^m_axi_lite_ch1_araddr [0]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[10] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[10]),
        .Q(\^m_axi_lite_ch1_araddr [10]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[11] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[11]),
        .Q(\^m_axi_lite_ch1_araddr [11]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[12] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[12]),
        .Q(\^m_axi_lite_ch1_araddr [12]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[13] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[13]),
        .Q(\^m_axi_lite_ch1_araddr [13]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[14] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[14]),
        .Q(\^m_axi_lite_ch1_araddr [14]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[15] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[15]),
        .Q(\^m_axi_lite_ch1_araddr [15]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[16] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[16]),
        .Q(\^m_axi_lite_ch1_araddr [16]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[17] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[17]),
        .Q(\^m_axi_lite_ch1_araddr [17]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[18] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[18]),
        .Q(\^m_axi_lite_ch1_araddr [18]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[19] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[19]),
        .Q(\^m_axi_lite_ch1_araddr [19]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[1] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[1]),
        .Q(\^m_axi_lite_ch1_araddr [1]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[20] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[20]),
        .Q(\^m_axi_lite_ch1_araddr [20]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[21] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[21]),
        .Q(\^m_axi_lite_ch1_araddr [21]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[22] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[22]),
        .Q(\^m_axi_lite_ch1_araddr [22]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[23] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[23]),
        .Q(\^m_axi_lite_ch1_araddr [23]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[24] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[24]),
        .Q(\^m_axi_lite_ch1_araddr [24]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[25] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[25]),
        .Q(\^m_axi_lite_ch1_araddr [25]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[26] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[26]),
        .Q(\^m_axi_lite_ch1_araddr [26]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[27] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[27]),
        .Q(\^m_axi_lite_ch1_araddr [27]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[28] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[28]),
        .Q(\^m_axi_lite_ch1_araddr [28]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[29] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[29]),
        .Q(\^m_axi_lite_ch1_araddr [29]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[2] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[2]),
        .Q(\^m_axi_lite_ch1_araddr [2]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[30] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[30]),
        .Q(\^m_axi_lite_ch1_araddr [30]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[31] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[31]),
        .Q(\^m_axi_lite_ch1_araddr [31]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[3] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[3]),
        .Q(\^m_axi_lite_ch1_araddr [3]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[4] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[4]),
        .Q(\^m_axi_lite_ch1_araddr [4]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[5] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[5]),
        .Q(\^m_axi_lite_ch1_araddr [5]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[6] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[6]),
        .Q(\^m_axi_lite_ch1_araddr [6]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[7] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[7]),
        .Q(\^m_axi_lite_ch1_araddr [7]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[8] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[8]),
        .Q(\^m_axi_lite_ch1_araddr [8]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \araddr_m_reg[9] 
       (.C(s_axi_aclk),
        .CE(launch_new_rd),
        .D(D[9]),
        .Q(\^m_axi_lite_ch1_araddr [9]),
        .R(s_axi_aresetn_0));
  LUT6 #(
    .INIT(64'h0000FF0080008000)) 
    arvalid_m_i_1
       (.I0(\max_test_time_cntr[0]_i_1_n_0 ),
        .I1(\awaddr_m[31]_i_4_n_0 ),
        .I2(rready_m_reg_1),
        .I3(s_axi_aresetn),
        .I4(m_axi_lite_ch1_arready),
        .I5(arvalid_m_reg_0),
        .O(arvalid_m_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    arvalid_m_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(arvalid_m_i_1_n_0),
        .Q(arvalid_m_reg_0),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \awaddr_m[31]_i_1 
       (.I0(s_axi_aresetn),
        .O(s_axi_aresetn_0));
  LUT4 #(
    .INIT(16'h4000)) 
    \awaddr_m[31]_i_2 
       (.I0(rom_eof0),
        .I1(douta[0]),
        .I2(\awaddr_m[31]_i_4_n_0 ),
        .I3(\max_test_time_cntr[0]_i_1_n_0 ),
        .O(launch_new_wr));
  LUT4 #(
    .INIT(16'hEEFE)) 
    \awaddr_m[31]_i_4 
       (.I0(r_complete_3ff),
        .I1(b_complete_3ff),
        .I2(rst_l_2ff),
        .I3(rst_l_3ff),
        .O(\awaddr_m[31]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFE02)) 
    \awaddr_m[31]_i_5 
       (.I0(rom_ptr_ff[4]),
        .I1(b_complete_2ff),
        .I2(r_complete_2ff),
        .I3(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[4] ),
        .O(\rom_ptr_ff_reg[4]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[0] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[0]),
        .Q(\^m_axi_lite_ch1_awaddr [0]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[10] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[10]),
        .Q(\^m_axi_lite_ch1_awaddr [10]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[11] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[11]),
        .Q(\^m_axi_lite_ch1_awaddr [11]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[12] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[12]),
        .Q(\^m_axi_lite_ch1_awaddr [12]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[13] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[13]),
        .Q(\^m_axi_lite_ch1_awaddr [13]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[14] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[14]),
        .Q(\^m_axi_lite_ch1_awaddr [14]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[15] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[15]),
        .Q(\^m_axi_lite_ch1_awaddr [15]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[16] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[16]),
        .Q(\^m_axi_lite_ch1_awaddr [16]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[17] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[17]),
        .Q(\^m_axi_lite_ch1_awaddr [17]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[18] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[18]),
        .Q(\^m_axi_lite_ch1_awaddr [18]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[19] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[19]),
        .Q(\^m_axi_lite_ch1_awaddr [19]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[1] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[1]),
        .Q(\^m_axi_lite_ch1_awaddr [1]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[20] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[20]),
        .Q(\^m_axi_lite_ch1_awaddr [20]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[21] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[21]),
        .Q(\^m_axi_lite_ch1_awaddr [21]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[22] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[22]),
        .Q(\^m_axi_lite_ch1_awaddr [22]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[23] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[23]),
        .Q(\^m_axi_lite_ch1_awaddr [23]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[24] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[24]),
        .Q(\^m_axi_lite_ch1_awaddr [24]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[25] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[25]),
        .Q(\^m_axi_lite_ch1_awaddr [25]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[26] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[26]),
        .Q(\^m_axi_lite_ch1_awaddr [26]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[27] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[27]),
        .Q(\^m_axi_lite_ch1_awaddr [27]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[28] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[28]),
        .Q(\^m_axi_lite_ch1_awaddr [28]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[29] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[29]),
        .Q(\^m_axi_lite_ch1_awaddr [29]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[2] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[2]),
        .Q(\^m_axi_lite_ch1_awaddr [2]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[30] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[30]),
        .Q(\^m_axi_lite_ch1_awaddr [30]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[31] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[31]),
        .Q(\^m_axi_lite_ch1_awaddr [31]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[3] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[3]),
        .Q(\^m_axi_lite_ch1_awaddr [3]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[4] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[4]),
        .Q(\^m_axi_lite_ch1_awaddr [4]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[5] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[5]),
        .Q(\^m_axi_lite_ch1_awaddr [5]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[6] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[6]),
        .Q(\^m_axi_lite_ch1_awaddr [6]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[7] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[7]),
        .Q(\^m_axi_lite_ch1_awaddr [7]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[8] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[8]),
        .Q(\^m_axi_lite_ch1_awaddr [8]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \awaddr_m_reg[9] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(D[9]),
        .Q(\^m_axi_lite_ch1_awaddr [9]),
        .R(s_axi_aresetn_0));
  LUT6 #(
    .INIT(64'hBAAAAAAA00000000)) 
    awvalid_m_i_1
       (.I0(awvalid_m_reg_0),
        .I1(rom_eof0),
        .I2(douta[0]),
        .I3(\awaddr_m[31]_i_4_n_0 ),
        .I4(\max_test_time_cntr[0]_i_1_n_0 ),
        .I5(cur_trn_type),
        .O(awvalid_m_i_1_n_0));
  LUT3 #(
    .INIT(8'h2A)) 
    awvalid_m_i_2
       (.I0(s_axi_aresetn),
        .I1(m_axi_lite_ch1_awready),
        .I2(awvalid_m_reg_0),
        .O(cur_trn_type));
  FDRE #(
    .INIT(1'b0)) 
    awvalid_m_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(awvalid_m_i_1_n_0),
        .Q(awvalid_m_reg_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    b_complete_2ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(b_complete_ff),
        .Q(b_complete_2ff),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    b_complete_3ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(b_complete_2ff),
        .Q(b_complete_3ff),
        .R(s_axi_aresetn_0));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h8)) 
    b_complete_ff_i_1
       (.I0(bready_m_reg_0),
        .I1(m_axi_lite_ch1_bvalid),
        .O(b_complete));
  FDRE #(
    .INIT(1'b0)) 
    b_complete_ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(b_complete),
        .Q(b_complete_ff),
        .R(s_axi_aresetn_0));
  LUT6 #(
    .INIT(64'h0000FF0080008000)) 
    bready_m_i_1
       (.I0(\max_test_time_cntr[0]_i_1_n_0 ),
        .I1(\awaddr_m[31]_i_4_n_0 ),
        .I2(bready_m_reg_1),
        .I3(s_axi_aresetn),
        .I4(m_axi_lite_ch1_bvalid),
        .I5(bready_m_reg_0),
        .O(bready_m_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    bready_m_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(bready_m_i_1_n_0),
        .Q(bready_m_reg_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h55404040)) 
    \cur_trn_addr[31]_i_1 
       (.I0(first_tran_done),
        .I1(arvalid_m_reg_0),
        .I2(m_axi_lite_ch1_arready),
        .I3(awvalid_m_reg_0),
        .I4(m_axi_lite_ch1_awready),
        .O(cur_trn_addr_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[0] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[0]),
        .Q(cur_trn_addr[0]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[10] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[10]),
        .Q(cur_trn_addr[10]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[11] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[11]),
        .Q(cur_trn_addr[11]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[12] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[12]),
        .Q(cur_trn_addr[12]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[13] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[13]),
        .Q(cur_trn_addr[13]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[14] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[14]),
        .Q(cur_trn_addr[14]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[15] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[15]),
        .Q(cur_trn_addr[15]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[16] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[16]),
        .Q(cur_trn_addr[16]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[17] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[17]),
        .Q(cur_trn_addr[17]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[18] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[18]),
        .Q(cur_trn_addr[18]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[19] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[19]),
        .Q(cur_trn_addr[19]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[1] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[1]),
        .Q(cur_trn_addr[1]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[20] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[20]),
        .Q(cur_trn_addr[20]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[21] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[21]),
        .Q(cur_trn_addr[21]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[22] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[22]),
        .Q(cur_trn_addr[22]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[23] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[23]),
        .Q(cur_trn_addr[23]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[24] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[24]),
        .Q(cur_trn_addr[24]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[25] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[25]),
        .Q(cur_trn_addr[25]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[26] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[26]),
        .Q(cur_trn_addr[26]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[27] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[27]),
        .Q(cur_trn_addr[27]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[28] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[28]),
        .Q(cur_trn_addr[28]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[29] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[29]),
        .Q(cur_trn_addr[29]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[2] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[2]),
        .Q(cur_trn_addr[2]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[30] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[30]),
        .Q(cur_trn_addr[30]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[31] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[31]),
        .Q(cur_trn_addr[31]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[3] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[3]),
        .Q(cur_trn_addr[3]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[4] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[4]),
        .Q(cur_trn_addr[4]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[5] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[5]),
        .Q(cur_trn_addr[5]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[6] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[6]),
        .Q(cur_trn_addr[6]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[7] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[7]),
        .Q(cur_trn_addr[7]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[8] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[8]),
        .Q(cur_trn_addr[8]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_addr_reg[9] 
       (.C(s_axi_aclk),
        .CE(cur_trn_addr_0),
        .D(new_trn_addr[9]),
        .Q(cur_trn_addr[9]),
        .R(s_axi_aresetn_0));
  (* OPT_MODIFIED = "PROPCONST" *) 
  LUT5 #(
    .INIT(32'h02000000)) 
    cur_trn_status_i_1
       (.I0(s_axi_aresetn),
        .I1(douta[0]),
        .I2(rom_eof0),
        .I3(r_complete),
        .I4(cur_trn_status_reg_1),
        .O(cur_trn_status_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    cur_trn_status_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(cur_trn_status_i_1_n_0),
        .Q(cur_trn_status_reg_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h88888888C0C8C8C8)) 
    \cur_trn_type[0]_i_1 
       (.I0(\cur_trn_type_reg_n_0_[0] ),
        .I1(s_axi_aresetn),
        .I2(\new_trn_type[1]_i_2_n_0 ),
        .I3(m_axi_lite_ch1_arready),
        .I4(arvalid_m_reg_0),
        .I5(first_tran_done),
        .O(\cur_trn_type[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF55000000400000)) 
    \cur_trn_type[1]_i_1 
       (.I0(\new_trn_type[1]_i_2_n_0 ),
        .I1(m_axi_lite_ch1_arready),
        .I2(arvalid_m_reg_0),
        .I3(first_tran_done),
        .I4(s_axi_aresetn),
        .I5(\cur_trn_type_reg_n_0_[1] ),
        .O(\cur_trn_type[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_type_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\cur_trn_type[0]_i_1_n_0 ),
        .Q(\cur_trn_type_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \cur_trn_type_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\cur_trn_type[1]_i_1_n_0 ),
        .Q(\cur_trn_type_reg_n_0_[1] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0777F888)) 
    first_tran_done_i_1
       (.I0(arvalid_m_reg_0),
        .I1(m_axi_lite_ch1_arready),
        .I2(awvalid_m_reg_0),
        .I3(m_axi_lite_ch1_awready),
        .I4(first_tran_done),
        .O(first_tran_done_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    first_tran_done_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(first_tran_done_i_1_n_0),
        .Q(first_tran_done),
        .R(s_axi_aresetn_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry__0_i_1
       (.I0(cur_trn_addr[21]),
        .I1(\new_trn_addr_reg_n_0_[21] ),
        .I2(cur_trn_addr[22]),
        .I3(\new_trn_addr_reg_n_0_[22] ),
        .I4(\new_trn_addr_reg_n_0_[23] ),
        .I5(cur_trn_addr[23]),
        .O(i__carry__0_i_1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry__0_i_2
       (.I0(cur_trn_addr[18]),
        .I1(\new_trn_addr_reg_n_0_[18] ),
        .I2(cur_trn_addr[19]),
        .I3(\new_trn_addr_reg_n_0_[19] ),
        .I4(\new_trn_addr_reg_n_0_[20] ),
        .I5(cur_trn_addr[20]),
        .O(i__carry__0_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry__0_i_3
       (.I0(cur_trn_addr[15]),
        .I1(\new_trn_addr_reg_n_0_[15] ),
        .I2(cur_trn_addr[16]),
        .I3(\new_trn_addr_reg_n_0_[16] ),
        .I4(\new_trn_addr_reg_n_0_[17] ),
        .I5(cur_trn_addr[17]),
        .O(i__carry__0_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry__0_i_4
       (.I0(cur_trn_addr[12]),
        .I1(\new_trn_addr_reg_n_0_[12] ),
        .I2(cur_trn_addr[13]),
        .I3(\new_trn_addr_reg_n_0_[13] ),
        .I4(\new_trn_addr_reg_n_0_[14] ),
        .I5(cur_trn_addr[14]),
        .O(i__carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__1_i_1
       (.I0(\new_trn_addr_reg_n_0_[31] ),
        .I1(cur_trn_addr[31]),
        .I2(\new_trn_addr_reg_n_0_[30] ),
        .I3(cur_trn_addr[30]),
        .O(i__carry__1_i_1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry__1_i_2
       (.I0(cur_trn_addr[29]),
        .I1(\new_trn_addr_reg_n_0_[29] ),
        .I2(cur_trn_addr[27]),
        .I3(\new_trn_addr_reg_n_0_[27] ),
        .I4(\new_trn_addr_reg_n_0_[28] ),
        .I5(cur_trn_addr[28]),
        .O(i__carry__1_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry__1_i_3
       (.I0(cur_trn_addr[24]),
        .I1(\new_trn_addr_reg_n_0_[24] ),
        .I2(cur_trn_addr[25]),
        .I3(\new_trn_addr_reg_n_0_[25] ),
        .I4(\new_trn_addr_reg_n_0_[26] ),
        .I5(cur_trn_addr[26]),
        .O(i__carry__1_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_1
       (.I0(cur_trn_addr[9]),
        .I1(\new_trn_addr_reg_n_0_[9] ),
        .I2(cur_trn_addr[10]),
        .I3(\new_trn_addr_reg_n_0_[10] ),
        .I4(\new_trn_addr_reg_n_0_[11] ),
        .I5(cur_trn_addr[11]),
        .O(i__carry_i_1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_2
       (.I0(cur_trn_addr[6]),
        .I1(\new_trn_addr_reg_n_0_[6] ),
        .I2(cur_trn_addr[7]),
        .I3(\new_trn_addr_reg_n_0_[7] ),
        .I4(\new_trn_addr_reg_n_0_[8] ),
        .I5(cur_trn_addr[8]),
        .O(i__carry_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_3
       (.I0(cur_trn_addr[3]),
        .I1(\new_trn_addr_reg_n_0_[3] ),
        .I2(cur_trn_addr[4]),
        .I3(\new_trn_addr_reg_n_0_[4] ),
        .I4(\new_trn_addr_reg_n_0_[5] ),
        .I5(cur_trn_addr[5]),
        .O(i__carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_4
       (.I0(cur_trn_addr[0]),
        .I1(\new_trn_addr_reg_n_0_[0] ),
        .I2(cur_trn_addr[1]),
        .I3(\new_trn_addr_reg_n_0_[1] ),
        .I4(\new_trn_addr_reg_n_0_[2] ),
        .I5(cur_trn_addr[2]),
        .O(i__carry_i_4_n_0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr2_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\max_retry_cntr2_inferred__0/i__carry_n_0 ,\NLW_max_retry_cntr2_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_max_retry_cntr2_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1_n_0,i__carry_i_2_n_0,i__carry_i_3_n_0,i__carry_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr2_inferred__0/i__carry__0 
       (.CI(\max_retry_cntr2_inferred__0/i__carry_n_0 ),
        .CO({\max_retry_cntr2_inferred__0/i__carry__0_n_0 ,\NLW_max_retry_cntr2_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_max_retry_cntr2_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({i__carry__0_i_1_n_0,i__carry__0_i_2_n_0,i__carry__0_i_3_n_0,i__carry__0_i_4_n_0}));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr2_inferred__0/i__carry__1 
       (.CI(\max_retry_cntr2_inferred__0/i__carry__0_n_0 ),
        .CO({\NLW_max_retry_cntr2_inferred__0/i__carry__1_CO_UNCONNECTED [3],max_retry_cntr2,\NLW_max_retry_cntr2_inferred__0/i__carry__1_CO_UNCONNECTED [1:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_max_retry_cntr2_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({1'b0,i__carry__1_i_1_n_0,i__carry__1_i_2_n_0,i__carry__1_i_3_n_0}));
  LUT6 #(
    .INIT(64'hFF6F0000FFFFFFFF)) 
    \max_retry_cntr[0]_i_1 
       (.I0(\cur_trn_type_reg_n_0_[0] ),
        .I1(new_trn_type[0]),
        .I2(max_retry_cntr2),
        .I3(\max_retry_cntr[0]_i_4_n_0 ),
        .I4(max_retry_cntr0),
        .I5(s_axi_aresetn),
        .O(\max_retry_cntr[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAA808080)) 
    \max_retry_cntr[0]_i_2 
       (.I0(start_retry_check),
        .I1(rready_m_reg_0),
        .I2(m_axi_lite_ch1_rvalid),
        .I3(bready_m_reg_0),
        .I4(m_axi_lite_ch1_bvalid),
        .O(max_retry_cntr0));
  LUT2 #(
    .INIT(4'h6)) 
    \max_retry_cntr[0]_i_4 
       (.I0(\cur_trn_type_reg_n_0_[1] ),
        .I1(new_trn_type[1]),
        .O(\max_retry_cntr[0]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \max_retry_cntr[0]_i_5 
       (.I0(max_retry_cntr_reg[0]),
        .O(\max_retry_cntr[0]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[0] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[0]_i_3_n_7 ),
        .Q(max_retry_cntr_reg[0]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\max_retry_cntr_reg[0]_i_3_n_0 ,\NLW_max_retry_cntr_reg[0]_i_3_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\max_retry_cntr_reg[0]_i_3_n_4 ,\max_retry_cntr_reg[0]_i_3_n_5 ,\max_retry_cntr_reg[0]_i_3_n_6 ,\max_retry_cntr_reg[0]_i_3_n_7 }),
        .S({max_retry_cntr_reg[3:1],\max_retry_cntr[0]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[10] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[8]_i_1_n_5 ),
        .Q(max_retry_cntr_reg[10]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[11] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[8]_i_1_n_4 ),
        .Q(max_retry_cntr_reg[11]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[12] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[12]_i_1_n_7 ),
        .Q(max_retry_cntr_reg[12]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[12]_i_1 
       (.CI(\max_retry_cntr_reg[8]_i_1_n_0 ),
        .CO({\max_retry_cntr_reg[12]_i_1_n_0 ,\NLW_max_retry_cntr_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_retry_cntr_reg[12]_i_1_n_4 ,\max_retry_cntr_reg[12]_i_1_n_5 ,\max_retry_cntr_reg[12]_i_1_n_6 ,\max_retry_cntr_reg[12]_i_1_n_7 }),
        .S(max_retry_cntr_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[13] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[12]_i_1_n_6 ),
        .Q(max_retry_cntr_reg[13]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[14] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[12]_i_1_n_5 ),
        .Q(max_retry_cntr_reg[14]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[15] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[12]_i_1_n_4 ),
        .Q(max_retry_cntr_reg[15]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[16] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[16]_i_1_n_7 ),
        .Q(max_retry_cntr_reg[16]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[16]_i_1 
       (.CI(\max_retry_cntr_reg[12]_i_1_n_0 ),
        .CO({\max_retry_cntr_reg[16]_i_1_n_0 ,\NLW_max_retry_cntr_reg[16]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_retry_cntr_reg[16]_i_1_n_4 ,\max_retry_cntr_reg[16]_i_1_n_5 ,\max_retry_cntr_reg[16]_i_1_n_6 ,\max_retry_cntr_reg[16]_i_1_n_7 }),
        .S(max_retry_cntr_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[17] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[16]_i_1_n_6 ),
        .Q(max_retry_cntr_reg[17]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[18] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[16]_i_1_n_5 ),
        .Q(max_retry_cntr_reg[18]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[19] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[16]_i_1_n_4 ),
        .Q(max_retry_cntr_reg[19]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[1] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[0]_i_3_n_6 ),
        .Q(max_retry_cntr_reg[1]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[20] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[20]_i_1_n_7 ),
        .Q(max_retry_cntr_reg[20]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[20]_i_1 
       (.CI(\max_retry_cntr_reg[16]_i_1_n_0 ),
        .CO({\max_retry_cntr_reg[20]_i_1_n_0 ,\NLW_max_retry_cntr_reg[20]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_retry_cntr_reg[20]_i_1_n_4 ,\max_retry_cntr_reg[20]_i_1_n_5 ,\max_retry_cntr_reg[20]_i_1_n_6 ,\max_retry_cntr_reg[20]_i_1_n_7 }),
        .S(max_retry_cntr_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[21] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[20]_i_1_n_6 ),
        .Q(max_retry_cntr_reg[21]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[22] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[20]_i_1_n_5 ),
        .Q(max_retry_cntr_reg[22]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[23] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[20]_i_1_n_4 ),
        .Q(max_retry_cntr_reg[23]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[24] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[24]_i_1_n_7 ),
        .Q(max_retry_cntr_reg[24]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[24]_i_1 
       (.CI(\max_retry_cntr_reg[20]_i_1_n_0 ),
        .CO({\max_retry_cntr_reg[24]_i_1_n_0 ,\NLW_max_retry_cntr_reg[24]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_retry_cntr_reg[24]_i_1_n_4 ,\max_retry_cntr_reg[24]_i_1_n_5 ,\max_retry_cntr_reg[24]_i_1_n_6 ,\max_retry_cntr_reg[24]_i_1_n_7 }),
        .S(max_retry_cntr_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[25] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[24]_i_1_n_6 ),
        .Q(max_retry_cntr_reg[25]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[26] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[24]_i_1_n_5 ),
        .Q(max_retry_cntr_reg[26]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[27] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[24]_i_1_n_4 ),
        .Q(max_retry_cntr_reg[27]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[28] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[28]_i_1_n_7 ),
        .Q(max_retry_cntr_reg[28]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[28]_i_1 
       (.CI(\max_retry_cntr_reg[24]_i_1_n_0 ),
        .CO(\NLW_max_retry_cntr_reg[28]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_retry_cntr_reg[28]_i_1_n_4 ,\max_retry_cntr_reg[28]_i_1_n_5 ,\max_retry_cntr_reg[28]_i_1_n_6 ,\max_retry_cntr_reg[28]_i_1_n_7 }),
        .S(max_retry_cntr_reg[31:28]));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[29] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[28]_i_1_n_6 ),
        .Q(max_retry_cntr_reg[29]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[2] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[0]_i_3_n_5 ),
        .Q(max_retry_cntr_reg[2]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[30] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[28]_i_1_n_5 ),
        .Q(max_retry_cntr_reg[30]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[31] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[28]_i_1_n_4 ),
        .Q(max_retry_cntr_reg[31]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[3] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[0]_i_3_n_4 ),
        .Q(max_retry_cntr_reg[3]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[4] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[4]_i_1_n_7 ),
        .Q(max_retry_cntr_reg[4]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[4]_i_1 
       (.CI(\max_retry_cntr_reg[0]_i_3_n_0 ),
        .CO({\max_retry_cntr_reg[4]_i_1_n_0 ,\NLW_max_retry_cntr_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_retry_cntr_reg[4]_i_1_n_4 ,\max_retry_cntr_reg[4]_i_1_n_5 ,\max_retry_cntr_reg[4]_i_1_n_6 ,\max_retry_cntr_reg[4]_i_1_n_7 }),
        .S(max_retry_cntr_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[5] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[4]_i_1_n_6 ),
        .Q(max_retry_cntr_reg[5]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[6] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[4]_i_1_n_5 ),
        .Q(max_retry_cntr_reg[6]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[7] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[4]_i_1_n_4 ),
        .Q(max_retry_cntr_reg[7]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[8] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[8]_i_1_n_7 ),
        .Q(max_retry_cntr_reg[8]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_retry_cntr_reg[8]_i_1 
       (.CI(\max_retry_cntr_reg[4]_i_1_n_0 ),
        .CO({\max_retry_cntr_reg[8]_i_1_n_0 ,\NLW_max_retry_cntr_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_retry_cntr_reg[8]_i_1_n_4 ,\max_retry_cntr_reg[8]_i_1_n_5 ,\max_retry_cntr_reg[8]_i_1_n_6 ,\max_retry_cntr_reg[8]_i_1_n_7 }),
        .S(max_retry_cntr_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \max_retry_cntr_reg[9] 
       (.C(s_axi_aclk),
        .CE(max_retry_cntr0),
        .D(\max_retry_cntr_reg[8]_i_1_n_6 ),
        .Q(max_retry_cntr_reg[9]),
        .R(\max_retry_cntr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5151515151005151)) 
    \max_test_time_cntr[0]_i_1 
       (.I0(rom_eof),
        .I1(\max_test_time_cntr[0]_i_3_n_0 ),
        .I2(\max_test_time_cntr[0]_i_4_n_0 ),
        .I3(\max_test_time_cntr[0]_i_5_n_0 ),
        .I4(\max_test_time_cntr[0]_i_6_n_0 ),
        .I5(\max_test_time_cntr[0]_i_7_n_0 ),
        .O(\max_test_time_cntr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \max_test_time_cntr[0]_i_10 
       (.I0(max_retry_cntr_reg[10]),
        .I1(max_retry_cntr_reg[11]),
        .I2(max_retry_cntr_reg[8]),
        .I3(max_retry_cntr_reg[9]),
        .O(\max_test_time_cntr[0]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \max_test_time_cntr[0]_i_11 
       (.I0(max_retry_cntr_reg[6]),
        .I1(max_retry_cntr_reg[7]),
        .I2(max_retry_cntr_reg[4]),
        .I3(max_retry_cntr_reg[5]),
        .O(\max_test_time_cntr[0]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \max_test_time_cntr[0]_i_12 
       (.I0(max_retry_cntr_reg[2]),
        .I1(max_retry_cntr_reg[3]),
        .I2(max_retry_cntr_reg[1]),
        .I3(max_retry_cntr_reg[0]),
        .O(\max_test_time_cntr[0]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \max_test_time_cntr[0]_i_13 
       (.I0(max_retry_cntr_reg[18]),
        .I1(max_retry_cntr_reg[19]),
        .I2(max_retry_cntr_reg[16]),
        .I3(max_retry_cntr_reg[17]),
        .O(\max_test_time_cntr[0]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \max_test_time_cntr[0]_i_14 
       (.I0(max_retry_cntr_reg[22]),
        .I1(max_retry_cntr_reg[23]),
        .I2(max_retry_cntr_reg[20]),
        .I3(max_retry_cntr_reg[21]),
        .O(\max_test_time_cntr[0]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'hFF7F)) 
    \max_test_time_cntr[0]_i_15 
       (.I0(max_retry_cntr_reg[28]),
        .I1(max_retry_cntr_reg[29]),
        .I2(max_retry_cntr_reg[30]),
        .I3(max_retry_cntr_reg[31]),
        .O(\max_test_time_cntr[0]_i_15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \max_test_time_cntr[0]_i_16 
       (.I0(max_retry_cntr_reg[26]),
        .I1(max_retry_cntr_reg[27]),
        .I2(max_retry_cntr_reg[24]),
        .I3(max_retry_cntr_reg[25]),
        .O(\max_test_time_cntr[0]_i_16_n_0 ));
  LUT4 #(
    .INIT(16'hFFFD)) 
    \max_test_time_cntr[0]_i_17 
       (.I0(max_test_time_cntr_reg[12]),
        .I1(max_test_time_cntr_reg[0]),
        .I2(max_test_time_cntr_reg[1]),
        .I3(max_test_time_cntr_reg[2]),
        .O(\max_test_time_cntr[0]_i_17_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \max_test_time_cntr[0]_i_18 
       (.I0(max_test_time_cntr_reg[11]),
        .I1(max_test_time_cntr_reg[13]),
        .I2(max_test_time_cntr_reg[14]),
        .I3(max_test_time_cntr_reg[15]),
        .O(\max_test_time_cntr[0]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \max_test_time_cntr[0]_i_19 
       (.I0(max_test_time_cntr_reg[16]),
        .I1(max_test_time_cntr_reg[17]),
        .I2(max_test_time_cntr_reg[18]),
        .I3(max_test_time_cntr_reg[19]),
        .O(\max_test_time_cntr[0]_i_19_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \max_test_time_cntr[0]_i_20 
       (.I0(max_test_time_cntr_reg[20]),
        .I1(max_test_time_cntr_reg[21]),
        .I2(max_test_time_cntr_reg[22]),
        .I3(max_test_time_cntr_reg[23]),
        .O(\max_test_time_cntr[0]_i_20_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \max_test_time_cntr[0]_i_21 
       (.I0(max_test_time_cntr_reg[28]),
        .I1(max_test_time_cntr_reg[29]),
        .I2(max_test_time_cntr_reg[31]),
        .I3(max_test_time_cntr_reg[30]),
        .O(\max_test_time_cntr[0]_i_21_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \max_test_time_cntr[0]_i_22 
       (.I0(max_test_time_cntr_reg[26]),
        .I1(max_test_time_cntr_reg[27]),
        .I2(max_test_time_cntr_reg[24]),
        .I3(max_test_time_cntr_reg[25]),
        .O(\max_test_time_cntr[0]_i_22_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \max_test_time_cntr[0]_i_3 
       (.I0(\max_test_time_cntr[0]_i_9_n_0 ),
        .I1(\max_test_time_cntr[0]_i_10_n_0 ),
        .I2(\max_test_time_cntr[0]_i_11_n_0 ),
        .I3(\max_test_time_cntr[0]_i_12_n_0 ),
        .O(\max_test_time_cntr[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \max_test_time_cntr[0]_i_4 
       (.I0(\max_test_time_cntr[0]_i_13_n_0 ),
        .I1(\max_test_time_cntr[0]_i_14_n_0 ),
        .I2(\max_test_time_cntr[0]_i_15_n_0 ),
        .I3(\max_test_time_cntr[0]_i_16_n_0 ),
        .O(\max_test_time_cntr[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    \max_test_time_cntr[0]_i_5 
       (.I0(max_test_time_cntr_reg[7]),
        .I1(max_test_time_cntr_reg[3]),
        .I2(max_test_time_cntr_reg[9]),
        .I3(max_test_time_cntr_reg[8]),
        .I4(\max_test_time_cntr[0]_i_17_n_0 ),
        .O(\max_test_time_cntr[0]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \max_test_time_cntr[0]_i_6 
       (.I0(max_test_time_cntr_reg[5]),
        .I1(max_test_time_cntr_reg[4]),
        .I2(max_test_time_cntr_reg[10]),
        .I3(max_test_time_cntr_reg[6]),
        .I4(\max_test_time_cntr[0]_i_18_n_0 ),
        .O(\max_test_time_cntr[0]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \max_test_time_cntr[0]_i_7 
       (.I0(\max_test_time_cntr[0]_i_19_n_0 ),
        .I1(\max_test_time_cntr[0]_i_20_n_0 ),
        .I2(\max_test_time_cntr[0]_i_21_n_0 ),
        .I3(\max_test_time_cntr[0]_i_22_n_0 ),
        .O(\max_test_time_cntr[0]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \max_test_time_cntr[0]_i_8 
       (.I0(max_test_time_cntr_reg[0]),
        .O(\max_test_time_cntr[0]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \max_test_time_cntr[0]_i_9 
       (.I0(max_retry_cntr_reg[14]),
        .I1(max_retry_cntr_reg[15]),
        .I2(max_retry_cntr_reg[12]),
        .I3(max_retry_cntr_reg[13]),
        .O(\max_test_time_cntr[0]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[0] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[0]_i_2_n_7 ),
        .Q(max_test_time_cntr_reg[0]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\max_test_time_cntr_reg[0]_i_2_n_0 ,\NLW_max_test_time_cntr_reg[0]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\max_test_time_cntr_reg[0]_i_2_n_4 ,\max_test_time_cntr_reg[0]_i_2_n_5 ,\max_test_time_cntr_reg[0]_i_2_n_6 ,\max_test_time_cntr_reg[0]_i_2_n_7 }),
        .S({max_test_time_cntr_reg[3:1],\max_test_time_cntr[0]_i_8_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[10] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[8]_i_1_n_5 ),
        .Q(max_test_time_cntr_reg[10]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[11] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[8]_i_1_n_4 ),
        .Q(max_test_time_cntr_reg[11]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[12] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[12]_i_1_n_7 ),
        .Q(max_test_time_cntr_reg[12]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[12]_i_1 
       (.CI(\max_test_time_cntr_reg[8]_i_1_n_0 ),
        .CO({\max_test_time_cntr_reg[12]_i_1_n_0 ,\NLW_max_test_time_cntr_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_test_time_cntr_reg[12]_i_1_n_4 ,\max_test_time_cntr_reg[12]_i_1_n_5 ,\max_test_time_cntr_reg[12]_i_1_n_6 ,\max_test_time_cntr_reg[12]_i_1_n_7 }),
        .S(max_test_time_cntr_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[13] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[12]_i_1_n_6 ),
        .Q(max_test_time_cntr_reg[13]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[14] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[12]_i_1_n_5 ),
        .Q(max_test_time_cntr_reg[14]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[15] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[12]_i_1_n_4 ),
        .Q(max_test_time_cntr_reg[15]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[16] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[16]_i_1_n_7 ),
        .Q(max_test_time_cntr_reg[16]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[16]_i_1 
       (.CI(\max_test_time_cntr_reg[12]_i_1_n_0 ),
        .CO({\max_test_time_cntr_reg[16]_i_1_n_0 ,\NLW_max_test_time_cntr_reg[16]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_test_time_cntr_reg[16]_i_1_n_4 ,\max_test_time_cntr_reg[16]_i_1_n_5 ,\max_test_time_cntr_reg[16]_i_1_n_6 ,\max_test_time_cntr_reg[16]_i_1_n_7 }),
        .S(max_test_time_cntr_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[17] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[16]_i_1_n_6 ),
        .Q(max_test_time_cntr_reg[17]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[18] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[16]_i_1_n_5 ),
        .Q(max_test_time_cntr_reg[18]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[19] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[16]_i_1_n_4 ),
        .Q(max_test_time_cntr_reg[19]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[1] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[0]_i_2_n_6 ),
        .Q(max_test_time_cntr_reg[1]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[20] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[20]_i_1_n_7 ),
        .Q(max_test_time_cntr_reg[20]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[20]_i_1 
       (.CI(\max_test_time_cntr_reg[16]_i_1_n_0 ),
        .CO({\max_test_time_cntr_reg[20]_i_1_n_0 ,\NLW_max_test_time_cntr_reg[20]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_test_time_cntr_reg[20]_i_1_n_4 ,\max_test_time_cntr_reg[20]_i_1_n_5 ,\max_test_time_cntr_reg[20]_i_1_n_6 ,\max_test_time_cntr_reg[20]_i_1_n_7 }),
        .S(max_test_time_cntr_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[21] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[20]_i_1_n_6 ),
        .Q(max_test_time_cntr_reg[21]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[22] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[20]_i_1_n_5 ),
        .Q(max_test_time_cntr_reg[22]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[23] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[20]_i_1_n_4 ),
        .Q(max_test_time_cntr_reg[23]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[24] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[24]_i_1_n_7 ),
        .Q(max_test_time_cntr_reg[24]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[24]_i_1 
       (.CI(\max_test_time_cntr_reg[20]_i_1_n_0 ),
        .CO({\max_test_time_cntr_reg[24]_i_1_n_0 ,\NLW_max_test_time_cntr_reg[24]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_test_time_cntr_reg[24]_i_1_n_4 ,\max_test_time_cntr_reg[24]_i_1_n_5 ,\max_test_time_cntr_reg[24]_i_1_n_6 ,\max_test_time_cntr_reg[24]_i_1_n_7 }),
        .S(max_test_time_cntr_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[25] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[24]_i_1_n_6 ),
        .Q(max_test_time_cntr_reg[25]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[26] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[24]_i_1_n_5 ),
        .Q(max_test_time_cntr_reg[26]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[27] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[24]_i_1_n_4 ),
        .Q(max_test_time_cntr_reg[27]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[28] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[28]_i_1_n_7 ),
        .Q(max_test_time_cntr_reg[28]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[28]_i_1 
       (.CI(\max_test_time_cntr_reg[24]_i_1_n_0 ),
        .CO(\NLW_max_test_time_cntr_reg[28]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_test_time_cntr_reg[28]_i_1_n_4 ,\max_test_time_cntr_reg[28]_i_1_n_5 ,\max_test_time_cntr_reg[28]_i_1_n_6 ,\max_test_time_cntr_reg[28]_i_1_n_7 }),
        .S(max_test_time_cntr_reg[31:28]));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[29] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[28]_i_1_n_6 ),
        .Q(max_test_time_cntr_reg[29]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[2] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[0]_i_2_n_5 ),
        .Q(max_test_time_cntr_reg[2]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[30] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[28]_i_1_n_5 ),
        .Q(max_test_time_cntr_reg[30]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[31] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[28]_i_1_n_4 ),
        .Q(max_test_time_cntr_reg[31]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[3] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[0]_i_2_n_4 ),
        .Q(max_test_time_cntr_reg[3]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[4] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[4]_i_1_n_7 ),
        .Q(max_test_time_cntr_reg[4]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[4]_i_1 
       (.CI(\max_test_time_cntr_reg[0]_i_2_n_0 ),
        .CO({\max_test_time_cntr_reg[4]_i_1_n_0 ,\NLW_max_test_time_cntr_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_test_time_cntr_reg[4]_i_1_n_4 ,\max_test_time_cntr_reg[4]_i_1_n_5 ,\max_test_time_cntr_reg[4]_i_1_n_6 ,\max_test_time_cntr_reg[4]_i_1_n_7 }),
        .S(max_test_time_cntr_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[5] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[4]_i_1_n_6 ),
        .Q(max_test_time_cntr_reg[5]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[6] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[4]_i_1_n_5 ),
        .Q(max_test_time_cntr_reg[6]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[7] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[4]_i_1_n_4 ),
        .Q(max_test_time_cntr_reg[7]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[8] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[8]_i_1_n_7 ),
        .Q(max_test_time_cntr_reg[8]),
        .R(s_axi_aresetn_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \max_test_time_cntr_reg[8]_i_1 
       (.CI(\max_test_time_cntr_reg[4]_i_1_n_0 ),
        .CO({\max_test_time_cntr_reg[8]_i_1_n_0 ,\NLW_max_test_time_cntr_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\max_test_time_cntr_reg[8]_i_1_n_4 ,\max_test_time_cntr_reg[8]_i_1_n_5 ,\max_test_time_cntr_reg[8]_i_1_n_6 ,\max_test_time_cntr_reg[8]_i_1_n_7 }),
        .S(max_test_time_cntr_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \max_test_time_cntr_reg[9] 
       (.C(s_axi_aclk),
        .CE(\max_test_time_cntr[0]_i_1_n_0 ),
        .D(\max_test_time_cntr_reg[8]_i_1_n_6 ),
        .Q(max_test_time_cntr_reg[9]),
        .R(s_axi_aresetn_0));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[0]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [0]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [0]),
        .O(new_trn_addr[0]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[10]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [10]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [10]),
        .O(new_trn_addr[10]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[11]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [11]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [11]),
        .O(new_trn_addr[11]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[12]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [12]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [12]),
        .O(new_trn_addr[12]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[13]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [13]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [13]),
        .O(new_trn_addr[13]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[14]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [14]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [14]),
        .O(new_trn_addr[14]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[15]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [15]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [15]),
        .O(new_trn_addr[15]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[16]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [16]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [16]),
        .O(new_trn_addr[16]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[17]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [17]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [17]),
        .O(new_trn_addr[17]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[18]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [18]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [18]),
        .O(new_trn_addr[18]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[19]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [19]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [19]),
        .O(new_trn_addr[19]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[1]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [1]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [1]),
        .O(new_trn_addr[1]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[20]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [20]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [20]),
        .O(new_trn_addr[20]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[21]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [21]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [21]),
        .O(new_trn_addr[21]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[22]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [22]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [22]),
        .O(new_trn_addr[22]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[23]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [23]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [23]),
        .O(new_trn_addr[23]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[24]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [24]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [24]),
        .O(new_trn_addr[24]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[25]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [25]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [25]),
        .O(new_trn_addr[25]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[26]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [26]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [26]),
        .O(new_trn_addr[26]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[27]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [27]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [27]),
        .O(new_trn_addr[27]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[28]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [28]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [28]),
        .O(new_trn_addr[28]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[29]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [29]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [29]),
        .O(new_trn_addr[29]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[2]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [2]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [2]),
        .O(new_trn_addr[2]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[30]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [30]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [30]),
        .O(new_trn_addr[30]));
  LUT5 #(
    .INIT(32'hAA808080)) 
    \new_trn_addr[31]_i_1 
       (.I0(first_tran_done),
        .I1(arvalid_m_reg_0),
        .I2(m_axi_lite_ch1_arready),
        .I3(awvalid_m_reg_0),
        .I4(m_axi_lite_ch1_awready),
        .O(\new_trn_addr[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[31]_i_2 
       (.I0(\^m_axi_lite_ch1_awaddr [31]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [31]),
        .O(new_trn_addr[31]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[3]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [3]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [3]),
        .O(new_trn_addr[3]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[4]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [4]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [4]),
        .O(new_trn_addr[4]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[5]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [5]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [5]),
        .O(new_trn_addr[5]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[6]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [6]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [6]),
        .O(new_trn_addr[6]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[7]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [7]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [7]),
        .O(new_trn_addr[7]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[8]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [8]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [8]),
        .O(new_trn_addr[8]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \new_trn_addr[9]_i_1 
       (.I0(\^m_axi_lite_ch1_awaddr [9]),
        .I1(awvalid_m_reg_0),
        .I2(m_axi_lite_ch1_awready),
        .I3(\^m_axi_lite_ch1_araddr [9]),
        .O(new_trn_addr[9]));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[0] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[0]),
        .Q(\new_trn_addr_reg_n_0_[0] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[10] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[10]),
        .Q(\new_trn_addr_reg_n_0_[10] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[11] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[11]),
        .Q(\new_trn_addr_reg_n_0_[11] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[12] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[12]),
        .Q(\new_trn_addr_reg_n_0_[12] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[13] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[13]),
        .Q(\new_trn_addr_reg_n_0_[13] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[14] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[14]),
        .Q(\new_trn_addr_reg_n_0_[14] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[15] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[15]),
        .Q(\new_trn_addr_reg_n_0_[15] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[16] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[16]),
        .Q(\new_trn_addr_reg_n_0_[16] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[17] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[17]),
        .Q(\new_trn_addr_reg_n_0_[17] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[18] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[18]),
        .Q(\new_trn_addr_reg_n_0_[18] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[19] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[19]),
        .Q(\new_trn_addr_reg_n_0_[19] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[1] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[1]),
        .Q(\new_trn_addr_reg_n_0_[1] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[20] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[20]),
        .Q(\new_trn_addr_reg_n_0_[20] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[21] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[21]),
        .Q(\new_trn_addr_reg_n_0_[21] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[22] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[22]),
        .Q(\new_trn_addr_reg_n_0_[22] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[23] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[23]),
        .Q(\new_trn_addr_reg_n_0_[23] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[24] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[24]),
        .Q(\new_trn_addr_reg_n_0_[24] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[25] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[25]),
        .Q(\new_trn_addr_reg_n_0_[25] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[26] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[26]),
        .Q(\new_trn_addr_reg_n_0_[26] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[27] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[27]),
        .Q(\new_trn_addr_reg_n_0_[27] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[28] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[28]),
        .Q(\new_trn_addr_reg_n_0_[28] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[29] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[29]),
        .Q(\new_trn_addr_reg_n_0_[29] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[2] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[2]),
        .Q(\new_trn_addr_reg_n_0_[2] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[30] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[30]),
        .Q(\new_trn_addr_reg_n_0_[30] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[31] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[31]),
        .Q(\new_trn_addr_reg_n_0_[31] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[3] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[3]),
        .Q(\new_trn_addr_reg_n_0_[3] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[4] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[4]),
        .Q(\new_trn_addr_reg_n_0_[4] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[5] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[5]),
        .Q(\new_trn_addr_reg_n_0_[5] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[6] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[6]),
        .Q(\new_trn_addr_reg_n_0_[6] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[7] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[7]),
        .Q(\new_trn_addr_reg_n_0_[7] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[8] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[8]),
        .Q(\new_trn_addr_reg_n_0_[8] ),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_addr_reg[9] 
       (.C(s_axi_aclk),
        .CE(\new_trn_addr[31]_i_1_n_0 ),
        .D(new_trn_addr[9]),
        .Q(\new_trn_addr_reg_n_0_[9] ),
        .R(s_axi_aresetn_0));
  LUT6 #(
    .INIT(64'hC0C8C8C888888888)) 
    \new_trn_type[0]_i_1 
       (.I0(new_trn_type[0]),
        .I1(s_axi_aresetn),
        .I2(\new_trn_type[1]_i_2_n_0 ),
        .I3(m_axi_lite_ch1_arready),
        .I4(arvalid_m_reg_0),
        .I5(first_tran_done),
        .O(\new_trn_type[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h55FF000040000000)) 
    \new_trn_type[1]_i_1 
       (.I0(\new_trn_type[1]_i_2_n_0 ),
        .I1(m_axi_lite_ch1_arready),
        .I2(arvalid_m_reg_0),
        .I3(first_tran_done),
        .I4(s_axi_aresetn),
        .I5(new_trn_type[1]),
        .O(\new_trn_type[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \new_trn_type[1]_i_2 
       (.I0(awvalid_m_reg_0),
        .I1(m_axi_lite_ch1_awready),
        .O(\new_trn_type[1]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_type_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\new_trn_type[0]_i_1_n_0 ),
        .Q(new_trn_type[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \new_trn_type_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\new_trn_type[1]_i_1_n_0 ),
        .Q(new_trn_type[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    r_complete_2ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(r_complete_ff),
        .Q(r_complete_2ff),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    r_complete_3ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(r_complete_2ff),
        .Q(r_complete_3ff),
        .R(s_axi_aresetn_0));
  LUT2 #(
    .INIT(4'h8)) 
    r_complete_ff_i_1
       (.I0(rready_m_reg_0),
        .I1(m_axi_lite_ch1_rvalid),
        .O(r_complete));
  FDRE #(
    .INIT(1'b0)) 
    r_complete_ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(r_complete),
        .Q(r_complete_ff),
        .R(s_axi_aresetn_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \rd_check1_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\rd_check1_inferred__0/i__carry_n_0 ,\NLW_rd_check1_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(\rd_check1_inferred__0/i__carry__0_0 ),
        .O(\NLW_rd_check1_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S(\rd_check1_inferred__0/i__carry__0_1 ));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \rd_check1_inferred__0/i__carry__0 
       (.CI(\rd_check1_inferred__0/i__carry_n_0 ),
        .CO({\rd_check1_inferred__0/i__carry__0_n_0 ,\NLW_rd_check1_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(\rd_check1_inferred__0/i__carry__1_0 ),
        .O(\NLW_rd_check1_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S(\rd_check1_inferred__0/i__carry__1_1 ));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \rd_check1_inferred__0/i__carry__1 
       (.CI(\rd_check1_inferred__0/i__carry__0_n_0 ),
        .CO({\rd_check1_inferred__0/i__carry__1_n_0 ,\NLW_rd_check1_inferred__0/i__carry__1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(\rd_check1_inferred__0/i__carry__2_0 ),
        .O(\NLW_rd_check1_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S(\rd_check1_inferred__0/i__carry__2_1 ));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \rd_check1_inferred__0/i__carry__2 
       (.CI(\rd_check1_inferred__0/i__carry__1_n_0 ),
        .CO({\m_axi_lite_ch1_rdata[30] ,\NLW_rd_check1_inferred__0/i__carry__2_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI(cur_trn_status_i_3_1),
        .O(\NLW_rd_check1_inferred__0/i__carry__2_O_UNCONNECTED [3:0]),
        .S(cur_trn_status_i_3_2));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 rd_check2_carry
       (.CI(1'b0),
        .CO({rd_check2_carry_n_0,NLW_rd_check2_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI(DI),
        .O(NLW_rd_check2_carry_O_UNCONNECTED[3:0]),
        .S(rd_check2_carry__0_0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 rd_check2_carry__0
       (.CI(rd_check2_carry_n_0),
        .CO({rd_check2_carry__0_n_0,NLW_rd_check2_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI(rd_check2_carry__1_0),
        .O(NLW_rd_check2_carry__0_O_UNCONNECTED[3:0]),
        .S(rd_check2_carry__1_1));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 rd_check2_carry__1
       (.CI(rd_check2_carry__0_n_0),
        .CO({rd_check2_carry__1_n_0,NLW_rd_check2_carry__1_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI(rd_check2_carry__2_0),
        .O(NLW_rd_check2_carry__1_O_UNCONNECTED[3:0]),
        .S(rd_check2_carry__2_1));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 rd_check2_carry__2
       (.CI(rd_check2_carry__1_n_0),
        .CO({\gen_rd_a.douta_reg_reg[30] ,NLW_rd_check2_carry__2_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI(cur_trn_status_i_3),
        .O(NLW_rd_check2_carry__2_O_UNCONNECTED[3:0]),
        .S(cur_trn_status_i_3_0));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \rd_check2_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\rd_check2_inferred__0/i__carry_n_0 ,\NLW_rd_check2_inferred__0/i__carry_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_rd_check2_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S(S));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \rd_check2_inferred__0/i__carry__0 
       (.CI(\rd_check2_inferred__0/i__carry_n_0 ),
        .CO({\rd_check2_inferred__0/i__carry__0_n_0 ,\NLW_rd_check2_inferred__0/i__carry__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_rd_check2_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S(\rd_check2_inferred__0/i__carry__1_0 ));
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \rd_check2_inferred__0/i__carry__1 
       (.CI(\rd_check2_inferred__0/i__carry__0_n_0 ),
        .CO({\NLW_rd_check2_inferred__0/i__carry__1_CO_UNCONNECTED [3],CO,\NLW_rd_check2_inferred__0/i__carry__1_CO_UNCONNECTED [1:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_rd_check2_inferred__0/i__carry__1_O_UNCONNECTED [3:0]),
        .S({1'b0,cur_trn_status_i_3_3}));
  LUT3 #(
    .INIT(8'hB8)) 
    rom_eof_i_1
       (.I0(rom_eof0),
        .I1(rst_l_2ff),
        .I2(rom_eof),
        .O(rom_eof_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rom_eof_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rom_eof_i_1_n_0),
        .Q(rom_eof),
        .R(s_axi_aresetn_0));
  LUT2 #(
    .INIT(4'hE)) 
    \rom_ptr_ff[4]_i_1 
       (.I0(r_complete_2ff),
        .I1(b_complete_2ff),
        .O(\rom_ptr_ff[4]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rom_ptr_ff_reg[0] 
       (.C(s_axi_aclk),
        .CE(\rom_ptr_ff[4]_i_1_n_0 ),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[0] ),
        .Q(rom_ptr_ff[0]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \rom_ptr_ff_reg[1] 
       (.C(s_axi_aclk),
        .CE(\rom_ptr_ff[4]_i_1_n_0 ),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[1] ),
        .Q(rom_ptr_ff[1]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \rom_ptr_ff_reg[2] 
       (.C(s_axi_aclk),
        .CE(\rom_ptr_ff[4]_i_1_n_0 ),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[2] ),
        .Q(rom_ptr_ff[2]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \rom_ptr_ff_reg[3] 
       (.C(s_axi_aclk),
        .CE(\rom_ptr_ff[4]_i_1_n_0 ),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[3] ),
        .Q(rom_ptr_ff[3]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \rom_ptr_ff_reg[4] 
       (.C(s_axi_aclk),
        .CE(\rom_ptr_ff[4]_i_1_n_0 ),
        .D(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[4] ),
        .Q(rom_ptr_ff[4]),
        .R(s_axi_aresetn_0));
  LUT6 #(
    .INIT(64'h0000FF0080008000)) 
    rready_m_i_1
       (.I0(\max_test_time_cntr[0]_i_1_n_0 ),
        .I1(\awaddr_m[31]_i_4_n_0 ),
        .I2(rready_m_reg_1),
        .I3(s_axi_aresetn),
        .I4(m_axi_lite_ch1_rvalid),
        .I5(rready_m_reg_0),
        .O(rready_m_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rready_m_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rready_m_i_1_n_0),
        .Q(rready_m_reg_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rst_l_2ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rst_l_ff),
        .Q(rst_l_2ff),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rst_l_3ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rst_l_2ff),
        .Q(rst_l_3ff),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rst_l_ff_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_aresetn),
        .Q(rst_l_ff),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    start_retry_check_i_1
       (.I0(start_retry_check),
        .I1(arvalid_m_reg_0),
        .I2(m_axi_lite_ch1_arready),
        .I3(awvalid_m_reg_0),
        .I4(m_axi_lite_ch1_awready),
        .O(start_retry_check_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    start_retry_check_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(start_retry_check_i_1_n_0),
        .Q(start_retry_check),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[0] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [0]),
        .Q(m_axi_lite_ch5_wdata[0]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[10] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [10]),
        .Q(m_axi_lite_ch5_wdata[10]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[11] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [11]),
        .Q(m_axi_lite_ch5_wdata[11]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[12] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [12]),
        .Q(m_axi_lite_ch5_wdata[12]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[13] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [13]),
        .Q(m_axi_lite_ch5_wdata[13]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[14] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [14]),
        .Q(m_axi_lite_ch5_wdata[14]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[15] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [15]),
        .Q(m_axi_lite_ch5_wdata[15]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[16] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [16]),
        .Q(m_axi_lite_ch5_wdata[16]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[17] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [17]),
        .Q(m_axi_lite_ch5_wdata[17]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[18] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [18]),
        .Q(m_axi_lite_ch5_wdata[18]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[19] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [19]),
        .Q(m_axi_lite_ch5_wdata[19]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[1] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [1]),
        .Q(m_axi_lite_ch5_wdata[1]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[20] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [20]),
        .Q(m_axi_lite_ch5_wdata[20]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[21] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [21]),
        .Q(m_axi_lite_ch5_wdata[21]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[22] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [22]),
        .Q(m_axi_lite_ch5_wdata[22]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[23] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [23]),
        .Q(m_axi_lite_ch5_wdata[23]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[24] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [24]),
        .Q(m_axi_lite_ch5_wdata[24]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[25] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [25]),
        .Q(m_axi_lite_ch5_wdata[25]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[26] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [26]),
        .Q(m_axi_lite_ch5_wdata[26]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[27] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [27]),
        .Q(m_axi_lite_ch5_wdata[27]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[28] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [28]),
        .Q(m_axi_lite_ch5_wdata[28]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[29] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [29]),
        .Q(m_axi_lite_ch5_wdata[29]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[2] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [2]),
        .Q(m_axi_lite_ch5_wdata[2]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[30] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [30]),
        .Q(m_axi_lite_ch5_wdata[30]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[31] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [31]),
        .Q(m_axi_lite_ch5_wdata[31]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[3] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [3]),
        .Q(m_axi_lite_ch5_wdata[3]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[4] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [4]),
        .Q(m_axi_lite_ch5_wdata[4]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[5] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [5]),
        .Q(m_axi_lite_ch5_wdata[5]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[6] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [6]),
        .Q(m_axi_lite_ch5_wdata[6]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[7] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [7]),
        .Q(m_axi_lite_ch5_wdata[7]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[8] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [8]),
        .Q(m_axi_lite_ch5_wdata[8]),
        .R(s_axi_aresetn_0));
  FDRE #(
    .INIT(1'b0)) 
    \wdata_m_reg[9] 
       (.C(s_axi_aclk),
        .CE(launch_new_wr),
        .D(\wdata_m_reg[31]_0 [9]),
        .Q(m_axi_lite_ch5_wdata[9]),
        .R(s_axi_aresetn_0));
  LUT6 #(
    .INIT(64'h5555C00000000000)) 
    wvalid_m_i_1
       (.I0(m_axi_lite_ch1_wready),
        .I1(\max_test_time_cntr[0]_i_1_n_0 ),
        .I2(\awaddr_m[31]_i_4_n_0 ),
        .I3(bready_m_reg_1),
        .I4(m_axi_lite_ch1_wvalid),
        .I5(s_axi_aresetn),
        .O(wvalid_m_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wvalid_m_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(wvalid_m_i_1_n_0),
        .Q(m_axi_lite_ch1_wvalid),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFE02)) 
    xpm_memory_base_inst_i_1
       (.I0(rom_ptr_ff[3]),
        .I1(b_complete_2ff),
        .I2(r_complete_2ff),
        .I3(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[3] ),
        .O(addra[3]));
  LUT4 #(
    .INIT(16'hFE02)) 
    xpm_memory_base_inst_i_2
       (.I0(rom_ptr_ff[2]),
        .I1(b_complete_2ff),
        .I2(r_complete_2ff),
        .I3(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[2] ),
        .O(addra[2]));
  LUT4 #(
    .INIT(16'hFE02)) 
    xpm_memory_base_inst_i_3
       (.I0(rom_ptr_ff[1]),
        .I1(b_complete_2ff),
        .I2(r_complete_2ff),
        .I3(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[1] ),
        .O(addra[1]));
  LUT4 #(
    .INIT(16'hFE02)) 
    xpm_memory_base_inst_i_4
       (.I0(rom_ptr_ff[0]),
        .I1(b_complete_2ff),
        .I2(r_complete_2ff),
        .I3(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg_n_0_[0] ),
        .O(addra[0]));
endmodule

(* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_systeminit_top" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_top
   (arvalid_m_reg,
    awvalid_m_reg,
    m_axi_lite_ch1_araddr,
    m_axi_lite_ch1_awaddr,
    m_axi_lite_ch5_wdata,
    done,
    status,
    rready_m_reg,
    bready_m_reg,
    m_axi_lite_ch1_wvalid,
    s_axi_aresetn,
    m_axi_lite_ch1_arready,
    m_axi_lite_ch1_awready,
    s_axi_aclk,
    m_axi_lite_ch1_rvalid,
    m_axi_lite_ch1_bvalid,
    m_axi_lite_ch1_wready,
    m_axi_lite_ch1_bresp,
    m_axi_lite_ch1_rdata,
    m_axi_lite_ch1_rresp);
  output arvalid_m_reg;
  output awvalid_m_reg;
  output [31:0]m_axi_lite_ch1_araddr;
  output [31:0]m_axi_lite_ch1_awaddr;
  output [31:0]m_axi_lite_ch5_wdata;
  output done;
  output [25:0]status;
  output rready_m_reg;
  output bready_m_reg;
  output m_axi_lite_ch1_wvalid;
  input s_axi_aresetn;
  input m_axi_lite_ch1_arready;
  input m_axi_lite_ch1_awready;
  input s_axi_aclk;
  input m_axi_lite_ch1_rvalid;
  input m_axi_lite_ch1_bvalid;
  input m_axi_lite_ch1_wready;
  input [0:0]m_axi_lite_ch1_bresp;
  input [31:0]m_axi_lite_ch1_rdata;
  input [1:0]m_axi_lite_ch1_rresp;

  wire \ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_10 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_11 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_7 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_8 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_9 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_32 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_33 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_34 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_35 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_36 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_37 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_38 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_39 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_40 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_41 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_42 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_43 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_44 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_45 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_46 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_47 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_48 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_49 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_50 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_51 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_52 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_53 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_54 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_55 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_56 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_57 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_58 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_59 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_60 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_61 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_62 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_63 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_64 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_65 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_66 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_67 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_68 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_69 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_70 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_71 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_72 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_73 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_74 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_75 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_76 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_77 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_78 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_79 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_80 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_81 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_82 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_83 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_84 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_85 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_86 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_87 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_88 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_89 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_90 ;
  wire \ATG_SYSINIT_DMG.systeminit_dmg_mask_n_91 ;
  wire arvalid_m_reg;
  wire awvalid_m_reg;
  wire bready_m_reg;
  wire [31:0]m_axi_lite_ch1_araddr;
  wire m_axi_lite_ch1_arready;
  wire [31:0]m_axi_lite_ch1_awaddr;
  wire m_axi_lite_ch1_awready;
  wire m_axi_lite_ch1_bvalid;
  wire [31:0]m_axi_lite_ch1_rdata;
  wire m_axi_lite_ch1_rvalid;
  wire m_axi_lite_ch1_wready;
  wire m_axi_lite_ch1_wvalid;
  wire [31:0]m_axi_lite_ch5_wdata;
  wire rd_check1;
  wire rd_check2;
  wire [31:0]rom_addr;
  wire [21:16]rom_ctrl;
  wire [31:0]rom_data;
  wire [3:0]rom_data_ptr_ff;
  wire rom_eof0;
  wire [31:0]rom_mask;
  wire rready_m_reg;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire static_mrdwr_n_0;
  wire static_mrdwr_n_10;
  wire static_mrdwr_n_15;
  wire static_mrdwr_n_2;
  wire systeminit_dmg_addr_n_32;
  wire systeminit_dmg_addr_n_33;
  wire systeminit_dmg_data_n_32;
  wire systeminit_dmg_data_n_33;
  wire systeminit_dmg_data_n_34;
  wire systeminit_dmg_data_n_35;
  wire systeminit_dmg_data_n_36;
  wire systeminit_dmg_data_n_37;
  wire systeminit_dmg_data_n_38;
  wire systeminit_dmg_data_n_39;
  wire systeminit_dmg_data_n_40;
  wire systeminit_dmg_data_n_41;
  wire systeminit_dmg_data_n_42;
  wire systeminit_dmg_data_n_43;
  wire systeminit_dmg_data_n_44;
  wire systeminit_dmg_data_n_45;
  wire systeminit_dmg_data_n_46;
  wire systeminit_dmg_data_n_47;
  wire [7:5]\NLW_ATG_SYSINIT_DMG.systeminit_dmg_ctrl_D_UNCONNECTED ;
  wire [1:1]\NLW_ATG_SYSINIT_DMG.systeminit_dmg_ctrl_douta_UNCONNECTED ;
  wire \NLW_ATG_SYSINIT_DMG.systeminit_dmg_mask_cur_trn_status_reg_2_UNCONNECTED ;
  wire NLW_static_mrdwr_done_UNCONNECTED;
  wire NLW_static_mrdwr_m_axi_lite_ch1_rresp_1_sp_1_UNCONNECTED;
  wire [7:5]\NLW_static_mrdwr_ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0_UNCONNECTED ;
  wire [1:1]NLW_static_mrdwr_douta_UNCONNECTED;
  wire [31:0]NLW_static_mrdwr_m_axi_lite_ch1_araddr_UNCONNECTED;
  wire [31:0]NLW_static_mrdwr_m_axi_lite_ch1_awaddr_UNCONNECTED;
  wire [0:0]NLW_static_mrdwr_m_axi_lite_ch1_bresp_UNCONNECTED;
  wire [1:0]NLW_static_mrdwr_m_axi_lite_ch1_rresp_UNCONNECTED;
  wire [25:0]NLW_static_mrdwr_status_UNCONNECTED;

  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg__parameterized0 \ATG_SYSINIT_DMG.systeminit_dmg_ctrl 
       (.\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] (static_mrdwr_n_10),
        .D({\NLW_ATG_SYSINIT_DMG.systeminit_dmg_ctrl_D_UNCONNECTED [7:5],\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_7 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_8 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_9 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_10 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_11 }),
        .addra(rom_data_ptr_ff),
        .douta({rom_ctrl[21:19],rom_ctrl[16]}),
        .\gen_rd_a.douta_reg_reg[21] (static_mrdwr_n_0),
        .s_axi_aclk(s_axi_aclk));
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg \ATG_SYSINIT_DMG.systeminit_dmg_mask 
       (.CO(rd_check2),
        .DI({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_36 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_37 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_38 }),
        .S({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_32 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_33 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_34 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_35 }),
        .addra(rom_data_ptr_ff),
        .cur_trn_status_reg(rom_ctrl[21:20]),
        .cur_trn_status_reg_0(rd_check1),
        .cur_trn_status_reg_1(static_mrdwr_n_2),
        .cur_trn_status_reg_2(\NLW_ATG_SYSINIT_DMG.systeminit_dmg_mask_cur_trn_status_reg_2_UNCONNECTED ),
        .douta(rom_mask),
        .\gen_rd_a.douta_reg_reg[21] (\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_75 ),
        .\gen_rd_a.douta_reg_reg[31] (static_mrdwr_n_0),
        .m_axi_lite_ch1_rdata(m_axi_lite_ch1_rdata),
        .\m_axi_lite_ch1_rdata[12] ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_50 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_51 }),
        .\m_axi_lite_ch1_rdata[15] ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_44 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_45 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_46 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_47 }),
        .\m_axi_lite_ch1_rdata[15]_0 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_48 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_49 }),
        .\m_axi_lite_ch1_rdata[15]_1 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_80 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_81 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_82 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_83 }),
        .\m_axi_lite_ch1_rdata[21] ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_52 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_53 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_54 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_55 }),
        .\m_axi_lite_ch1_rdata[21]_0 (\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_63 ),
        .\m_axi_lite_ch1_rdata[22] ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_56 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_57 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_58 }),
        .\m_axi_lite_ch1_rdata[22]_0 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_59 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_60 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_61 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_62 }),
        .\m_axi_lite_ch1_rdata[22]_1 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_84 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_85 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_86 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_87 }),
        .\m_axi_lite_ch1_rdata[27] (\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_74 ),
        .\m_axi_lite_ch1_rdata[30] ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_64 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_65 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_66 }),
        .\m_axi_lite_ch1_rdata[30]_0 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_67 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_68 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_69 }),
        .\m_axi_lite_ch1_rdata[30]_1 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_70 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_71 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_72 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_73 }),
        .\m_axi_lite_ch1_rdata[30]_2 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_88 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_89 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_90 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_91 }),
        .\m_axi_lite_ch1_rdata[3] (\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_43 ),
        .\m_axi_lite_ch1_rdata[6] ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_39 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_40 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_41 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_42 }),
        .\m_axi_lite_ch1_rdata[6]_0 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_76 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_77 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_78 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_79 }),
        .\rd_check2_inferred__0/i__carry__1 (rom_data),
        .s_axi_aclk(s_axi_aclk));
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_mrdwr static_mrdwr
       (.\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0 ({\NLW_static_mrdwr_ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[7]_0_UNCONNECTED [7:5],\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_7 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_8 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_9 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_10 ,\ATG_SYSINIT_DMG.systeminit_dmg_ctrl_n_11 }),
        .CO(rd_check2),
        .D(rom_addr),
        .DI({systeminit_dmg_data_n_32,systeminit_dmg_data_n_33,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_43 ,systeminit_dmg_data_n_34}),
        .S({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_32 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_33 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_34 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_35 }),
        .addra(rom_data_ptr_ff),
        .arvalid_m_reg_0(arvalid_m_reg),
        .awvalid_m_reg_0(awvalid_m_reg),
        .bready_m_reg_0(bready_m_reg),
        .bready_m_reg_1(systeminit_dmg_addr_n_33),
        .cur_trn_status_i_3({systeminit_dmg_data_n_44,systeminit_dmg_data_n_45,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_74 ,systeminit_dmg_data_n_46}),
        .cur_trn_status_i_3_0({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_88 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_89 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_90 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_91 }),
        .cur_trn_status_i_3_1({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_67 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_68 ,systeminit_dmg_data_n_47,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_69 }),
        .cur_trn_status_i_3_2({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_70 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_71 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_72 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_73 }),
        .cur_trn_status_i_3_3({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_64 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_65 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_66 }),
        .cur_trn_status_reg_0(static_mrdwr_n_10),
        .cur_trn_status_reg_1(\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_75 ),
        .done(NLW_static_mrdwr_done_UNCONNECTED),
        .douta({NLW_static_mrdwr_douta_UNCONNECTED[1],rom_ctrl[16]}),
        .\gen_rd_a.douta_reg_reg[30] (static_mrdwr_n_2),
        .m_axi_lite_ch1_araddr({NLW_static_mrdwr_m_axi_lite_ch1_araddr_UNCONNECTED[31:4],m_axi_lite_ch1_araddr[3:2],NLW_static_mrdwr_m_axi_lite_ch1_araddr_UNCONNECTED[1:0]}),
        .m_axi_lite_ch1_arready(m_axi_lite_ch1_arready),
        .m_axi_lite_ch1_awaddr({NLW_static_mrdwr_m_axi_lite_ch1_awaddr_UNCONNECTED[31:4],m_axi_lite_ch1_awaddr[3:2],NLW_static_mrdwr_m_axi_lite_ch1_awaddr_UNCONNECTED[1:0]}),
        .m_axi_lite_ch1_awready(m_axi_lite_ch1_awready),
        .m_axi_lite_ch1_bresp(NLW_static_mrdwr_m_axi_lite_ch1_bresp_UNCONNECTED[0]),
        .m_axi_lite_ch1_bvalid(m_axi_lite_ch1_bvalid),
        .\m_axi_lite_ch1_rdata[30] (rd_check1),
        .m_axi_lite_ch1_rresp(NLW_static_mrdwr_m_axi_lite_ch1_rresp_UNCONNECTED[1:0]),
        .m_axi_lite_ch1_rresp_1_sp_1(NLW_static_mrdwr_m_axi_lite_ch1_rresp_1_sp_1_UNCONNECTED),
        .m_axi_lite_ch1_rvalid(m_axi_lite_ch1_rvalid),
        .m_axi_lite_ch1_wready(m_axi_lite_ch1_wready),
        .m_axi_lite_ch1_wvalid(m_axi_lite_ch1_wvalid),
        .m_axi_lite_ch5_wdata(m_axi_lite_ch5_wdata),
        .\rd_check1_inferred__0/i__carry__0_0 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_36 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_37 ,systeminit_dmg_data_n_35,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_38 }),
        .\rd_check1_inferred__0/i__carry__0_1 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_39 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_40 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_41 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_42 }),
        .\rd_check1_inferred__0/i__carry__1_0 ({systeminit_dmg_data_n_36,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_50 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_51 ,systeminit_dmg_data_n_37}),
        .\rd_check1_inferred__0/i__carry__1_1 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_44 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_45 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_46 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_47 }),
        .\rd_check1_inferred__0/i__carry__2_0 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_56 ,systeminit_dmg_data_n_43,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_57 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_58 }),
        .\rd_check1_inferred__0/i__carry__2_1 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_59 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_60 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_61 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_62 }),
        .rd_check2_carry__0_0({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_76 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_77 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_78 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_79 }),
        .rd_check2_carry__1_0({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_48 ,systeminit_dmg_data_n_38,systeminit_dmg_data_n_39,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_49 }),
        .rd_check2_carry__1_1({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_80 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_81 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_82 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_83 }),
        .rd_check2_carry__2_0({systeminit_dmg_data_n_40,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_63 ,systeminit_dmg_data_n_41,systeminit_dmg_data_n_42}),
        .rd_check2_carry__2_1({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_84 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_85 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_86 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_87 }),
        .\rd_check2_inferred__0/i__carry__1_0 ({\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_52 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_53 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_54 ,\ATG_SYSINIT_DMG.systeminit_dmg_mask_n_55 }),
        .rom_eof0(rom_eof0),
        .\rom_ptr_ff_reg[4]_0 (static_mrdwr_n_15),
        .rready_m_reg_0(rready_m_reg),
        .rready_m_reg_1(systeminit_dmg_addr_n_32),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_aresetn_0(static_mrdwr_n_0),
        .status(NLW_static_mrdwr_status_UNCONNECTED[25:0]),
        .\wdata_m_reg[31]_0 (rom_data));
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg__parameterized1 systeminit_dmg_addr
       (.addra(rom_data_ptr_ff),
        .bready_m_reg(rom_ctrl[16]),
        .douta(rom_addr),
        .\gen_rd_a.douta_reg_reg[16] (systeminit_dmg_addr_n_32),
        .\gen_rd_a.douta_reg_reg[16]_0 (systeminit_dmg_addr_n_33),
        .\gen_rd_a.douta_reg_reg[31] (static_mrdwr_n_0),
        .rom_eof0(rom_eof0),
        .rom_eof_reg(static_mrdwr_n_15),
        .s_axi_aclk(s_axi_aclk));
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_dmg__parameterized2 systeminit_dmg_data
       (.DI({systeminit_dmg_data_n_32,systeminit_dmg_data_n_33,systeminit_dmg_data_n_34}),
        .addra(rom_data_ptr_ff),
        .douta(rom_data),
        .\gen_rd_a.douta_reg_reg[12] ({systeminit_dmg_data_n_38,systeminit_dmg_data_n_39}),
        .\gen_rd_a.douta_reg_reg[15] ({systeminit_dmg_data_n_36,systeminit_dmg_data_n_37}),
        .\gen_rd_a.douta_reg_reg[21] (systeminit_dmg_data_n_43),
        .\gen_rd_a.douta_reg_reg[22] ({systeminit_dmg_data_n_40,systeminit_dmg_data_n_41,systeminit_dmg_data_n_42}),
        .\gen_rd_a.douta_reg_reg[27] (systeminit_dmg_data_n_47),
        .\gen_rd_a.douta_reg_reg[30] ({systeminit_dmg_data_n_44,systeminit_dmg_data_n_45,systeminit_dmg_data_n_46}),
        .\gen_rd_a.douta_reg_reg[31] (static_mrdwr_n_0),
        .\gen_rd_a.douta_reg_reg[3] (systeminit_dmg_data_n_35),
        .m_axi_lite_ch1_rdata(m_axi_lite_ch1_rdata),
        .rd_check2_carry__2(rom_mask),
        .s_axi_aclk(s_axi_aclk));
endmodule

(* ATG_VERSAL_400 = "0" *) (* C_ADDR_F = "none" *) (* C_ATG_AXIS_DATA_GEN_TYPE = "0" *) 
(* C_ATG_BASIC_AXI4 = "0" *) (* C_ATG_HLTP_MODE = "0" *) (* C_ATG_MIF_ADDR_BITS = "4" *) 
(* C_ATG_MIF_DATA_DEPTH = "16" *) (* C_ATG_REPEAT_TYPE = "0" *) (* C_ATG_SLAVE_ONLY = "0" *) 
(* C_ATG_STATIC = "0" *) (* C_ATG_STATIC_EN_READ = "1" *) (* C_ATG_STATIC_EN_WRITE = "1" *) 
(* C_ATG_STATIC_FREE_RUN = "1" *) (* C_ATG_STATIC_INCR = "0" *) (* C_ATG_STATIC_LENGTH = "16" *) 
(* C_ATG_STATIC_RD_ADDRESS = "64'b0000000000000000000000000000000000010011101000000000000000000000" *) (* C_ATG_STATIC_RD_HIGH_ADDRESS = "64'b0000000000000000000000000000000000010011101000000000111111111111" *) (* C_ATG_STATIC_RD_PIPELINE = "3" *) 
(* C_ATG_STATIC_TRANGAP = "0" *) (* C_ATG_STATIC_WR_ADDRESS = "64'b0000000000000000000000000000000000010010101000000000000000000000" *) (* C_ATG_STATIC_WR_HIGH_ADDRESS = "64'b0000000000000000000000000000000000010010101000000000111111111111" *) 
(* C_ATG_STATIC_WR_PIPELINE = "3" *) (* C_ATG_STREAMING = "0" *) (* C_ATG_STREAMING_MAX_LEN_BITS = "16" *) 
(* C_ATG_STREAMING_MEM_FILE = "no_mem_file_loaded" *) (* C_ATG_STREAMING_MST_LPBK = "0" *) (* C_ATG_STREAMING_MST_ONLY = "1" *) 
(* C_ATG_STREAMING_SLV_LPBK = "0" *) (* C_ATG_SYSTEM_CH1_HIGH = "-1" *) (* C_ATG_SYSTEM_CH1_LOW = "0" *) 
(* C_ATG_SYSTEM_CH2_HIGH = "511" *) (* C_ATG_SYSTEM_CH2_LOW = "256" *) (* C_ATG_SYSTEM_CH3_HIGH = "767" *) 
(* C_ATG_SYSTEM_CH3_LOW = "512" *) (* C_ATG_SYSTEM_CH4_HIGH = "1023" *) (* C_ATG_SYSTEM_CH4_LOW = "768" *) 
(* C_ATG_SYSTEM_CH5_HIGH = "1279" *) (* C_ATG_SYSTEM_CH5_LOW = "1024" *) (* C_ATG_SYSTEM_CMD_MAX_RETRY = "2147483647" *) 
(* C_ATG_SYSTEM_INIT = "0" *) (* C_ATG_SYSTEM_INIT_ADDR_MIF = "design_1_axi_traffic_gen_0_0_addr.mem" *) (* C_ATG_SYSTEM_INIT_CTRL_MIF = "design_1_axi_traffic_gen_0_0_ctrl.mem" *) 
(* C_ATG_SYSTEM_INIT_DATA_MIF = "design_1_axi_traffic_gen_0_0_data.mem" *) (* C_ATG_SYSTEM_INIT_MASK_MIF = "design_1_axi_traffic_gen_0_0_mask.mem" *) (* C_ATG_SYSTEM_MAX_CHANNELS = "1" *) 
(* C_ATG_SYSTEM_TEST = "1" *) (* C_ATG_SYSTEM_TEST_MAX_CLKS = "5000" *) (* C_AXIS1_HAS_TKEEP = "1" *) 
(* C_AXIS1_HAS_TSTRB = "1" *) (* C_AXIS2_HAS_TKEEP = "0" *) (* C_AXIS2_HAS_TSTRB = "0" *) 
(* C_AXIS_SPARSE_EN = "1" *) (* C_AXIS_TDATA_WIDTH = "32" *) (* C_AXIS_TDEST_WIDTH = "8" *) 
(* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TUSER_WIDTH = "8" *) (* C_AXI_RD_ADDR_SEED = "23130" *) 
(* C_AXI_WR_ADDR_SEED = "31899" *) (* C_BASEADDR = "0" *) (* C_CMDRAM_F = "none" *) 
(* C_FAMILY = "zynq" *) (* C_HIGHADDR = "65535" *) (* C_M_AXI_ADDR_WIDTH = "32" *) 
(* C_M_AXI_ARUSER_WIDTH = "8" *) (* C_M_AXI_AWUSER_WIDTH = "8" *) (* C_M_AXI_DATA_WIDTH = "32" *) 
(* C_M_AXI_THREAD_ID_WIDTH = "1" *) (* C_NO_EXCL = "0" *) (* C_PRAM_F = "none" *) 
(* C_RAMINIT_ADDRRAM0_F = "design_1_axi_traffic_gen_0_0_default_addrram.mem" *) (* C_RAMINIT_CMDRAM0_F = "design_1_axi_traffic_gen_0_0_default_cmdram.mem" *) (* C_RAMINIT_CMDRAM1_F = "NONE" *) 
(* C_RAMINIT_CMDRAM2_F = "NONE" *) (* C_RAMINIT_CMDRAM3_F = "NONE" *) (* C_RAMINIT_PARAMRAM0_F = "design_1_axi_traffic_gen_0_0_default_prmram.mem" *) 
(* C_RAMINIT_SRAM0_F = "design_1_axi_traffic_gen_0_0_default_mstram.mem" *) (* C_READ_ONLY = "0" *) (* C_REPEAT_COUNT = "254" *) 
(* C_SRAM_F = "none" *) (* C_STRM_DATA_SEED = "43981" *) (* C_S_AXI_ARUSER_WIDTH = "8" *) 
(* C_S_AXI_AWUSER_WIDTH = "8" *) (* C_S_AXI_DATA_WIDTH = "32" *) (* C_S_AXI_ID_WIDTH = "1" *) 
(* C_WRITE_ONLY = "0" *) (* C_ZERO_INVALID = "1" *) (* ORIG_REF_NAME = "axi_traffic_gen_v3_0_7_top" *) 
(* downgradeipidentifiedwarnings = "yes" *) 
module design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_top
   (s_axi_aclk,
    s_axi_aresetn,
    core_ext_start,
    core_ext_stop,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wlast,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rlast,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wlast,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rvalid,
    m_axi_rready,
    m_axis_1_tready,
    m_axis_1_tvalid,
    m_axis_1_tlast,
    m_axis_1_tdata,
    m_axis_1_tstrb,
    m_axis_1_tkeep,
    m_axis_1_tuser,
    m_axis_1_tid,
    m_axis_1_tdest,
    s_axis_1_tready,
    s_axis_1_tvalid,
    s_axis_1_tlast,
    s_axis_1_tdata,
    s_axis_1_tstrb,
    s_axis_1_tkeep,
    s_axis_1_tuser,
    s_axis_1_tid,
    s_axis_1_tdest,
    axis_err_count,
    s_axis_2_tready,
    s_axis_2_tvalid,
    s_axis_2_tlast,
    s_axis_2_tdata,
    s_axis_2_tstrb,
    s_axis_2_tkeep,
    s_axis_2_tuser,
    s_axis_2_tid,
    s_axis_2_tdest,
    m_axis_2_tready,
    m_axis_2_tvalid,
    m_axis_2_tlast,
    m_axis_2_tdata,
    m_axis_2_tstrb,
    m_axis_2_tkeep,
    m_axis_2_tuser,
    m_axis_2_tid,
    m_axis_2_tdest,
    irq_out,
    err_out,
    m_axi_lite_ch1_awaddr,
    m_axi_lite_ch1_awprot,
    m_axi_lite_ch1_awvalid,
    m_axi_lite_ch1_awready,
    m_axi_lite_ch1_wdata,
    m_axi_lite_ch1_wstrb,
    m_axi_lite_ch1_wvalid,
    m_axi_lite_ch1_wready,
    m_axi_lite_ch1_bresp,
    m_axi_lite_ch1_bvalid,
    m_axi_lite_ch1_bready,
    m_axi_lite_ch1_araddr,
    m_axi_lite_ch1_arvalid,
    m_axi_lite_ch1_arready,
    m_axi_lite_ch1_rdata,
    m_axi_lite_ch1_rvalid,
    m_axi_lite_ch1_rresp,
    m_axi_lite_ch1_rready,
    m_axi_lite_ch2_awaddr,
    m_axi_lite_ch2_awprot,
    m_axi_lite_ch2_awvalid,
    m_axi_lite_ch2_awready,
    m_axi_lite_ch2_wdata,
    m_axi_lite_ch2_wstrb,
    m_axi_lite_ch2_wvalid,
    m_axi_lite_ch2_wready,
    m_axi_lite_ch2_bresp,
    m_axi_lite_ch2_bvalid,
    m_axi_lite_ch2_bready,
    m_axi_lite_ch2_araddr,
    m_axi_lite_ch2_arvalid,
    m_axi_lite_ch2_arready,
    m_axi_lite_ch2_rdata,
    m_axi_lite_ch2_rvalid,
    m_axi_lite_ch2_rresp,
    m_axi_lite_ch2_rready,
    m_axi_lite_ch3_awaddr,
    m_axi_lite_ch3_awprot,
    m_axi_lite_ch3_awvalid,
    m_axi_lite_ch3_awready,
    m_axi_lite_ch3_wdata,
    m_axi_lite_ch3_wstrb,
    m_axi_lite_ch3_wvalid,
    m_axi_lite_ch3_wready,
    m_axi_lite_ch3_bresp,
    m_axi_lite_ch3_bvalid,
    m_axi_lite_ch3_bready,
    m_axi_lite_ch3_araddr,
    m_axi_lite_ch3_arvalid,
    m_axi_lite_ch3_arready,
    m_axi_lite_ch3_rdata,
    m_axi_lite_ch3_rvalid,
    m_axi_lite_ch3_rresp,
    m_axi_lite_ch3_rready,
    m_axi_lite_ch4_awaddr,
    m_axi_lite_ch4_awprot,
    m_axi_lite_ch4_awvalid,
    m_axi_lite_ch4_awready,
    m_axi_lite_ch4_wdata,
    m_axi_lite_ch4_wstrb,
    m_axi_lite_ch4_wvalid,
    m_axi_lite_ch4_wready,
    m_axi_lite_ch4_bresp,
    m_axi_lite_ch4_bvalid,
    m_axi_lite_ch4_bready,
    m_axi_lite_ch4_araddr,
    m_axi_lite_ch4_arvalid,
    m_axi_lite_ch4_arready,
    m_axi_lite_ch4_rdata,
    m_axi_lite_ch4_rvalid,
    m_axi_lite_ch4_rresp,
    m_axi_lite_ch4_rready,
    m_axi_lite_ch5_awaddr,
    m_axi_lite_ch5_awprot,
    m_axi_lite_ch5_awvalid,
    m_axi_lite_ch5_awready,
    m_axi_lite_ch5_wdata,
    m_axi_lite_ch5_wstrb,
    m_axi_lite_ch5_wvalid,
    m_axi_lite_ch5_wready,
    m_axi_lite_ch5_bresp,
    m_axi_lite_ch5_bvalid,
    m_axi_lite_ch5_bready,
    m_axi_lite_ch5_araddr,
    m_axi_lite_ch5_arvalid,
    m_axi_lite_ch5_arready,
    m_axi_lite_ch5_rdata,
    m_axi_lite_ch5_rvalid,
    m_axi_lite_ch5_rresp,
    m_axi_lite_ch5_rready,
    done,
    status);
  input s_axi_aclk;
  input s_axi_aresetn;
  input core_ext_start;
  input core_ext_stop;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [7:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input s_axi_wlast;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  input s_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [7:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output s_axi_rlast;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [7:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output m_axi_wlast;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input m_axi_bvalid;
  output m_axi_bready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [7:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input m_axi_rlast;
  input [31:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rvalid;
  output m_axi_rready;
  input m_axis_1_tready;
  output m_axis_1_tvalid;
  output m_axis_1_tlast;
  output [31:0]m_axis_1_tdata;
  output [3:0]m_axis_1_tstrb;
  output [3:0]m_axis_1_tkeep;
  output [7:0]m_axis_1_tuser;
  output [7:0]m_axis_1_tid;
  output [7:0]m_axis_1_tdest;
  output s_axis_1_tready;
  input s_axis_1_tvalid;
  input s_axis_1_tlast;
  input [31:0]s_axis_1_tdata;
  input [3:0]s_axis_1_tstrb;
  input [3:0]s_axis_1_tkeep;
  input [7:0]s_axis_1_tuser;
  input [7:0]s_axis_1_tid;
  input [7:0]s_axis_1_tdest;
  output [15:0]axis_err_count;
  output s_axis_2_tready;
  input s_axis_2_tvalid;
  input s_axis_2_tlast;
  input [31:0]s_axis_2_tdata;
  input [3:0]s_axis_2_tstrb;
  input [3:0]s_axis_2_tkeep;
  input [7:0]s_axis_2_tuser;
  input [7:0]s_axis_2_tid;
  input [7:0]s_axis_2_tdest;
  input m_axis_2_tready;
  output m_axis_2_tvalid;
  output m_axis_2_tlast;
  output [31:0]m_axis_2_tdata;
  output [3:0]m_axis_2_tstrb;
  output [3:0]m_axis_2_tkeep;
  output [7:0]m_axis_2_tuser;
  output [7:0]m_axis_2_tid;
  output [7:0]m_axis_2_tdest;
  output irq_out;
  output err_out;
  output [31:0]m_axi_lite_ch1_awaddr;
  output [2:0]m_axi_lite_ch1_awprot;
  output m_axi_lite_ch1_awvalid;
  input m_axi_lite_ch1_awready;
  output [31:0]m_axi_lite_ch1_wdata;
  output [3:0]m_axi_lite_ch1_wstrb;
  output m_axi_lite_ch1_wvalid;
  input m_axi_lite_ch1_wready;
  input [1:0]m_axi_lite_ch1_bresp;
  input m_axi_lite_ch1_bvalid;
  output m_axi_lite_ch1_bready;
  output [31:0]m_axi_lite_ch1_araddr;
  output m_axi_lite_ch1_arvalid;
  input m_axi_lite_ch1_arready;
  input [31:0]m_axi_lite_ch1_rdata;
  input m_axi_lite_ch1_rvalid;
  input [1:0]m_axi_lite_ch1_rresp;
  output m_axi_lite_ch1_rready;
  output [31:0]m_axi_lite_ch2_awaddr;
  output [2:0]m_axi_lite_ch2_awprot;
  output m_axi_lite_ch2_awvalid;
  input m_axi_lite_ch2_awready;
  output [31:0]m_axi_lite_ch2_wdata;
  output [3:0]m_axi_lite_ch2_wstrb;
  output m_axi_lite_ch2_wvalid;
  input m_axi_lite_ch2_wready;
  input [1:0]m_axi_lite_ch2_bresp;
  input m_axi_lite_ch2_bvalid;
  output m_axi_lite_ch2_bready;
  output [31:0]m_axi_lite_ch2_araddr;
  output m_axi_lite_ch2_arvalid;
  input m_axi_lite_ch2_arready;
  input [31:0]m_axi_lite_ch2_rdata;
  input m_axi_lite_ch2_rvalid;
  input [1:0]m_axi_lite_ch2_rresp;
  output m_axi_lite_ch2_rready;
  output [31:0]m_axi_lite_ch3_awaddr;
  output [2:0]m_axi_lite_ch3_awprot;
  output m_axi_lite_ch3_awvalid;
  input m_axi_lite_ch3_awready;
  output [31:0]m_axi_lite_ch3_wdata;
  output [3:0]m_axi_lite_ch3_wstrb;
  output m_axi_lite_ch3_wvalid;
  input m_axi_lite_ch3_wready;
  input [1:0]m_axi_lite_ch3_bresp;
  input m_axi_lite_ch3_bvalid;
  output m_axi_lite_ch3_bready;
  output [31:0]m_axi_lite_ch3_araddr;
  output m_axi_lite_ch3_arvalid;
  input m_axi_lite_ch3_arready;
  input [31:0]m_axi_lite_ch3_rdata;
  input m_axi_lite_ch3_rvalid;
  input [1:0]m_axi_lite_ch3_rresp;
  output m_axi_lite_ch3_rready;
  output [31:0]m_axi_lite_ch4_awaddr;
  output [2:0]m_axi_lite_ch4_awprot;
  output m_axi_lite_ch4_awvalid;
  input m_axi_lite_ch4_awready;
  output [31:0]m_axi_lite_ch4_wdata;
  output [3:0]m_axi_lite_ch4_wstrb;
  output m_axi_lite_ch4_wvalid;
  input m_axi_lite_ch4_wready;
  input [1:0]m_axi_lite_ch4_bresp;
  input m_axi_lite_ch4_bvalid;
  output m_axi_lite_ch4_bready;
  output [31:0]m_axi_lite_ch4_araddr;
  output m_axi_lite_ch4_arvalid;
  input m_axi_lite_ch4_arready;
  input [31:0]m_axi_lite_ch4_rdata;
  input m_axi_lite_ch4_rvalid;
  input [1:0]m_axi_lite_ch4_rresp;
  output m_axi_lite_ch4_rready;
  output [31:0]m_axi_lite_ch5_awaddr;
  output [2:0]m_axi_lite_ch5_awprot;
  output m_axi_lite_ch5_awvalid;
  input m_axi_lite_ch5_awready;
  output [31:0]m_axi_lite_ch5_wdata;
  output [3:0]m_axi_lite_ch5_wstrb;
  output m_axi_lite_ch5_wvalid;
  input m_axi_lite_ch5_wready;
  input [1:0]m_axi_lite_ch5_bresp;
  input m_axi_lite_ch5_bvalid;
  output m_axi_lite_ch5_bready;
  output [31:0]m_axi_lite_ch5_araddr;
  output m_axi_lite_ch5_arvalid;
  input m_axi_lite_ch5_arready;
  input [31:0]m_axi_lite_ch5_rdata;
  input m_axi_lite_ch5_rvalid;
  input [1:0]m_axi_lite_ch5_rresp;
  output m_axi_lite_ch5_rready;
  output done;
  output [31:0]status;

  wire core_ext_start;
  wire core_ext_stop;
  wire flop_ze_out;
  wire [31:0]m_axi_lite_ch1_araddr;
  wire m_axi_lite_ch1_arready;
  wire m_axi_lite_ch1_arvalid;
  wire [31:0]m_axi_lite_ch1_awaddr;
  wire m_axi_lite_ch1_awready;
  wire m_axi_lite_ch1_awvalid;
  wire m_axi_lite_ch1_bready;
  wire m_axi_lite_ch1_bvalid;
  wire [31:0]m_axi_lite_ch1_rdata;
  wire m_axi_lite_ch1_rready;
  wire m_axi_lite_ch1_rvalid;
  wire m_axi_lite_ch1_wready;
  wire m_axi_lite_ch1_wvalid;
  wire [31:0]\^m_axi_lite_ch5_wdata ;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire st_flop_ze_out;
  wire \NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_done_UNCONNECTED ;
  wire [31:0]\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_araddr_UNCONNECTED ;
  wire [31:0]\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_awaddr_UNCONNECTED ;
  wire [0:0]\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_bresp_UNCONNECTED ;
  wire [1:0]\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_rresp_UNCONNECTED ;
  wire [25:0]\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_status_UNCONNECTED ;
  wire NLW_ext_st_sync_flop_1_q_UNCONNECTED;
  wire NLW_ext_sync_flop_1_q_UNCONNECTED;

  assign m_axi_lite_ch1_wdata[31:0] = \^m_axi_lite_ch5_wdata [31:0];
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_systeminit_top \ATG_MODE_SYSTEM_INIT_TEST.systeminit_top 
       (.arvalid_m_reg(m_axi_lite_ch1_arvalid),
        .awvalid_m_reg(m_axi_lite_ch1_awvalid),
        .bready_m_reg(m_axi_lite_ch1_bready),
        .done(\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_done_UNCONNECTED ),
        .m_axi_lite_ch1_araddr({\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_araddr_UNCONNECTED [31:4],m_axi_lite_ch1_araddr[3:2],\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_araddr_UNCONNECTED [1:0]}),
        .m_axi_lite_ch1_arready(m_axi_lite_ch1_arready),
        .m_axi_lite_ch1_awaddr({\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_awaddr_UNCONNECTED [31:4],m_axi_lite_ch1_awaddr[3:2],\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_awaddr_UNCONNECTED [1:0]}),
        .m_axi_lite_ch1_awready(m_axi_lite_ch1_awready),
        .m_axi_lite_ch1_bresp(\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_bresp_UNCONNECTED [0]),
        .m_axi_lite_ch1_bvalid(m_axi_lite_ch1_bvalid),
        .m_axi_lite_ch1_rdata(m_axi_lite_ch1_rdata),
        .m_axi_lite_ch1_rresp(\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_m_axi_lite_ch1_rresp_UNCONNECTED [1:0]),
        .m_axi_lite_ch1_rvalid(m_axi_lite_ch1_rvalid),
        .m_axi_lite_ch1_wready(m_axi_lite_ch1_wready),
        .m_axi_lite_ch1_wvalid(m_axi_lite_ch1_wvalid),
        .m_axi_lite_ch5_wdata(\^m_axi_lite_ch5_wdata ),
        .rready_m_reg(m_axi_lite_ch1_rready),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_aresetn(s_axi_aresetn),
        .status(\NLW_ATG_MODE_SYSTEM_INIT_TEST.systeminit_top_status_UNCONNECTED [25:0]));
  (* DONT_TOUCH *) 
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff__3 ext_st_sync_flop_0
       (.clk(s_axi_aclk),
        .data(1'b0),
        .q(st_flop_ze_out),
        .reset(core_ext_stop));
  (* DONT_TOUCH *) 
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff ext_st_sync_flop_1
       (.clk(s_axi_aclk),
        .data(st_flop_ze_out),
        .q(NLW_ext_st_sync_flop_1_q_UNCONNECTED),
        .reset(core_ext_stop));
  (* DONT_TOUCH *) 
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff__1 ext_sync_flop_0
       (.clk(s_axi_aclk),
        .data(1'b0),
        .q(flop_ze_out),
        .reset(core_ext_start));
  (* DONT_TOUCH *) 
  design_1_axi_traffic_gen_0_0_axi_traffic_gen_v3_0_7_asynch_rst_ff__2 ext_sync_flop_1
       (.clk(s_axi_aclk),
        .data(flop_ze_out),
        .q(NLW_ext_sync_flop_1_q_UNCONNECTED),
        .reset(core_ext_start));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "8" *) (* BYTE_WRITE_WIDTH_B = "32" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_mask.mem" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "512" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "1" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "32" *) (* P_MIN_WIDTH_DATA_A = "32" *) (* P_MIN_WIDTH_DATA_B = "32" *) 
(* P_MIN_WIDTH_DATA_ECC = "32" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
(* P_NUM_COLS_WRITE_A = "4" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "8" *) (* P_WIDTH_COL_WRITE_B = "32" *) (* READ_DATA_WIDTH_A = "32" *) 
(* READ_DATA_WIDTH_B = "32" *) (* READ_LATENCY_A = "1" *) (* READ_LATENCY_B = "1" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "32" *) (* WRITE_DATA_WIDTH_B = "32" *) 
(* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "32" *) 
(* rstb_loop_iter = "32" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_base
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [3:0]wea;
  input [3:0]addra;
  input [31:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [31:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [31:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [31:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire [3:0]addra;
  wire clka;
  wire [31:0]douta;
  wire [31:0]\gen_rd_a.douta_reg0 ;
  wire rsta;

  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[0] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [0]),
        .Q(douta[0]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[10] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [10]),
        .Q(douta[10]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[11] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [11]),
        .Q(douta[11]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[12] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [12]),
        .Q(douta[12]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[13] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [13]),
        .Q(douta[13]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[14] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [14]),
        .Q(douta[14]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[15] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [15]),
        .Q(douta[15]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[16] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [16]),
        .Q(douta[16]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[17] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [17]),
        .Q(douta[17]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[18] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [18]),
        .Q(douta[18]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[19] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [19]),
        .Q(douta[19]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[1] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [1]),
        .Q(douta[1]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[20] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [20]),
        .Q(douta[20]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[21] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [21]),
        .Q(douta[21]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[22] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [22]),
        .Q(douta[22]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[23] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [23]),
        .Q(douta[23]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[24] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [24]),
        .Q(douta[24]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[25] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [25]),
        .Q(douta[25]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[26] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [26]),
        .Q(douta[26]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[27] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [27]),
        .Q(douta[27]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[28] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [28]),
        .Q(douta[28]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[29] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [29]),
        .Q(douta[29]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[2] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [2]),
        .Q(douta[2]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[30] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [30]),
        .Q(douta[30]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[31] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [31]),
        .Q(douta[31]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[3] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [3]),
        .Q(douta[3]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[4] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [4]),
        .Q(douta[4]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[5] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [5]),
        .Q(douta[5]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[6] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [6]),
        .Q(douta[6]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[7] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [7]),
        .Q(douta[7]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[8] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [8]),
        .Q(douta[8]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[9] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [9]),
        .Q(douta[9]),
        .R(rsta));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1S_HD357 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [0]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM32X1S_HD358 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_10_10 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [10]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM32X1S_HD359 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_11_11 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [11]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM32X1S_HD360 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_12_12 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [12]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "13" *) 
  (* ram_slice_end = "13" *) 
  RAM32X1S_HD361 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_13_13 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [13]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "14" *) 
  RAM32X1S_HD362 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_14_14 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [14]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "15" *) 
  (* ram_slice_end = "15" *) 
  RAM32X1S_HD363 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_15_15 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [15]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "16" *) 
  (* ram_slice_end = "16" *) 
  RAM32X1S_HD364 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_16_16 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [16]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "17" *) 
  (* ram_slice_end = "17" *) 
  RAM32X1S_HD365 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_17_17 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [17]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "18" *) 
  RAM32X1S_HD366 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_18_18 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [18]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "19" *) 
  (* ram_slice_end = "19" *) 
  RAM32X1S_HD367 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_19_19 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [19]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1S_HD368 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_1_1 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [1]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "20" *) 
  (* ram_slice_end = "20" *) 
  RAM32X1S_HD369 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_20_20 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [20]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "21" *) 
  (* ram_slice_end = "21" *) 
  RAM32X1S_HD370 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_21_21 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [21]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "22" *) 
  (* ram_slice_end = "22" *) 
  RAM32X1S_HD371 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_22_22 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [22]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "23" *) 
  (* ram_slice_end = "23" *) 
  RAM32X1S_HD372 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_23_23 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [23]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "24" *) 
  RAM32X1S_HD373 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_24_24 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [24]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "25" *) 
  (* ram_slice_end = "25" *) 
  RAM32X1S_HD374 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_25_25 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [25]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "26" *) 
  (* ram_slice_end = "26" *) 
  RAM32X1S_HD375 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_26_26 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [26]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "27" *) 
  (* ram_slice_end = "27" *) 
  RAM32X1S_HD376 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_27_27 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [27]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "28" *) 
  RAM32X1S_HD377 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_28_28 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [28]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "29" *) 
  (* ram_slice_end = "29" *) 
  RAM32X1S_HD378 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_29_29 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [29]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM32X1S_HD379 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_2_2 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [2]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "30" *) 
  RAM32X1S_HD380 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_30_30 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [30]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "31" *) 
  (* ram_slice_end = "31" *) 
  RAM32X1S_HD381 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_31_31 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [31]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM32X1S_HD382 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_3_3 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [3]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM32X1S_HD383 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_4_4 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [4]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM32X1S_HD384 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_5_5 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [5]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM32X1S_HD385 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_6_6 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [6]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM32X1S_HD386 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_7_7 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [7]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM32X1S_HD387 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_8_8 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [8]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM32X1S_HD388 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_9_9 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [9]),
        .WCLK(clka),
        .WE(1'b0));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "8" *) (* BYTE_WRITE_WIDTH_B = "32" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_ctrl.mem" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "512" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "1" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "32" *) (* P_MIN_WIDTH_DATA_A = "32" *) (* P_MIN_WIDTH_DATA_B = "32" *) 
(* P_MIN_WIDTH_DATA_ECC = "32" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
(* P_NUM_COLS_WRITE_A = "4" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "8" *) (* P_WIDTH_COL_WRITE_B = "32" *) (* READ_DATA_WIDTH_A = "32" *) 
(* READ_DATA_WIDTH_B = "32" *) (* READ_LATENCY_A = "1" *) (* READ_LATENCY_B = "1" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "32" *) (* WRITE_DATA_WIDTH_B = "32" *) 
(* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "32" *) 
(* rstb_loop_iter = "32" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_base__parameterized0
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [3:0]wea;
  input [3:0]addra;
  input [31:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [31:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [31:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [31:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire [3:0]addra;
  wire clka;
  wire [31:0]douta;
  wire [21:0]\gen_rd_a.douta_reg0 ;
  wire rsta;

  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[0] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [0]),
        .Q(douta[0]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[10] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [10]),
        .Q(douta[10]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[11] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [11]),
        .Q(douta[11]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[12] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [12]),
        .Q(douta[12]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[16] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [16]),
        .Q(douta[16]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[1] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [1]),
        .Q(douta[1]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[20] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [20]),
        .Q(douta[20]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[21] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [21]),
        .Q(douta[21]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[2] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [2]),
        .Q(douta[2]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[3] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [3]),
        .Q(douta[3]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[4] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [4]),
        .Q(douta[4]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[8] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [8]),
        .Q(douta[8]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[9] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [9]),
        .Q(douta[9]),
        .R(rsta));
  (* INIT = "32'h0000001A" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1S_UNIQ_BASE_ \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [0]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000018" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM32X1S_HD345 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_10_10 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [10]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM32X1S_HD346 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_11_11 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [11]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM32X1S_HD347 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_12_12 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [12]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "16" *) 
  (* ram_slice_end = "16" *) 
  RAM32X1S_HD348 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_16_16 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [16]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001C" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1S_HD349 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_1_1 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [1]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "20" *) 
  (* ram_slice_end = "20" *) 
  RAM32X1S_HD350 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_20_20 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [20]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "21" *) 
  (* ram_slice_end = "21" *) 
  RAM32X1S_HD351 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_21_21 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [21]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM32X1S_HD352 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_2_2 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [2]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM32X1S_HD353 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_3_3 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [3]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM32X1S_HD354 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_4_4 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [4]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000015" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM32X1S_HD355 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_8_8 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [8]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000016" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM32X1S_HD356 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_9_9 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [9]),
        .WCLK(clka),
        .WE(1'b0));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "8" *) (* BYTE_WRITE_WIDTH_B = "32" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_addr.mem" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "512" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "1" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "32" *) (* P_MIN_WIDTH_DATA_A = "32" *) (* P_MIN_WIDTH_DATA_B = "32" *) 
(* P_MIN_WIDTH_DATA_ECC = "32" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
(* P_NUM_COLS_WRITE_A = "4" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "8" *) (* P_WIDTH_COL_WRITE_B = "32" *) (* READ_DATA_WIDTH_A = "32" *) 
(* READ_DATA_WIDTH_B = "32" *) (* READ_LATENCY_A = "1" *) (* READ_LATENCY_B = "1" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "32" *) (* WRITE_DATA_WIDTH_B = "32" *) 
(* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "32" *) 
(* rstb_loop_iter = "32" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_base__parameterized1
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [3:0]wea;
  input [3:0]addra;
  input [31:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [31:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [31:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [31:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire [3:0]addra;
  wire clka;
  wire [31:0]douta;
  wire [31:0]\gen_rd_a.douta_reg0 ;
  wire rsta;

  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[0] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [0]),
        .Q(douta[0]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[10] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [10]),
        .Q(douta[10]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[11] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [11]),
        .Q(douta[11]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[12] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [12]),
        .Q(douta[12]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[13] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [13]),
        .Q(douta[13]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[14] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [14]),
        .Q(douta[14]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[15] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [15]),
        .Q(douta[15]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[16] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [16]),
        .Q(douta[16]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[17] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [17]),
        .Q(douta[17]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[18] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [18]),
        .Q(douta[18]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[19] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [19]),
        .Q(douta[19]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[1] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [1]),
        .Q(douta[1]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[20] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [20]),
        .Q(douta[20]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[21] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [21]),
        .Q(douta[21]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[22] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [22]),
        .Q(douta[22]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[23] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [23]),
        .Q(douta[23]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[24] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [24]),
        .Q(douta[24]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[25] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [25]),
        .Q(douta[25]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[26] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [26]),
        .Q(douta[26]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[27] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [27]),
        .Q(douta[27]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[28] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [28]),
        .Q(douta[28]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[29] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [29]),
        .Q(douta[29]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[2] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [2]),
        .Q(douta[2]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[30] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [30]),
        .Q(douta[30]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[31] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [31]),
        .Q(douta[31]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[3] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [3]),
        .Q(douta[3]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[4] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [4]),
        .Q(douta[4]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[5] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [5]),
        .Q(douta[5]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[6] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [6]),
        .Q(douta[6]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[7] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [7]),
        .Q(douta[7]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[8] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [8]),
        .Q(douta[8]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[9] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [9]),
        .Q(douta[9]),
        .R(rsta));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1S_HD389 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [0]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM32X1S_HD390 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_10_10 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [10]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM32X1S_HD391 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_11_11 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [11]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM32X1S_HD392 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_12_12 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [12]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "13" *) 
  (* ram_slice_end = "13" *) 
  RAM32X1S_HD393 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_13_13 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [13]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "14" *) 
  RAM32X1S_HD394 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_14_14 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [14]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "15" *) 
  (* ram_slice_end = "15" *) 
  RAM32X1S_HD395 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_15_15 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [15]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "16" *) 
  (* ram_slice_end = "16" *) 
  RAM32X1S_HD396 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_16_16 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [16]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "17" *) 
  (* ram_slice_end = "17" *) 
  RAM32X1S_HD397 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_17_17 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [17]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "18" *) 
  RAM32X1S_HD398 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_18_18 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [18]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "19" *) 
  (* ram_slice_end = "19" *) 
  RAM32X1S_HD399 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_19_19 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [19]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1S_HD400 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_1_1 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [1]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "20" *) 
  (* ram_slice_end = "20" *) 
  RAM32X1S_HD401 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_20_20 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [20]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "21" *) 
  (* ram_slice_end = "21" *) 
  RAM32X1S_HD402 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_21_21 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [21]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "22" *) 
  (* ram_slice_end = "22" *) 
  RAM32X1S_HD403 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_22_22 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [22]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "23" *) 
  (* ram_slice_end = "23" *) 
  RAM32X1S_HD404 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_23_23 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [23]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "24" *) 
  RAM32X1S_HD405 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_24_24 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [24]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "25" *) 
  (* ram_slice_end = "25" *) 
  RAM32X1S_HD406 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_25_25 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [25]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "26" *) 
  (* ram_slice_end = "26" *) 
  RAM32X1S_HD407 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_26_26 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [26]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "27" *) 
  (* ram_slice_end = "27" *) 
  RAM32X1S_HD408 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_27_27 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [27]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "28" *) 
  RAM32X1S_HD409 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_28_28 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [28]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "29" *) 
  (* ram_slice_end = "29" *) 
  RAM32X1S_HD410 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_29_29 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [29]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001A" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM32X1S_HD411 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_2_2 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [2]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "30" *) 
  RAM32X1S_HD412 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_30_30 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [30]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "31" *) 
  (* ram_slice_end = "31" *) 
  RAM32X1S_HD413 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_31_31 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [31]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001C" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM32X1S_HD414 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_3_3 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [3]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM32X1S_HD415 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_4_4 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [4]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM32X1S_HD416 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_5_5 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [5]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM32X1S_HD417 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_6_6 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [6]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM32X1S_HD418 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_7_7 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [7]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM32X1S_HD419 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_8_8 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [8]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM32X1S_HD420 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_9_9 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [9]),
        .WCLK(clka),
        .WE(1'b0));
endmodule

(* ADDR_WIDTH_A = "4" *) (* ADDR_WIDTH_B = "4" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "8" *) (* BYTE_WRITE_WIDTH_B = "32" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_data.mem" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "512" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "1" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "16" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) 
(* P_MIN_WIDTH_DATA = "32" *) (* P_MIN_WIDTH_DATA_A = "32" *) (* P_MIN_WIDTH_DATA_B = "32" *) 
(* P_MIN_WIDTH_DATA_ECC = "32" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
(* P_NUM_COLS_WRITE_A = "4" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "4" *) 
(* P_WIDTH_ADDR_READ_B = "4" *) (* P_WIDTH_ADDR_WRITE_A = "4" *) (* P_WIDTH_ADDR_WRITE_B = "4" *) 
(* P_WIDTH_COL_WRITE_A = "8" *) (* P_WIDTH_COL_WRITE_B = "32" *) (* READ_DATA_WIDTH_A = "32" *) 
(* READ_DATA_WIDTH_B = "32" *) (* READ_LATENCY_A = "1" *) (* READ_LATENCY_B = "1" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "32" *) (* WRITE_DATA_WIDTH_B = "32" *) 
(* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "soft" *) (* rsta_loop_iter = "32" *) 
(* rstb_loop_iter = "32" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_base__parameterized2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [3:0]wea;
  input [3:0]addra;
  input [31:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [31:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [3:0]addrb;
  input [31:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [31:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire [3:0]addra;
  wire clka;
  wire [31:0]douta;
  wire [31:0]\gen_rd_a.douta_reg0 ;
  wire rsta;

  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[0] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [0]),
        .Q(douta[0]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[10] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [10]),
        .Q(douta[10]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[11] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [11]),
        .Q(douta[11]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[12] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [12]),
        .Q(douta[12]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[13] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [13]),
        .Q(douta[13]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[14] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [14]),
        .Q(douta[14]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[15] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [15]),
        .Q(douta[15]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[16] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [16]),
        .Q(douta[16]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[17] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [17]),
        .Q(douta[17]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[18] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [18]),
        .Q(douta[18]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[19] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [19]),
        .Q(douta[19]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[1] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [1]),
        .Q(douta[1]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[20] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [20]),
        .Q(douta[20]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[21] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [21]),
        .Q(douta[21]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[22] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [22]),
        .Q(douta[22]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[23] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [23]),
        .Q(douta[23]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[24] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [24]),
        .Q(douta[24]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[25] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [25]),
        .Q(douta[25]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[26] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [26]),
        .Q(douta[26]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[27] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [27]),
        .Q(douta[27]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[28] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [28]),
        .Q(douta[28]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[29] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [29]),
        .Q(douta[29]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[2] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [2]),
        .Q(douta[2]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[30] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [30]),
        .Q(douta[30]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[31] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [31]),
        .Q(douta[31]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[3] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [3]),
        .Q(douta[3]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[4] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [4]),
        .Q(douta[4]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[5] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [5]),
        .Q(douta[5]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[6] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [6]),
        .Q(douta[6]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[7] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [7]),
        .Q(douta[7]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[8] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [8]),
        .Q(douta[8]),
        .R(rsta));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd_a.douta_reg_reg[9] 
       (.C(clka),
        .CE(1'b1),
        .D(\gen_rd_a.douta_reg0 [9]),
        .Q(douta[9]),
        .R(rsta));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1S_HD421 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [0]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM32X1S_HD422 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_10_10 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [10]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM32X1S_HD423 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_11_11 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [11]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM32X1S_HD424 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_12_12 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [12]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "13" *) 
  (* ram_slice_end = "13" *) 
  RAM32X1S_HD425 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_13_13 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [13]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "14" *) 
  RAM32X1S_HD426 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_14_14 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [14]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "15" *) 
  (* ram_slice_end = "15" *) 
  RAM32X1S_HD427 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_15_15 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [15]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "16" *) 
  (* ram_slice_end = "16" *) 
  RAM32X1S_HD428 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_16_16 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [16]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "17" *) 
  (* ram_slice_end = "17" *) 
  RAM32X1S_HD429 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_17_17 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [17]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "18" *) 
  RAM32X1S_HD430 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_18_18 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [18]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "19" *) 
  (* ram_slice_end = "19" *) 
  RAM32X1S_HD431 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_19_19 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [19]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1S_HD432 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_1_1 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [1]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "20" *) 
  (* ram_slice_end = "20" *) 
  RAM32X1S_HD433 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_20_20 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [20]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "21" *) 
  (* ram_slice_end = "21" *) 
  RAM32X1S_HD434 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_21_21 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [21]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "22" *) 
  (* ram_slice_end = "22" *) 
  RAM32X1S_HD435 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_22_22 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [22]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "23" *) 
  (* ram_slice_end = "23" *) 
  RAM32X1S_HD436 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_23_23 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [23]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "24" *) 
  RAM32X1S_HD437 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_24_24 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [24]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "25" *) 
  (* ram_slice_end = "25" *) 
  RAM32X1S_HD438 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_25_25 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [25]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "26" *) 
  (* ram_slice_end = "26" *) 
  RAM32X1S_HD439 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_26_26 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [26]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "27" *) 
  (* ram_slice_end = "27" *) 
  RAM32X1S_HD440 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_27_27 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [27]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "28" *) 
  (* ram_slice_end = "28" *) 
  RAM32X1S_HD441 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_28_28 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [28]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "29" *) 
  (* ram_slice_end = "29" *) 
  RAM32X1S_HD442 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_29_29 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [29]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM32X1S_HD443 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_2_2 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [2]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "30" *) 
  RAM32X1S_HD444 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_30_30 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [30]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "31" *) 
  (* ram_slice_end = "31" *) 
  RAM32X1S_HD445 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_31_31 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [31]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM32X1S_HD446 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_3_3 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [3]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM32X1S_HD447 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_4_4 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [4]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM32X1S_HD448 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_5_5 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [5]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM32X1S_HD449 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_6_6 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [6]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM32X1S_HD450 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_7_7 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [7]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h0000001F" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM32X1S_HD451 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_8_8 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [8]),
        .WCLK(clka),
        .WE(1'b0));
  (* INIT = "32'h00000010" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM32X1S_HD452 \gen_wr_a.gen_byte_narrow.for_mem_cols[1].mem_reg_0_15_9_9 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(1'b0),
        .D(1'b0),
        .O(\gen_rd_a.douta_reg0 [9]),
        .WCLK(clka),
        .WE(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_spram
   (douta,
    S,
    DI,
    \m_axi_lite_ch1_rdata[6] ,
    \m_axi_lite_ch1_rdata[3] ,
    \m_axi_lite_ch1_rdata[15] ,
    \m_axi_lite_ch1_rdata[15]_0 ,
    \m_axi_lite_ch1_rdata[12] ,
    \m_axi_lite_ch1_rdata[21] ,
    \m_axi_lite_ch1_rdata[22] ,
    \m_axi_lite_ch1_rdata[22]_0 ,
    \m_axi_lite_ch1_rdata[21]_0 ,
    \m_axi_lite_ch1_rdata[30] ,
    \m_axi_lite_ch1_rdata[30]_0 ,
    \m_axi_lite_ch1_rdata[30]_1 ,
    \m_axi_lite_ch1_rdata[27] ,
    \gen_rd_a.douta_reg_reg[21] ,
    \m_axi_lite_ch1_rdata[6]_0 ,
    \m_axi_lite_ch1_rdata[15]_1 ,
    \m_axi_lite_ch1_rdata[22]_1 ,
    \m_axi_lite_ch1_rdata[30]_2 ,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[31] ,
    addra,
    m_axi_lite_ch1_rdata,
    \rd_check2_inferred__0/i__carry__1 ,
    CO,
    cur_trn_status_reg,
    cur_trn_status_reg_0,
    cur_trn_status_reg_1,
    cur_trn_status_reg_2);
  output [31:0]douta;
  output [3:0]S;
  output [2:0]DI;
  output [3:0]\m_axi_lite_ch1_rdata[6] ;
  output [0:0]\m_axi_lite_ch1_rdata[3] ;
  output [3:0]\m_axi_lite_ch1_rdata[15] ;
  output [1:0]\m_axi_lite_ch1_rdata[15]_0 ;
  output [1:0]\m_axi_lite_ch1_rdata[12] ;
  output [3:0]\m_axi_lite_ch1_rdata[21] ;
  output [2:0]\m_axi_lite_ch1_rdata[22] ;
  output [3:0]\m_axi_lite_ch1_rdata[22]_0 ;
  output [0:0]\m_axi_lite_ch1_rdata[21]_0 ;
  output [2:0]\m_axi_lite_ch1_rdata[30] ;
  output [2:0]\m_axi_lite_ch1_rdata[30]_0 ;
  output [3:0]\m_axi_lite_ch1_rdata[30]_1 ;
  output [0:0]\m_axi_lite_ch1_rdata[27] ;
  output \gen_rd_a.douta_reg_reg[21] ;
  output [3:0]\m_axi_lite_ch1_rdata[6]_0 ;
  output [3:0]\m_axi_lite_ch1_rdata[15]_1 ;
  output [3:0]\m_axi_lite_ch1_rdata[22]_1 ;
  output [3:0]\m_axi_lite_ch1_rdata[30]_2 ;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[31] ;
  input [3:0]addra;
  input [31:0]m_axi_lite_ch1_rdata;
  input [31:0]\rd_check2_inferred__0/i__carry__1 ;
  input [0:0]CO;
  input [1:0]cur_trn_status_reg;
  input [0:0]cur_trn_status_reg_0;
  input [0:0]cur_trn_status_reg_1;
  input cur_trn_status_reg_2;

  wire [0:0]CO;
  wire [2:0]DI;
  wire [3:0]S;
  wire [3:0]addra;
  wire [1:0]cur_trn_status_reg;
  wire [0:0]cur_trn_status_reg_0;
  wire [0:0]cur_trn_status_reg_1;
  wire [31:0]douta;
  wire \gen_rd_a.douta_reg_reg[21] ;
  wire \gen_rd_a.douta_reg_reg[31] ;
  wire i__carry__0_i_5__0_n_0;
  wire i__carry__0_i_6_n_0;
  wire i__carry__0_i_7_n_0;
  wire i__carry__0_i_8__0_n_0;
  wire i__carry__1_i_4__0_n_0;
  wire i__carry__1_i_5_n_0;
  wire i__carry_i_5_n_0;
  wire i__carry_i_6_n_0;
  wire i__carry_i_7__0_n_0;
  wire i__carry_i_8_n_0;
  wire [31:0]m_axi_lite_ch1_rdata;
  wire [1:0]\m_axi_lite_ch1_rdata[12] ;
  wire [3:0]\m_axi_lite_ch1_rdata[15] ;
  wire [1:0]\m_axi_lite_ch1_rdata[15]_0 ;
  wire [3:0]\m_axi_lite_ch1_rdata[15]_1 ;
  wire [3:0]\m_axi_lite_ch1_rdata[21] ;
  wire [0:0]\m_axi_lite_ch1_rdata[21]_0 ;
  wire [2:0]\m_axi_lite_ch1_rdata[22] ;
  wire [3:0]\m_axi_lite_ch1_rdata[22]_0 ;
  wire [3:0]\m_axi_lite_ch1_rdata[22]_1 ;
  wire [0:0]\m_axi_lite_ch1_rdata[27] ;
  wire [2:0]\m_axi_lite_ch1_rdata[30] ;
  wire [2:0]\m_axi_lite_ch1_rdata[30]_0 ;
  wire [3:0]\m_axi_lite_ch1_rdata[30]_1 ;
  wire [3:0]\m_axi_lite_ch1_rdata[30]_2 ;
  wire [0:0]\m_axi_lite_ch1_rdata[3] ;
  wire [3:0]\m_axi_lite_ch1_rdata[6] ;
  wire [3:0]\m_axi_lite_ch1_rdata[6]_0 ;
  wire [31:0]\rd_check2_inferred__0/i__carry__1 ;
  wire s_axi_aclk;
  wire NLW_xpm_memory_base_inst_clkb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_ena_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_enb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regcea_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regceb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_rstb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sleep_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_addrb_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dina_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dinb_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_wea_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_web_UNCONNECTED;

  (* OPT_MODIFIED = "PROPCONST" *) 
  LUT5 #(
    .INIT(32'hCC1DFF1D)) 
    cur_trn_status_i_3
       (.I0(CO),
        .I1(cur_trn_status_reg[1]),
        .I2(cur_trn_status_reg_0),
        .I3(cur_trn_status_reg[0]),
        .I4(cur_trn_status_reg_1),
        .O(\gen_rd_a.douta_reg_reg[21] ));
  LUT4 #(
    .INIT(16'hB700)) 
    i__carry__0_i_1__1
       (.I0(m_axi_lite_ch1_rdata[21]),
        .I1(douta[21]),
        .I2(\rd_check2_inferred__0/i__carry__1 [21]),
        .I3(i__carry__0_i_5__0_n_0),
        .O(\m_axi_lite_ch1_rdata[21] [3]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__0_i_2__0
       (.I0(m_axi_lite_ch1_rdata[12]),
        .I1(douta[12]),
        .I2(\rd_check2_inferred__0/i__carry__1 [12]),
        .I3(\rd_check2_inferred__0/i__carry__1 [13]),
        .I4(m_axi_lite_ch1_rdata[13]),
        .I5(douta[13]),
        .O(\m_axi_lite_ch1_rdata[12] [1]));
  LUT4 #(
    .INIT(16'hA22A)) 
    i__carry__0_i_2__1
       (.I0(i__carry__0_i_6_n_0),
        .I1(douta[20]),
        .I2(m_axi_lite_ch1_rdata[20]),
        .I3(\rd_check2_inferred__0/i__carry__1 [20]),
        .O(\m_axi_lite_ch1_rdata[21] [2]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__0_i_3__0
       (.I0(m_axi_lite_ch1_rdata[10]),
        .I1(douta[10]),
        .I2(\rd_check2_inferred__0/i__carry__1 [10]),
        .I3(\rd_check2_inferred__0/i__carry__1 [11]),
        .I4(m_axi_lite_ch1_rdata[11]),
        .I5(douta[11]),
        .O(\m_axi_lite_ch1_rdata[12] [0]));
  LUT4 #(
    .INIT(16'hB700)) 
    i__carry__0_i_3__1
       (.I0(m_axi_lite_ch1_rdata[15]),
        .I1(douta[15]),
        .I2(\rd_check2_inferred__0/i__carry__1 [15]),
        .I3(i__carry__0_i_7_n_0),
        .O(\m_axi_lite_ch1_rdata[21] [1]));
  LUT4 #(
    .INIT(16'hA22A)) 
    i__carry__0_i_4__1
       (.I0(i__carry__0_i_8__0_n_0),
        .I1(douta[14]),
        .I2(m_axi_lite_ch1_rdata[14]),
        .I3(\rd_check2_inferred__0/i__carry__1 [14]),
        .O(\m_axi_lite_ch1_rdata[21] [0]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    i__carry__0_i_5
       (.I0(m_axi_lite_ch1_rdata[15]),
        .I1(douta[15]),
        .I2(\rd_check2_inferred__0/i__carry__1 [15]),
        .I3(douta[14]),
        .I4(m_axi_lite_ch1_rdata[14]),
        .I5(\rd_check2_inferred__0/i__carry__1 [14]),
        .O(\m_axi_lite_ch1_rdata[15] [3]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__0_i_5__0
       (.I0(m_axi_lite_ch1_rdata[22]),
        .I1(douta[22]),
        .I2(\rd_check2_inferred__0/i__carry__1 [22]),
        .I3(\rd_check2_inferred__0/i__carry__1 [23]),
        .I4(m_axi_lite_ch1_rdata[23]),
        .I5(douta[23]),
        .O(i__carry__0_i_5__0_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__0_i_6
       (.I0(m_axi_lite_ch1_rdata[18]),
        .I1(douta[18]),
        .I2(\rd_check2_inferred__0/i__carry__1 [18]),
        .I3(\rd_check2_inferred__0/i__carry__1 [19]),
        .I4(m_axi_lite_ch1_rdata[19]),
        .I5(douta[19]),
        .O(i__carry__0_i_6_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__0_i_6__0
       (.I0(m_axi_lite_ch1_rdata[12]),
        .I1(douta[12]),
        .I2(\rd_check2_inferred__0/i__carry__1 [12]),
        .I3(\rd_check2_inferred__0/i__carry__1 [13]),
        .I4(m_axi_lite_ch1_rdata[13]),
        .I5(douta[13]),
        .O(\m_axi_lite_ch1_rdata[15] [2]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__0_i_7
       (.I0(m_axi_lite_ch1_rdata[16]),
        .I1(douta[16]),
        .I2(\rd_check2_inferred__0/i__carry__1 [16]),
        .I3(\rd_check2_inferred__0/i__carry__1 [17]),
        .I4(m_axi_lite_ch1_rdata[17]),
        .I5(douta[17]),
        .O(i__carry__0_i_7_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__0_i_7__0
       (.I0(m_axi_lite_ch1_rdata[10]),
        .I1(douta[10]),
        .I2(\rd_check2_inferred__0/i__carry__1 [10]),
        .I3(\rd_check2_inferred__0/i__carry__1 [11]),
        .I4(m_axi_lite_ch1_rdata[11]),
        .I5(douta[11]),
        .O(\m_axi_lite_ch1_rdata[15] [1]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    i__carry__0_i_8
       (.I0(m_axi_lite_ch1_rdata[9]),
        .I1(douta[9]),
        .I2(\rd_check2_inferred__0/i__carry__1 [9]),
        .I3(douta[8]),
        .I4(m_axi_lite_ch1_rdata[8]),
        .I5(\rd_check2_inferred__0/i__carry__1 [8]),
        .O(\m_axi_lite_ch1_rdata[15] [0]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__0_i_8__0
       (.I0(m_axi_lite_ch1_rdata[12]),
        .I1(douta[12]),
        .I2(\rd_check2_inferred__0/i__carry__1 [12]),
        .I3(\rd_check2_inferred__0/i__carry__1 [13]),
        .I4(m_axi_lite_ch1_rdata[13]),
        .I5(douta[13]),
        .O(i__carry__0_i_8__0_n_0));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__1_i_1__0
       (.I0(m_axi_lite_ch1_rdata[22]),
        .I1(douta[22]),
        .I2(\rd_check2_inferred__0/i__carry__1 [22]),
        .I3(\rd_check2_inferred__0/i__carry__1 [23]),
        .I4(m_axi_lite_ch1_rdata[23]),
        .I5(douta[23]),
        .O(\m_axi_lite_ch1_rdata[22] [2]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__1_i_1__1
       (.I0(m_axi_lite_ch1_rdata[30]),
        .I1(douta[30]),
        .I2(\rd_check2_inferred__0/i__carry__1 [30]),
        .I3(\rd_check2_inferred__0/i__carry__1 [31]),
        .I4(m_axi_lite_ch1_rdata[31]),
        .I5(douta[31]),
        .O(\m_axi_lite_ch1_rdata[30] [2]));
  LUT4 #(
    .INIT(16'hB700)) 
    i__carry__1_i_2__1
       (.I0(m_axi_lite_ch1_rdata[27]),
        .I1(douta[27]),
        .I2(\rd_check2_inferred__0/i__carry__1 [27]),
        .I3(i__carry__1_i_4__0_n_0),
        .O(\m_axi_lite_ch1_rdata[30] [1]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__1_i_3__0
       (.I0(m_axi_lite_ch1_rdata[18]),
        .I1(douta[18]),
        .I2(\rd_check2_inferred__0/i__carry__1 [18]),
        .I3(\rd_check2_inferred__0/i__carry__1 [19]),
        .I4(m_axi_lite_ch1_rdata[19]),
        .I5(douta[19]),
        .O(\m_axi_lite_ch1_rdata[22] [1]));
  LUT4 #(
    .INIT(16'hA22A)) 
    i__carry__1_i_3__1
       (.I0(i__carry__1_i_5_n_0),
        .I1(douta[26]),
        .I2(m_axi_lite_ch1_rdata[26]),
        .I3(\rd_check2_inferred__0/i__carry__1 [26]),
        .O(\m_axi_lite_ch1_rdata[30] [0]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__1_i_4
       (.I0(m_axi_lite_ch1_rdata[16]),
        .I1(douta[16]),
        .I2(\rd_check2_inferred__0/i__carry__1 [16]),
        .I3(\rd_check2_inferred__0/i__carry__1 [17]),
        .I4(m_axi_lite_ch1_rdata[17]),
        .I5(douta[17]),
        .O(\m_axi_lite_ch1_rdata[22] [0]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__1_i_4__0
       (.I0(m_axi_lite_ch1_rdata[28]),
        .I1(douta[28]),
        .I2(\rd_check2_inferred__0/i__carry__1 [28]),
        .I3(\rd_check2_inferred__0/i__carry__1 [29]),
        .I4(m_axi_lite_ch1_rdata[29]),
        .I5(douta[29]),
        .O(i__carry__1_i_4__0_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__1_i_5
       (.I0(m_axi_lite_ch1_rdata[24]),
        .I1(douta[24]),
        .I2(\rd_check2_inferred__0/i__carry__1 [24]),
        .I3(\rd_check2_inferred__0/i__carry__1 [25]),
        .I4(m_axi_lite_ch1_rdata[25]),
        .I5(douta[25]),
        .O(i__carry__1_i_5_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__1_i_5__0
       (.I0(m_axi_lite_ch1_rdata[22]),
        .I1(douta[22]),
        .I2(\rd_check2_inferred__0/i__carry__1 [22]),
        .I3(\rd_check2_inferred__0/i__carry__1 [23]),
        .I4(m_axi_lite_ch1_rdata[23]),
        .I5(douta[23]),
        .O(\m_axi_lite_ch1_rdata[22]_0 [3]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    i__carry__1_i_6
       (.I0(m_axi_lite_ch1_rdata[21]),
        .I1(douta[21]),
        .I2(\rd_check2_inferred__0/i__carry__1 [21]),
        .I3(douta[20]),
        .I4(m_axi_lite_ch1_rdata[20]),
        .I5(\rd_check2_inferred__0/i__carry__1 [20]),
        .O(\m_axi_lite_ch1_rdata[22]_0 [2]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__1_i_7
       (.I0(m_axi_lite_ch1_rdata[18]),
        .I1(douta[18]),
        .I2(\rd_check2_inferred__0/i__carry__1 [18]),
        .I3(\rd_check2_inferred__0/i__carry__1 [19]),
        .I4(m_axi_lite_ch1_rdata[19]),
        .I5(douta[19]),
        .O(\m_axi_lite_ch1_rdata[22]_0 [1]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__1_i_8
       (.I0(m_axi_lite_ch1_rdata[16]),
        .I1(douta[16]),
        .I2(\rd_check2_inferred__0/i__carry__1 [16]),
        .I3(\rd_check2_inferred__0/i__carry__1 [17]),
        .I4(m_axi_lite_ch1_rdata[17]),
        .I5(douta[17]),
        .O(\m_axi_lite_ch1_rdata[22]_0 [0]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__2_i_1
       (.I0(m_axi_lite_ch1_rdata[30]),
        .I1(douta[30]),
        .I2(\rd_check2_inferred__0/i__carry__1 [30]),
        .I3(\rd_check2_inferred__0/i__carry__1 [31]),
        .I4(m_axi_lite_ch1_rdata[31]),
        .I5(douta[31]),
        .O(\m_axi_lite_ch1_rdata[30]_0 [2]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__2_i_2
       (.I0(m_axi_lite_ch1_rdata[28]),
        .I1(douta[28]),
        .I2(\rd_check2_inferred__0/i__carry__1 [28]),
        .I3(\rd_check2_inferred__0/i__carry__1 [29]),
        .I4(m_axi_lite_ch1_rdata[29]),
        .I5(douta[29]),
        .O(\m_axi_lite_ch1_rdata[30]_0 [1]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry__2_i_4
       (.I0(m_axi_lite_ch1_rdata[24]),
        .I1(douta[24]),
        .I2(\rd_check2_inferred__0/i__carry__1 [24]),
        .I3(\rd_check2_inferred__0/i__carry__1 [25]),
        .I4(m_axi_lite_ch1_rdata[25]),
        .I5(douta[25]),
        .O(\m_axi_lite_ch1_rdata[30]_0 [0]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__2_i_5
       (.I0(m_axi_lite_ch1_rdata[30]),
        .I1(douta[30]),
        .I2(\rd_check2_inferred__0/i__carry__1 [30]),
        .I3(\rd_check2_inferred__0/i__carry__1 [31]),
        .I4(m_axi_lite_ch1_rdata[31]),
        .I5(douta[31]),
        .O(\m_axi_lite_ch1_rdata[30]_1 [3]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__2_i_6
       (.I0(m_axi_lite_ch1_rdata[28]),
        .I1(douta[28]),
        .I2(\rd_check2_inferred__0/i__carry__1 [28]),
        .I3(\rd_check2_inferred__0/i__carry__1 [29]),
        .I4(m_axi_lite_ch1_rdata[29]),
        .I5(douta[29]),
        .O(\m_axi_lite_ch1_rdata[30]_1 [2]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    i__carry__2_i_7
       (.I0(m_axi_lite_ch1_rdata[27]),
        .I1(douta[27]),
        .I2(\rd_check2_inferred__0/i__carry__1 [27]),
        .I3(douta[26]),
        .I4(m_axi_lite_ch1_rdata[26]),
        .I5(\rd_check2_inferred__0/i__carry__1 [26]),
        .O(\m_axi_lite_ch1_rdata[30]_1 [1]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry__2_i_8
       (.I0(m_axi_lite_ch1_rdata[24]),
        .I1(douta[24]),
        .I2(\rd_check2_inferred__0/i__carry__1 [24]),
        .I3(\rd_check2_inferred__0/i__carry__1 [25]),
        .I4(m_axi_lite_ch1_rdata[25]),
        .I5(douta[25]),
        .O(\m_axi_lite_ch1_rdata[30]_1 [0]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry_i_1__0
       (.I0(m_axi_lite_ch1_rdata[6]),
        .I1(douta[6]),
        .I2(\rd_check2_inferred__0/i__carry__1 [6]),
        .I3(\rd_check2_inferred__0/i__carry__1 [7]),
        .I4(m_axi_lite_ch1_rdata[7]),
        .I5(douta[7]),
        .O(DI[2]));
  LUT4 #(
    .INIT(16'hB700)) 
    i__carry_i_1__1
       (.I0(m_axi_lite_ch1_rdata[9]),
        .I1(douta[9]),
        .I2(\rd_check2_inferred__0/i__carry__1 [9]),
        .I3(i__carry_i_5_n_0),
        .O(S[3]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry_i_2__0
       (.I0(m_axi_lite_ch1_rdata[4]),
        .I1(douta[4]),
        .I2(\rd_check2_inferred__0/i__carry__1 [4]),
        .I3(\rd_check2_inferred__0/i__carry__1 [5]),
        .I4(m_axi_lite_ch1_rdata[5]),
        .I5(douta[5]),
        .O(DI[1]));
  LUT4 #(
    .INIT(16'hA22A)) 
    i__carry_i_2__1
       (.I0(i__carry_i_6_n_0),
        .I1(douta[8]),
        .I2(m_axi_lite_ch1_rdata[8]),
        .I3(\rd_check2_inferred__0/i__carry__1 [8]),
        .O(S[2]));
  LUT4 #(
    .INIT(16'hB700)) 
    i__carry_i_3__1
       (.I0(m_axi_lite_ch1_rdata[3]),
        .I1(douta[3]),
        .I2(\rd_check2_inferred__0/i__carry__1 [3]),
        .I3(i__carry_i_7__0_n_0),
        .O(S[1]));
  LUT4 #(
    .INIT(16'hA22A)) 
    i__carry_i_4__0
       (.I0(i__carry_i_8_n_0),
        .I1(douta[2]),
        .I2(m_axi_lite_ch1_rdata[2]),
        .I3(\rd_check2_inferred__0/i__carry__1 [2]),
        .O(S[0]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    i__carry_i_4__1
       (.I0(m_axi_lite_ch1_rdata[0]),
        .I1(douta[0]),
        .I2(\rd_check2_inferred__0/i__carry__1 [0]),
        .I3(\rd_check2_inferred__0/i__carry__1 [1]),
        .I4(m_axi_lite_ch1_rdata[1]),
        .I5(douta[1]),
        .O(DI[0]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry_i_5
       (.I0(m_axi_lite_ch1_rdata[10]),
        .I1(douta[10]),
        .I2(\rd_check2_inferred__0/i__carry__1 [10]),
        .I3(\rd_check2_inferred__0/i__carry__1 [11]),
        .I4(m_axi_lite_ch1_rdata[11]),
        .I5(douta[11]),
        .O(i__carry_i_5_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry_i_5__0
       (.I0(m_axi_lite_ch1_rdata[6]),
        .I1(douta[6]),
        .I2(\rd_check2_inferred__0/i__carry__1 [6]),
        .I3(\rd_check2_inferred__0/i__carry__1 [7]),
        .I4(m_axi_lite_ch1_rdata[7]),
        .I5(douta[7]),
        .O(\m_axi_lite_ch1_rdata[6] [3]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry_i_6
       (.I0(m_axi_lite_ch1_rdata[6]),
        .I1(douta[6]),
        .I2(\rd_check2_inferred__0/i__carry__1 [6]),
        .I3(\rd_check2_inferred__0/i__carry__1 [7]),
        .I4(m_axi_lite_ch1_rdata[7]),
        .I5(douta[7]),
        .O(i__carry_i_6_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry_i_6__0
       (.I0(m_axi_lite_ch1_rdata[4]),
        .I1(douta[4]),
        .I2(\rd_check2_inferred__0/i__carry__1 [4]),
        .I3(\rd_check2_inferred__0/i__carry__1 [5]),
        .I4(m_axi_lite_ch1_rdata[5]),
        .I5(douta[5]),
        .O(\m_axi_lite_ch1_rdata[6] [2]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    i__carry_i_7
       (.I0(m_axi_lite_ch1_rdata[3]),
        .I1(douta[3]),
        .I2(\rd_check2_inferred__0/i__carry__1 [3]),
        .I3(douta[2]),
        .I4(m_axi_lite_ch1_rdata[2]),
        .I5(\rd_check2_inferred__0/i__carry__1 [2]),
        .O(\m_axi_lite_ch1_rdata[6] [1]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry_i_7__0
       (.I0(m_axi_lite_ch1_rdata[4]),
        .I1(douta[4]),
        .I2(\rd_check2_inferred__0/i__carry__1 [4]),
        .I3(\rd_check2_inferred__0/i__carry__1 [5]),
        .I4(m_axi_lite_ch1_rdata[5]),
        .I5(douta[5]),
        .O(i__carry_i_7__0_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry_i_8
       (.I0(m_axi_lite_ch1_rdata[0]),
        .I1(douta[0]),
        .I2(\rd_check2_inferred__0/i__carry__1 [0]),
        .I3(\rd_check2_inferred__0/i__carry__1 [1]),
        .I4(m_axi_lite_ch1_rdata[1]),
        .I5(douta[1]),
        .O(i__carry_i_8_n_0));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    i__carry_i_8__0
       (.I0(m_axi_lite_ch1_rdata[0]),
        .I1(douta[0]),
        .I2(\rd_check2_inferred__0/i__carry__1 [0]),
        .I3(\rd_check2_inferred__0/i__carry__1 [1]),
        .I4(m_axi_lite_ch1_rdata[1]),
        .I5(douta[1]),
        .O(\m_axi_lite_ch1_rdata[6] [0]));
  LUT6 #(
    .INIT(64'h4040F74040404040)) 
    rd_check2_carry__0_i_1
       (.I0(m_axi_lite_ch1_rdata[15]),
        .I1(douta[15]),
        .I2(\rd_check2_inferred__0/i__carry__1 [15]),
        .I3(\rd_check2_inferred__0/i__carry__1 [14]),
        .I4(m_axi_lite_ch1_rdata[14]),
        .I5(douta[14]),
        .O(\m_axi_lite_ch1_rdata[15]_0 [1]));
  LUT6 #(
    .INIT(64'h4040F74040404040)) 
    rd_check2_carry__0_i_4
       (.I0(m_axi_lite_ch1_rdata[9]),
        .I1(douta[9]),
        .I2(\rd_check2_inferred__0/i__carry__1 [9]),
        .I3(\rd_check2_inferred__0/i__carry__1 [8]),
        .I4(m_axi_lite_ch1_rdata[8]),
        .I5(douta[8]),
        .O(\m_axi_lite_ch1_rdata[15]_0 [0]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    rd_check2_carry__0_i_5
       (.I0(m_axi_lite_ch1_rdata[15]),
        .I1(douta[15]),
        .I2(\rd_check2_inferred__0/i__carry__1 [15]),
        .I3(douta[14]),
        .I4(m_axi_lite_ch1_rdata[14]),
        .I5(\rd_check2_inferred__0/i__carry__1 [14]),
        .O(\m_axi_lite_ch1_rdata[15]_1 [3]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__0_i_6
       (.I0(m_axi_lite_ch1_rdata[12]),
        .I1(douta[12]),
        .I2(\rd_check2_inferred__0/i__carry__1 [12]),
        .I3(\rd_check2_inferred__0/i__carry__1 [13]),
        .I4(m_axi_lite_ch1_rdata[13]),
        .I5(douta[13]),
        .O(\m_axi_lite_ch1_rdata[15]_1 [2]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__0_i_7
       (.I0(m_axi_lite_ch1_rdata[10]),
        .I1(douta[10]),
        .I2(\rd_check2_inferred__0/i__carry__1 [10]),
        .I3(\rd_check2_inferred__0/i__carry__1 [11]),
        .I4(m_axi_lite_ch1_rdata[11]),
        .I5(douta[11]),
        .O(\m_axi_lite_ch1_rdata[15]_1 [1]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    rd_check2_carry__0_i_8
       (.I0(m_axi_lite_ch1_rdata[9]),
        .I1(douta[9]),
        .I2(\rd_check2_inferred__0/i__carry__1 [9]),
        .I3(douta[8]),
        .I4(m_axi_lite_ch1_rdata[8]),
        .I5(\rd_check2_inferred__0/i__carry__1 [8]),
        .O(\m_axi_lite_ch1_rdata[15]_1 [0]));
  LUT6 #(
    .INIT(64'h4040F74040404040)) 
    rd_check2_carry__1_i_2
       (.I0(m_axi_lite_ch1_rdata[21]),
        .I1(douta[21]),
        .I2(\rd_check2_inferred__0/i__carry__1 [21]),
        .I3(\rd_check2_inferred__0/i__carry__1 [20]),
        .I4(m_axi_lite_ch1_rdata[20]),
        .I5(douta[20]),
        .O(\m_axi_lite_ch1_rdata[21]_0 ));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__1_i_5
       (.I0(m_axi_lite_ch1_rdata[22]),
        .I1(douta[22]),
        .I2(\rd_check2_inferred__0/i__carry__1 [22]),
        .I3(\rd_check2_inferred__0/i__carry__1 [23]),
        .I4(m_axi_lite_ch1_rdata[23]),
        .I5(douta[23]),
        .O(\m_axi_lite_ch1_rdata[22]_1 [3]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    rd_check2_carry__1_i_6
       (.I0(m_axi_lite_ch1_rdata[21]),
        .I1(douta[21]),
        .I2(\rd_check2_inferred__0/i__carry__1 [21]),
        .I3(douta[20]),
        .I4(m_axi_lite_ch1_rdata[20]),
        .I5(\rd_check2_inferred__0/i__carry__1 [20]),
        .O(\m_axi_lite_ch1_rdata[22]_1 [2]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__1_i_7
       (.I0(m_axi_lite_ch1_rdata[18]),
        .I1(douta[18]),
        .I2(\rd_check2_inferred__0/i__carry__1 [18]),
        .I3(\rd_check2_inferred__0/i__carry__1 [19]),
        .I4(m_axi_lite_ch1_rdata[19]),
        .I5(douta[19]),
        .O(\m_axi_lite_ch1_rdata[22]_1 [1]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__1_i_8
       (.I0(m_axi_lite_ch1_rdata[16]),
        .I1(douta[16]),
        .I2(\rd_check2_inferred__0/i__carry__1 [16]),
        .I3(\rd_check2_inferred__0/i__carry__1 [17]),
        .I4(m_axi_lite_ch1_rdata[17]),
        .I5(douta[17]),
        .O(\m_axi_lite_ch1_rdata[22]_1 [0]));
  LUT6 #(
    .INIT(64'h4040F74040404040)) 
    rd_check2_carry__2_i_3
       (.I0(m_axi_lite_ch1_rdata[27]),
        .I1(douta[27]),
        .I2(\rd_check2_inferred__0/i__carry__1 [27]),
        .I3(\rd_check2_inferred__0/i__carry__1 [26]),
        .I4(m_axi_lite_ch1_rdata[26]),
        .I5(douta[26]),
        .O(\m_axi_lite_ch1_rdata[27] ));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__2_i_5
       (.I0(m_axi_lite_ch1_rdata[30]),
        .I1(douta[30]),
        .I2(\rd_check2_inferred__0/i__carry__1 [30]),
        .I3(\rd_check2_inferred__0/i__carry__1 [31]),
        .I4(m_axi_lite_ch1_rdata[31]),
        .I5(douta[31]),
        .O(\m_axi_lite_ch1_rdata[30]_2 [3]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__2_i_6
       (.I0(m_axi_lite_ch1_rdata[28]),
        .I1(douta[28]),
        .I2(\rd_check2_inferred__0/i__carry__1 [28]),
        .I3(\rd_check2_inferred__0/i__carry__1 [29]),
        .I4(m_axi_lite_ch1_rdata[29]),
        .I5(douta[29]),
        .O(\m_axi_lite_ch1_rdata[30]_2 [2]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    rd_check2_carry__2_i_7
       (.I0(m_axi_lite_ch1_rdata[27]),
        .I1(douta[27]),
        .I2(\rd_check2_inferred__0/i__carry__1 [27]),
        .I3(douta[26]),
        .I4(m_axi_lite_ch1_rdata[26]),
        .I5(\rd_check2_inferred__0/i__carry__1 [26]),
        .O(\m_axi_lite_ch1_rdata[30]_2 [1]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry__2_i_8
       (.I0(m_axi_lite_ch1_rdata[24]),
        .I1(douta[24]),
        .I2(\rd_check2_inferred__0/i__carry__1 [24]),
        .I3(\rd_check2_inferred__0/i__carry__1 [25]),
        .I4(m_axi_lite_ch1_rdata[25]),
        .I5(douta[25]),
        .O(\m_axi_lite_ch1_rdata[30]_2 [0]));
  LUT6 #(
    .INIT(64'h4040F74040404040)) 
    rd_check2_carry_i_3
       (.I0(m_axi_lite_ch1_rdata[3]),
        .I1(douta[3]),
        .I2(\rd_check2_inferred__0/i__carry__1 [3]),
        .I3(\rd_check2_inferred__0/i__carry__1 [2]),
        .I4(m_axi_lite_ch1_rdata[2]),
        .I5(douta[2]),
        .O(\m_axi_lite_ch1_rdata[3] ));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry_i_5
       (.I0(m_axi_lite_ch1_rdata[6]),
        .I1(douta[6]),
        .I2(\rd_check2_inferred__0/i__carry__1 [6]),
        .I3(\rd_check2_inferred__0/i__carry__1 [7]),
        .I4(m_axi_lite_ch1_rdata[7]),
        .I5(douta[7]),
        .O(\m_axi_lite_ch1_rdata[6]_0 [3]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry_i_6
       (.I0(m_axi_lite_ch1_rdata[4]),
        .I1(douta[4]),
        .I2(\rd_check2_inferred__0/i__carry__1 [4]),
        .I3(\rd_check2_inferred__0/i__carry__1 [5]),
        .I4(m_axi_lite_ch1_rdata[5]),
        .I5(douta[5]),
        .O(\m_axi_lite_ch1_rdata[6]_0 [2]));
  LUT6 #(
    .INIT(64'hB7B700B700B7B7B7)) 
    rd_check2_carry_i_7
       (.I0(m_axi_lite_ch1_rdata[3]),
        .I1(douta[3]),
        .I2(\rd_check2_inferred__0/i__carry__1 [3]),
        .I3(douta[2]),
        .I4(m_axi_lite_ch1_rdata[2]),
        .I5(\rd_check2_inferred__0/i__carry__1 [2]),
        .O(\m_axi_lite_ch1_rdata[6]_0 [1]));
  LUT6 #(
    .INIT(64'hB70000B7B7B7B7B7)) 
    rd_check2_carry_i_8
       (.I0(m_axi_lite_ch1_rdata[0]),
        .I1(douta[0]),
        .I2(\rd_check2_inferred__0/i__carry__1 [0]),
        .I3(\rd_check2_inferred__0/i__carry__1 [1]),
        .I4(m_axi_lite_ch1_rdata[1]),
        .I5(douta[1]),
        .O(\m_axi_lite_ch1_rdata[6]_0 [0]));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "8" *) 
  (* BYTE_WRITE_WIDTH_B = "32" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_mask.mem" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "512" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "1" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "32" *) 
  (* P_MIN_WIDTH_DATA_A = "32" *) 
  (* P_MIN_WIDTH_DATA_B = "32" *) 
  (* P_MIN_WIDTH_DATA_ECC = "32" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
  (* P_NUM_COLS_WRITE_A = "4" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "8" *) 
  (* P_WIDTH_COL_WRITE_B = "32" *) 
  (* READ_DATA_WIDTH_A = "32" *) 
  (* READ_DATA_WIDTH_B = "32" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "32" *) 
  (* WRITE_DATA_WIDTH_B = "32" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "32" *) 
  (* rstb_loop_iter = "32" *) 
  design_1_axi_traffic_gen_0_0_xpm_memory_base xpm_memory_base_inst
       (.addra(addra),
        .addrb(NLW_xpm_memory_base_inst_addrb_UNCONNECTED[3:0]),
        .clka(s_axi_aclk),
        .clkb(NLW_xpm_memory_base_inst_clkb_UNCONNECTED),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(NLW_xpm_memory_base_inst_dina_UNCONNECTED[31:0]),
        .dinb(NLW_xpm_memory_base_inst_dinb_UNCONNECTED[31:0]),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[31:0]),
        .ena(NLW_xpm_memory_base_inst_ena_UNCONNECTED),
        .enb(NLW_xpm_memory_base_inst_enb_UNCONNECTED),
        .injectdbiterra(NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED),
        .injectdbiterrb(NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED),
        .injectsbiterra(NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED),
        .injectsbiterrb(NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED),
        .regcea(NLW_xpm_memory_base_inst_regcea_UNCONNECTED),
        .regceb(NLW_xpm_memory_base_inst_regceb_UNCONNECTED),
        .rsta(\gen_rd_a.douta_reg_reg[31] ),
        .rstb(NLW_xpm_memory_base_inst_rstb_UNCONNECTED),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(NLW_xpm_memory_base_inst_sleep_UNCONNECTED),
        .wea(NLW_xpm_memory_base_inst_wea_UNCONNECTED[3:0]),
        .web(NLW_xpm_memory_base_inst_web_UNCONNECTED[0]));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_spram__parameterized0
   (douta,
    D,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[21] ,
    addra,
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] );
  output [3:0]douta;
  output [7:0]D;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[21] ;
  input [3:0]addra;
  input \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ;

  wire \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ;
  wire [7:0]D;
  wire [3:0]addra;
  wire [3:0]douta;
  wire \gen_rd_a.douta_reg_reg[21] ;
  wire [15:0]rom_ctrl;
  wire s_axi_aclk;
  wire NLW_xpm_memory_base_inst_clkb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_ena_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_enb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regcea_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regceb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_rstb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sleep_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_addrb_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dina_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dinb_UNCONNECTED;
  wire [31:5]NLW_xpm_memory_base_inst_douta_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_wea_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_web_UNCONNECTED;

  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr[0]_i_1 
       (.I0(rom_ctrl[0]),
        .I1(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ),
        .I2(rom_ctrl[8]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr[1]_i_1 
       (.I0(rom_ctrl[1]),
        .I1(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ),
        .I2(rom_ctrl[9]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr[2]_i_1 
       (.I0(rom_ctrl[2]),
        .I1(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ),
        .I2(rom_ctrl[10]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr[3]_i_1 
       (.I0(rom_ctrl[3]),
        .I1(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ),
        .I2(rom_ctrl[11]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ATG_SYSTEST_NXT_PTR.nxt_rom_ptr[4]_i_1 
       (.I0(rom_ctrl[4]),
        .I1(\ATG_SYSTEST_NXT_PTR.nxt_rom_ptr_reg[0] ),
        .I2(rom_ctrl[12]),
        .O(D[4]));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "8" *) 
  (* BYTE_WRITE_WIDTH_B = "32" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_ctrl.mem" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "512" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "1" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "32" *) 
  (* P_MIN_WIDTH_DATA_A = "32" *) 
  (* P_MIN_WIDTH_DATA_B = "32" *) 
  (* P_MIN_WIDTH_DATA_ECC = "32" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
  (* P_NUM_COLS_WRITE_A = "4" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "8" *) 
  (* P_WIDTH_COL_WRITE_B = "32" *) 
  (* READ_DATA_WIDTH_A = "32" *) 
  (* READ_DATA_WIDTH_B = "32" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "32" *) 
  (* WRITE_DATA_WIDTH_B = "32" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "32" *) 
  (* rstb_loop_iter = "32" *) 
  design_1_axi_traffic_gen_0_0_xpm_memory_base__parameterized0 xpm_memory_base_inst
       (.addra(addra),
        .addrb(NLW_xpm_memory_base_inst_addrb_UNCONNECTED[3:0]),
        .clka(s_axi_aclk),
        .clkb(NLW_xpm_memory_base_inst_clkb_UNCONNECTED),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(NLW_xpm_memory_base_inst_dina_UNCONNECTED[31:0]),
        .dinb(NLW_xpm_memory_base_inst_dinb_UNCONNECTED[31:0]),
        .douta({NLW_xpm_memory_base_inst_douta_UNCONNECTED[31:22],douta[3:2],NLW_xpm_memory_base_inst_douta_UNCONNECTED[19:17],douta[0],NLW_xpm_memory_base_inst_douta_UNCONNECTED[15:13],rom_ctrl[12:8],NLW_xpm_memory_base_inst_douta_UNCONNECTED[7:5],rom_ctrl[4:0]}),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[31:0]),
        .ena(NLW_xpm_memory_base_inst_ena_UNCONNECTED),
        .enb(NLW_xpm_memory_base_inst_enb_UNCONNECTED),
        .injectdbiterra(NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED),
        .injectdbiterrb(NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED),
        .injectsbiterra(NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED),
        .injectsbiterrb(NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED),
        .regcea(NLW_xpm_memory_base_inst_regcea_UNCONNECTED),
        .regceb(NLW_xpm_memory_base_inst_regceb_UNCONNECTED),
        .rsta(\gen_rd_a.douta_reg_reg[21] ),
        .rstb(NLW_xpm_memory_base_inst_rstb_UNCONNECTED),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(NLW_xpm_memory_base_inst_sleep_UNCONNECTED),
        .wea(NLW_xpm_memory_base_inst_wea_UNCONNECTED[3:0]),
        .web(NLW_xpm_memory_base_inst_web_UNCONNECTED[0]));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_spram__parameterized1
   (douta,
    \gen_rd_a.douta_reg_reg[16] ,
    \gen_rd_a.douta_reg_reg[16]_0 ,
    rom_eof0,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[31] ,
    addra,
    bready_m_reg,
    rom_eof_reg);
  output [31:0]douta;
  output \gen_rd_a.douta_reg_reg[16] ;
  output \gen_rd_a.douta_reg_reg[16]_0 ;
  output rom_eof0;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[31] ;
  input [3:0]addra;
  input [0:0]bready_m_reg;
  input rom_eof_reg;

  wire [3:0]addra;
  wire \awaddr_m[31]_i_10_n_0 ;
  wire \awaddr_m[31]_i_11_n_0 ;
  wire \awaddr_m[31]_i_12_n_0 ;
  wire \awaddr_m[31]_i_13_n_0 ;
  wire \awaddr_m[31]_i_6_n_0 ;
  wire \awaddr_m[31]_i_7_n_0 ;
  wire \awaddr_m[31]_i_8_n_0 ;
  wire \awaddr_m[31]_i_9_n_0 ;
  wire [0:0]bready_m_reg;
  wire [31:0]douta;
  wire \gen_rd_a.douta_reg_reg[16] ;
  wire \gen_rd_a.douta_reg_reg[16]_0 ;
  wire \gen_rd_a.douta_reg_reg[31] ;
  wire rom_eof0;
  wire rom_eof_reg;
  wire s_axi_aclk;
  wire NLW_xpm_memory_base_inst_clkb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_ena_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_enb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regcea_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regceb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_rstb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sleep_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_addrb_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dina_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dinb_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_wea_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_web_UNCONNECTED;

  LUT6 #(
    .INIT(64'h0000000055555545)) 
    arvalid_m_i_2
       (.I0(bready_m_reg),
        .I1(\awaddr_m[31]_i_9_n_0 ),
        .I2(\awaddr_m[31]_i_8_n_0 ),
        .I3(\awaddr_m[31]_i_7_n_0 ),
        .I4(\awaddr_m[31]_i_6_n_0 ),
        .I5(rom_eof_reg),
        .O(\gen_rd_a.douta_reg_reg[16] ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \awaddr_m[31]_i_10 
       (.I0(douta[17]),
        .I1(douta[29]),
        .I2(douta[5]),
        .I3(douta[9]),
        .O(\awaddr_m[31]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \awaddr_m[31]_i_11 
       (.I0(douta[20]),
        .I1(douta[24]),
        .I2(douta[0]),
        .I3(douta[12]),
        .O(\awaddr_m[31]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \awaddr_m[31]_i_12 
       (.I0(douta[23]),
        .I1(douta[27]),
        .I2(douta[3]),
        .I3(douta[15]),
        .O(\awaddr_m[31]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \awaddr_m[31]_i_13 
       (.I0(douta[18]),
        .I1(douta[30]),
        .I2(douta[6]),
        .I3(douta[10]),
        .O(\awaddr_m[31]_i_13_n_0 ));
  LUT5 #(
    .INIT(32'hAAAAABAA)) 
    \awaddr_m[31]_i_3 
       (.I0(rom_eof_reg),
        .I1(\awaddr_m[31]_i_6_n_0 ),
        .I2(\awaddr_m[31]_i_7_n_0 ),
        .I3(\awaddr_m[31]_i_8_n_0 ),
        .I4(\awaddr_m[31]_i_9_n_0 ),
        .O(rom_eof0));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    \awaddr_m[31]_i_6 
       (.I0(douta[13]),
        .I1(douta[1]),
        .I2(douta[25]),
        .I3(douta[21]),
        .I4(\awaddr_m[31]_i_10_n_0 ),
        .O(\awaddr_m[31]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    \awaddr_m[31]_i_7 
       (.I0(douta[8]),
        .I1(douta[4]),
        .I2(douta[28]),
        .I3(douta[16]),
        .I4(\awaddr_m[31]_i_11_n_0 ),
        .O(\awaddr_m[31]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \awaddr_m[31]_i_8 
       (.I0(douta[11]),
        .I1(douta[7]),
        .I2(douta[31]),
        .I3(douta[19]),
        .I4(\awaddr_m[31]_i_12_n_0 ),
        .O(\awaddr_m[31]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    \awaddr_m[31]_i_9 
       (.I0(douta[14]),
        .I1(douta[2]),
        .I2(douta[26]),
        .I3(douta[22]),
        .I4(\awaddr_m[31]_i_13_n_0 ),
        .O(\awaddr_m[31]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAA8A)) 
    wvalid_m_i_2
       (.I0(bready_m_reg),
        .I1(\awaddr_m[31]_i_9_n_0 ),
        .I2(\awaddr_m[31]_i_8_n_0 ),
        .I3(\awaddr_m[31]_i_7_n_0 ),
        .I4(\awaddr_m[31]_i_6_n_0 ),
        .I5(rom_eof_reg),
        .O(\gen_rd_a.douta_reg_reg[16]_0 ));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "8" *) 
  (* BYTE_WRITE_WIDTH_B = "32" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_addr.mem" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "512" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "1" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "32" *) 
  (* P_MIN_WIDTH_DATA_A = "32" *) 
  (* P_MIN_WIDTH_DATA_B = "32" *) 
  (* P_MIN_WIDTH_DATA_ECC = "32" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
  (* P_NUM_COLS_WRITE_A = "4" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "8" *) 
  (* P_WIDTH_COL_WRITE_B = "32" *) 
  (* READ_DATA_WIDTH_A = "32" *) 
  (* READ_DATA_WIDTH_B = "32" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "32" *) 
  (* WRITE_DATA_WIDTH_B = "32" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "32" *) 
  (* rstb_loop_iter = "32" *) 
  design_1_axi_traffic_gen_0_0_xpm_memory_base__parameterized1 xpm_memory_base_inst
       (.addra(addra),
        .addrb(NLW_xpm_memory_base_inst_addrb_UNCONNECTED[3:0]),
        .clka(s_axi_aclk),
        .clkb(NLW_xpm_memory_base_inst_clkb_UNCONNECTED),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(NLW_xpm_memory_base_inst_dina_UNCONNECTED[31:0]),
        .dinb(NLW_xpm_memory_base_inst_dinb_UNCONNECTED[31:0]),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[31:0]),
        .ena(NLW_xpm_memory_base_inst_ena_UNCONNECTED),
        .enb(NLW_xpm_memory_base_inst_enb_UNCONNECTED),
        .injectdbiterra(NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED),
        .injectdbiterrb(NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED),
        .injectsbiterra(NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED),
        .injectsbiterrb(NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED),
        .regcea(NLW_xpm_memory_base_inst_regcea_UNCONNECTED),
        .regceb(NLW_xpm_memory_base_inst_regceb_UNCONNECTED),
        .rsta(\gen_rd_a.douta_reg_reg[31] ),
        .rstb(NLW_xpm_memory_base_inst_rstb_UNCONNECTED),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(NLW_xpm_memory_base_inst_sleep_UNCONNECTED),
        .wea(NLW_xpm_memory_base_inst_wea_UNCONNECTED[3:0]),
        .web(NLW_xpm_memory_base_inst_web_UNCONNECTED[0]));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module design_1_axi_traffic_gen_0_0_xpm_memory_spram__parameterized2
   (douta,
    DI,
    \gen_rd_a.douta_reg_reg[3] ,
    \gen_rd_a.douta_reg_reg[15] ,
    \gen_rd_a.douta_reg_reg[12] ,
    \gen_rd_a.douta_reg_reg[22] ,
    \gen_rd_a.douta_reg_reg[21] ,
    \gen_rd_a.douta_reg_reg[30] ,
    \gen_rd_a.douta_reg_reg[27] ,
    s_axi_aclk,
    \gen_rd_a.douta_reg_reg[31] ,
    addra,
    rd_check2_carry__2,
    m_axi_lite_ch1_rdata);
  output [31:0]douta;
  output [2:0]DI;
  output [0:0]\gen_rd_a.douta_reg_reg[3] ;
  output [1:0]\gen_rd_a.douta_reg_reg[15] ;
  output [1:0]\gen_rd_a.douta_reg_reg[12] ;
  output [2:0]\gen_rd_a.douta_reg_reg[22] ;
  output [0:0]\gen_rd_a.douta_reg_reg[21] ;
  output [2:0]\gen_rd_a.douta_reg_reg[30] ;
  output [0:0]\gen_rd_a.douta_reg_reg[27] ;
  input s_axi_aclk;
  input \gen_rd_a.douta_reg_reg[31] ;
  input [3:0]addra;
  input [31:0]rd_check2_carry__2;
  input [31:0]m_axi_lite_ch1_rdata;

  wire [2:0]DI;
  wire [3:0]addra;
  wire [31:0]douta;
  wire [1:0]\gen_rd_a.douta_reg_reg[12] ;
  wire [1:0]\gen_rd_a.douta_reg_reg[15] ;
  wire [0:0]\gen_rd_a.douta_reg_reg[21] ;
  wire [2:0]\gen_rd_a.douta_reg_reg[22] ;
  wire [0:0]\gen_rd_a.douta_reg_reg[27] ;
  wire [2:0]\gen_rd_a.douta_reg_reg[30] ;
  wire \gen_rd_a.douta_reg_reg[31] ;
  wire [0:0]\gen_rd_a.douta_reg_reg[3] ;
  wire [31:0]m_axi_lite_ch1_rdata;
  wire [31:0]rd_check2_carry__2;
  wire s_axi_aclk;
  wire NLW_xpm_memory_base_inst_clkb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_ena_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_enb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regcea_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_regceb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_rstb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sleep_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_addrb_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dina_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_dinb_UNCONNECTED;
  wire [31:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;
  wire [3:0]NLW_xpm_memory_base_inst_wea_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_web_UNCONNECTED;

  LUT6 #(
    .INIT(64'h40404040DF404040)) 
    i__carry__0_i_1__0
       (.I0(douta[15]),
        .I1(m_axi_lite_ch1_rdata[15]),
        .I2(rd_check2_carry__2[15]),
        .I3(m_axi_lite_ch1_rdata[14]),
        .I4(rd_check2_carry__2[14]),
        .I5(douta[14]),
        .O(\gen_rd_a.douta_reg_reg[15] [1]));
  LUT6 #(
    .INIT(64'h40404040DF404040)) 
    i__carry__0_i_4__0
       (.I0(douta[9]),
        .I1(m_axi_lite_ch1_rdata[9]),
        .I2(rd_check2_carry__2[9]),
        .I3(m_axi_lite_ch1_rdata[8]),
        .I4(rd_check2_carry__2[8]),
        .I5(douta[8]),
        .O(\gen_rd_a.douta_reg_reg[15] [0]));
  LUT6 #(
    .INIT(64'h40404040DF404040)) 
    i__carry__1_i_2__0
       (.I0(douta[21]),
        .I1(m_axi_lite_ch1_rdata[21]),
        .I2(rd_check2_carry__2[21]),
        .I3(m_axi_lite_ch1_rdata[20]),
        .I4(rd_check2_carry__2[20]),
        .I5(douta[20]),
        .O(\gen_rd_a.douta_reg_reg[21] ));
  LUT6 #(
    .INIT(64'h40404040DF404040)) 
    i__carry__2_i_3
       (.I0(douta[27]),
        .I1(m_axi_lite_ch1_rdata[27]),
        .I2(rd_check2_carry__2[27]),
        .I3(m_axi_lite_ch1_rdata[26]),
        .I4(rd_check2_carry__2[26]),
        .I5(douta[26]),
        .O(\gen_rd_a.douta_reg_reg[27] ));
  LUT6 #(
    .INIT(64'h40404040DF404040)) 
    i__carry_i_3__0
       (.I0(douta[3]),
        .I1(m_axi_lite_ch1_rdata[3]),
        .I2(rd_check2_carry__2[3]),
        .I3(m_axi_lite_ch1_rdata[2]),
        .I4(rd_check2_carry__2[2]),
        .I5(douta[2]),
        .O(\gen_rd_a.douta_reg_reg[3] ));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__0_i_2
       (.I0(douta[12]),
        .I1(rd_check2_carry__2[12]),
        .I2(m_axi_lite_ch1_rdata[12]),
        .I3(m_axi_lite_ch1_rdata[13]),
        .I4(douta[13]),
        .I5(rd_check2_carry__2[13]),
        .O(\gen_rd_a.douta_reg_reg[12] [1]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__0_i_3
       (.I0(douta[10]),
        .I1(rd_check2_carry__2[10]),
        .I2(m_axi_lite_ch1_rdata[10]),
        .I3(m_axi_lite_ch1_rdata[11]),
        .I4(douta[11]),
        .I5(rd_check2_carry__2[11]),
        .O(\gen_rd_a.douta_reg_reg[12] [0]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__1_i_1
       (.I0(douta[22]),
        .I1(rd_check2_carry__2[22]),
        .I2(m_axi_lite_ch1_rdata[22]),
        .I3(m_axi_lite_ch1_rdata[23]),
        .I4(douta[23]),
        .I5(rd_check2_carry__2[23]),
        .O(\gen_rd_a.douta_reg_reg[22] [2]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__1_i_3
       (.I0(douta[18]),
        .I1(rd_check2_carry__2[18]),
        .I2(m_axi_lite_ch1_rdata[18]),
        .I3(m_axi_lite_ch1_rdata[19]),
        .I4(douta[19]),
        .I5(rd_check2_carry__2[19]),
        .O(\gen_rd_a.douta_reg_reg[22] [1]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__1_i_4
       (.I0(douta[16]),
        .I1(rd_check2_carry__2[16]),
        .I2(m_axi_lite_ch1_rdata[16]),
        .I3(m_axi_lite_ch1_rdata[17]),
        .I4(douta[17]),
        .I5(rd_check2_carry__2[17]),
        .O(\gen_rd_a.douta_reg_reg[22] [0]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__2_i_1
       (.I0(douta[30]),
        .I1(rd_check2_carry__2[30]),
        .I2(m_axi_lite_ch1_rdata[30]),
        .I3(m_axi_lite_ch1_rdata[31]),
        .I4(douta[31]),
        .I5(rd_check2_carry__2[31]),
        .O(\gen_rd_a.douta_reg_reg[30] [2]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__2_i_2
       (.I0(douta[28]),
        .I1(rd_check2_carry__2[28]),
        .I2(m_axi_lite_ch1_rdata[28]),
        .I3(m_axi_lite_ch1_rdata[29]),
        .I4(douta[29]),
        .I5(rd_check2_carry__2[29]),
        .O(\gen_rd_a.douta_reg_reg[30] [1]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry__2_i_4
       (.I0(douta[24]),
        .I1(rd_check2_carry__2[24]),
        .I2(m_axi_lite_ch1_rdata[24]),
        .I3(m_axi_lite_ch1_rdata[25]),
        .I4(douta[25]),
        .I5(rd_check2_carry__2[25]),
        .O(\gen_rd_a.douta_reg_reg[30] [0]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry_i_1
       (.I0(douta[6]),
        .I1(rd_check2_carry__2[6]),
        .I2(m_axi_lite_ch1_rdata[6]),
        .I3(m_axi_lite_ch1_rdata[7]),
        .I4(douta[7]),
        .I5(rd_check2_carry__2[7]),
        .O(DI[2]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry_i_2
       (.I0(douta[4]),
        .I1(rd_check2_carry__2[4]),
        .I2(m_axi_lite_ch1_rdata[4]),
        .I3(m_axi_lite_ch1_rdata[5]),
        .I4(douta[5]),
        .I5(rd_check2_carry__2[5]),
        .O(DI[1]));
  LUT6 #(
    .INIT(64'h08FF000808080808)) 
    rd_check2_carry_i_4
       (.I0(douta[0]),
        .I1(rd_check2_carry__2[0]),
        .I2(m_axi_lite_ch1_rdata[0]),
        .I3(m_axi_lite_ch1_rdata[1]),
        .I4(douta[1]),
        .I5(rd_check2_carry__2[1]),
        .O(DI[0]));
  (* ADDR_WIDTH_A = "4" *) 
  (* ADDR_WIDTH_B = "4" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "8" *) 
  (* BYTE_WRITE_WIDTH_B = "32" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "design_1_axi_traffic_gen_0_0_data.mem" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "512" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "1" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "16" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "32" *) 
  (* P_MIN_WIDTH_DATA_A = "32" *) 
  (* P_MIN_WIDTH_DATA_B = "32" *) 
  (* P_MIN_WIDTH_DATA_ECC = "32" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
  (* P_NUM_COLS_WRITE_A = "4" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "4" *) 
  (* P_WIDTH_ADDR_READ_B = "4" *) 
  (* P_WIDTH_ADDR_WRITE_A = "4" *) 
  (* P_WIDTH_ADDR_WRITE_B = "4" *) 
  (* P_WIDTH_COL_WRITE_A = "8" *) 
  (* P_WIDTH_COL_WRITE_B = "32" *) 
  (* READ_DATA_WIDTH_A = "32" *) 
  (* READ_DATA_WIDTH_B = "32" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "32" *) 
  (* WRITE_DATA_WIDTH_B = "32" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "32" *) 
  (* rstb_loop_iter = "32" *) 
  design_1_axi_traffic_gen_0_0_xpm_memory_base__parameterized2 xpm_memory_base_inst
       (.addra(addra),
        .addrb(NLW_xpm_memory_base_inst_addrb_UNCONNECTED[3:0]),
        .clka(s_axi_aclk),
        .clkb(NLW_xpm_memory_base_inst_clkb_UNCONNECTED),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(NLW_xpm_memory_base_inst_dina_UNCONNECTED[31:0]),
        .dinb(NLW_xpm_memory_base_inst_dinb_UNCONNECTED[31:0]),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[31:0]),
        .ena(NLW_xpm_memory_base_inst_ena_UNCONNECTED),
        .enb(NLW_xpm_memory_base_inst_enb_UNCONNECTED),
        .injectdbiterra(NLW_xpm_memory_base_inst_injectdbiterra_UNCONNECTED),
        .injectdbiterrb(NLW_xpm_memory_base_inst_injectdbiterrb_UNCONNECTED),
        .injectsbiterra(NLW_xpm_memory_base_inst_injectsbiterra_UNCONNECTED),
        .injectsbiterrb(NLW_xpm_memory_base_inst_injectsbiterrb_UNCONNECTED),
        .regcea(NLW_xpm_memory_base_inst_regcea_UNCONNECTED),
        .regceb(NLW_xpm_memory_base_inst_regceb_UNCONNECTED),
        .rsta(\gen_rd_a.douta_reg_reg[31] ),
        .rstb(NLW_xpm_memory_base_inst_rstb_UNCONNECTED),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(NLW_xpm_memory_base_inst_sleep_UNCONNECTED),
        .wea(NLW_xpm_memory_base_inst_wea_UNCONNECTED[3:0]),
        .web(NLW_xpm_memory_base_inst_web_UNCONNECTED[0]));
endmodule

module design_1_clk_wiz_0_0
   (clk_out1,
    locked,
    clk_in1);
  output clk_out1;
  output locked;
  input clk_in1;

  (* IBUF_LOW_PWR *) wire clk_in1;
  wire clk_out1;
  wire locked;

  design_1_clk_wiz_0_0_design_1_clk_wiz_0_0_clk_wiz inst
       (.clk_in1(clk_in1),
        .clk_out1(clk_out1),
        .locked(locked));
endmodule

(* ORIG_REF_NAME = "design_1_clk_wiz_0_0_clk_wiz" *) 
module design_1_clk_wiz_0_0_design_1_clk_wiz_0_0_clk_wiz
   (clk_out1,
    locked,
    clk_in1);
  output clk_out1;
  output locked;
  input clk_in1;

  wire clk_in1;
  wire clk_out1;
  wire clk_out1_design_1_clk_wiz_0_0;
  wire clkfbout_buf_design_1_clk_wiz_0_0;
  wire clkfbout_design_1_clk_wiz_0_0;
  wire locked;
  wire NLW_mmcm_adv_inst_CLKFBOUTB_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKFBSTOPPED_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKINSTOPPED_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT0B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT1_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT1B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT2_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT2B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT3_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT3B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT4_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT5_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT6_UNCONNECTED;
  wire NLW_mmcm_adv_inst_DRDY_UNCONNECTED;
  wire NLW_mmcm_adv_inst_PSDONE_UNCONNECTED;
  wire [15:0]NLW_mmcm_adv_inst_DO_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkf_buf
       (.I(clkfbout_design_1_clk_wiz_0_0),
        .O(clkfbout_buf_design_1_clk_wiz_0_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkout1_buf
       (.I(clk_out1_design_1_clk_wiz_0_0),
        .O(clk_out1));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  MMCME2_ADV #(
    .BANDWIDTH("OPTIMIZED"),
    .CLKFBOUT_MULT_F(10.000000),
    .CLKFBOUT_PHASE(0.000000),
    .CLKFBOUT_USE_FINE_PS("FALSE"),
    .CLKIN1_PERIOD(10.000000),
    .CLKIN2_PERIOD(0.000000),
    .CLKOUT0_DIVIDE_F(10.000000),
    .CLKOUT0_DUTY_CYCLE(0.500000),
    .CLKOUT0_PHASE(0.000000),
    .CLKOUT0_USE_FINE_PS("FALSE"),
    .CLKOUT1_DIVIDE(1),
    .CLKOUT1_DUTY_CYCLE(0.500000),
    .CLKOUT1_PHASE(0.000000),
    .CLKOUT1_USE_FINE_PS("FALSE"),
    .CLKOUT2_DIVIDE(1),
    .CLKOUT2_DUTY_CYCLE(0.500000),
    .CLKOUT2_PHASE(0.000000),
    .CLKOUT2_USE_FINE_PS("FALSE"),
    .CLKOUT3_DIVIDE(1),
    .CLKOUT3_DUTY_CYCLE(0.500000),
    .CLKOUT3_PHASE(0.000000),
    .CLKOUT3_USE_FINE_PS("FALSE"),
    .CLKOUT4_CASCADE("FALSE"),
    .CLKOUT4_DIVIDE(1),
    .CLKOUT4_DUTY_CYCLE(0.500000),
    .CLKOUT4_PHASE(0.000000),
    .CLKOUT4_USE_FINE_PS("FALSE"),
    .CLKOUT5_DIVIDE(1),
    .CLKOUT5_DUTY_CYCLE(0.500000),
    .CLKOUT5_PHASE(0.000000),
    .CLKOUT5_USE_FINE_PS("FALSE"),
    .CLKOUT6_DIVIDE(1),
    .CLKOUT6_DUTY_CYCLE(0.500000),
    .CLKOUT6_PHASE(0.000000),
    .CLKOUT6_USE_FINE_PS("FALSE"),
    .COMPENSATION("BUF_IN"),
    .DIVCLK_DIVIDE(1),
    .IS_CLKINSEL_INVERTED(1'b0),
    .IS_PSEN_INVERTED(1'b0),
    .IS_PSINCDEC_INVERTED(1'b0),
    .IS_PWRDWN_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .REF_JITTER1(0.010000),
    .REF_JITTER2(0.010000),
    .SS_EN("FALSE"),
    .SS_MODE("CENTER_HIGH"),
    .SS_MOD_PERIOD(10000),
    .STARTUP_WAIT("FALSE")) 
    mmcm_adv_inst
       (.CLKFBIN(clkfbout_buf_design_1_clk_wiz_0_0),
        .CLKFBOUT(clkfbout_design_1_clk_wiz_0_0),
        .CLKFBOUTB(NLW_mmcm_adv_inst_CLKFBOUTB_UNCONNECTED),
        .CLKFBSTOPPED(NLW_mmcm_adv_inst_CLKFBSTOPPED_UNCONNECTED),
        .CLKIN1(clk_in1),
        .CLKIN2(1'b0),
        .CLKINSEL(1'b1),
        .CLKINSTOPPED(NLW_mmcm_adv_inst_CLKINSTOPPED_UNCONNECTED),
        .CLKOUT0(clk_out1_design_1_clk_wiz_0_0),
        .CLKOUT0B(NLW_mmcm_adv_inst_CLKOUT0B_UNCONNECTED),
        .CLKOUT1(NLW_mmcm_adv_inst_CLKOUT1_UNCONNECTED),
        .CLKOUT1B(NLW_mmcm_adv_inst_CLKOUT1B_UNCONNECTED),
        .CLKOUT2(NLW_mmcm_adv_inst_CLKOUT2_UNCONNECTED),
        .CLKOUT2B(NLW_mmcm_adv_inst_CLKOUT2B_UNCONNECTED),
        .CLKOUT3(NLW_mmcm_adv_inst_CLKOUT3_UNCONNECTED),
        .CLKOUT3B(NLW_mmcm_adv_inst_CLKOUT3B_UNCONNECTED),
        .CLKOUT4(NLW_mmcm_adv_inst_CLKOUT4_UNCONNECTED),
        .CLKOUT5(NLW_mmcm_adv_inst_CLKOUT5_UNCONNECTED),
        .CLKOUT6(NLW_mmcm_adv_inst_CLKOUT6_UNCONNECTED),
        .DADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DCLK(1'b0),
        .DEN(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DO(NLW_mmcm_adv_inst_DO_UNCONNECTED[15:0]),
        .DRDY(NLW_mmcm_adv_inst_DRDY_UNCONNECTED),
        .DWE(1'b0),
        .LOCKED(locked),
        .PSCLK(1'b0),
        .PSDONE(NLW_mmcm_adv_inst_PSDONE_UNCONNECTED),
        .PSEN(1'b0),
        .PSINCDEC(1'b0),
        .PWRDWN(1'b0),
        .RST(1'b0));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_proc_sys_reset_0_0,proc_sys_reset,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "proc_sys_reset,Vivado 2020.1" *) 
module design_1_proc_sys_reset_0_0
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 clock CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME clock, ASSOCIATED_RESET mb_reset:bus_struct_reset:interconnect_aresetn:peripheral_aresetn:peripheral_reset, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, INSERT_VIP 0" *) input slowest_sync_clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 ext_reset RST" *) (* x_interface_parameter = "XIL_INTERFACENAME ext_reset, BOARD.ASSOCIATED_PARAM RESET_BOARD_INTERFACE, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input ext_reset_in;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 aux_reset RST" *) (* x_interface_parameter = "XIL_INTERFACENAME aux_reset, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input aux_reset_in;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 dbg_reset RST" *) (* x_interface_parameter = "XIL_INTERFACENAME dbg_reset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input mb_debug_sys_rst;
  input dcm_locked;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 mb_rst RST" *) (* x_interface_parameter = "XIL_INTERFACENAME mb_rst, POLARITY ACTIVE_HIGH, TYPE PROCESSOR, INSERT_VIP 0" *) output mb_reset;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 bus_struct_reset RST" *) (* x_interface_parameter = "XIL_INTERFACENAME bus_struct_reset, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) output [0:0]bus_struct_reset;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 peripheral_high_rst RST" *) (* x_interface_parameter = "XIL_INTERFACENAME peripheral_high_rst, POLARITY ACTIVE_HIGH, TYPE PERIPHERAL, INSERT_VIP 0" *) output [0:0]peripheral_reset;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 interconnect_low_rst RST" *) (* x_interface_parameter = "XIL_INTERFACENAME interconnect_low_rst, POLARITY ACTIVE_LOW, TYPE INTERCONNECT, INSERT_VIP 0" *) output [0:0]interconnect_aresetn;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 peripheral_low_rst RST" *) (* x_interface_parameter = "XIL_INTERFACENAME peripheral_low_rst, POLARITY ACTIVE_LOW, TYPE PERIPHERAL, INSERT_VIP 0" *) output [0:0]peripheral_aresetn;

  wire dcm_locked;
  wire ext_reset_in;
  wire [0:0]peripheral_aresetn;
  wire slowest_sync_clk;
  wire NLW_U0_aux_reset_in_UNCONNECTED;
  wire NLW_U0_mb_debug_sys_rst_UNCONNECTED;
  wire NLW_U0_mb_reset_UNCONNECTED;
  wire [0:0]NLW_U0_bus_struct_reset_UNCONNECTED;
  wire [0:0]NLW_U0_interconnect_aresetn_UNCONNECTED;
  wire [0:0]NLW_U0_peripheral_reset_UNCONNECTED;

  (* C_AUX_RESET_HIGH = "1'b0" *) 
  (* C_AUX_RST_WIDTH = "4" *) 
  (* C_EXT_RESET_HIGH = "1'b0" *) 
  (* C_EXT_RST_WIDTH = "4" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_NUM_BUS_RST = "1" *) 
  (* C_NUM_INTERCONNECT_ARESETN = "1" *) 
  (* C_NUM_PERP_ARESETN = "1" *) 
  (* C_NUM_PERP_RST = "1" *) 
  design_1_proc_sys_reset_0_0_proc_sys_reset U0
       (.aux_reset_in(NLW_U0_aux_reset_in_UNCONNECTED),
        .bus_struct_reset(NLW_U0_bus_struct_reset_UNCONNECTED[0]),
        .dcm_locked(dcm_locked),
        .ext_reset_in(ext_reset_in),
        .interconnect_aresetn(NLW_U0_interconnect_aresetn_UNCONNECTED[0]),
        .mb_debug_sys_rst(NLW_U0_mb_debug_sys_rst_UNCONNECTED),
        .mb_reset(NLW_U0_mb_reset_UNCONNECTED),
        .peripheral_aresetn(peripheral_aresetn),
        .peripheral_reset(NLW_U0_peripheral_reset_UNCONNECTED[0]),
        .slowest_sync_clk(slowest_sync_clk));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module design_1_proc_sys_reset_0_0_cdc_sync
   (lpf_asr_reg,
    scndry_out,
    lpf_asr,
    p_1_in,
    p_2_in,
    asr_lpf,
    aux_reset_in,
    slowest_sync_clk);
  output lpf_asr_reg;
  output scndry_out;
  input lpf_asr;
  input p_1_in;
  input p_2_in;
  input [0:0]asr_lpf;
  input aux_reset_in;
  input slowest_sync_clk;

  wire [0:0]asr_lpf;
  wire lpf_asr;
  wire lpf_asr_reg;
  wire p_1_in;
  wire p_2_in;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_asr_i_1
       (.I0(lpf_asr),
        .I1(p_1_in),
        .I2(p_2_in),
        .I3(scndry_out),
        .I4(asr_lpf),
        .O(lpf_asr_reg));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module design_1_proc_sys_reset_0_0_cdc_sync_0
   (lpf_exr_reg,
    scndry_out,
    lpf_exr,
    p_1_in4_in,
    p_2_in3_in,
    exr_lpf,
    mb_debug_sys_rst,
    ext_reset_in,
    slowest_sync_clk);
  output lpf_exr_reg;
  output scndry_out;
  input lpf_exr;
  input p_1_in4_in;
  input p_2_in3_in;
  input [0:0]exr_lpf;
  input mb_debug_sys_rst;
  input ext_reset_in;
  input slowest_sync_clk;

  wire exr_d1;
  wire [0:0]exr_lpf;
  wire ext_reset_in;
  wire lpf_exr;
  wire lpf_exr_reg;
  wire p_1_in4_in;
  wire p_2_in3_in;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(exr_d1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1 
       (.I0(ext_reset_in),
        .O(exr_d1));
  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  initial assign \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 .notifier = 1'bx;
(* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_exr_i_1
       (.I0(lpf_exr),
        .I1(p_1_in4_in),
        .I2(p_2_in3_in),
        .I3(scndry_out),
        .I4(exr_lpf),
        .O(lpf_exr_reg));
endmodule

(* ORIG_REF_NAME = "lpf" *) 
module design_1_proc_sys_reset_0_0_lpf
   (lpf_int,
    slowest_sync_clk,
    dcm_locked,
    mb_debug_sys_rst,
    ext_reset_in,
    aux_reset_in);
  output lpf_int;
  input slowest_sync_clk;
  input dcm_locked;
  input mb_debug_sys_rst;
  input ext_reset_in;
  input aux_reset_in;

  wire \ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ;
  wire \ACTIVE_LOW_EXT.ACT_LO_EXT_n_0 ;
  wire Q;
  wire [0:0]asr_lpf;
  wire dcm_locked;
  wire [0:0]exr_lpf;
  wire ext_reset_in;
  wire lpf_asr;
  wire lpf_exr;
  wire lpf_int;
  wire lpf_int0__0;
  wire p_1_in;
  wire p_1_in4_in;
  wire p_2_in;
  wire p_2_in3_in;
  wire p_3_in1_in;
  wire p_3_in6_in;
  wire slowest_sync_clk;
  wire \NLW_ACTIVE_LOW_AUX.ACT_LO_AUX_aux_reset_in_UNCONNECTED ;
  wire \NLW_ACTIVE_LOW_EXT.ACT_LO_EXT_mb_debug_sys_rst_UNCONNECTED ;

  design_1_proc_sys_reset_0_0_cdc_sync \ACTIVE_LOW_AUX.ACT_LO_AUX 
       (.asr_lpf(asr_lpf),
        .aux_reset_in(\NLW_ACTIVE_LOW_AUX.ACT_LO_AUX_aux_reset_in_UNCONNECTED ),
        .lpf_asr(lpf_asr),
        .lpf_asr_reg(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .p_1_in(p_1_in),
        .p_2_in(p_2_in),
        .scndry_out(p_3_in1_in),
        .slowest_sync_clk(slowest_sync_clk));
  design_1_proc_sys_reset_0_0_cdc_sync_0 \ACTIVE_LOW_EXT.ACT_LO_EXT 
       (.exr_lpf(exr_lpf),
        .ext_reset_in(ext_reset_in),
        .lpf_exr(lpf_exr),
        .lpf_exr_reg(\ACTIVE_LOW_EXT.ACT_LO_EXT_n_0 ),
        .mb_debug_sys_rst(\NLW_ACTIVE_LOW_EXT.ACT_LO_EXT_mb_debug_sys_rst_UNCONNECTED ),
        .p_1_in4_in(p_1_in4_in),
        .p_2_in3_in(p_2_in3_in),
        .scndry_out(p_3_in6_in),
        .slowest_sync_clk(slowest_sync_clk));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[1].asr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_in1_in),
        .Q(p_2_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[2].asr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_2_in),
        .Q(p_1_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[3].asr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(asr_lpf),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[1].exr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_in6_in),
        .Q(p_2_in3_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[2].exr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_2_in3_in),
        .Q(p_1_in4_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[3].exr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_1_in4_in),
        .Q(exr_lpf),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "U0/\EXT_LPF/POR_SRL_I " *) 
  SRL16E #(
    .INIT(16'hFFFF)) 
    POR_SRL_I
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(slowest_sync_clk),
        .D(1'b0),
        .Q(Q));
  FDRE #(
    .INIT(1'b0)) 
    lpf_asr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .Q(lpf_asr),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_exr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\ACTIVE_LOW_EXT.ACT_LO_EXT_n_0 ),
        .Q(lpf_exr),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFFD)) 
    lpf_int0
       (.I0(dcm_locked),
        .I1(lpf_exr),
        .I2(lpf_asr),
        .I3(Q),
        .O(lpf_int0__0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_int_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(lpf_int0__0),
        .Q(lpf_int),
        .R(1'b0));
endmodule

(* C_AUX_RESET_HIGH = "1'b0" *) (* C_AUX_RST_WIDTH = "4" *) (* C_EXT_RESET_HIGH = "1'b0" *) 
(* C_EXT_RST_WIDTH = "4" *) (* C_FAMILY = "zynq" *) (* C_NUM_BUS_RST = "1" *) 
(* C_NUM_INTERCONNECT_ARESETN = "1" *) (* C_NUM_PERP_ARESETN = "1" *) (* C_NUM_PERP_RST = "1" *) 
(* ORIG_REF_NAME = "proc_sys_reset" *) 
module design_1_proc_sys_reset_0_0_proc_sys_reset
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  input slowest_sync_clk;
  input ext_reset_in;
  input aux_reset_in;
  input mb_debug_sys_rst;
  input dcm_locked;
  output mb_reset;
  output [0:0]bus_struct_reset;
  output [0:0]peripheral_reset;
  output [0:0]interconnect_aresetn;
  output [0:0]peripheral_aresetn;

  wire SEQ_n_4;
  wire dcm_locked;
  wire ext_reset_in;
  wire lpf_int;
  wire [0:0]peripheral_aresetn;
  wire slowest_sync_clk;
  wire NLW_EXT_LPF_aux_reset_in_UNCONNECTED;
  wire NLW_EXT_LPF_mb_debug_sys_rst_UNCONNECTED;
  wire NLW_SEQ_Bsr_out_UNCONNECTED;
  wire NLW_SEQ_MB_out_UNCONNECTED;
  wire NLW_SEQ_Pr_out_UNCONNECTED;
  wire NLW_SEQ_bsr_reg_0_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(SEQ_n_4),
        .Q(peripheral_aresetn),
        .R(1'b0));
  design_1_proc_sys_reset_0_0_lpf EXT_LPF
       (.aux_reset_in(NLW_EXT_LPF_aux_reset_in_UNCONNECTED),
        .dcm_locked(dcm_locked),
        .ext_reset_in(ext_reset_in),
        .lpf_int(lpf_int),
        .mb_debug_sys_rst(NLW_EXT_LPF_mb_debug_sys_rst_UNCONNECTED),
        .slowest_sync_clk(slowest_sync_clk));
  design_1_proc_sys_reset_0_0_sequence_psr SEQ
       (.Bsr_out(NLW_SEQ_Bsr_out_UNCONNECTED),
        .MB_out(NLW_SEQ_MB_out_UNCONNECTED),
        .Pr_out(NLW_SEQ_Pr_out_UNCONNECTED),
        .bsr_reg_0(NLW_SEQ_bsr_reg_0_UNCONNECTED),
        .lpf_int(lpf_int),
        .pr_reg_0(SEQ_n_4),
        .slowest_sync_clk(slowest_sync_clk));
endmodule

(* ORIG_REF_NAME = "sequence_psr" *) 
module design_1_proc_sys_reset_0_0_sequence_psr
   (MB_out,
    Bsr_out,
    Pr_out,
    bsr_reg_0,
    pr_reg_0,
    lpf_int,
    slowest_sync_clk);
  output MB_out;
  output Bsr_out;
  output Pr_out;
  output bsr_reg_0;
  output pr_reg_0;
  input lpf_int;
  input slowest_sync_clk;

  wire Core_i_1_n_0;
  wire \^MB_out ;
  wire \^Pr_out ;
  wire \core_dec[0]_i_1_n_0 ;
  wire \core_dec[2]_i_1_n_0 ;
  wire \core_dec_reg_n_0_[0] ;
  wire \core_dec_reg_n_0_[1] ;
  wire from_sys_i_1_n_0;
  wire lpf_int;
  wire p_0_in;
  wire [2:0]p_3_out;
  wire pr_dec0__0;
  wire \pr_dec_reg_n_0_[0] ;
  wire \pr_dec_reg_n_0_[2] ;
  wire pr_i_1_n_0;
  wire pr_reg_0;
  wire seq_clr;
  wire [5:0]seq_cnt;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N_i_1 
       (.I0(\^Pr_out ),
        .O(pr_reg_0));
  (* \PinAttr:I0:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h2)) 
    Core_i_1
       (.I0(\^MB_out ),
        .I1(p_0_in),
        .O(Core_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    Core_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(Core_i_1_n_0),
        .Q(\^MB_out ),
        .S(lpf_int));
  design_1_proc_sys_reset_0_0_upcnt_n SEQ_COUNTER
       (.Q(seq_cnt),
        .seq_clr(seq_clr),
        .seq_cnt_en(seq_cnt_en),
        .slowest_sync_clk(slowest_sync_clk));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h9000)) 
    \core_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[4]),
        .I2(seq_cnt[3]),
        .I3(seq_cnt[5]),
        .O(\core_dec[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \core_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\core_dec_reg_n_0_[0] ),
        .O(\core_dec[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\core_dec[0]_i_1_n_0 ),
        .Q(\core_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(pr_dec0__0),
        .Q(\core_dec_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\core_dec[2]_i_1_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  (* \PinAttr:I0:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h8)) 
    from_sys_i_1
       (.I0(\^MB_out ),
        .I1(seq_cnt_en),
        .O(from_sys_i_1_n_0));
  FDSE #(
    .INIT(1'b0)) 
    from_sys_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(from_sys_i_1_n_0),
        .Q(seq_cnt_en),
        .S(lpf_int));
  LUT4 #(
    .INIT(16'h0018)) 
    pr_dec0
       (.I0(seq_cnt_en),
        .I1(seq_cnt[0]),
        .I2(seq_cnt[2]),
        .I3(seq_cnt[1]),
        .O(pr_dec0__0));
  LUT4 #(
    .INIT(16'h0480)) 
    \pr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[3]),
        .I2(seq_cnt[5]),
        .I3(seq_cnt[4]),
        .O(p_3_out[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \pr_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\pr_dec_reg_n_0_[0] ),
        .O(p_3_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[0]),
        .Q(\pr_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[2]),
        .Q(\pr_dec_reg_n_0_[2] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h2)) 
    pr_i_1
       (.I0(\^Pr_out ),
        .I1(\pr_dec_reg_n_0_[2] ),
        .O(pr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    pr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(pr_i_1_n_0),
        .Q(\^Pr_out ),
        .S(lpf_int));
  FDRE #(
    .INIT(1'b0)) 
    seq_clr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(seq_clr),
        .R(lpf_int));
endmodule

(* ORIG_REF_NAME = "upcnt_n" *) 
module design_1_proc_sys_reset_0_0_upcnt_n
   (Q,
    seq_clr,
    seq_cnt_en,
    slowest_sync_clk);
  output [5:0]Q;
  input seq_clr;
  input seq_cnt_en;
  input slowest_sync_clk;

  wire [5:0]Q;
  wire clear;
  wire [5:0]q_int0;
  wire seq_clr;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \q_int[0]_i_1 
       (.I0(Q[0]),
        .O(q_int0[0]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \q_int[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(q_int0[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \q_int[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(q_int0[2]));
  (* \PinAttr:I1:HOLD_DETOUR  = "194" *) 
  (* \PinAttr:I3:HOLD_DETOUR  = "188" *) 
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \q_int[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(q_int0[3]));
  (* \PinAttr:I1:HOLD_DETOUR  = "194" *) 
  (* \PinAttr:I3:HOLD_DETOUR  = "188" *) 
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \q_int[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(q_int0[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \q_int[5]_i_1 
       (.I0(seq_clr),
        .O(clear));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \q_int[5]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(q_int0[5]));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[0] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[0]),
        .Q(Q[0]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[1] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[1]),
        .Q(Q[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[2] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[2]),
        .Q(Q[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[3] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[3]),
        .Q(Q[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[4] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[4]),
        .Q(Q[4]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[5] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[5]),
        .Q(Q[5]),
        .R(clear));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_ram_reader_0_0,ram_reader,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* ip_definition_source = "package_project" *) 
(* x_core_info = "ram_reader,Vivado 2020.1" *) 
module design_1_ram_reader_0_0
   (ID,
    data);
  input [3:0]ID;
  output [31:0]data;

  wire [3:0]ID;
  wire [31:0]data;
  wire [3:3]NLW_U0_ID_UNCONNECTED;
  wire [14:1]NLW_U0_data_UNCONNECTED;

  design_1_ram_reader_0_0_ram_reader U0
       (.ID({NLW_U0_ID_UNCONNECTED[3],ID[2:0]}),
        .data({data[31:15],NLW_U0_data_UNCONNECTED[14],data[13:2],NLW_U0_data_UNCONNECTED[1],data[0]}));
endmodule

(* CHECK_LICENSE_TYPE = "levels,dist_mem_gen_v8_0_13,{}" *) (* ORIG_REF_NAME = "levels" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "dist_mem_gen_v8_0_13,Vivado 2020.1" *) 
module design_1_ram_reader_0_0_levels
   (a,
    spo);
  input [3:0]a;
  output [31:0]spo;

  wire [3:0]a;
  wire [31:0]spo;
  wire NLW_U0_clk_UNCONNECTED;
  wire NLW_U0_i_ce_UNCONNECTED;
  wire NLW_U0_qdpo_ce_UNCONNECTED;
  wire NLW_U0_qdpo_clk_UNCONNECTED;
  wire NLW_U0_qdpo_rst_UNCONNECTED;
  wire NLW_U0_qdpo_srst_UNCONNECTED;
  wire NLW_U0_qspo_ce_UNCONNECTED;
  wire NLW_U0_qspo_rst_UNCONNECTED;
  wire NLW_U0_qspo_srst_UNCONNECTED;
  wire NLW_U0_we_UNCONNECTED;
  wire [3:3]NLW_U0_a_UNCONNECTED;
  wire [31:0]NLW_U0_d_UNCONNECTED;
  wire [31:0]NLW_U0_dpo_UNCONNECTED;
  wire [3:0]NLW_U0_dpra_UNCONNECTED;
  wire [31:0]NLW_U0_qdpo_UNCONNECTED;
  wire [31:0]NLW_U0_qspo_UNCONNECTED;
  wire [14:1]NLW_U0_spo_UNCONNECTED;

  (* C_FAMILY = "zynq" *) 
  (* C_HAS_D = "0" *) 
  (* C_HAS_DPO = "0" *) 
  (* C_HAS_DPRA = "0" *) 
  (* C_HAS_I_CE = "0" *) 
  (* C_HAS_QDPO = "0" *) 
  (* C_HAS_QDPO_CE = "0" *) 
  (* C_HAS_QDPO_CLK = "0" *) 
  (* C_HAS_QDPO_RST = "0" *) 
  (* C_HAS_QDPO_SRST = "0" *) 
  (* C_HAS_WE = "0" *) 
  (* C_MEM_TYPE = "0" *) 
  (* C_PIPELINE_STAGES = "0" *) 
  (* C_QCE_JOINED = "0" *) 
  (* C_QUALIFY_WE = "0" *) 
  (* C_REG_DPRA_INPUT = "0" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* c_addr_width = "4" *) 
  (* c_default_data = "0" *) 
  (* c_depth = "16" *) 
  (* c_elaboration_dir = "./" *) 
  (* c_has_clk = "0" *) 
  (* c_has_qspo = "0" *) 
  (* c_has_qspo_ce = "0" *) 
  (* c_has_qspo_rst = "0" *) 
  (* c_has_qspo_srst = "0" *) 
  (* c_has_spo = "1" *) 
  (* c_mem_init_file = "levels.mif" *) 
  (* c_parser_type = "1" *) 
  (* c_read_mif = "1" *) 
  (* c_reg_a_d_inputs = "0" *) 
  (* c_sync_enable = "1" *) 
  (* c_width = "32" *) 
  design_1_ram_reader_0_0_dist_mem_gen_v8_0_13 U0
       (.a({NLW_U0_a_UNCONNECTED[3],a[2:0]}),
        .clk(NLW_U0_clk_UNCONNECTED),
        .d(NLW_U0_d_UNCONNECTED[31:0]),
        .dpo(NLW_U0_dpo_UNCONNECTED[31:0]),
        .dpra(NLW_U0_dpra_UNCONNECTED[3:0]),
        .i_ce(NLW_U0_i_ce_UNCONNECTED),
        .qdpo(NLW_U0_qdpo_UNCONNECTED[31:0]),
        .qdpo_ce(NLW_U0_qdpo_ce_UNCONNECTED),
        .qdpo_clk(NLW_U0_qdpo_clk_UNCONNECTED),
        .qdpo_rst(NLW_U0_qdpo_rst_UNCONNECTED),
        .qdpo_srst(NLW_U0_qdpo_srst_UNCONNECTED),
        .qspo(NLW_U0_qspo_UNCONNECTED[31:0]),
        .qspo_ce(NLW_U0_qspo_ce_UNCONNECTED),
        .qspo_rst(NLW_U0_qspo_rst_UNCONNECTED),
        .qspo_srst(NLW_U0_qspo_srst_UNCONNECTED),
        .spo(spo),
        .we(NLW_U0_we_UNCONNECTED));
endmodule

(* ORIG_REF_NAME = "ram_reader" *) 
module design_1_ram_reader_0_0_ram_reader
   (data,
    ID);
  output [31:0]data;
  input [3:0]ID;

  wire [3:0]ID;
  wire [31:0]data;
  wire [3:3]NLW_levels_1_a_UNCONNECTED;
  wire [14:1]NLW_levels_1_spo_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "levels,dist_mem_gen_v8_0_13,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "dist_mem_gen_v8_0_13,Vivado 2020.1" *) 
  design_1_ram_reader_0_0_levels levels_1
       (.a({NLW_levels_1_a_UNCONNECTED[3],ID[2:0]}),
        .spo({data[31:15],NLW_levels_1_spo_UNCONNECTED[14],data[13:2],NLW_levels_1_spo_UNCONNECTED[1],data[0]}));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_state_machine_0_0,state_machine,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* ip_definition_source = "package_project" *) 
(* x_core_info = "state_machine,Vivado 2020.1" *) 
module design_1_state_machine_0_0
   (clk,
    state,
    active_state_wait,
    active_state_init,
    active_state_game,
    active_state_result,
    sm_state);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME clk, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.000, CLK_DOMAIN design_1_clk_0, INSERT_VIP 0" *) input clk;
  input state;
  input active_state_wait;
  input active_state_init;
  input active_state_game;
  input active_state_result;
  output [2:0]sm_state;

  wire active_state_game;
  wire active_state_init;
  wire active_state_result;
  wire active_state_wait;
  wire clk;
  wire [2:0]sm_state;
  wire state;

  design_1_state_machine_0_0_state_machine U0
       (.active_state_game(active_state_game),
        .active_state_init(active_state_init),
        .active_state_result(active_state_result),
        .active_state_wait(active_state_wait),
        .clk(clk),
        .sm_state(sm_state),
        .state(state));
endmodule

(* ORIG_REF_NAME = "state_machine" *) 
module design_1_state_machine_0_0_state_machine
   (sm_state,
    state,
    clk,
    active_state_init,
    active_state_wait,
    active_state_game,
    active_state_result);
  output [2:0]sm_state;
  input state;
  input clk;
  input active_state_init;
  input active_state_wait;
  input active_state_game;
  input active_state_result;

  wire active_state_game;
  wire active_state_init;
  wire active_state_result;
  wire active_state_wait;
  wire clk;
  wire reg_active_state_game;
  wire reg_active_state_init;
  wire reg_active_state_result;
  wire reg_active_state_wait;
  wire reg_state;
  wire [1:0]sm;
  wire \sm[0]_i_1_n_0 ;
  wire \sm[1]_i_1_n_0 ;
  wire \sm[2]_i_1_n_0 ;
  wire \sm[2]_i_2_n_0 ;
  wire \sm[2]_i_3_n_0 ;
  wire \sm_reg_n_0_[0] ;
  wire \sm_reg_n_0_[1] ;
  wire \sm_reg_n_0_[2] ;
  wire [2:0]sm_state;
  wire state;

  FDRE #(
    .INIT(1'b0)) 
    reg_active_state_game_reg
       (.C(clk),
        .CE(1'b1),
        .D(active_state_game),
        .Q(reg_active_state_game),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    reg_active_state_init_reg
       (.C(clk),
        .CE(1'b1),
        .D(active_state_init),
        .Q(reg_active_state_init),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    reg_active_state_result_reg
       (.C(clk),
        .CE(1'b1),
        .D(active_state_result),
        .Q(reg_active_state_result),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    reg_active_state_wait_reg
       (.C(clk),
        .CE(1'b1),
        .D(active_state_wait),
        .Q(reg_active_state_wait),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    reg_state_reg
       (.C(clk),
        .CE(1'b1),
        .D(state),
        .Q(reg_state),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFE02FFFFFE02FE02)) 
    \sm[0]_i_1 
       (.I0(\sm_reg_n_0_[0] ),
        .I1(sm[1]),
        .I2(\sm[2]_i_3_n_0 ),
        .I3(sm[0]),
        .I4(state),
        .I5(reg_state),
        .O(\sm[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBFBB0000BFBBBFBB)) 
    \sm[0]_i_2 
       (.I0(active_state_game),
        .I1(reg_active_state_game),
        .I2(active_state_init),
        .I3(reg_active_state_init),
        .I4(active_state_wait),
        .I5(reg_active_state_wait),
        .O(sm[0]));
  LUT5 #(
    .INIT(32'hCE00CECE)) 
    \sm[1]_i_1 
       (.I0(\sm_reg_n_0_[1] ),
        .I1(sm[1]),
        .I2(\sm[2]_i_3_n_0 ),
        .I3(state),
        .I4(reg_state),
        .O(\sm[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000074007474)) 
    \sm[2]_i_1 
       (.I0(\sm[2]_i_2_n_0 ),
        .I1(\sm[2]_i_3_n_0 ),
        .I2(\sm_reg_n_0_[2] ),
        .I3(state),
        .I4(reg_state),
        .I5(sm[1]),
        .O(\sm[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \sm[2]_i_2 
       (.I0(active_state_game),
        .I1(reg_active_state_game),
        .O(\sm[2]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h44F4)) 
    \sm[2]_i_3 
       (.I0(active_state_result),
        .I1(reg_active_state_result),
        .I2(reg_active_state_game),
        .I3(active_state_game),
        .O(\sm[2]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h22F2)) 
    \sm[2]_i_4 
       (.I0(reg_active_state_init),
        .I1(active_state_init),
        .I2(reg_active_state_wait),
        .I3(active_state_wait),
        .O(sm[1]));
  FDRE #(
    .INIT(1'b1)) 
    \sm_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(\sm[0]_i_1_n_0 ),
        .Q(\sm_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \sm_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(\sm[1]_i_1_n_0 ),
        .Q(\sm_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \sm_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(\sm[2]_i_1_n_0 ),
        .Q(\sm_reg_n_0_[2] ),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \sm_state[0]_INST_0 
       (.I0(\sm_reg_n_0_[0] ),
        .I1(state),
        .O(sm_state[0]));
  LUT2 #(
    .INIT(4'h2)) 
    \sm_state[1]_INST_0 
       (.I0(\sm_reg_n_0_[1] ),
        .I1(state),
        .O(sm_state[1]));
  LUT2 #(
    .INIT(4'h2)) 
    \sm_state[2]_INST_0 
       (.I0(\sm_reg_n_0_[2] ),
        .I1(state),
        .O(sm_state[2]));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_state_results_0_0,state_results,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* ip_definition_source = "package_project" *) 
(* x_core_info = "state_results,Vivado 2020.1" *) 
module design_1_state_results_0_0
   (clk,
    sm_state,
    option,
    active,
    RGB);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME clk, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.000, INSERT_VIP 0" *) input clk;
  input [2:0]sm_state;
  input [1:0]option;
  output active;
  output [2:0]RGB;

  wire [2:0]RGB;
  wire active;
  wire clk;
  wire [2:0]sm_state;
  wire [1:0]NLW_U0_option_UNCONNECTED;

  design_1_state_results_0_0_state_results U0
       (.RGB({RGB[2],RGB[0]}),
        .active(active),
        .clk(clk),
        .option(NLW_U0_option_UNCONNECTED[1:0]),
        .sm_state(sm_state));
endmodule

(* ORIG_REF_NAME = "state_results" *) 
module design_1_state_results_0_0_state_results
   (active,
    RGB,
    clk,
    option,
    sm_state);
  output active;
  output [1:0]RGB;
  input clk;
  input [1:0]option;
  input [2:0]sm_state;

  wire [1:0]RGB;
  wire \RGB[0]_i_1_n_0 ;
  wire \RGB[2]_i_1_n_0 ;
  wire \RGB[2]_i_2_n_0 ;
  wire active;
  wire active0_carry__0_i_1_n_0;
  wire active0_carry__0_i_2_n_0;
  wire active0_carry__0_i_3_n_0;
  wire active0_carry__0_i_4_n_0;
  wire active0_carry__0_i_5_n_0;
  wire active0_carry__0_i_5_n_4;
  wire active0_carry__0_i_5_n_5;
  wire active0_carry__0_i_5_n_6;
  wire active0_carry__0_i_5_n_7;
  wire active0_carry__0_i_6_n_0;
  wire active0_carry__0_i_6_n_4;
  wire active0_carry__0_i_6_n_5;
  wire active0_carry__0_i_6_n_6;
  wire active0_carry__0_i_6_n_7;
  wire active0_carry__0_n_0;
  wire active0_carry__1_i_1_n_0;
  wire active0_carry__1_i_2_n_0;
  wire active0_carry__1_i_3_n_0;
  wire active0_carry__1_i_4_n_0;
  wire active0_carry__1_i_5_n_0;
  wire active0_carry__1_i_5_n_4;
  wire active0_carry__1_i_5_n_5;
  wire active0_carry__1_i_5_n_6;
  wire active0_carry__1_i_5_n_7;
  wire active0_carry__1_i_6_n_0;
  wire active0_carry__1_i_6_n_4;
  wire active0_carry__1_i_6_n_5;
  wire active0_carry__1_i_6_n_6;
  wire active0_carry__1_i_6_n_7;
  wire active0_carry__1_n_0;
  wire active0_carry__2_i_1_n_5;
  wire active0_carry__2_i_1_n_6;
  wire active0_carry__2_i_1_n_7;
  wire active0_carry__2_i_2_n_0;
  wire active0_carry__2_i_3_n_0;
  wire active0_carry__2_i_4_n_0;
  wire active0_carry__2_i_5_n_0;
  wire active0_carry__2_i_6_n_0;
  wire active0_carry__2_i_6_n_4;
  wire active0_carry__2_i_6_n_5;
  wire active0_carry__2_i_6_n_6;
  wire active0_carry__2_i_6_n_7;
  wire active0_carry__2_n_0;
  wire active0_carry_i_1_n_0;
  wire active0_carry_i_2_n_0;
  wire active0_carry_i_3_n_0;
  wire active0_carry_i_4_n_0;
  wire active0_carry_i_5_n_0;
  wire active0_carry_i_6_n_0;
  wire active0_carry_i_7_n_0;
  wire active0_carry_i_7_n_4;
  wire active0_carry_i_7_n_5;
  wire active0_carry_i_7_n_6;
  wire active0_carry_i_7_n_7;
  wire active0_carry_i_8_n_0;
  wire active0_carry_i_8_n_4;
  wire active0_carry_i_8_n_5;
  wire active0_carry_i_8_n_6;
  wire active0_carry_i_8_n_7;
  wire active0_carry_n_0;
  wire clk;
  wire complete;
  wire complete_0;
  wire complete_inv_i_1_n_0;
  wire \counter[0]_i_2_n_0 ;
  wire [31:0]counter_reg;
  wire \counter_reg[0]_i_1_n_0 ;
  wire \counter_reg[0]_i_1_n_4 ;
  wire \counter_reg[0]_i_1_n_5 ;
  wire \counter_reg[0]_i_1_n_6 ;
  wire \counter_reg[0]_i_1_n_7 ;
  wire \counter_reg[12]_i_1_n_0 ;
  wire \counter_reg[12]_i_1_n_4 ;
  wire \counter_reg[12]_i_1_n_5 ;
  wire \counter_reg[12]_i_1_n_6 ;
  wire \counter_reg[12]_i_1_n_7 ;
  wire \counter_reg[16]_i_1_n_0 ;
  wire \counter_reg[16]_i_1_n_4 ;
  wire \counter_reg[16]_i_1_n_5 ;
  wire \counter_reg[16]_i_1_n_6 ;
  wire \counter_reg[16]_i_1_n_7 ;
  wire \counter_reg[20]_i_1_n_0 ;
  wire \counter_reg[20]_i_1_n_4 ;
  wire \counter_reg[20]_i_1_n_5 ;
  wire \counter_reg[20]_i_1_n_6 ;
  wire \counter_reg[20]_i_1_n_7 ;
  wire \counter_reg[24]_i_1_n_0 ;
  wire \counter_reg[24]_i_1_n_4 ;
  wire \counter_reg[24]_i_1_n_5 ;
  wire \counter_reg[24]_i_1_n_6 ;
  wire \counter_reg[24]_i_1_n_7 ;
  wire \counter_reg[28]_i_1_n_4 ;
  wire \counter_reg[28]_i_1_n_5 ;
  wire \counter_reg[28]_i_1_n_6 ;
  wire \counter_reg[28]_i_1_n_7 ;
  wire \counter_reg[4]_i_1_n_0 ;
  wire \counter_reg[4]_i_1_n_4 ;
  wire \counter_reg[4]_i_1_n_5 ;
  wire \counter_reg[4]_i_1_n_6 ;
  wire \counter_reg[4]_i_1_n_7 ;
  wire \counter_reg[8]_i_1_n_0 ;
  wire \counter_reg[8]_i_1_n_4 ;
  wire \counter_reg[8]_i_1_n_5 ;
  wire \counter_reg[8]_i_1_n_6 ;
  wire \counter_reg[8]_i_1_n_7 ;
  wire [2:0]sm_state;
  wire [2:0]NLW_active0_carry_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry_O_UNCONNECTED;
  wire [2:0]NLW_active0_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_active0_carry__0_i_5_CO_UNCONNECTED;
  wire [2:0]NLW_active0_carry__0_i_6_CO_UNCONNECTED;
  wire [2:0]NLW_active0_carry__1_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry__1_O_UNCONNECTED;
  wire [2:0]NLW_active0_carry__1_i_5_CO_UNCONNECTED;
  wire [2:0]NLW_active0_carry__1_i_6_CO_UNCONNECTED;
  wire [2:0]NLW_active0_carry__2_CO_UNCONNECTED;
  wire [3:0]NLW_active0_carry__2_O_UNCONNECTED;
  wire [3:0]NLW_active0_carry__2_i_1_CO_UNCONNECTED;
  wire [3:3]NLW_active0_carry__2_i_1_O_UNCONNECTED;
  wire [2:0]NLW_active0_carry__2_i_6_CO_UNCONNECTED;
  wire [2:0]NLW_active0_carry_i_7_CO_UNCONNECTED;
  wire [2:0]NLW_active0_carry_i_8_CO_UNCONNECTED;
  wire [2:0]\NLW_counter_reg[0]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[16]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[20]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_counter_reg[28]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_counter_reg[8]_i_1_CO_UNCONNECTED ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RGB[0]_i_1 
       (.I0(active0_carry__2_n_0),
        .I1(\RGB[2]_i_2_n_0 ),
        .I2(RGB[0]),
        .O(\RGB[0]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \RGB[2]_i_1 
       (.I0(\RGB[2]_i_2_n_0 ),
        .I1(RGB[1]),
        .O(\RGB[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h1000)) 
    \RGB[2]_i_2 
       (.I0(sm_state[1]),
        .I1(sm_state[0]),
        .I2(sm_state[2]),
        .I3(complete),
        .O(\RGB[2]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RGB_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(\RGB[0]_i_1_n_0 ),
        .Q(RGB[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \RGB_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(\RGB[2]_i_1_n_0 ),
        .Q(RGB[1]),
        .R(1'b0));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry
       (.CI(1'b0),
        .CO({active0_carry_n_0,NLW_active0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,active0_carry_i_1_n_0,active0_carry_i_2_n_0}),
        .O(NLW_active0_carry_O_UNCONNECTED[3:0]),
        .S({active0_carry_i_3_n_0,active0_carry_i_4_n_0,active0_carry_i_5_n_0,active0_carry_i_6_n_0}));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__0
       (.CI(active0_carry_n_0),
        .CO({active0_carry__0_n_0,NLW_active0_carry__0_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_active0_carry__0_O_UNCONNECTED[3:0]),
        .S({active0_carry__0_i_1_n_0,active0_carry__0_i_2_n_0,active0_carry__0_i_3_n_0,active0_carry__0_i_4_n_0}));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__0_i_1
       (.I0(active0_carry__0_i_5_n_6),
        .I1(active0_carry__0_i_5_n_5),
        .O(active0_carry__0_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__0_i_2
       (.I0(active0_carry__0_i_6_n_4),
        .I1(active0_carry__0_i_5_n_7),
        .O(active0_carry__0_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__0_i_3
       (.I0(active0_carry__0_i_6_n_6),
        .I1(active0_carry__0_i_6_n_5),
        .O(active0_carry__0_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__0_i_4
       (.I0(active0_carry_i_8_n_4),
        .I1(active0_carry__0_i_6_n_7),
        .O(active0_carry__0_i_4_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__0_i_5
       (.CI(active0_carry__0_i_6_n_0),
        .CO({active0_carry__0_i_5_n_0,NLW_active0_carry__0_i_5_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({active0_carry__0_i_5_n_4,active0_carry__0_i_5_n_5,active0_carry__0_i_5_n_6,active0_carry__0_i_5_n_7}),
        .S(counter_reg[16:13]));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__0_i_6
       (.CI(active0_carry_i_8_n_0),
        .CO({active0_carry__0_i_6_n_0,NLW_active0_carry__0_i_6_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({active0_carry__0_i_6_n_4,active0_carry__0_i_6_n_5,active0_carry__0_i_6_n_6,active0_carry__0_i_6_n_7}),
        .S(counter_reg[12:9]));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__1
       (.CI(active0_carry__0_n_0),
        .CO({active0_carry__1_n_0,NLW_active0_carry__1_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_active0_carry__1_O_UNCONNECTED[3:0]),
        .S({active0_carry__1_i_1_n_0,active0_carry__1_i_2_n_0,active0_carry__1_i_3_n_0,active0_carry__1_i_4_n_0}));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__1_i_1
       (.I0(active0_carry__1_i_5_n_6),
        .I1(active0_carry__1_i_5_n_5),
        .O(active0_carry__1_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__1_i_2
       (.I0(active0_carry__1_i_6_n_4),
        .I1(active0_carry__1_i_5_n_7),
        .O(active0_carry__1_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__1_i_3
       (.I0(active0_carry__1_i_6_n_6),
        .I1(active0_carry__1_i_6_n_5),
        .O(active0_carry__1_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__1_i_4
       (.I0(active0_carry__0_i_5_n_4),
        .I1(active0_carry__1_i_6_n_7),
        .O(active0_carry__1_i_4_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__1_i_5
       (.CI(active0_carry__1_i_6_n_0),
        .CO({active0_carry__1_i_5_n_0,NLW_active0_carry__1_i_5_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({active0_carry__1_i_5_n_4,active0_carry__1_i_5_n_5,active0_carry__1_i_5_n_6,active0_carry__1_i_5_n_7}),
        .S(counter_reg[24:21]));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__1_i_6
       (.CI(active0_carry__0_i_5_n_0),
        .CO({active0_carry__1_i_6_n_0,NLW_active0_carry__1_i_6_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({active0_carry__1_i_6_n_4,active0_carry__1_i_6_n_5,active0_carry__1_i_6_n_6,active0_carry__1_i_6_n_7}),
        .S(counter_reg[20:17]));
  (* COMPARATOR_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__2
       (.CI(active0_carry__1_n_0),
        .CO({active0_carry__2_n_0,NLW_active0_carry__2_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({active0_carry__2_i_1_n_5,1'b0,1'b0,1'b0}),
        .O(NLW_active0_carry__2_O_UNCONNECTED[3:0]),
        .S({active0_carry__2_i_2_n_0,active0_carry__2_i_3_n_0,active0_carry__2_i_4_n_0,active0_carry__2_i_5_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__2_i_1
       (.CI(active0_carry__2_i_6_n_0),
        .CO(NLW_active0_carry__2_i_1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_active0_carry__2_i_1_O_UNCONNECTED[3],active0_carry__2_i_1_n_5,active0_carry__2_i_1_n_6,active0_carry__2_i_1_n_7}),
        .S({1'b0,counter_reg[31:29]}));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__2_i_2
       (.I0(active0_carry__2_i_1_n_6),
        .I1(active0_carry__2_i_1_n_5),
        .O(active0_carry__2_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__2_i_3
       (.I0(active0_carry__2_i_6_n_4),
        .I1(active0_carry__2_i_1_n_7),
        .O(active0_carry__2_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__2_i_4
       (.I0(active0_carry__2_i_6_n_6),
        .I1(active0_carry__2_i_6_n_5),
        .O(active0_carry__2_i_4_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry__2_i_5
       (.I0(active0_carry__1_i_5_n_4),
        .I1(active0_carry__2_i_6_n_7),
        .O(active0_carry__2_i_5_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry__2_i_6
       (.CI(active0_carry__1_i_5_n_0),
        .CO({active0_carry__2_i_6_n_0,NLW_active0_carry__2_i_6_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({active0_carry__2_i_6_n_4,active0_carry__2_i_6_n_5,active0_carry__2_i_6_n_6,active0_carry__2_i_6_n_7}),
        .S(counter_reg[28:25]));
  LUT1 #(
    .INIT(2'h1)) 
    active0_carry_i_1
       (.I0(active0_carry_i_7_n_5),
        .O(active0_carry_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    active0_carry_i_2
       (.I0(active0_carry_i_7_n_7),
        .O(active0_carry_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry_i_3
       (.I0(active0_carry_i_8_n_6),
        .I1(active0_carry_i_8_n_5),
        .O(active0_carry_i_3_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    active0_carry_i_4
       (.I0(active0_carry_i_7_n_4),
        .I1(active0_carry_i_8_n_7),
        .O(active0_carry_i_4_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    active0_carry_i_5
       (.I0(active0_carry_i_7_n_5),
        .I1(active0_carry_i_7_n_6),
        .O(active0_carry_i_5_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    active0_carry_i_6
       (.I0(counter_reg[0]),
        .I1(active0_carry_i_7_n_7),
        .O(active0_carry_i_6_n_0));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry_i_7
       (.CI(1'b0),
        .CO({active0_carry_i_7_n_0,NLW_active0_carry_i_7_CO_UNCONNECTED[2:0]}),
        .CYINIT(counter_reg[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({active0_carry_i_7_n_4,active0_carry_i_7_n_5,active0_carry_i_7_n_6,active0_carry_i_7_n_7}),
        .S(counter_reg[4:1]));
  (* ADDER_THRESHOLD = "35" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 active0_carry_i_8
       (.CI(active0_carry_i_7_n_0),
        .CO({active0_carry_i_8_n_0,NLW_active0_carry_i_8_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({active0_carry_i_8_n_4,active0_carry_i_8_n_5,active0_carry_i_8_n_6,active0_carry_i_8_n_7}),
        .S(counter_reg[8:5]));
  LUT3 #(
    .INIT(8'hFD)) 
    active_i_1
       (.I0(sm_state[2]),
        .I1(sm_state[0]),
        .I2(sm_state[1]),
        .O(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    active_reg
       (.C(clk),
        .CE(complete),
        .D(active0_carry__2_n_0),
        .Q(active),
        .R(complete_0));
  LUT5 #(
    .INIT(32'hFFF8FFFF)) 
    complete_inv_i_1
       (.I0(complete),
        .I1(active0_carry__2_n_0),
        .I2(sm_state[1]),
        .I3(sm_state[0]),
        .I4(sm_state[2]),
        .O(complete_inv_i_1_n_0));
  FDRE #(
    .INIT(1'b1)) 
    complete_reg_inv
       (.C(clk),
        .CE(1'b1),
        .D(complete_inv_i_1_n_0),
        .Q(complete),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \counter[0]_i_2 
       (.I0(counter_reg[0]),
        .O(\counter[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_1_n_7 ),
        .Q(counter_reg[0]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\counter_reg[0]_i_1_n_0 ,\NLW_counter_reg[0]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_reg[0]_i_1_n_4 ,\counter_reg[0]_i_1_n_5 ,\counter_reg[0]_i_1_n_6 ,\counter_reg[0]_i_1_n_7 }),
        .S({counter_reg[3:1],\counter[0]_i_2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[10] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_5 ),
        .Q(counter_reg[10]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[11] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_4 ),
        .Q(counter_reg[11]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[12] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_7 ),
        .Q(counter_reg[12]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[12]_i_1 
       (.CI(\counter_reg[8]_i_1_n_0 ),
        .CO({\counter_reg[12]_i_1_n_0 ,\NLW_counter_reg[12]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[12]_i_1_n_4 ,\counter_reg[12]_i_1_n_5 ,\counter_reg[12]_i_1_n_6 ,\counter_reg[12]_i_1_n_7 }),
        .S(counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[13] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_6 ),
        .Q(counter_reg[13]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[14] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_5 ),
        .Q(counter_reg[14]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[15] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[12]_i_1_n_4 ),
        .Q(counter_reg[15]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[16] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_7 ),
        .Q(counter_reg[16]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[16]_i_1 
       (.CI(\counter_reg[12]_i_1_n_0 ),
        .CO({\counter_reg[16]_i_1_n_0 ,\NLW_counter_reg[16]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[16]_i_1_n_4 ,\counter_reg[16]_i_1_n_5 ,\counter_reg[16]_i_1_n_6 ,\counter_reg[16]_i_1_n_7 }),
        .S(counter_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[17] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_6 ),
        .Q(counter_reg[17]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[18] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_5 ),
        .Q(counter_reg[18]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[19] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[16]_i_1_n_4 ),
        .Q(counter_reg[19]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_1_n_6 ),
        .Q(counter_reg[1]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[20] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_7 ),
        .Q(counter_reg[20]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[20]_i_1 
       (.CI(\counter_reg[16]_i_1_n_0 ),
        .CO({\counter_reg[20]_i_1_n_0 ,\NLW_counter_reg[20]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[20]_i_1_n_4 ,\counter_reg[20]_i_1_n_5 ,\counter_reg[20]_i_1_n_6 ,\counter_reg[20]_i_1_n_7 }),
        .S(counter_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[21] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_6 ),
        .Q(counter_reg[21]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[22] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_5 ),
        .Q(counter_reg[22]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[23] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[20]_i_1_n_4 ),
        .Q(counter_reg[23]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[24] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_7 ),
        .Q(counter_reg[24]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[24]_i_1 
       (.CI(\counter_reg[20]_i_1_n_0 ),
        .CO({\counter_reg[24]_i_1_n_0 ,\NLW_counter_reg[24]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[24]_i_1_n_4 ,\counter_reg[24]_i_1_n_5 ,\counter_reg[24]_i_1_n_6 ,\counter_reg[24]_i_1_n_7 }),
        .S(counter_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[25] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_6 ),
        .Q(counter_reg[25]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[26] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_5 ),
        .Q(counter_reg[26]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[27] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[24]_i_1_n_4 ),
        .Q(counter_reg[27]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[28] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_7 ),
        .Q(counter_reg[28]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[28]_i_1 
       (.CI(\counter_reg[24]_i_1_n_0 ),
        .CO(\NLW_counter_reg[28]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[28]_i_1_n_4 ,\counter_reg[28]_i_1_n_5 ,\counter_reg[28]_i_1_n_6 ,\counter_reg[28]_i_1_n_7 }),
        .S(counter_reg[31:28]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[29] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_6 ),
        .Q(counter_reg[29]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_1_n_5 ),
        .Q(counter_reg[2]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[30] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_5 ),
        .Q(counter_reg[30]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[31] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[28]_i_1_n_4 ),
        .Q(counter_reg[31]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[0]_i_1_n_4 ),
        .Q(counter_reg[3]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_7 ),
        .Q(counter_reg[4]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[4]_i_1 
       (.CI(\counter_reg[0]_i_1_n_0 ),
        .CO({\counter_reg[4]_i_1_n_0 ,\NLW_counter_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[4]_i_1_n_4 ,\counter_reg[4]_i_1_n_5 ,\counter_reg[4]_i_1_n_6 ,\counter_reg[4]_i_1_n_7 }),
        .S(counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[5] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_6 ),
        .Q(counter_reg[5]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[6] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_5 ),
        .Q(counter_reg[6]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[7] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[4]_i_1_n_4 ),
        .Q(counter_reg[7]),
        .R(complete_0));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[8] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_7 ),
        .Q(counter_reg[8]),
        .R(complete_0));
  (* ADDER_THRESHOLD = "11" *) 
  (* OPT_MODIFIED = "SWEEP" *) 
  CARRY4 \counter_reg[8]_i_1 
       (.CI(\counter_reg[4]_i_1_n_0 ),
        .CO({\counter_reg[8]_i_1_n_0 ,\NLW_counter_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_reg[8]_i_1_n_4 ,\counter_reg[8]_i_1_n_5 ,\counter_reg[8]_i_1_n_6 ,\counter_reg[8]_i_1_n_7 }),
        .S(counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[9] 
       (.C(clk),
        .CE(complete),
        .D(\counter_reg[8]_i_1_n_6 ),
        .Q(counter_reg[9]),
        .R(complete_0));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_state_wait_0_0,state_wait,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* ip_definition_source = "package_project" *) 
(* x_core_info = "state_wait,Vivado 2020.1" *) 
module design_1_state_wait_0_0
   (sm_state,
    btn,
    active);
  input [2:0]sm_state;
  input [3:0]btn;
  output active;

  wire active;
  wire [3:0]btn;
  wire [2:0]sm_state;

  design_1_state_wait_0_0_state_wait U0
       (.active(active),
        .btn(btn),
        .sm_state(sm_state));
endmodule

(* ORIG_REF_NAME = "state_wait" *) 
module design_1_state_wait_0_0_state_wait
   (active,
    sm_state,
    btn);
  output active;
  input [2:0]sm_state;
  input [3:0]btn;

  wire active;
  wire active_reg_i_1_n_0;
  wire active_reg_i_3_n_0;
  wire [3:0]btn;
  wire pressed;
  wire pressed_reg_i_1_n_0;
  wire pressed_reg_i_2_n_0;
  wire pressed_reg_i_3_n_0;
  wire [2:0]sm_state;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "LDC" *) 
  LDCE #(
    .INIT(1'b0),
    .IS_G_INVERTED(1'b1)) 
    active_reg
       (.CLR(active_reg_i_3_n_0),
        .D(active_reg_i_1_n_0),
        .G(pressed),
        .GE(1'b1),
        .Q(active));
  LUT4 #(
    .INIT(16'h0001)) 
    active_reg_i_1
       (.I0(btn[3]),
        .I1(btn[0]),
        .I2(btn[1]),
        .I3(btn[2]),
        .O(active_reg_i_1_n_0));
  LUT3 #(
    .INIT(8'hFD)) 
    active_reg_i_3
       (.I0(sm_state[0]),
        .I1(sm_state[2]),
        .I2(sm_state[1]),
        .O(active_reg_i_3_n_0));
  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0)) 
    pressed_reg
       (.CLR(1'b0),
        .D(pressed_reg_i_1_n_0),
        .G(pressed_reg_i_2_n_0),
        .GE(1'b1),
        .Q(pressed));
  LUT4 #(
    .INIT(16'h1000)) 
    pressed_reg_i_1
       (.I0(sm_state[1]),
        .I1(sm_state[2]),
        .I2(sm_state[0]),
        .I3(pressed_reg_i_3_n_0),
        .O(pressed_reg_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFDDFD)) 
    pressed_reg_i_2
       (.I0(sm_state[0]),
        .I1(sm_state[2]),
        .I2(pressed_reg_i_3_n_0),
        .I3(pressed),
        .I4(sm_state[1]),
        .O(pressed_reg_i_2_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    pressed_reg_i_3
       (.I0(btn[2]),
        .I1(btn[1]),
        .I2(btn[0]),
        .I3(btn[3]),
        .O(pressed_reg_i_3_n_0));
endmodule

(* CHECK_LICENSE_TYPE = "design_1_vio_0_1,vio,{}" *) (* x_core_info = "vio,Vivado 2020.1" *) 
module design_1_vio_0_1
   (clk,
    probe_out0,
    sl_iport0,
    sl_oport0);
  input clk;
  output [0:0]probe_out0;
  input [36:0]sl_iport0;
  output [16:0]sl_oport0;

  wire clk;
  wire [0:0]probe_out0;
  wire [36:0]sl_iport0;
  wire [16:0]sl_oport0;
  wire [0:0]NLW_inst_probe_out1_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out10_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out100_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out101_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out102_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out103_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out104_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out105_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out106_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out107_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out108_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out109_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out11_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out110_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out111_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out112_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out113_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out114_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out115_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out116_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out117_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out118_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out119_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out12_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out120_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out121_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out122_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out123_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out124_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out125_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out126_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out127_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out128_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out129_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out13_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out130_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out131_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out132_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out133_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out134_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out135_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out136_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out137_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out138_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out139_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out14_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out140_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out141_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out142_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out143_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out144_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out145_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out146_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out147_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out148_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out149_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out15_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out150_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out151_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out152_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out153_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out154_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out155_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out156_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out157_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out158_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out159_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out16_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out160_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out161_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out162_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out163_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out164_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out165_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out166_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out167_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out168_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out169_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out17_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out170_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out171_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out172_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out173_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out174_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out175_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out176_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out177_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out178_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out179_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out18_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out180_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out181_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out182_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out183_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out184_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out185_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out186_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out187_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out188_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out189_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out19_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out190_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out191_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out192_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out193_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out194_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out195_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out196_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out197_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out198_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out199_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out2_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out20_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out200_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out201_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out202_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out203_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out204_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out205_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out206_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out207_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out208_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out209_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out21_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out210_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out211_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out212_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out213_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out214_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out215_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out216_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out217_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out218_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out219_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out22_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out220_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out221_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out222_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out223_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out224_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out225_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out226_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out227_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out228_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out229_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out23_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out230_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out231_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out232_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out233_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out234_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out235_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out236_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out237_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out238_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out239_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out24_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out240_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out241_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out242_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out243_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out244_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out245_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out246_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out247_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out248_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out249_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out25_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out250_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out251_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out252_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out253_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out254_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out255_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out26_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out27_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out28_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out29_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out3_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out30_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out31_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out32_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out33_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out34_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out35_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out36_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out37_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out38_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out39_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out4_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out40_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out41_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out42_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out43_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out44_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out45_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out46_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out47_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out48_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out49_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out5_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out50_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out51_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out52_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out53_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out54_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out55_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out56_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out57_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out58_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out59_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out6_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out60_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out61_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out62_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out63_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out64_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out65_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out66_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out67_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out68_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out69_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out7_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out70_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out71_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out72_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out73_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out74_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out75_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out76_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out77_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out78_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out79_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out8_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out80_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out81_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out82_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out83_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out84_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out85_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out86_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out87_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out88_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out89_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out9_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out90_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out91_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out92_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out93_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out94_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out95_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out96_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out97_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out98_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out99_UNCONNECTED;

  (* C_BUILD_REVISION = "0" *) 
  (* C_BUS_ADDR_WIDTH = "17" *) 
  (* C_BUS_DATA_WIDTH = "16" *) 
  (* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_MAJOR_VER = "2" *) 
  (* C_CORE_MINOR_ALPHA_VER = "97" *) 
  (* C_CORE_MINOR_VER = "0" *) 
  (* C_CORE_TYPE = "2" *) 
  (* C_CSE_DRV_VER = "1" *) 
  (* C_EN_PROBE_IN_ACTIVITY = "0" *) 
  (* C_EN_SYNCHRONIZATION = "1" *) 
  (* C_MAJOR_VERSION = "2013" *) 
  (* C_MAX_NUM_PROBE = "256" *) 
  (* C_MAX_WIDTH_PER_PROBE = "256" *) 
  (* C_MINOR_VERSION = "1" *) 
  (* C_NEXT_SLAVE = "0" *) 
  (* C_NUM_PROBE_IN = "0" *) 
  (* C_NUM_PROBE_OUT = "1" *) 
  (* C_PIPE_IFACE = "0" *) 
  (* C_PROBE_IN0_WIDTH = "1" *) 
  (* C_PROBE_IN100_WIDTH = "1" *) 
  (* C_PROBE_IN101_WIDTH = "1" *) 
  (* C_PROBE_IN102_WIDTH = "1" *) 
  (* C_PROBE_IN103_WIDTH = "1" *) 
  (* C_PROBE_IN104_WIDTH = "1" *) 
  (* C_PROBE_IN105_WIDTH = "1" *) 
  (* C_PROBE_IN106_WIDTH = "1" *) 
  (* C_PROBE_IN107_WIDTH = "1" *) 
  (* C_PROBE_IN108_WIDTH = "1" *) 
  (* C_PROBE_IN109_WIDTH = "1" *) 
  (* C_PROBE_IN10_WIDTH = "1" *) 
  (* C_PROBE_IN110_WIDTH = "1" *) 
  (* C_PROBE_IN111_WIDTH = "1" *) 
  (* C_PROBE_IN112_WIDTH = "1" *) 
  (* C_PROBE_IN113_WIDTH = "1" *) 
  (* C_PROBE_IN114_WIDTH = "1" *) 
  (* C_PROBE_IN115_WIDTH = "1" *) 
  (* C_PROBE_IN116_WIDTH = "1" *) 
  (* C_PROBE_IN117_WIDTH = "1" *) 
  (* C_PROBE_IN118_WIDTH = "1" *) 
  (* C_PROBE_IN119_WIDTH = "1" *) 
  (* C_PROBE_IN11_WIDTH = "1" *) 
  (* C_PROBE_IN120_WIDTH = "1" *) 
  (* C_PROBE_IN121_WIDTH = "1" *) 
  (* C_PROBE_IN122_WIDTH = "1" *) 
  (* C_PROBE_IN123_WIDTH = "1" *) 
  (* C_PROBE_IN124_WIDTH = "1" *) 
  (* C_PROBE_IN125_WIDTH = "1" *) 
  (* C_PROBE_IN126_WIDTH = "1" *) 
  (* C_PROBE_IN127_WIDTH = "1" *) 
  (* C_PROBE_IN128_WIDTH = "1" *) 
  (* C_PROBE_IN129_WIDTH = "1" *) 
  (* C_PROBE_IN12_WIDTH = "1" *) 
  (* C_PROBE_IN130_WIDTH = "1" *) 
  (* C_PROBE_IN131_WIDTH = "1" *) 
  (* C_PROBE_IN132_WIDTH = "1" *) 
  (* C_PROBE_IN133_WIDTH = "1" *) 
  (* C_PROBE_IN134_WIDTH = "1" *) 
  (* C_PROBE_IN135_WIDTH = "1" *) 
  (* C_PROBE_IN136_WIDTH = "1" *) 
  (* C_PROBE_IN137_WIDTH = "1" *) 
  (* C_PROBE_IN138_WIDTH = "1" *) 
  (* C_PROBE_IN139_WIDTH = "1" *) 
  (* C_PROBE_IN13_WIDTH = "1" *) 
  (* C_PROBE_IN140_WIDTH = "1" *) 
  (* C_PROBE_IN141_WIDTH = "1" *) 
  (* C_PROBE_IN142_WIDTH = "1" *) 
  (* C_PROBE_IN143_WIDTH = "1" *) 
  (* C_PROBE_IN144_WIDTH = "1" *) 
  (* C_PROBE_IN145_WIDTH = "1" *) 
  (* C_PROBE_IN146_WIDTH = "1" *) 
  (* C_PROBE_IN147_WIDTH = "1" *) 
  (* C_PROBE_IN148_WIDTH = "1" *) 
  (* C_PROBE_IN149_WIDTH = "1" *) 
  (* C_PROBE_IN14_WIDTH = "1" *) 
  (* C_PROBE_IN150_WIDTH = "1" *) 
  (* C_PROBE_IN151_WIDTH = "1" *) 
  (* C_PROBE_IN152_WIDTH = "1" *) 
  (* C_PROBE_IN153_WIDTH = "1" *) 
  (* C_PROBE_IN154_WIDTH = "1" *) 
  (* C_PROBE_IN155_WIDTH = "1" *) 
  (* C_PROBE_IN156_WIDTH = "1" *) 
  (* C_PROBE_IN157_WIDTH = "1" *) 
  (* C_PROBE_IN158_WIDTH = "1" *) 
  (* C_PROBE_IN159_WIDTH = "1" *) 
  (* C_PROBE_IN15_WIDTH = "1" *) 
  (* C_PROBE_IN160_WIDTH = "1" *) 
  (* C_PROBE_IN161_WIDTH = "1" *) 
  (* C_PROBE_IN162_WIDTH = "1" *) 
  (* C_PROBE_IN163_WIDTH = "1" *) 
  (* C_PROBE_IN164_WIDTH = "1" *) 
  (* C_PROBE_IN165_WIDTH = "1" *) 
  (* C_PROBE_IN166_WIDTH = "1" *) 
  (* C_PROBE_IN167_WIDTH = "1" *) 
  (* C_PROBE_IN168_WIDTH = "1" *) 
  (* C_PROBE_IN169_WIDTH = "1" *) 
  (* C_PROBE_IN16_WIDTH = "1" *) 
  (* C_PROBE_IN170_WIDTH = "1" *) 
  (* C_PROBE_IN171_WIDTH = "1" *) 
  (* C_PROBE_IN172_WIDTH = "1" *) 
  (* C_PROBE_IN173_WIDTH = "1" *) 
  (* C_PROBE_IN174_WIDTH = "1" *) 
  (* C_PROBE_IN175_WIDTH = "1" *) 
  (* C_PROBE_IN176_WIDTH = "1" *) 
  (* C_PROBE_IN177_WIDTH = "1" *) 
  (* C_PROBE_IN178_WIDTH = "1" *) 
  (* C_PROBE_IN179_WIDTH = "1" *) 
  (* C_PROBE_IN17_WIDTH = "1" *) 
  (* C_PROBE_IN180_WIDTH = "1" *) 
  (* C_PROBE_IN181_WIDTH = "1" *) 
  (* C_PROBE_IN182_WIDTH = "1" *) 
  (* C_PROBE_IN183_WIDTH = "1" *) 
  (* C_PROBE_IN184_WIDTH = "1" *) 
  (* C_PROBE_IN185_WIDTH = "1" *) 
  (* C_PROBE_IN186_WIDTH = "1" *) 
  (* C_PROBE_IN187_WIDTH = "1" *) 
  (* C_PROBE_IN188_WIDTH = "1" *) 
  (* C_PROBE_IN189_WIDTH = "1" *) 
  (* C_PROBE_IN18_WIDTH = "1" *) 
  (* C_PROBE_IN190_WIDTH = "1" *) 
  (* C_PROBE_IN191_WIDTH = "1" *) 
  (* C_PROBE_IN192_WIDTH = "1" *) 
  (* C_PROBE_IN193_WIDTH = "1" *) 
  (* C_PROBE_IN194_WIDTH = "1" *) 
  (* C_PROBE_IN195_WIDTH = "1" *) 
  (* C_PROBE_IN196_WIDTH = "1" *) 
  (* C_PROBE_IN197_WIDTH = "1" *) 
  (* C_PROBE_IN198_WIDTH = "1" *) 
  (* C_PROBE_IN199_WIDTH = "1" *) 
  (* C_PROBE_IN19_WIDTH = "1" *) 
  (* C_PROBE_IN1_WIDTH = "1" *) 
  (* C_PROBE_IN200_WIDTH = "1" *) 
  (* C_PROBE_IN201_WIDTH = "1" *) 
  (* C_PROBE_IN202_WIDTH = "1" *) 
  (* C_PROBE_IN203_WIDTH = "1" *) 
  (* C_PROBE_IN204_WIDTH = "1" *) 
  (* C_PROBE_IN205_WIDTH = "1" *) 
  (* C_PROBE_IN206_WIDTH = "1" *) 
  (* C_PROBE_IN207_WIDTH = "1" *) 
  (* C_PROBE_IN208_WIDTH = "1" *) 
  (* C_PROBE_IN209_WIDTH = "1" *) 
  (* C_PROBE_IN20_WIDTH = "1" *) 
  (* C_PROBE_IN210_WIDTH = "1" *) 
  (* C_PROBE_IN211_WIDTH = "1" *) 
  (* C_PROBE_IN212_WIDTH = "1" *) 
  (* C_PROBE_IN213_WIDTH = "1" *) 
  (* C_PROBE_IN214_WIDTH = "1" *) 
  (* C_PROBE_IN215_WIDTH = "1" *) 
  (* C_PROBE_IN216_WIDTH = "1" *) 
  (* C_PROBE_IN217_WIDTH = "1" *) 
  (* C_PROBE_IN218_WIDTH = "1" *) 
  (* C_PROBE_IN219_WIDTH = "1" *) 
  (* C_PROBE_IN21_WIDTH = "1" *) 
  (* C_PROBE_IN220_WIDTH = "1" *) 
  (* C_PROBE_IN221_WIDTH = "1" *) 
  (* C_PROBE_IN222_WIDTH = "1" *) 
  (* C_PROBE_IN223_WIDTH = "1" *) 
  (* C_PROBE_IN224_WIDTH = "1" *) 
  (* C_PROBE_IN225_WIDTH = "1" *) 
  (* C_PROBE_IN226_WIDTH = "1" *) 
  (* C_PROBE_IN227_WIDTH = "1" *) 
  (* C_PROBE_IN228_WIDTH = "1" *) 
  (* C_PROBE_IN229_WIDTH = "1" *) 
  (* C_PROBE_IN22_WIDTH = "1" *) 
  (* C_PROBE_IN230_WIDTH = "1" *) 
  (* C_PROBE_IN231_WIDTH = "1" *) 
  (* C_PROBE_IN232_WIDTH = "1" *) 
  (* C_PROBE_IN233_WIDTH = "1" *) 
  (* C_PROBE_IN234_WIDTH = "1" *) 
  (* C_PROBE_IN235_WIDTH = "1" *) 
  (* C_PROBE_IN236_WIDTH = "1" *) 
  (* C_PROBE_IN237_WIDTH = "1" *) 
  (* C_PROBE_IN238_WIDTH = "1" *) 
  (* C_PROBE_IN239_WIDTH = "1" *) 
  (* C_PROBE_IN23_WIDTH = "1" *) 
  (* C_PROBE_IN240_WIDTH = "1" *) 
  (* C_PROBE_IN241_WIDTH = "1" *) 
  (* C_PROBE_IN242_WIDTH = "1" *) 
  (* C_PROBE_IN243_WIDTH = "1" *) 
  (* C_PROBE_IN244_WIDTH = "1" *) 
  (* C_PROBE_IN245_WIDTH = "1" *) 
  (* C_PROBE_IN246_WIDTH = "1" *) 
  (* C_PROBE_IN247_WIDTH = "1" *) 
  (* C_PROBE_IN248_WIDTH = "1" *) 
  (* C_PROBE_IN249_WIDTH = "1" *) 
  (* C_PROBE_IN24_WIDTH = "1" *) 
  (* C_PROBE_IN250_WIDTH = "1" *) 
  (* C_PROBE_IN251_WIDTH = "1" *) 
  (* C_PROBE_IN252_WIDTH = "1" *) 
  (* C_PROBE_IN253_WIDTH = "1" *) 
  (* C_PROBE_IN254_WIDTH = "1" *) 
  (* C_PROBE_IN255_WIDTH = "1" *) 
  (* C_PROBE_IN25_WIDTH = "1" *) 
  (* C_PROBE_IN26_WIDTH = "1" *) 
  (* C_PROBE_IN27_WIDTH = "1" *) 
  (* C_PROBE_IN28_WIDTH = "1" *) 
  (* C_PROBE_IN29_WIDTH = "1" *) 
  (* C_PROBE_IN2_WIDTH = "1" *) 
  (* C_PROBE_IN30_WIDTH = "1" *) 
  (* C_PROBE_IN31_WIDTH = "1" *) 
  (* C_PROBE_IN32_WIDTH = "1" *) 
  (* C_PROBE_IN33_WIDTH = "1" *) 
  (* C_PROBE_IN34_WIDTH = "1" *) 
  (* C_PROBE_IN35_WIDTH = "1" *) 
  (* C_PROBE_IN36_WIDTH = "1" *) 
  (* C_PROBE_IN37_WIDTH = "1" *) 
  (* C_PROBE_IN38_WIDTH = "1" *) 
  (* C_PROBE_IN39_WIDTH = "1" *) 
  (* C_PROBE_IN3_WIDTH = "1" *) 
  (* C_PROBE_IN40_WIDTH = "1" *) 
  (* C_PROBE_IN41_WIDTH = "1" *) 
  (* C_PROBE_IN42_WIDTH = "1" *) 
  (* C_PROBE_IN43_WIDTH = "1" *) 
  (* C_PROBE_IN44_WIDTH = "1" *) 
  (* C_PROBE_IN45_WIDTH = "1" *) 
  (* C_PROBE_IN46_WIDTH = "1" *) 
  (* C_PROBE_IN47_WIDTH = "1" *) 
  (* C_PROBE_IN48_WIDTH = "1" *) 
  (* C_PROBE_IN49_WIDTH = "1" *) 
  (* C_PROBE_IN4_WIDTH = "1" *) 
  (* C_PROBE_IN50_WIDTH = "1" *) 
  (* C_PROBE_IN51_WIDTH = "1" *) 
  (* C_PROBE_IN52_WIDTH = "1" *) 
  (* C_PROBE_IN53_WIDTH = "1" *) 
  (* C_PROBE_IN54_WIDTH = "1" *) 
  (* C_PROBE_IN55_WIDTH = "1" *) 
  (* C_PROBE_IN56_WIDTH = "1" *) 
  (* C_PROBE_IN57_WIDTH = "1" *) 
  (* C_PROBE_IN58_WIDTH = "1" *) 
  (* C_PROBE_IN59_WIDTH = "1" *) 
  (* C_PROBE_IN5_WIDTH = "1" *) 
  (* C_PROBE_IN60_WIDTH = "1" *) 
  (* C_PROBE_IN61_WIDTH = "1" *) 
  (* C_PROBE_IN62_WIDTH = "1" *) 
  (* C_PROBE_IN63_WIDTH = "1" *) 
  (* C_PROBE_IN64_WIDTH = "1" *) 
  (* C_PROBE_IN65_WIDTH = "1" *) 
  (* C_PROBE_IN66_WIDTH = "1" *) 
  (* C_PROBE_IN67_WIDTH = "1" *) 
  (* C_PROBE_IN68_WIDTH = "1" *) 
  (* C_PROBE_IN69_WIDTH = "1" *) 
  (* C_PROBE_IN6_WIDTH = "1" *) 
  (* C_PROBE_IN70_WIDTH = "1" *) 
  (* C_PROBE_IN71_WIDTH = "1" *) 
  (* C_PROBE_IN72_WIDTH = "1" *) 
  (* C_PROBE_IN73_WIDTH = "1" *) 
  (* C_PROBE_IN74_WIDTH = "1" *) 
  (* C_PROBE_IN75_WIDTH = "1" *) 
  (* C_PROBE_IN76_WIDTH = "1" *) 
  (* C_PROBE_IN77_WIDTH = "1" *) 
  (* C_PROBE_IN78_WIDTH = "1" *) 
  (* C_PROBE_IN79_WIDTH = "1" *) 
  (* C_PROBE_IN7_WIDTH = "1" *) 
  (* C_PROBE_IN80_WIDTH = "1" *) 
  (* C_PROBE_IN81_WIDTH = "1" *) 
  (* C_PROBE_IN82_WIDTH = "1" *) 
  (* C_PROBE_IN83_WIDTH = "1" *) 
  (* C_PROBE_IN84_WIDTH = "1" *) 
  (* C_PROBE_IN85_WIDTH = "1" *) 
  (* C_PROBE_IN86_WIDTH = "1" *) 
  (* C_PROBE_IN87_WIDTH = "1" *) 
  (* C_PROBE_IN88_WIDTH = "1" *) 
  (* C_PROBE_IN89_WIDTH = "1" *) 
  (* C_PROBE_IN8_WIDTH = "1" *) 
  (* C_PROBE_IN90_WIDTH = "1" *) 
  (* C_PROBE_IN91_WIDTH = "1" *) 
  (* C_PROBE_IN92_WIDTH = "1" *) 
  (* C_PROBE_IN93_WIDTH = "1" *) 
  (* C_PROBE_IN94_WIDTH = "1" *) 
  (* C_PROBE_IN95_WIDTH = "1" *) 
  (* C_PROBE_IN96_WIDTH = "1" *) 
  (* C_PROBE_IN97_WIDTH = "1" *) 
  (* C_PROBE_IN98_WIDTH = "1" *) 
  (* C_PROBE_IN99_WIDTH = "1" *) 
  (* C_PROBE_IN9_WIDTH = "1" *) 
  (* C_PROBE_OUT0_INIT_VAL = "1'b1" *) 
  (* C_PROBE_OUT0_WIDTH = "1" *) 
  (* C_PROBE_OUT100_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT100_WIDTH = "1" *) 
  (* C_PROBE_OUT101_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT101_WIDTH = "1" *) 
  (* C_PROBE_OUT102_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT102_WIDTH = "1" *) 
  (* C_PROBE_OUT103_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT103_WIDTH = "1" *) 
  (* C_PROBE_OUT104_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT104_WIDTH = "1" *) 
  (* C_PROBE_OUT105_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT105_WIDTH = "1" *) 
  (* C_PROBE_OUT106_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT106_WIDTH = "1" *) 
  (* C_PROBE_OUT107_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT107_WIDTH = "1" *) 
  (* C_PROBE_OUT108_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT108_WIDTH = "1" *) 
  (* C_PROBE_OUT109_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT109_WIDTH = "1" *) 
  (* C_PROBE_OUT10_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT10_WIDTH = "1" *) 
  (* C_PROBE_OUT110_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT110_WIDTH = "1" *) 
  (* C_PROBE_OUT111_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT111_WIDTH = "1" *) 
  (* C_PROBE_OUT112_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT112_WIDTH = "1" *) 
  (* C_PROBE_OUT113_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT113_WIDTH = "1" *) 
  (* C_PROBE_OUT114_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT114_WIDTH = "1" *) 
  (* C_PROBE_OUT115_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT115_WIDTH = "1" *) 
  (* C_PROBE_OUT116_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT116_WIDTH = "1" *) 
  (* C_PROBE_OUT117_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT117_WIDTH = "1" *) 
  (* C_PROBE_OUT118_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT118_WIDTH = "1" *) 
  (* C_PROBE_OUT119_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT119_WIDTH = "1" *) 
  (* C_PROBE_OUT11_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT11_WIDTH = "1" *) 
  (* C_PROBE_OUT120_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT120_WIDTH = "1" *) 
  (* C_PROBE_OUT121_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT121_WIDTH = "1" *) 
  (* C_PROBE_OUT122_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT122_WIDTH = "1" *) 
  (* C_PROBE_OUT123_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT123_WIDTH = "1" *) 
  (* C_PROBE_OUT124_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT124_WIDTH = "1" *) 
  (* C_PROBE_OUT125_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT125_WIDTH = "1" *) 
  (* C_PROBE_OUT126_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT126_WIDTH = "1" *) 
  (* C_PROBE_OUT127_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT127_WIDTH = "1" *) 
  (* C_PROBE_OUT128_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT128_WIDTH = "1" *) 
  (* C_PROBE_OUT129_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT129_WIDTH = "1" *) 
  (* C_PROBE_OUT12_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT12_WIDTH = "1" *) 
  (* C_PROBE_OUT130_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT130_WIDTH = "1" *) 
  (* C_PROBE_OUT131_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT131_WIDTH = "1" *) 
  (* C_PROBE_OUT132_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT132_WIDTH = "1" *) 
  (* C_PROBE_OUT133_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT133_WIDTH = "1" *) 
  (* C_PROBE_OUT134_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT134_WIDTH = "1" *) 
  (* C_PROBE_OUT135_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT135_WIDTH = "1" *) 
  (* C_PROBE_OUT136_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT136_WIDTH = "1" *) 
  (* C_PROBE_OUT137_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT137_WIDTH = "1" *) 
  (* C_PROBE_OUT138_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT138_WIDTH = "1" *) 
  (* C_PROBE_OUT139_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT139_WIDTH = "1" *) 
  (* C_PROBE_OUT13_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT13_WIDTH = "1" *) 
  (* C_PROBE_OUT140_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT140_WIDTH = "1" *) 
  (* C_PROBE_OUT141_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT141_WIDTH = "1" *) 
  (* C_PROBE_OUT142_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT142_WIDTH = "1" *) 
  (* C_PROBE_OUT143_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT143_WIDTH = "1" *) 
  (* C_PROBE_OUT144_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT144_WIDTH = "1" *) 
  (* C_PROBE_OUT145_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT145_WIDTH = "1" *) 
  (* C_PROBE_OUT146_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT146_WIDTH = "1" *) 
  (* C_PROBE_OUT147_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT147_WIDTH = "1" *) 
  (* C_PROBE_OUT148_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT148_WIDTH = "1" *) 
  (* C_PROBE_OUT149_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT149_WIDTH = "1" *) 
  (* C_PROBE_OUT14_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT14_WIDTH = "1" *) 
  (* C_PROBE_OUT150_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT150_WIDTH = "1" *) 
  (* C_PROBE_OUT151_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT151_WIDTH = "1" *) 
  (* C_PROBE_OUT152_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT152_WIDTH = "1" *) 
  (* C_PROBE_OUT153_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT153_WIDTH = "1" *) 
  (* C_PROBE_OUT154_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT154_WIDTH = "1" *) 
  (* C_PROBE_OUT155_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT155_WIDTH = "1" *) 
  (* C_PROBE_OUT156_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT156_WIDTH = "1" *) 
  (* C_PROBE_OUT157_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT157_WIDTH = "1" *) 
  (* C_PROBE_OUT158_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT158_WIDTH = "1" *) 
  (* C_PROBE_OUT159_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT159_WIDTH = "1" *) 
  (* C_PROBE_OUT15_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT15_WIDTH = "1" *) 
  (* C_PROBE_OUT160_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT160_WIDTH = "1" *) 
  (* C_PROBE_OUT161_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT161_WIDTH = "1" *) 
  (* C_PROBE_OUT162_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT162_WIDTH = "1" *) 
  (* C_PROBE_OUT163_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT163_WIDTH = "1" *) 
  (* C_PROBE_OUT164_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT164_WIDTH = "1" *) 
  (* C_PROBE_OUT165_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT165_WIDTH = "1" *) 
  (* C_PROBE_OUT166_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT166_WIDTH = "1" *) 
  (* C_PROBE_OUT167_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT167_WIDTH = "1" *) 
  (* C_PROBE_OUT168_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT168_WIDTH = "1" *) 
  (* C_PROBE_OUT169_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT169_WIDTH = "1" *) 
  (* C_PROBE_OUT16_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT16_WIDTH = "1" *) 
  (* C_PROBE_OUT170_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT170_WIDTH = "1" *) 
  (* C_PROBE_OUT171_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT171_WIDTH = "1" *) 
  (* C_PROBE_OUT172_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT172_WIDTH = "1" *) 
  (* C_PROBE_OUT173_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT173_WIDTH = "1" *) 
  (* C_PROBE_OUT174_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT174_WIDTH = "1" *) 
  (* C_PROBE_OUT175_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT175_WIDTH = "1" *) 
  (* C_PROBE_OUT176_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT176_WIDTH = "1" *) 
  (* C_PROBE_OUT177_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT177_WIDTH = "1" *) 
  (* C_PROBE_OUT178_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT178_WIDTH = "1" *) 
  (* C_PROBE_OUT179_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT179_WIDTH = "1" *) 
  (* C_PROBE_OUT17_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT17_WIDTH = "1" *) 
  (* C_PROBE_OUT180_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT180_WIDTH = "1" *) 
  (* C_PROBE_OUT181_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT181_WIDTH = "1" *) 
  (* C_PROBE_OUT182_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT182_WIDTH = "1" *) 
  (* C_PROBE_OUT183_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT183_WIDTH = "1" *) 
  (* C_PROBE_OUT184_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT184_WIDTH = "1" *) 
  (* C_PROBE_OUT185_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT185_WIDTH = "1" *) 
  (* C_PROBE_OUT186_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT186_WIDTH = "1" *) 
  (* C_PROBE_OUT187_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT187_WIDTH = "1" *) 
  (* C_PROBE_OUT188_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT188_WIDTH = "1" *) 
  (* C_PROBE_OUT189_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT189_WIDTH = "1" *) 
  (* C_PROBE_OUT18_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT18_WIDTH = "1" *) 
  (* C_PROBE_OUT190_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT190_WIDTH = "1" *) 
  (* C_PROBE_OUT191_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT191_WIDTH = "1" *) 
  (* C_PROBE_OUT192_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT192_WIDTH = "1" *) 
  (* C_PROBE_OUT193_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT193_WIDTH = "1" *) 
  (* C_PROBE_OUT194_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT194_WIDTH = "1" *) 
  (* C_PROBE_OUT195_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT195_WIDTH = "1" *) 
  (* C_PROBE_OUT196_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT196_WIDTH = "1" *) 
  (* C_PROBE_OUT197_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT197_WIDTH = "1" *) 
  (* C_PROBE_OUT198_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT198_WIDTH = "1" *) 
  (* C_PROBE_OUT199_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT199_WIDTH = "1" *) 
  (* C_PROBE_OUT19_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT19_WIDTH = "1" *) 
  (* C_PROBE_OUT1_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT1_WIDTH = "1" *) 
  (* C_PROBE_OUT200_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT200_WIDTH = "1" *) 
  (* C_PROBE_OUT201_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT201_WIDTH = "1" *) 
  (* C_PROBE_OUT202_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT202_WIDTH = "1" *) 
  (* C_PROBE_OUT203_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT203_WIDTH = "1" *) 
  (* C_PROBE_OUT204_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT204_WIDTH = "1" *) 
  (* C_PROBE_OUT205_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT205_WIDTH = "1" *) 
  (* C_PROBE_OUT206_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT206_WIDTH = "1" *) 
  (* C_PROBE_OUT207_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT207_WIDTH = "1" *) 
  (* C_PROBE_OUT208_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT208_WIDTH = "1" *) 
  (* C_PROBE_OUT209_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT209_WIDTH = "1" *) 
  (* C_PROBE_OUT20_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT20_WIDTH = "1" *) 
  (* C_PROBE_OUT210_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT210_WIDTH = "1" *) 
  (* C_PROBE_OUT211_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT211_WIDTH = "1" *) 
  (* C_PROBE_OUT212_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT212_WIDTH = "1" *) 
  (* C_PROBE_OUT213_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT213_WIDTH = "1" *) 
  (* C_PROBE_OUT214_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT214_WIDTH = "1" *) 
  (* C_PROBE_OUT215_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT215_WIDTH = "1" *) 
  (* C_PROBE_OUT216_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT216_WIDTH = "1" *) 
  (* C_PROBE_OUT217_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT217_WIDTH = "1" *) 
  (* C_PROBE_OUT218_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT218_WIDTH = "1" *) 
  (* C_PROBE_OUT219_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT219_WIDTH = "1" *) 
  (* C_PROBE_OUT21_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT21_WIDTH = "1" *) 
  (* C_PROBE_OUT220_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT220_WIDTH = "1" *) 
  (* C_PROBE_OUT221_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT221_WIDTH = "1" *) 
  (* C_PROBE_OUT222_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT222_WIDTH = "1" *) 
  (* C_PROBE_OUT223_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT223_WIDTH = "1" *) 
  (* C_PROBE_OUT224_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT224_WIDTH = "1" *) 
  (* C_PROBE_OUT225_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT225_WIDTH = "1" *) 
  (* C_PROBE_OUT226_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT226_WIDTH = "1" *) 
  (* C_PROBE_OUT227_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT227_WIDTH = "1" *) 
  (* C_PROBE_OUT228_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT228_WIDTH = "1" *) 
  (* C_PROBE_OUT229_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT229_WIDTH = "1" *) 
  (* C_PROBE_OUT22_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT22_WIDTH = "1" *) 
  (* C_PROBE_OUT230_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT230_WIDTH = "1" *) 
  (* C_PROBE_OUT231_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT231_WIDTH = "1" *) 
  (* C_PROBE_OUT232_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT232_WIDTH = "1" *) 
  (* C_PROBE_OUT233_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT233_WIDTH = "1" *) 
  (* C_PROBE_OUT234_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT234_WIDTH = "1" *) 
  (* C_PROBE_OUT235_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT235_WIDTH = "1" *) 
  (* C_PROBE_OUT236_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT236_WIDTH = "1" *) 
  (* C_PROBE_OUT237_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT237_WIDTH = "1" *) 
  (* C_PROBE_OUT238_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT238_WIDTH = "1" *) 
  (* C_PROBE_OUT239_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT239_WIDTH = "1" *) 
  (* C_PROBE_OUT23_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT23_WIDTH = "1" *) 
  (* C_PROBE_OUT240_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT240_WIDTH = "1" *) 
  (* C_PROBE_OUT241_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT241_WIDTH = "1" *) 
  (* C_PROBE_OUT242_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT242_WIDTH = "1" *) 
  (* C_PROBE_OUT243_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT243_WIDTH = "1" *) 
  (* C_PROBE_OUT244_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT244_WIDTH = "1" *) 
  (* C_PROBE_OUT245_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT245_WIDTH = "1" *) 
  (* C_PROBE_OUT246_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT246_WIDTH = "1" *) 
  (* C_PROBE_OUT247_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT247_WIDTH = "1" *) 
  (* C_PROBE_OUT248_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT248_WIDTH = "1" *) 
  (* C_PROBE_OUT249_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT249_WIDTH = "1" *) 
  (* C_PROBE_OUT24_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT24_WIDTH = "1" *) 
  (* C_PROBE_OUT250_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT250_WIDTH = "1" *) 
  (* C_PROBE_OUT251_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT251_WIDTH = "1" *) 
  (* C_PROBE_OUT252_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT252_WIDTH = "1" *) 
  (* C_PROBE_OUT253_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT253_WIDTH = "1" *) 
  (* C_PROBE_OUT254_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT254_WIDTH = "1" *) 
  (* C_PROBE_OUT255_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT255_WIDTH = "1" *) 
  (* C_PROBE_OUT25_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT25_WIDTH = "1" *) 
  (* C_PROBE_OUT26_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT26_WIDTH = "1" *) 
  (* C_PROBE_OUT27_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT27_WIDTH = "1" *) 
  (* C_PROBE_OUT28_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT28_WIDTH = "1" *) 
  (* C_PROBE_OUT29_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT29_WIDTH = "1" *) 
  (* C_PROBE_OUT2_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT2_WIDTH = "1" *) 
  (* C_PROBE_OUT30_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT30_WIDTH = "1" *) 
  (* C_PROBE_OUT31_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT31_WIDTH = "1" *) 
  (* C_PROBE_OUT32_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT32_WIDTH = "1" *) 
  (* C_PROBE_OUT33_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT33_WIDTH = "1" *) 
  (* C_PROBE_OUT34_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT34_WIDTH = "1" *) 
  (* C_PROBE_OUT35_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT35_WIDTH = "1" *) 
  (* C_PROBE_OUT36_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT36_WIDTH = "1" *) 
  (* C_PROBE_OUT37_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT37_WIDTH = "1" *) 
  (* C_PROBE_OUT38_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT38_WIDTH = "1" *) 
  (* C_PROBE_OUT39_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT39_WIDTH = "1" *) 
  (* C_PROBE_OUT3_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT3_WIDTH = "1" *) 
  (* C_PROBE_OUT40_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT40_WIDTH = "1" *) 
  (* C_PROBE_OUT41_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT41_WIDTH = "1" *) 
  (* C_PROBE_OUT42_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT42_WIDTH = "1" *) 
  (* C_PROBE_OUT43_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT43_WIDTH = "1" *) 
  (* C_PROBE_OUT44_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT44_WIDTH = "1" *) 
  (* C_PROBE_OUT45_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT45_WIDTH = "1" *) 
  (* C_PROBE_OUT46_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT46_WIDTH = "1" *) 
  (* C_PROBE_OUT47_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT47_WIDTH = "1" *) 
  (* C_PROBE_OUT48_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT48_WIDTH = "1" *) 
  (* C_PROBE_OUT49_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT49_WIDTH = "1" *) 
  (* C_PROBE_OUT4_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT4_WIDTH = "1" *) 
  (* C_PROBE_OUT50_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT50_WIDTH = "1" *) 
  (* C_PROBE_OUT51_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT51_WIDTH = "1" *) 
  (* C_PROBE_OUT52_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT52_WIDTH = "1" *) 
  (* C_PROBE_OUT53_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT53_WIDTH = "1" *) 
  (* C_PROBE_OUT54_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT54_WIDTH = "1" *) 
  (* C_PROBE_OUT55_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT55_WIDTH = "1" *) 
  (* C_PROBE_OUT56_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT56_WIDTH = "1" *) 
  (* C_PROBE_OUT57_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT57_WIDTH = "1" *) 
  (* C_PROBE_OUT58_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT58_WIDTH = "1" *) 
  (* C_PROBE_OUT59_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT59_WIDTH = "1" *) 
  (* C_PROBE_OUT5_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT5_WIDTH = "1" *) 
  (* C_PROBE_OUT60_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT60_WIDTH = "1" *) 
  (* C_PROBE_OUT61_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT61_WIDTH = "1" *) 
  (* C_PROBE_OUT62_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT62_WIDTH = "1" *) 
  (* C_PROBE_OUT63_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT63_WIDTH = "1" *) 
  (* C_PROBE_OUT64_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT64_WIDTH = "1" *) 
  (* C_PROBE_OUT65_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT65_WIDTH = "1" *) 
  (* C_PROBE_OUT66_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT66_WIDTH = "1" *) 
  (* C_PROBE_OUT67_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT67_WIDTH = "1" *) 
  (* C_PROBE_OUT68_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT68_WIDTH = "1" *) 
  (* C_PROBE_OUT69_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT69_WIDTH = "1" *) 
  (* C_PROBE_OUT6_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT6_WIDTH = "1" *) 
  (* C_PROBE_OUT70_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT70_WIDTH = "1" *) 
  (* C_PROBE_OUT71_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT71_WIDTH = "1" *) 
  (* C_PROBE_OUT72_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT72_WIDTH = "1" *) 
  (* C_PROBE_OUT73_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT73_WIDTH = "1" *) 
  (* C_PROBE_OUT74_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT74_WIDTH = "1" *) 
  (* C_PROBE_OUT75_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT75_WIDTH = "1" *) 
  (* C_PROBE_OUT76_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT76_WIDTH = "1" *) 
  (* C_PROBE_OUT77_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT77_WIDTH = "1" *) 
  (* C_PROBE_OUT78_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT78_WIDTH = "1" *) 
  (* C_PROBE_OUT79_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT79_WIDTH = "1" *) 
  (* C_PROBE_OUT7_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT7_WIDTH = "1" *) 
  (* C_PROBE_OUT80_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT80_WIDTH = "1" *) 
  (* C_PROBE_OUT81_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT81_WIDTH = "1" *) 
  (* C_PROBE_OUT82_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT82_WIDTH = "1" *) 
  (* C_PROBE_OUT83_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT83_WIDTH = "1" *) 
  (* C_PROBE_OUT84_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT84_WIDTH = "1" *) 
  (* C_PROBE_OUT85_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT85_WIDTH = "1" *) 
  (* C_PROBE_OUT86_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT86_WIDTH = "1" *) 
  (* C_PROBE_OUT87_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT87_WIDTH = "1" *) 
  (* C_PROBE_OUT88_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT88_WIDTH = "1" *) 
  (* C_PROBE_OUT89_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT89_WIDTH = "1" *) 
  (* C_PROBE_OUT8_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT8_WIDTH = "1" *) 
  (* C_PROBE_OUT90_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT90_WIDTH = "1" *) 
  (* C_PROBE_OUT91_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT91_WIDTH = "1" *) 
  (* C_PROBE_OUT92_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT92_WIDTH = "1" *) 
  (* C_PROBE_OUT93_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT93_WIDTH = "1" *) 
  (* C_PROBE_OUT94_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT94_WIDTH = "1" *) 
  (* C_PROBE_OUT95_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT95_WIDTH = "1" *) 
  (* C_PROBE_OUT96_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT96_WIDTH = "1" *) 
  (* C_PROBE_OUT97_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT97_WIDTH = "1" *) 
  (* C_PROBE_OUT98_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT98_WIDTH = "1" *) 
  (* C_PROBE_OUT99_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT99_WIDTH = "1" *) 
  (* C_PROBE_OUT9_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT9_WIDTH = "1" *) 
  (* C_USE_TEST_REG = "1" *) 
  (* C_XDEVICEFAMILY = "zynq" *) 
  (* C_XLNX_HW_PROBE_INFO = "DEFAULT" *) 
  (* C_XSDB_SLAVE_TYPE = "33" *) 
  (* DONT_TOUCH *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* KEEP_HIERARCHY = "soft" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT0 = "16'b0000000000000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT1 = "16'b0000000000000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT10 = "16'b0000000000001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT100 = "16'b0000000001100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT101 = "16'b0000000001100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT102 = "16'b0000000001100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT103 = "16'b0000000001100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT104 = "16'b0000000001101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT105 = "16'b0000000001101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT106 = "16'b0000000001101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT107 = "16'b0000000001101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT108 = "16'b0000000001101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT109 = "16'b0000000001101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT11 = "16'b0000000000001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT110 = "16'b0000000001101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT111 = "16'b0000000001101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT112 = "16'b0000000001110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT113 = "16'b0000000001110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT114 = "16'b0000000001110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT115 = "16'b0000000001110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT116 = "16'b0000000001110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT117 = "16'b0000000001110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT118 = "16'b0000000001110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT119 = "16'b0000000001110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT12 = "16'b0000000000001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT120 = "16'b0000000001111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT121 = "16'b0000000001111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT122 = "16'b0000000001111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT123 = "16'b0000000001111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT124 = "16'b0000000001111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT125 = "16'b0000000001111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT126 = "16'b0000000001111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT127 = "16'b0000000001111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT128 = "16'b0000000010000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT129 = "16'b0000000010000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT13 = "16'b0000000000001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT130 = "16'b0000000010000010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT131 = "16'b0000000010000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT132 = "16'b0000000010000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT133 = "16'b0000000010000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT134 = "16'b0000000010000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT135 = "16'b0000000010000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT136 = "16'b0000000010001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT137 = "16'b0000000010001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT138 = "16'b0000000010001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT139 = "16'b0000000010001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT14 = "16'b0000000000001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT140 = "16'b0000000010001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT141 = "16'b0000000010001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT142 = "16'b0000000010001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT143 = "16'b0000000010001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT144 = "16'b0000000010010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT145 = "16'b0000000010010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT146 = "16'b0000000010010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT147 = "16'b0000000010010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT148 = "16'b0000000010010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT149 = "16'b0000000010010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT15 = "16'b0000000000001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT150 = "16'b0000000010010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT151 = "16'b0000000010010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT152 = "16'b0000000010011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT153 = "16'b0000000010011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT154 = "16'b0000000010011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT155 = "16'b0000000010011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT156 = "16'b0000000010011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT157 = "16'b0000000010011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT158 = "16'b0000000010011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT159 = "16'b0000000010011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT16 = "16'b0000000000010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT160 = "16'b0000000010100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT161 = "16'b0000000010100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT162 = "16'b0000000010100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT163 = "16'b0000000010100011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT164 = "16'b0000000010100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT165 = "16'b0000000010100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT166 = "16'b0000000010100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT167 = "16'b0000000010100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT168 = "16'b0000000010101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT169 = "16'b0000000010101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT17 = "16'b0000000000010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT170 = "16'b0000000010101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT171 = "16'b0000000010101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT172 = "16'b0000000010101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT173 = "16'b0000000010101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT174 = "16'b0000000010101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT175 = "16'b0000000010101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT176 = "16'b0000000010110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT177 = "16'b0000000010110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT178 = "16'b0000000010110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT179 = "16'b0000000010110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT18 = "16'b0000000000010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT180 = "16'b0000000010110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT181 = "16'b0000000010110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT182 = "16'b0000000010110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT183 = "16'b0000000010110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT184 = "16'b0000000010111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT185 = "16'b0000000010111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT186 = "16'b0000000010111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT187 = "16'b0000000010111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT188 = "16'b0000000010111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT189 = "16'b0000000010111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT19 = "16'b0000000000010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT190 = "16'b0000000010111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT191 = "16'b0000000010111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT192 = "16'b0000000011000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT193 = "16'b0000000011000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT194 = "16'b0000000011000010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT195 = "16'b0000000011000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT196 = "16'b0000000011000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT197 = "16'b0000000011000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT198 = "16'b0000000011000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT199 = "16'b0000000011000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT2 = "16'b0000000000000010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT20 = "16'b0000000000010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT200 = "16'b0000000011001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT201 = "16'b0000000011001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT202 = "16'b0000000011001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT203 = "16'b0000000011001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT204 = "16'b0000000011001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT205 = "16'b0000000011001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT206 = "16'b0000000011001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT207 = "16'b0000000011001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT208 = "16'b0000000011010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT209 = "16'b0000000011010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT21 = "16'b0000000000010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT210 = "16'b0000000011010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT211 = "16'b0000000011010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT212 = "16'b0000000011010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT213 = "16'b0000000011010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT214 = "16'b0000000011010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT215 = "16'b0000000011010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT216 = "16'b0000000011011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT217 = "16'b0000000011011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT218 = "16'b0000000011011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT219 = "16'b0000000011011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT22 = "16'b0000000000010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT220 = "16'b0000000011011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT221 = "16'b0000000011011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT222 = "16'b0000000011011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT223 = "16'b0000000011011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT224 = "16'b0000000011100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT225 = "16'b0000000011100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT226 = "16'b0000000011100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT227 = "16'b0000000011100011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT228 = "16'b0000000011100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT229 = "16'b0000000011100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT23 = "16'b0000000000010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT230 = "16'b0000000011100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT231 = "16'b0000000011100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT232 = "16'b0000000011101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT233 = "16'b0000000011101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT234 = "16'b0000000011101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT235 = "16'b0000000011101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT236 = "16'b0000000011101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT237 = "16'b0000000011101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT238 = "16'b0000000011101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT239 = "16'b0000000011101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT24 = "16'b0000000000011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT240 = "16'b0000000011110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT241 = "16'b0000000011110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT242 = "16'b0000000011110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT243 = "16'b0000000011110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT244 = "16'b0000000011110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT245 = "16'b0000000011110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT246 = "16'b0000000011110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT247 = "16'b0000000011110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT248 = "16'b0000000011111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT249 = "16'b0000000011111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT25 = "16'b0000000000011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT250 = "16'b0000000011111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT251 = "16'b0000000011111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT252 = "16'b0000000011111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT253 = "16'b0000000011111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT254 = "16'b0000000011111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT255 = "16'b0000000011111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT26 = "16'b0000000000011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT27 = "16'b0000000000011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT28 = "16'b0000000000011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT29 = "16'b0000000000011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT3 = "16'b0000000000000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT30 = "16'b0000000000011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT31 = "16'b0000000000011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT32 = "16'b0000000000100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT33 = "16'b0000000000100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT34 = "16'b0000000000100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT35 = "16'b0000000000100011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT36 = "16'b0000000000100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT37 = "16'b0000000000100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT38 = "16'b0000000000100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT39 = "16'b0000000000100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT4 = "16'b0000000000000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT40 = "16'b0000000000101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT41 = "16'b0000000000101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT42 = "16'b0000000000101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT43 = "16'b0000000000101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT44 = "16'b0000000000101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT45 = "16'b0000000000101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT46 = "16'b0000000000101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT47 = "16'b0000000000101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT48 = "16'b0000000000110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT49 = "16'b0000000000110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT5 = "16'b0000000000000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT50 = "16'b0000000000110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT51 = "16'b0000000000110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT52 = "16'b0000000000110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT53 = "16'b0000000000110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT54 = "16'b0000000000110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT55 = "16'b0000000000110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT56 = "16'b0000000000111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT57 = "16'b0000000000111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT58 = "16'b0000000000111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT59 = "16'b0000000000111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT6 = "16'b0000000000000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT60 = "16'b0000000000111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT61 = "16'b0000000000111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT62 = "16'b0000000000111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT63 = "16'b0000000000111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT64 = "16'b0000000001000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT65 = "16'b0000000001000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT66 = "16'b0000000001000010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT67 = "16'b0000000001000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT68 = "16'b0000000001000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT69 = "16'b0000000001000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT7 = "16'b0000000000000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT70 = "16'b0000000001000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT71 = "16'b0000000001000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT72 = "16'b0000000001001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT73 = "16'b0000000001001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT74 = "16'b0000000001001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT75 = "16'b0000000001001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT76 = "16'b0000000001001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT77 = "16'b0000000001001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT78 = "16'b0000000001001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT79 = "16'b0000000001001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT8 = "16'b0000000000001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT80 = "16'b0000000001010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT81 = "16'b0000000001010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT82 = "16'b0000000001010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT83 = "16'b0000000001010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT84 = "16'b0000000001010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT85 = "16'b0000000001010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT86 = "16'b0000000001010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT87 = "16'b0000000001010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT88 = "16'b0000000001011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT89 = "16'b0000000001011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT9 = "16'b0000000000001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT90 = "16'b0000000001011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT91 = "16'b0000000001011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT92 = "16'b0000000001011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT93 = "16'b0000000001011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT94 = "16'b0000000001011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT95 = "16'b0000000001011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT96 = "16'b0000000001100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT97 = "16'b0000000001100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT98 = "16'b0000000001100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT99 = "16'b0000000001100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT0 = "16'b0000000000000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT1 = "16'b0000000000000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT10 = "16'b0000000000001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT100 = "16'b0000000001100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT101 = "16'b0000000001100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT102 = "16'b0000000001100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT103 = "16'b0000000001100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT104 = "16'b0000000001101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT105 = "16'b0000000001101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT106 = "16'b0000000001101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT107 = "16'b0000000001101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT108 = "16'b0000000001101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT109 = "16'b0000000001101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT11 = "16'b0000000000001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT110 = "16'b0000000001101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT111 = "16'b0000000001101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT112 = "16'b0000000001110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT113 = "16'b0000000001110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT114 = "16'b0000000001110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT115 = "16'b0000000001110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT116 = "16'b0000000001110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT117 = "16'b0000000001110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT118 = "16'b0000000001110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT119 = "16'b0000000001110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT12 = "16'b0000000000001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT120 = "16'b0000000001111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT121 = "16'b0000000001111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT122 = "16'b0000000001111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT123 = "16'b0000000001111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT124 = "16'b0000000001111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT125 = "16'b0000000001111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT126 = "16'b0000000001111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT127 = "16'b0000000001111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT128 = "16'b0000000010000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT129 = "16'b0000000010000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT13 = "16'b0000000000001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT130 = "16'b0000000010000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT131 = "16'b0000000010000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT132 = "16'b0000000010000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT133 = "16'b0000000010000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT134 = "16'b0000000010000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT135 = "16'b0000000010000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT136 = "16'b0000000010001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT137 = "16'b0000000010001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT138 = "16'b0000000010001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT139 = "16'b0000000010001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT14 = "16'b0000000000001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT140 = "16'b0000000010001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT141 = "16'b0000000010001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT142 = "16'b0000000010001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT143 = "16'b0000000010001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT144 = "16'b0000000010010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT145 = "16'b0000000010010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT146 = "16'b0000000010010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT147 = "16'b0000000010010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT148 = "16'b0000000010010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT149 = "16'b0000000010010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT15 = "16'b0000000000001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT150 = "16'b0000000010010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT151 = "16'b0000000010010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT152 = "16'b0000000010011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT153 = "16'b0000000010011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT154 = "16'b0000000010011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT155 = "16'b0000000010011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT156 = "16'b0000000010011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT157 = "16'b0000000010011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT158 = "16'b0000000010011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT159 = "16'b0000000010011111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT16 = "16'b0000000000010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT160 = "16'b0000000010100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT161 = "16'b0000000010100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT162 = "16'b0000000010100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT163 = "16'b0000000010100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT164 = "16'b0000000010100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT165 = "16'b0000000010100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT166 = "16'b0000000010100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT167 = "16'b0000000010100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT168 = "16'b0000000010101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT169 = "16'b0000000010101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT17 = "16'b0000000000010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT170 = "16'b0000000010101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT171 = "16'b0000000010101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT172 = "16'b0000000010101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT173 = "16'b0000000010101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT174 = "16'b0000000010101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT175 = "16'b0000000010101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT176 = "16'b0000000010110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT177 = "16'b0000000010110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT178 = "16'b0000000010110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT179 = "16'b0000000010110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT18 = "16'b0000000000010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT180 = "16'b0000000010110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT181 = "16'b0000000010110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT182 = "16'b0000000010110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT183 = "16'b0000000010110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT184 = "16'b0000000010111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT185 = "16'b0000000010111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT186 = "16'b0000000010111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT187 = "16'b0000000010111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT188 = "16'b0000000010111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT189 = "16'b0000000010111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT19 = "16'b0000000000010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT190 = "16'b0000000010111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT191 = "16'b0000000010111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT192 = "16'b0000000011000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT193 = "16'b0000000011000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT194 = "16'b0000000011000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT195 = "16'b0000000011000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT196 = "16'b0000000011000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT197 = "16'b0000000011000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT198 = "16'b0000000011000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT199 = "16'b0000000011000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT2 = "16'b0000000000000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT20 = "16'b0000000000010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT200 = "16'b0000000011001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT201 = "16'b0000000011001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT202 = "16'b0000000011001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT203 = "16'b0000000011001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT204 = "16'b0000000011001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT205 = "16'b0000000011001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT206 = "16'b0000000011001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT207 = "16'b0000000011001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT208 = "16'b0000000011010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT209 = "16'b0000000011010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT21 = "16'b0000000000010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT210 = "16'b0000000011010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT211 = "16'b0000000011010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT212 = "16'b0000000011010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT213 = "16'b0000000011010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT214 = "16'b0000000011010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT215 = "16'b0000000011010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT216 = "16'b0000000011011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT217 = "16'b0000000011011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT218 = "16'b0000000011011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT219 = "16'b0000000011011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT22 = "16'b0000000000010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT220 = "16'b0000000011011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT221 = "16'b0000000011011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT222 = "16'b0000000011011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT223 = "16'b0000000011011111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT224 = "16'b0000000011100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT225 = "16'b0000000011100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT226 = "16'b0000000011100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT227 = "16'b0000000011100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT228 = "16'b0000000011100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT229 = "16'b0000000011100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT23 = "16'b0000000000010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT230 = "16'b0000000011100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT231 = "16'b0000000011100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT232 = "16'b0000000011101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT233 = "16'b0000000011101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT234 = "16'b0000000011101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT235 = "16'b0000000011101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT236 = "16'b0000000011101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT237 = "16'b0000000011101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT238 = "16'b0000000011101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT239 = "16'b0000000011101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT24 = "16'b0000000000011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT240 = "16'b0000000011110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT241 = "16'b0000000011110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT242 = "16'b0000000011110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT243 = "16'b0000000011110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT244 = "16'b0000000011110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT245 = "16'b0000000011110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT246 = "16'b0000000011110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT247 = "16'b0000000011110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT248 = "16'b0000000011111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT249 = "16'b0000000011111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT25 = "16'b0000000000011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT250 = "16'b0000000011111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT251 = "16'b0000000011111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT252 = "16'b0000000011111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT253 = "16'b0000000011111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT254 = "16'b0000000011111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT255 = "16'b0000000011111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT26 = "16'b0000000000011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT27 = "16'b0000000000011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT28 = "16'b0000000000011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT29 = "16'b0000000000011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT3 = "16'b0000000000000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT30 = "16'b0000000000011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT31 = "16'b0000000000011111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT32 = "16'b0000000000100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT33 = "16'b0000000000100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT34 = "16'b0000000000100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT35 = "16'b0000000000100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT36 = "16'b0000000000100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT37 = "16'b0000000000100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT38 = "16'b0000000000100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT39 = "16'b0000000000100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT4 = "16'b0000000000000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT40 = "16'b0000000000101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT41 = "16'b0000000000101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT42 = "16'b0000000000101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT43 = "16'b0000000000101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT44 = "16'b0000000000101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT45 = "16'b0000000000101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT46 = "16'b0000000000101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT47 = "16'b0000000000101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT48 = "16'b0000000000110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT49 = "16'b0000000000110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT5 = "16'b0000000000000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT50 = "16'b0000000000110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT51 = "16'b0000000000110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT52 = "16'b0000000000110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT53 = "16'b0000000000110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT54 = "16'b0000000000110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT55 = "16'b0000000000110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT56 = "16'b0000000000111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT57 = "16'b0000000000111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT58 = "16'b0000000000111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT59 = "16'b0000000000111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT6 = "16'b0000000000000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT60 = "16'b0000000000111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT61 = "16'b0000000000111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT62 = "16'b0000000000111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT63 = "16'b0000000000111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT64 = "16'b0000000001000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT65 = "16'b0000000001000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT66 = "16'b0000000001000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT67 = "16'b0000000001000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT68 = "16'b0000000001000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT69 = "16'b0000000001000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT7 = "16'b0000000000000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT70 = "16'b0000000001000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT71 = "16'b0000000001000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT72 = "16'b0000000001001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT73 = "16'b0000000001001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT74 = "16'b0000000001001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT75 = "16'b0000000001001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT76 = "16'b0000000001001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT77 = "16'b0000000001001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT78 = "16'b0000000001001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT79 = "16'b0000000001001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT8 = "16'b0000000000001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT80 = "16'b0000000001010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT81 = "16'b0000000001010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT82 = "16'b0000000001010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT83 = "16'b0000000001010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT84 = "16'b0000000001010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT85 = "16'b0000000001010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT86 = "16'b0000000001010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT87 = "16'b0000000001010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT88 = "16'b0000000001011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT89 = "16'b0000000001011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT9 = "16'b0000000000001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT90 = "16'b0000000001011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT91 = "16'b0000000001011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT92 = "16'b0000000001011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT93 = "16'b0000000001011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT94 = "16'b0000000001011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT95 = "16'b0000000001011111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT96 = "16'b0000000001100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT97 = "16'b0000000001100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT98 = "16'b0000000001100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT99 = "16'b0000000001100011" *) 
  (* LC_PROBE_IN_WIDTH_STRING = "2048'b
  (* LC_PROBE_OUT_HIGH_BIT_POS_STRING = "4096'b0000000011111111000000001111111000000000111111010000000011111100000000001111101100000000111110100000000011111001000000001111100000000000111101110000000011110110000000001111010100000000111101000000000011110011000000001111001000000000111100010000000011110000000000001110111100000000111011100000000011101101000000001110110000000000111010110000000011101010000000001110100100000000111010000000000011100111000000001110011000000000111001010000000011100100000000001110001100000000111000100000000011100001000000001110000000000000110111110000000011011110000000001101110100000000110111000000000011011011000000001101101000000000110110010000000011011000000000001101011100000000110101100000000011010101000000001101010000000000110100110000000011010010000000001101000100000000110100000000000011001111000000001100111000000000110011010000000011001100000000001100101100000000110010100000000011001001000000001100100000000000110001110000000011000110000000001100010100000000110001000000000011000011000000001100001000000000110000010000000011000000000000001011111100000000101111100000000010111101000000001011110000000000101110110000000010111010000000001011100100000000101110000000000010110111000000001011011000000000101101010000000010110100000000001011001100000000101100100000000010110001000000001011000000000000101011110000000010101110000000001010110100000000101011000000000010101011000000001010101000000000101010010000000010101000000000001010011100000000101001100000000010100101000000001010010000000000101000110000000010100010000000001010000100000000101000000000000010011111000000001001111000000000100111010000000010011100000000001001101100000000100110100000000010011001000000001001100000000000100101110000000010010110000000001001010100000000100101000000000010010011000000001001001000000000100100010000000010010000000000001000111100000000100011100000000010001101000000001000110000000000100010110000000010001010000000001000100100000000100010000000000010000111000000001000011000000000100001010000000010000100000000001000001100000000100000100000000010000001000000001000000000000000011111110000000001111110000000000111110100000000011111000000000001111011000000000111101000000000011110010000000001111000000000000111011100000000011101100000000001110101000000000111010000000000011100110000000001110010000000000111000100000000011100000000000001101111000000000110111000000000011011010000000001101100000000000110101100000000011010100000000001101001000000000110100000000000011001110000000001100110000000000110010100000000011001000000000001100011000000000110001000000000011000010000000001100000000000000101111100000000010111100000000001011101000000000101110000000000010110110000000001011010000000000101100100000000010110000000000001010111000000000101011000000000010101010000000001010100000000000101001100000000010100100000000001010001000000000101000000000000010011110000000001001110000000000100110100000000010011000000000001001011000000000100101000000000010010010000000001001000000000000100011100000000010001100000000001000101000000000100010000000000010000110000000001000010000000000100000100000000010000000000000000111111000000000011111000000000001111010000000000111100000000000011101100000000001110100000000000111001000000000011100000000000001101110000000000110110000000000011010100000000001101000000000000110011000000000011001000000000001100010000000000110000000000000010111100000000001011100000000000101101000000000010110000000000001010110000000000101010000000000010100100000000001010000000000000100111000000000010011000000000001001010000000000100100000000000010001100000000001000100000000000100001000000000010000000000000000111110000000000011110000000000001110100000000000111000000000000011011000000000001101000000000000110010000000000011000000000000001011100000000000101100000000000010101000000000001010000000000000100110000000000010010000000000001000100000000000100000000000000001111000000000000111000000000000011010000000000001100000000000000101100000000000010100000000000001001000000000000100000000000000001110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000" *) 
  (* LC_PROBE_OUT_INIT_VAL_STRING = "256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001" *) 
  (* LC_PROBE_OUT_LOW_BIT_POS_STRING = "4096'b
  (* LC_PROBE_OUT_WIDTH_STRING = "2048'b
  (* LC_TOTAL_PROBE_IN_WIDTH = "0" *) 
  (* LC_TOTAL_PROBE_OUT_WIDTH = "1" *) 
  (* syn_noprune = "1" *) 
  design_1_vio_0_1_vio_v3_0_19_vio inst
       (.clk(clk),
        .probe_in0(1'b0),
        .probe_in1(1'b0),
        .probe_in10(1'b0),
        .probe_in100(1'b0),
        .probe_in101(1'b0),
        .probe_in102(1'b0),
        .probe_in103(1'b0),
        .probe_in104(1'b0),
        .probe_in105(1'b0),
        .probe_in106(1'b0),
        .probe_in107(1'b0),
        .probe_in108(1'b0),
        .probe_in109(1'b0),
        .probe_in11(1'b0),
        .probe_in110(1'b0),
        .probe_in111(1'b0),
        .probe_in112(1'b0),
        .probe_in113(1'b0),
        .probe_in114(1'b0),
        .probe_in115(1'b0),
        .probe_in116(1'b0),
        .probe_in117(1'b0),
        .probe_in118(1'b0),
        .probe_in119(1'b0),
        .probe_in12(1'b0),
        .probe_in120(1'b0),
        .probe_in121(1'b0),
        .probe_in122(1'b0),
        .probe_in123(1'b0),
        .probe_in124(1'b0),
        .probe_in125(1'b0),
        .probe_in126(1'b0),
        .probe_in127(1'b0),
        .probe_in128(1'b0),
        .probe_in129(1'b0),
        .probe_in13(1'b0),
        .probe_in130(1'b0),
        .probe_in131(1'b0),
        .probe_in132(1'b0),
        .probe_in133(1'b0),
        .probe_in134(1'b0),
        .probe_in135(1'b0),
        .probe_in136(1'b0),
        .probe_in137(1'b0),
        .probe_in138(1'b0),
        .probe_in139(1'b0),
        .probe_in14(1'b0),
        .probe_in140(1'b0),
        .probe_in141(1'b0),
        .probe_in142(1'b0),
        .probe_in143(1'b0),
        .probe_in144(1'b0),
        .probe_in145(1'b0),
        .probe_in146(1'b0),
        .probe_in147(1'b0),
        .probe_in148(1'b0),
        .probe_in149(1'b0),
        .probe_in15(1'b0),
        .probe_in150(1'b0),
        .probe_in151(1'b0),
        .probe_in152(1'b0),
        .probe_in153(1'b0),
        .probe_in154(1'b0),
        .probe_in155(1'b0),
        .probe_in156(1'b0),
        .probe_in157(1'b0),
        .probe_in158(1'b0),
        .probe_in159(1'b0),
        .probe_in16(1'b0),
        .probe_in160(1'b0),
        .probe_in161(1'b0),
        .probe_in162(1'b0),
        .probe_in163(1'b0),
        .probe_in164(1'b0),
        .probe_in165(1'b0),
        .probe_in166(1'b0),
        .probe_in167(1'b0),
        .probe_in168(1'b0),
        .probe_in169(1'b0),
        .probe_in17(1'b0),
        .probe_in170(1'b0),
        .probe_in171(1'b0),
        .probe_in172(1'b0),
        .probe_in173(1'b0),
        .probe_in174(1'b0),
        .probe_in175(1'b0),
        .probe_in176(1'b0),
        .probe_in177(1'b0),
        .probe_in178(1'b0),
        .probe_in179(1'b0),
        .probe_in18(1'b0),
        .probe_in180(1'b0),
        .probe_in181(1'b0),
        .probe_in182(1'b0),
        .probe_in183(1'b0),
        .probe_in184(1'b0),
        .probe_in185(1'b0),
        .probe_in186(1'b0),
        .probe_in187(1'b0),
        .probe_in188(1'b0),
        .probe_in189(1'b0),
        .probe_in19(1'b0),
        .probe_in190(1'b0),
        .probe_in191(1'b0),
        .probe_in192(1'b0),
        .probe_in193(1'b0),
        .probe_in194(1'b0),
        .probe_in195(1'b0),
        .probe_in196(1'b0),
        .probe_in197(1'b0),
        .probe_in198(1'b0),
        .probe_in199(1'b0),
        .probe_in2(1'b0),
        .probe_in20(1'b0),
        .probe_in200(1'b0),
        .probe_in201(1'b0),
        .probe_in202(1'b0),
        .probe_in203(1'b0),
        .probe_in204(1'b0),
        .probe_in205(1'b0),
        .probe_in206(1'b0),
        .probe_in207(1'b0),
        .probe_in208(1'b0),
        .probe_in209(1'b0),
        .probe_in21(1'b0),
        .probe_in210(1'b0),
        .probe_in211(1'b0),
        .probe_in212(1'b0),
        .probe_in213(1'b0),
        .probe_in214(1'b0),
        .probe_in215(1'b0),
        .probe_in216(1'b0),
        .probe_in217(1'b0),
        .probe_in218(1'b0),
        .probe_in219(1'b0),
        .probe_in22(1'b0),
        .probe_in220(1'b0),
        .probe_in221(1'b0),
        .probe_in222(1'b0),
        .probe_in223(1'b0),
        .probe_in224(1'b0),
        .probe_in225(1'b0),
        .probe_in226(1'b0),
        .probe_in227(1'b0),
        .probe_in228(1'b0),
        .probe_in229(1'b0),
        .probe_in23(1'b0),
        .probe_in230(1'b0),
        .probe_in231(1'b0),
        .probe_in232(1'b0),
        .probe_in233(1'b0),
        .probe_in234(1'b0),
        .probe_in235(1'b0),
        .probe_in236(1'b0),
        .probe_in237(1'b0),
        .probe_in238(1'b0),
        .probe_in239(1'b0),
        .probe_in24(1'b0),
        .probe_in240(1'b0),
        .probe_in241(1'b0),
        .probe_in242(1'b0),
        .probe_in243(1'b0),
        .probe_in244(1'b0),
        .probe_in245(1'b0),
        .probe_in246(1'b0),
        .probe_in247(1'b0),
        .probe_in248(1'b0),
        .probe_in249(1'b0),
        .probe_in25(1'b0),
        .probe_in250(1'b0),
        .probe_in251(1'b0),
        .probe_in252(1'b0),
        .probe_in253(1'b0),
        .probe_in254(1'b0),
        .probe_in255(1'b0),
        .probe_in26(1'b0),
        .probe_in27(1'b0),
        .probe_in28(1'b0),
        .probe_in29(1'b0),
        .probe_in3(1'b0),
        .probe_in30(1'b0),
        .probe_in31(1'b0),
        .probe_in32(1'b0),
        .probe_in33(1'b0),
        .probe_in34(1'b0),
        .probe_in35(1'b0),
        .probe_in36(1'b0),
        .probe_in37(1'b0),
        .probe_in38(1'b0),
        .probe_in39(1'b0),
        .probe_in4(1'b0),
        .probe_in40(1'b0),
        .probe_in41(1'b0),
        .probe_in42(1'b0),
        .probe_in43(1'b0),
        .probe_in44(1'b0),
        .probe_in45(1'b0),
        .probe_in46(1'b0),
        .probe_in47(1'b0),
        .probe_in48(1'b0),
        .probe_in49(1'b0),
        .probe_in5(1'b0),
        .probe_in50(1'b0),
        .probe_in51(1'b0),
        .probe_in52(1'b0),
        .probe_in53(1'b0),
        .probe_in54(1'b0),
        .probe_in55(1'b0),
        .probe_in56(1'b0),
        .probe_in57(1'b0),
        .probe_in58(1'b0),
        .probe_in59(1'b0),
        .probe_in6(1'b0),
        .probe_in60(1'b0),
        .probe_in61(1'b0),
        .probe_in62(1'b0),
        .probe_in63(1'b0),
        .probe_in64(1'b0),
        .probe_in65(1'b0),
        .probe_in66(1'b0),
        .probe_in67(1'b0),
        .probe_in68(1'b0),
        .probe_in69(1'b0),
        .probe_in7(1'b0),
        .probe_in70(1'b0),
        .probe_in71(1'b0),
        .probe_in72(1'b0),
        .probe_in73(1'b0),
        .probe_in74(1'b0),
        .probe_in75(1'b0),
        .probe_in76(1'b0),
        .probe_in77(1'b0),
        .probe_in78(1'b0),
        .probe_in79(1'b0),
        .probe_in8(1'b0),
        .probe_in80(1'b0),
        .probe_in81(1'b0),
        .probe_in82(1'b0),
        .probe_in83(1'b0),
        .probe_in84(1'b0),
        .probe_in85(1'b0),
        .probe_in86(1'b0),
        .probe_in87(1'b0),
        .probe_in88(1'b0),
        .probe_in89(1'b0),
        .probe_in9(1'b0),
        .probe_in90(1'b0),
        .probe_in91(1'b0),
        .probe_in92(1'b0),
        .probe_in93(1'b0),
        .probe_in94(1'b0),
        .probe_in95(1'b0),
        .probe_in96(1'b0),
        .probe_in97(1'b0),
        .probe_in98(1'b0),
        .probe_in99(1'b0),
        .probe_out0(probe_out0),
        .probe_out1(NLW_inst_probe_out1_UNCONNECTED[0]),
        .probe_out10(NLW_inst_probe_out10_UNCONNECTED[0]),
        .probe_out100(NLW_inst_probe_out100_UNCONNECTED[0]),
        .probe_out101(NLW_inst_probe_out101_UNCONNECTED[0]),
        .probe_out102(NLW_inst_probe_out102_UNCONNECTED[0]),
        .probe_out103(NLW_inst_probe_out103_UNCONNECTED[0]),
        .probe_out104(NLW_inst_probe_out104_UNCONNECTED[0]),
        .probe_out105(NLW_inst_probe_out105_UNCONNECTED[0]),
        .probe_out106(NLW_inst_probe_out106_UNCONNECTED[0]),
        .probe_out107(NLW_inst_probe_out107_UNCONNECTED[0]),
        .probe_out108(NLW_inst_probe_out108_UNCONNECTED[0]),
        .probe_out109(NLW_inst_probe_out109_UNCONNECTED[0]),
        .probe_out11(NLW_inst_probe_out11_UNCONNECTED[0]),
        .probe_out110(NLW_inst_probe_out110_UNCONNECTED[0]),
        .probe_out111(NLW_inst_probe_out111_UNCONNECTED[0]),
        .probe_out112(NLW_inst_probe_out112_UNCONNECTED[0]),
        .probe_out113(NLW_inst_probe_out113_UNCONNECTED[0]),
        .probe_out114(NLW_inst_probe_out114_UNCONNECTED[0]),
        .probe_out115(NLW_inst_probe_out115_UNCONNECTED[0]),
        .probe_out116(NLW_inst_probe_out116_UNCONNECTED[0]),
        .probe_out117(NLW_inst_probe_out117_UNCONNECTED[0]),
        .probe_out118(NLW_inst_probe_out118_UNCONNECTED[0]),
        .probe_out119(NLW_inst_probe_out119_UNCONNECTED[0]),
        .probe_out12(NLW_inst_probe_out12_UNCONNECTED[0]),
        .probe_out120(NLW_inst_probe_out120_UNCONNECTED[0]),
        .probe_out121(NLW_inst_probe_out121_UNCONNECTED[0]),
        .probe_out122(NLW_inst_probe_out122_UNCONNECTED[0]),
        .probe_out123(NLW_inst_probe_out123_UNCONNECTED[0]),
        .probe_out124(NLW_inst_probe_out124_UNCONNECTED[0]),
        .probe_out125(NLW_inst_probe_out125_UNCONNECTED[0]),
        .probe_out126(NLW_inst_probe_out126_UNCONNECTED[0]),
        .probe_out127(NLW_inst_probe_out127_UNCONNECTED[0]),
        .probe_out128(NLW_inst_probe_out128_UNCONNECTED[0]),
        .probe_out129(NLW_inst_probe_out129_UNCONNECTED[0]),
        .probe_out13(NLW_inst_probe_out13_UNCONNECTED[0]),
        .probe_out130(NLW_inst_probe_out130_UNCONNECTED[0]),
        .probe_out131(NLW_inst_probe_out131_UNCONNECTED[0]),
        .probe_out132(NLW_inst_probe_out132_UNCONNECTED[0]),
        .probe_out133(NLW_inst_probe_out133_UNCONNECTED[0]),
        .probe_out134(NLW_inst_probe_out134_UNCONNECTED[0]),
        .probe_out135(NLW_inst_probe_out135_UNCONNECTED[0]),
        .probe_out136(NLW_inst_probe_out136_UNCONNECTED[0]),
        .probe_out137(NLW_inst_probe_out137_UNCONNECTED[0]),
        .probe_out138(NLW_inst_probe_out138_UNCONNECTED[0]),
        .probe_out139(NLW_inst_probe_out139_UNCONNECTED[0]),
        .probe_out14(NLW_inst_probe_out14_UNCONNECTED[0]),
        .probe_out140(NLW_inst_probe_out140_UNCONNECTED[0]),
        .probe_out141(NLW_inst_probe_out141_UNCONNECTED[0]),
        .probe_out142(NLW_inst_probe_out142_UNCONNECTED[0]),
        .probe_out143(NLW_inst_probe_out143_UNCONNECTED[0]),
        .probe_out144(NLW_inst_probe_out144_UNCONNECTED[0]),
        .probe_out145(NLW_inst_probe_out145_UNCONNECTED[0]),
        .probe_out146(NLW_inst_probe_out146_UNCONNECTED[0]),
        .probe_out147(NLW_inst_probe_out147_UNCONNECTED[0]),
        .probe_out148(NLW_inst_probe_out148_UNCONNECTED[0]),
        .probe_out149(NLW_inst_probe_out149_UNCONNECTED[0]),
        .probe_out15(NLW_inst_probe_out15_UNCONNECTED[0]),
        .probe_out150(NLW_inst_probe_out150_UNCONNECTED[0]),
        .probe_out151(NLW_inst_probe_out151_UNCONNECTED[0]),
        .probe_out152(NLW_inst_probe_out152_UNCONNECTED[0]),
        .probe_out153(NLW_inst_probe_out153_UNCONNECTED[0]),
        .probe_out154(NLW_inst_probe_out154_UNCONNECTED[0]),
        .probe_out155(NLW_inst_probe_out155_UNCONNECTED[0]),
        .probe_out156(NLW_inst_probe_out156_UNCONNECTED[0]),
        .probe_out157(NLW_inst_probe_out157_UNCONNECTED[0]),
        .probe_out158(NLW_inst_probe_out158_UNCONNECTED[0]),
        .probe_out159(NLW_inst_probe_out159_UNCONNECTED[0]),
        .probe_out16(NLW_inst_probe_out16_UNCONNECTED[0]),
        .probe_out160(NLW_inst_probe_out160_UNCONNECTED[0]),
        .probe_out161(NLW_inst_probe_out161_UNCONNECTED[0]),
        .probe_out162(NLW_inst_probe_out162_UNCONNECTED[0]),
        .probe_out163(NLW_inst_probe_out163_UNCONNECTED[0]),
        .probe_out164(NLW_inst_probe_out164_UNCONNECTED[0]),
        .probe_out165(NLW_inst_probe_out165_UNCONNECTED[0]),
        .probe_out166(NLW_inst_probe_out166_UNCONNECTED[0]),
        .probe_out167(NLW_inst_probe_out167_UNCONNECTED[0]),
        .probe_out168(NLW_inst_probe_out168_UNCONNECTED[0]),
        .probe_out169(NLW_inst_probe_out169_UNCONNECTED[0]),
        .probe_out17(NLW_inst_probe_out17_UNCONNECTED[0]),
        .probe_out170(NLW_inst_probe_out170_UNCONNECTED[0]),
        .probe_out171(NLW_inst_probe_out171_UNCONNECTED[0]),
        .probe_out172(NLW_inst_probe_out172_UNCONNECTED[0]),
        .probe_out173(NLW_inst_probe_out173_UNCONNECTED[0]),
        .probe_out174(NLW_inst_probe_out174_UNCONNECTED[0]),
        .probe_out175(NLW_inst_probe_out175_UNCONNECTED[0]),
        .probe_out176(NLW_inst_probe_out176_UNCONNECTED[0]),
        .probe_out177(NLW_inst_probe_out177_UNCONNECTED[0]),
        .probe_out178(NLW_inst_probe_out178_UNCONNECTED[0]),
        .probe_out179(NLW_inst_probe_out179_UNCONNECTED[0]),
        .probe_out18(NLW_inst_probe_out18_UNCONNECTED[0]),
        .probe_out180(NLW_inst_probe_out180_UNCONNECTED[0]),
        .probe_out181(NLW_inst_probe_out181_UNCONNECTED[0]),
        .probe_out182(NLW_inst_probe_out182_UNCONNECTED[0]),
        .probe_out183(NLW_inst_probe_out183_UNCONNECTED[0]),
        .probe_out184(NLW_inst_probe_out184_UNCONNECTED[0]),
        .probe_out185(NLW_inst_probe_out185_UNCONNECTED[0]),
        .probe_out186(NLW_inst_probe_out186_UNCONNECTED[0]),
        .probe_out187(NLW_inst_probe_out187_UNCONNECTED[0]),
        .probe_out188(NLW_inst_probe_out188_UNCONNECTED[0]),
        .probe_out189(NLW_inst_probe_out189_UNCONNECTED[0]),
        .probe_out19(NLW_inst_probe_out19_UNCONNECTED[0]),
        .probe_out190(NLW_inst_probe_out190_UNCONNECTED[0]),
        .probe_out191(NLW_inst_probe_out191_UNCONNECTED[0]),
        .probe_out192(NLW_inst_probe_out192_UNCONNECTED[0]),
        .probe_out193(NLW_inst_probe_out193_UNCONNECTED[0]),
        .probe_out194(NLW_inst_probe_out194_UNCONNECTED[0]),
        .probe_out195(NLW_inst_probe_out195_UNCONNECTED[0]),
        .probe_out196(NLW_inst_probe_out196_UNCONNECTED[0]),
        .probe_out197(NLW_inst_probe_out197_UNCONNECTED[0]),
        .probe_out198(NLW_inst_probe_out198_UNCONNECTED[0]),
        .probe_out199(NLW_inst_probe_out199_UNCONNECTED[0]),
        .probe_out2(NLW_inst_probe_out2_UNCONNECTED[0]),
        .probe_out20(NLW_inst_probe_out20_UNCONNECTED[0]),
        .probe_out200(NLW_inst_probe_out200_UNCONNECTED[0]),
        .probe_out201(NLW_inst_probe_out201_UNCONNECTED[0]),
        .probe_out202(NLW_inst_probe_out202_UNCONNECTED[0]),
        .probe_out203(NLW_inst_probe_out203_UNCONNECTED[0]),
        .probe_out204(NLW_inst_probe_out204_UNCONNECTED[0]),
        .probe_out205(NLW_inst_probe_out205_UNCONNECTED[0]),
        .probe_out206(NLW_inst_probe_out206_UNCONNECTED[0]),
        .probe_out207(NLW_inst_probe_out207_UNCONNECTED[0]),
        .probe_out208(NLW_inst_probe_out208_UNCONNECTED[0]),
        .probe_out209(NLW_inst_probe_out209_UNCONNECTED[0]),
        .probe_out21(NLW_inst_probe_out21_UNCONNECTED[0]),
        .probe_out210(NLW_inst_probe_out210_UNCONNECTED[0]),
        .probe_out211(NLW_inst_probe_out211_UNCONNECTED[0]),
        .probe_out212(NLW_inst_probe_out212_UNCONNECTED[0]),
        .probe_out213(NLW_inst_probe_out213_UNCONNECTED[0]),
        .probe_out214(NLW_inst_probe_out214_UNCONNECTED[0]),
        .probe_out215(NLW_inst_probe_out215_UNCONNECTED[0]),
        .probe_out216(NLW_inst_probe_out216_UNCONNECTED[0]),
        .probe_out217(NLW_inst_probe_out217_UNCONNECTED[0]),
        .probe_out218(NLW_inst_probe_out218_UNCONNECTED[0]),
        .probe_out219(NLW_inst_probe_out219_UNCONNECTED[0]),
        .probe_out22(NLW_inst_probe_out22_UNCONNECTED[0]),
        .probe_out220(NLW_inst_probe_out220_UNCONNECTED[0]),
        .probe_out221(NLW_inst_probe_out221_UNCONNECTED[0]),
        .probe_out222(NLW_inst_probe_out222_UNCONNECTED[0]),
        .probe_out223(NLW_inst_probe_out223_UNCONNECTED[0]),
        .probe_out224(NLW_inst_probe_out224_UNCONNECTED[0]),
        .probe_out225(NLW_inst_probe_out225_UNCONNECTED[0]),
        .probe_out226(NLW_inst_probe_out226_UNCONNECTED[0]),
        .probe_out227(NLW_inst_probe_out227_UNCONNECTED[0]),
        .probe_out228(NLW_inst_probe_out228_UNCONNECTED[0]),
        .probe_out229(NLW_inst_probe_out229_UNCONNECTED[0]),
        .probe_out23(NLW_inst_probe_out23_UNCONNECTED[0]),
        .probe_out230(NLW_inst_probe_out230_UNCONNECTED[0]),
        .probe_out231(NLW_inst_probe_out231_UNCONNECTED[0]),
        .probe_out232(NLW_inst_probe_out232_UNCONNECTED[0]),
        .probe_out233(NLW_inst_probe_out233_UNCONNECTED[0]),
        .probe_out234(NLW_inst_probe_out234_UNCONNECTED[0]),
        .probe_out235(NLW_inst_probe_out235_UNCONNECTED[0]),
        .probe_out236(NLW_inst_probe_out236_UNCONNECTED[0]),
        .probe_out237(NLW_inst_probe_out237_UNCONNECTED[0]),
        .probe_out238(NLW_inst_probe_out238_UNCONNECTED[0]),
        .probe_out239(NLW_inst_probe_out239_UNCONNECTED[0]),
        .probe_out24(NLW_inst_probe_out24_UNCONNECTED[0]),
        .probe_out240(NLW_inst_probe_out240_UNCONNECTED[0]),
        .probe_out241(NLW_inst_probe_out241_UNCONNECTED[0]),
        .probe_out242(NLW_inst_probe_out242_UNCONNECTED[0]),
        .probe_out243(NLW_inst_probe_out243_UNCONNECTED[0]),
        .probe_out244(NLW_inst_probe_out244_UNCONNECTED[0]),
        .probe_out245(NLW_inst_probe_out245_UNCONNECTED[0]),
        .probe_out246(NLW_inst_probe_out246_UNCONNECTED[0]),
        .probe_out247(NLW_inst_probe_out247_UNCONNECTED[0]),
        .probe_out248(NLW_inst_probe_out248_UNCONNECTED[0]),
        .probe_out249(NLW_inst_probe_out249_UNCONNECTED[0]),
        .probe_out25(NLW_inst_probe_out25_UNCONNECTED[0]),
        .probe_out250(NLW_inst_probe_out250_UNCONNECTED[0]),
        .probe_out251(NLW_inst_probe_out251_UNCONNECTED[0]),
        .probe_out252(NLW_inst_probe_out252_UNCONNECTED[0]),
        .probe_out253(NLW_inst_probe_out253_UNCONNECTED[0]),
        .probe_out254(NLW_inst_probe_out254_UNCONNECTED[0]),
        .probe_out255(NLW_inst_probe_out255_UNCONNECTED[0]),
        .probe_out26(NLW_inst_probe_out26_UNCONNECTED[0]),
        .probe_out27(NLW_inst_probe_out27_UNCONNECTED[0]),
        .probe_out28(NLW_inst_probe_out28_UNCONNECTED[0]),
        .probe_out29(NLW_inst_probe_out29_UNCONNECTED[0]),
        .probe_out3(NLW_inst_probe_out3_UNCONNECTED[0]),
        .probe_out30(NLW_inst_probe_out30_UNCONNECTED[0]),
        .probe_out31(NLW_inst_probe_out31_UNCONNECTED[0]),
        .probe_out32(NLW_inst_probe_out32_UNCONNECTED[0]),
        .probe_out33(NLW_inst_probe_out33_UNCONNECTED[0]),
        .probe_out34(NLW_inst_probe_out34_UNCONNECTED[0]),
        .probe_out35(NLW_inst_probe_out35_UNCONNECTED[0]),
        .probe_out36(NLW_inst_probe_out36_UNCONNECTED[0]),
        .probe_out37(NLW_inst_probe_out37_UNCONNECTED[0]),
        .probe_out38(NLW_inst_probe_out38_UNCONNECTED[0]),
        .probe_out39(NLW_inst_probe_out39_UNCONNECTED[0]),
        .probe_out4(NLW_inst_probe_out4_UNCONNECTED[0]),
        .probe_out40(NLW_inst_probe_out40_UNCONNECTED[0]),
        .probe_out41(NLW_inst_probe_out41_UNCONNECTED[0]),
        .probe_out42(NLW_inst_probe_out42_UNCONNECTED[0]),
        .probe_out43(NLW_inst_probe_out43_UNCONNECTED[0]),
        .probe_out44(NLW_inst_probe_out44_UNCONNECTED[0]),
        .probe_out45(NLW_inst_probe_out45_UNCONNECTED[0]),
        .probe_out46(NLW_inst_probe_out46_UNCONNECTED[0]),
        .probe_out47(NLW_inst_probe_out47_UNCONNECTED[0]),
        .probe_out48(NLW_inst_probe_out48_UNCONNECTED[0]),
        .probe_out49(NLW_inst_probe_out49_UNCONNECTED[0]),
        .probe_out5(NLW_inst_probe_out5_UNCONNECTED[0]),
        .probe_out50(NLW_inst_probe_out50_UNCONNECTED[0]),
        .probe_out51(NLW_inst_probe_out51_UNCONNECTED[0]),
        .probe_out52(NLW_inst_probe_out52_UNCONNECTED[0]),
        .probe_out53(NLW_inst_probe_out53_UNCONNECTED[0]),
        .probe_out54(NLW_inst_probe_out54_UNCONNECTED[0]),
        .probe_out55(NLW_inst_probe_out55_UNCONNECTED[0]),
        .probe_out56(NLW_inst_probe_out56_UNCONNECTED[0]),
        .probe_out57(NLW_inst_probe_out57_UNCONNECTED[0]),
        .probe_out58(NLW_inst_probe_out58_UNCONNECTED[0]),
        .probe_out59(NLW_inst_probe_out59_UNCONNECTED[0]),
        .probe_out6(NLW_inst_probe_out6_UNCONNECTED[0]),
        .probe_out60(NLW_inst_probe_out60_UNCONNECTED[0]),
        .probe_out61(NLW_inst_probe_out61_UNCONNECTED[0]),
        .probe_out62(NLW_inst_probe_out62_UNCONNECTED[0]),
        .probe_out63(NLW_inst_probe_out63_UNCONNECTED[0]),
        .probe_out64(NLW_inst_probe_out64_UNCONNECTED[0]),
        .probe_out65(NLW_inst_probe_out65_UNCONNECTED[0]),
        .probe_out66(NLW_inst_probe_out66_UNCONNECTED[0]),
        .probe_out67(NLW_inst_probe_out67_UNCONNECTED[0]),
        .probe_out68(NLW_inst_probe_out68_UNCONNECTED[0]),
        .probe_out69(NLW_inst_probe_out69_UNCONNECTED[0]),
        .probe_out7(NLW_inst_probe_out7_UNCONNECTED[0]),
        .probe_out70(NLW_inst_probe_out70_UNCONNECTED[0]),
        .probe_out71(NLW_inst_probe_out71_UNCONNECTED[0]),
        .probe_out72(NLW_inst_probe_out72_UNCONNECTED[0]),
        .probe_out73(NLW_inst_probe_out73_UNCONNECTED[0]),
        .probe_out74(NLW_inst_probe_out74_UNCONNECTED[0]),
        .probe_out75(NLW_inst_probe_out75_UNCONNECTED[0]),
        .probe_out76(NLW_inst_probe_out76_UNCONNECTED[0]),
        .probe_out77(NLW_inst_probe_out77_UNCONNECTED[0]),
        .probe_out78(NLW_inst_probe_out78_UNCONNECTED[0]),
        .probe_out79(NLW_inst_probe_out79_UNCONNECTED[0]),
        .probe_out8(NLW_inst_probe_out8_UNCONNECTED[0]),
        .probe_out80(NLW_inst_probe_out80_UNCONNECTED[0]),
        .probe_out81(NLW_inst_probe_out81_UNCONNECTED[0]),
        .probe_out82(NLW_inst_probe_out82_UNCONNECTED[0]),
        .probe_out83(NLW_inst_probe_out83_UNCONNECTED[0]),
        .probe_out84(NLW_inst_probe_out84_UNCONNECTED[0]),
        .probe_out85(NLW_inst_probe_out85_UNCONNECTED[0]),
        .probe_out86(NLW_inst_probe_out86_UNCONNECTED[0]),
        .probe_out87(NLW_inst_probe_out87_UNCONNECTED[0]),
        .probe_out88(NLW_inst_probe_out88_UNCONNECTED[0]),
        .probe_out89(NLW_inst_probe_out89_UNCONNECTED[0]),
        .probe_out9(NLW_inst_probe_out9_UNCONNECTED[0]),
        .probe_out90(NLW_inst_probe_out90_UNCONNECTED[0]),
        .probe_out91(NLW_inst_probe_out91_UNCONNECTED[0]),
        .probe_out92(NLW_inst_probe_out92_UNCONNECTED[0]),
        .probe_out93(NLW_inst_probe_out93_UNCONNECTED[0]),
        .probe_out94(NLW_inst_probe_out94_UNCONNECTED[0]),
        .probe_out95(NLW_inst_probe_out95_UNCONNECTED[0]),
        .probe_out96(NLW_inst_probe_out96_UNCONNECTED[0]),
        .probe_out97(NLW_inst_probe_out97_UNCONNECTED[0]),
        .probe_out98(NLW_inst_probe_out98_UNCONNECTED[0]),
        .probe_out99(NLW_inst_probe_out99_UNCONNECTED[0]),
        .sl_iport0(sl_iport0),
        .sl_oport0(sl_oport0));
endmodule

(* ECO_CHECKSUM = "1922016a" *) 
(* NotValidForBitStream *)
module design_1_wrapper
   (btn,
    clk,
    led,
    rgb,
    state,
    sw);
  input [3:0]btn;
  input clk;
  output [3:0]led;
  output [2:0]rgb;
  input state;
  input [2:0]sw;

  wire [3:0]btn;
  wire [3:0]btn_IBUF;
  wire clk;
  wire clk_IBUF;
  wire clk_IBUF_BUFG;
  wire [3:0]led;
  wire [3:0]led_OBUF;
  wire [2:0]rgb;
  wire [2:0]rgb_OBUF;
  wire [36:0]sl_iport0;
  wire [16:0]sl_oport0;
  wire state;
  wire state_IBUF;
  wire [2:0]sw;
  wire [2:0]sw_IBUF;

initial begin
 $sdf_annotate("design_1_wrapper_time_impl.sdf",,,,"tool_control");
end
  IBUF \btn_IBUF[0]_inst 
       (.I(btn[0]),
        .O(btn_IBUF[0]));
  IBUF \btn_IBUF[1]_inst 
       (.I(btn[1]),
        .O(btn_IBUF[1]));
  IBUF \btn_IBUF[2]_inst 
       (.I(btn[2]),
        .O(btn_IBUF[2]));
  IBUF \btn_IBUF[3]_inst 
       (.I(btn[3]),
        .O(btn_IBUF[3]));
  (* LOPT_BUFG_CLOCK *) 
  (* OPT_MODIFIED = "BUFG_OPT" *) 
  BUFG clk_IBUF_BUFG_inst
       (.I(clk_IBUF),
        .O(clk_IBUF_BUFG));
  (* OPT_INSERTED *) 
  (* OPT_MODIFIED = "MLO BUFG_OPT" *) 
  IBUF clk_IBUF_inst
       (.I(clk),
        .O(clk_IBUF));
  (* DEBUG_PORT_clk = "" *) 
  (* IS_DEBUG_CORE *) 
  dbg_hub dbg_hub
       (.clk(clk_IBUF_BUFG),
        .sl_iport0_o(sl_iport0),
        .sl_oport0_i(sl_oport0));
  (* hw_handoff = "design_1.hwdef" *) 
  design_1 design_1_i
       (.btn(btn_IBUF),
        .clk(clk_IBUF_BUFG),
        .led(led_OBUF),
        .rgb(rgb_OBUF),
        .sl_iport0(sl_iport0),
        .sl_oport0(sl_oport0),
        .state(state_IBUF),
        .sw(sw_IBUF));
  OBUF \led_OBUF[0]_inst 
       (.I(led_OBUF[0]),
        .O(led[0]));
  OBUF \led_OBUF[1]_inst 
       (.I(led_OBUF[1]),
        .O(led[1]));
  OBUF \led_OBUF[2]_inst 
       (.I(led_OBUF[2]),
        .O(led[2]));
  OBUF \led_OBUF[3]_inst 
       (.I(led_OBUF[3]),
        .O(led[3]));
  OBUF \rgb_OBUF[0]_inst 
       (.I(rgb_OBUF[0]),
        .O(rgb[0]));
  OBUF \rgb_OBUF[1]_inst 
       (.I(rgb_OBUF[1]),
        .O(rgb[1]));
  OBUF \rgb_OBUF[2]_inst 
       (.I(rgb_OBUF[2]),
        .O(rgb[2]));
  IBUF state_IBUF_inst
       (.I(state),
        .O(state_IBUF));
  IBUF \sw_IBUF[0]_inst 
       (.I(sw[0]),
        .O(sw_IBUF[0]));
  IBUF \sw_IBUF[1]_inst 
       (.I(sw[1]),
        .O(sw_IBUF[1]));
  IBUF \sw_IBUF[2]_inst 
       (.I(sw[2]),
        .O(sw_IBUF[2]));
endmodule

(* C_ADDR_WIDTH = "4" *) (* C_DEFAULT_DATA = "0" *) (* C_DEPTH = "16" *) 
(* C_ELABORATION_DIR = "./" *) (* C_FAMILY = "zynq" *) (* C_HAS_CLK = "0" *) 
(* C_HAS_D = "0" *) (* C_HAS_DPO = "0" *) (* C_HAS_DPRA = "0" *) 
(* C_HAS_I_CE = "0" *) (* C_HAS_QDPO = "0" *) (* C_HAS_QDPO_CE = "0" *) 
(* C_HAS_QDPO_CLK = "0" *) (* C_HAS_QDPO_RST = "0" *) (* C_HAS_QDPO_SRST = "0" *) 
(* C_HAS_QSPO = "0" *) (* C_HAS_QSPO_CE = "0" *) (* C_HAS_QSPO_RST = "0" *) 
(* C_HAS_QSPO_SRST = "0" *) (* C_HAS_SPO = "1" *) (* C_HAS_WE = "0" *) 
(* C_MEM_INIT_FILE = "levels.mif" *) (* C_MEM_TYPE = "0" *) (* C_PARSER_TYPE = "1" *) 
(* C_PIPELINE_STAGES = "0" *) (* C_QCE_JOINED = "0" *) (* C_QUALIFY_WE = "0" *) 
(* C_READ_MIF = "1" *) (* C_REG_A_D_INPUTS = "0" *) (* C_REG_DPRA_INPUT = "0" *) 
(* C_SYNC_ENABLE = "1" *) (* C_WIDTH = "32" *) (* ORIG_REF_NAME = "dist_mem_gen_v8_0_13" *) 
module design_1_ram_reader_0_0_dist_mem_gen_v8_0_13
   (a,
    d,
    dpra,
    clk,
    we,
    i_ce,
    qspo_ce,
    qdpo_ce,
    qdpo_clk,
    qspo_rst,
    qdpo_rst,
    qspo_srst,
    qdpo_srst,
    spo,
    dpo,
    qspo,
    qdpo);
  input [3:0]a;
  input [31:0]d;
  input [3:0]dpra;
  input clk;
  input we;
  input i_ce;
  input qspo_ce;
  input qdpo_ce;
  input qdpo_clk;
  input qspo_rst;
  input qdpo_rst;
  input qspo_srst;
  input qdpo_srst;
  output [31:0]spo;
  output [31:0]dpo;
  output [31:0]qspo;
  output [31:0]qdpo;

  wire [3:0]a;
  wire [31:0]\^spo ;
  wire [3:3]\NLW_synth_options.dist_mem_inst_a_UNCONNECTED ;

  assign spo[31:30] = \^spo [31:30];
  assign spo[29] = \^spo [4];
  assign spo[28] = \^spo [28];
  assign spo[27] = \^spo [4];
  assign spo[26:19] = \^spo [26:19];
  assign spo[18] = \^spo [7];
  assign spo[17:15] = \^spo [17:15];
  assign spo[13:2] = \^spo [13:2];
  assign spo[0] = \^spo [0];
  design_1_ram_reader_0_0_dist_mem_gen_v8_0_13_synth \synth_options.dist_mem_inst 
       (.a({\NLW_synth_options.dist_mem_inst_a_UNCONNECTED [3],a[2:0]}),
        .spo({\^spo [31:30],\^spo [4],\^spo [28],\^spo [26:19],\^spo [7],\^spo [17:15],\^spo [13:8],\^spo [6:5],\^spo [3:2],\^spo [0]}));
endmodule

(* ORIG_REF_NAME = "dist_mem_gen_v8_0_13_synth" *) 
module design_1_ram_reader_0_0_dist_mem_gen_v8_0_13_synth
   (spo,
    a);
  output [26:0]spo;
  input [3:0]a;

  wire [3:0]a;
  wire [26:0]spo;
  wire [3:3]\NLW_gen_rom.rom_inst_a_UNCONNECTED ;

  design_1_ram_reader_0_0_rom \gen_rom.rom_inst 
       (.a({\NLW_gen_rom.rom_inst_a_UNCONNECTED [3],a[2:0]}),
        .spo(spo));
endmodule

(* ORIG_REF_NAME = "rom" *) 
module design_1_ram_reader_0_0_rom
   (spo,
    a);
  output [26:0]spo;
  input [3:0]a;

  wire [3:0]a;
  wire [26:0]spo;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \spo[0]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[0]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \spo[10]_INST_0 
       (.I0(a[1]),
        .I1(a[0]),
        .O(spo[7]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \spo[11]_INST_0 
       (.I0(a[2]),
        .I1(a[1]),
        .I2(a[0]),
        .O(spo[8]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \spo[12]_INST_0 
       (.I0(a[1]),
        .I1(a[2]),
        .I2(a[0]),
        .O(spo[9]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \spo[13]_INST_0 
       (.I0(a[1]),
        .I1(a[0]),
        .I2(a[2]),
        .O(spo[10]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \spo[15]_INST_0 
       (.I0(a[2]),
        .I1(a[0]),
        .O(spo[11]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h18)) 
    \spo[16]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[12]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h07)) 
    \spo[17]_INST_0 
       (.I0(a[2]),
        .I1(a[0]),
        .I2(a[1]),
        .O(spo[13]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \spo[19]_INST_0 
       (.I0(a[1]),
        .I1(a[0]),
        .O(spo[15]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \spo[20]_INST_0 
       (.I0(a[1]),
        .I1(a[2]),
        .I2(a[0]),
        .O(spo[16]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \spo[21]_INST_0 
       (.I0(a[2]),
        .I1(a[1]),
        .O(spo[17]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \spo[22]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[18]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h09)) 
    \spo[23]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[19]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h1C)) 
    \spo[24]_INST_0 
       (.I0(a[0]),
        .I1(a[1]),
        .I2(a[2]),
        .O(spo[20]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \spo[25]_INST_0 
       (.I0(a[2]),
        .I1(a[1]),
        .I2(a[0]),
        .O(spo[21]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \spo[26]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[22]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    \spo[28]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[23]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h34)) 
    \spo[2]_INST_0 
       (.I0(a[0]),
        .I1(a[1]),
        .I2(a[2]),
        .O(spo[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h34)) 
    \spo[30]_INST_0 
       (.I0(a[1]),
        .I1(a[0]),
        .I2(a[2]),
        .O(spo[25]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \spo[31]_INST_0 
       (.I0(a[1]),
        .I1(a[2]),
        .I2(a[0]),
        .O(spo[26]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \spo[3]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[2]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \spo[4]_INST_0 
       (.I0(a[1]),
        .I1(a[2]),
        .I2(a[0]),
        .O(spo[24]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h3A)) 
    \spo[5]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[3]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h84)) 
    \spo[6]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[4]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \spo[7]_INST_0 
       (.I0(a[1]),
        .I1(a[2]),
        .I2(a[0]),
        .O(spo[14]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \spo[8]_INST_0 
       (.I0(a[1]),
        .I1(a[2]),
        .I2(a[0]),
        .O(spo[5]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'hC2)) 
    \spo[9]_INST_0 
       (.I0(a[0]),
        .I1(a[2]),
        .I2(a[1]),
        .O(spo[6]));
endmodule

(* ORIG_REF_NAME = "vio_v3_0_19_decoder" *) 
module design_1_vio_0_1_vio_v3_0_19_decoder
   (s_drdy_i,
    in0,
    SR,
    xsdb_wr__0,
    \G_PROBE_OUT[0].wr_probe_out[0]_i_4_0 ,
    \G_PROBE_OUT[0].wr_probe_out[0]_i_6_0 ,
    s_do_i,
    s_rst_o,
    out,
    s_daddr_o,
    s_den_o,
    s_dwe_o,
    Q,
    Probe_out_reg);
  output s_drdy_i;
  output in0;
  output [0:0]SR;
  output xsdb_wr__0;
  output \G_PROBE_OUT[0].wr_probe_out[0]_i_4_0 ;
  output \G_PROBE_OUT[0].wr_probe_out[0]_i_6_0 ;
  output [15:0]s_do_i;
  input s_rst_o;
  input out;
  input [16:0]s_daddr_o;
  input s_den_o;
  input s_dwe_o;
  input [15:0]Q;
  input [0:0]Probe_out_reg;

  wire \Bus_data_out[0]_i_1_n_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out[0]_i_4_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out[0]_i_6_0 ;
  wire [0:0]Probe_out_reg;
  wire [15:0]Q;
  wire [0:0]SR;
  wire clear_int_i_1_n_0;
  wire committ_int_i_1_n_0;
  wire [15:0]data_info_probe_in;
  wire in0;
  wire int_cnt_rst;
  wire int_cnt_rst_i_1_n_0;
  wire out;
  wire [15:0]probe_out_modified;
  wire rd_en_p1;
  wire rd_en_p2;
  wire [16:0]s_daddr_o;
  wire s_den_o;
  wire [15:0]s_do_i;
  wire s_drdy_i;
  wire s_dwe_o;
  wire s_rst_o;
  wire wr_control_reg;
  wire \wr_en[2]_i_1_n_0 ;
  wire \wr_en[2]_i_2_n_0 ;
  wire \wr_en[4]_i_1_n_0 ;
  wire \wr_en[4]_i_2_n_0 ;
  wire \wr_en[4]_i_3_n_0 ;
  wire wr_probe_out_modified;
  wire [2:0]xsdb_addr_2_0_p1;
  wire [2:0]xsdb_addr_2_0_p2;
  wire xsdb_addr_8_p1;
  wire xsdb_addr_8_p2;
  wire xsdb_drdy_i_1_n_0;
  wire xsdb_rd;
  wire xsdb_wr__0;

  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_data_out[0]_i_1 
       (.I0(Probe_out_reg),
        .I1(xsdb_addr_8_p2),
        .I2(data_info_probe_in[0]),
        .O(\Bus_data_out[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h054A004A)) 
    \Bus_data_out[0]_i_2 
       (.I0(xsdb_addr_2_0_p2[0]),
        .I1(in0),
        .I2(xsdb_addr_2_0_p2[1]),
        .I3(xsdb_addr_2_0_p2[2]),
        .I4(probe_out_modified[0]),
        .O(data_info_probe_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[10]_i_1 
       (.I0(probe_out_modified[10]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[10]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[11]_i_1 
       (.I0(probe_out_modified[11]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[12]_i_1 
       (.I0(probe_out_modified[12]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[12]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[13]_i_1 
       (.I0(probe_out_modified[13]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[14]_i_1 
       (.I0(probe_out_modified[14]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[14]));
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[15]_i_1 
       (.I0(probe_out_modified[15]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[15]));
  LUT5 #(
    .INIT(32'h05400040)) 
    \Bus_data_out[1]_i_1 
       (.I0(xsdb_addr_2_0_p2[0]),
        .I1(probe_out_modified[1]),
        .I2(xsdb_addr_2_0_p2[2]),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(SR),
        .O(data_info_probe_in[1]));
  LUT5 #(
    .INIT(32'h05400040)) 
    \Bus_data_out[2]_i_1 
       (.I0(xsdb_addr_2_0_p2[0]),
        .I1(probe_out_modified[2]),
        .I2(xsdb_addr_2_0_p2[2]),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(int_cnt_rst),
        .O(data_info_probe_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[3]_i_1 
       (.I0(probe_out_modified[3]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[4]_i_1 
       (.I0(probe_out_modified[4]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[5]_i_1 
       (.I0(probe_out_modified[5]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[6]_i_1 
       (.I0(probe_out_modified[6]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[7]_i_1 
       (.I0(probe_out_modified[7]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[8]_i_1 
       (.I0(probe_out_modified[8]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Bus_data_out[9]_i_1 
       (.I0(probe_out_modified[9]),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .O(data_info_probe_in[9]));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(\Bus_data_out[0]_i_1_n_0 ),
        .Q(s_do_i[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[10] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[10]),
        .Q(s_do_i[10]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[11] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[11]),
        .Q(s_do_i[11]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[12] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[12]),
        .Q(s_do_i[12]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[13] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[13]),
        .Q(s_do_i[13]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[14] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[14]),
        .Q(s_do_i[14]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[15] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[15]),
        .Q(s_do_i[15]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[1] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[1]),
        .Q(s_do_i[1]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[2]),
        .Q(s_do_i[2]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[3]),
        .Q(s_do_i[3]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[4]),
        .Q(s_do_i[4]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[5]),
        .Q(s_do_i[5]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[6]),
        .Q(s_do_i[6]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[7] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[7]),
        .Q(s_do_i[7]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[8] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[8]),
        .Q(s_do_i[8]),
        .R(xsdb_addr_8_p2));
  FDRE #(
    .INIT(1'b0)) 
    \Bus_data_out_reg[9] 
       (.C(out),
        .CE(1'b1),
        .D(data_info_probe_in[9]),
        .Q(s_do_i[9]),
        .R(xsdb_addr_8_p2));
  LUT2 #(
    .INIT(4'h8)) 
    \G_PROBE_OUT[0].wr_probe_out[0]_i_2 
       (.I0(s_den_o),
        .I1(s_dwe_o),
        .O(xsdb_wr__0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \G_PROBE_OUT[0].wr_probe_out[0]_i_4 
       (.I0(s_daddr_o[14]),
        .I1(s_daddr_o[15]),
        .I2(s_daddr_o[12]),
        .I3(s_daddr_o[13]),
        .O(\G_PROBE_OUT[0].wr_probe_out[0]_i_4_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \G_PROBE_OUT[0].wr_probe_out[0]_i_6 
       (.I0(s_daddr_o[6]),
        .I1(s_daddr_o[7]),
        .I2(s_daddr_o[4]),
        .I3(s_daddr_o[5]),
        .O(\G_PROBE_OUT[0].wr_probe_out[0]_i_6_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    clear_int_i_1
       (.I0(Q[1]),
        .I1(wr_control_reg),
        .I2(SR),
        .O(clear_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    clear_int_reg
       (.C(out),
        .CE(1'b1),
        .D(clear_int_i_1_n_0),
        .Q(SR),
        .R(s_rst_o));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    committ_int_i_1
       (.I0(Q[0]),
        .I1(wr_control_reg),
        .I2(in0),
        .O(committ_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    committ_int_reg
       (.C(out),
        .CE(1'b1),
        .D(committ_int_i_1_n_0),
        .Q(in0),
        .R(s_rst_o));
  LUT3 #(
    .INIT(8'hB8)) 
    int_cnt_rst_i_1
       (.I0(Q[2]),
        .I1(wr_control_reg),
        .I2(int_cnt_rst),
        .O(int_cnt_rst_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    int_cnt_rst_reg
       (.C(out),
        .CE(1'b1),
        .D(int_cnt_rst_i_1_n_0),
        .Q(int_cnt_rst),
        .R(s_rst_o));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[0] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[0]),
        .Q(probe_out_modified[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[10] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[10]),
        .Q(probe_out_modified[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[11] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[11]),
        .Q(probe_out_modified[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[12] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[12]),
        .Q(probe_out_modified[12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[13] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[13]),
        .Q(probe_out_modified[13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[14] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[14]),
        .Q(probe_out_modified[14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[15] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[15]),
        .Q(probe_out_modified[15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[1] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[1]),
        .Q(probe_out_modified[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[2] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[2]),
        .Q(probe_out_modified[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[3] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[3]),
        .Q(probe_out_modified[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[4] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[4]),
        .Q(probe_out_modified[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[5] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[5]),
        .Q(probe_out_modified[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[6] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[6]),
        .Q(probe_out_modified[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[7] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[7]),
        .Q(probe_out_modified[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[8] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[8]),
        .Q(probe_out_modified[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \probe_out_modified_reg[9] 
       (.C(out),
        .CE(wr_probe_out_modified),
        .D(Q[9]),
        .Q(probe_out_modified[9]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h2)) 
    rd_en_p1_i_1
       (.I0(s_den_o),
        .I1(s_dwe_o),
        .O(xsdb_rd));
  FDRE #(
    .INIT(1'b0)) 
    rd_en_p1_reg
       (.C(out),
        .CE(1'b1),
        .D(xsdb_rd),
        .Q(rd_en_p1),
        .R(s_rst_o));
  FDRE #(
    .INIT(1'b0)) 
    rd_en_p2_reg
       (.C(out),
        .CE(1'b1),
        .D(rd_en_p1),
        .Q(rd_en_p2),
        .R(s_rst_o));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \wr_en[2]_i_1 
       (.I0(xsdb_wr__0),
        .I1(\wr_en[4]_i_2_n_0 ),
        .I2(\G_PROBE_OUT[0].wr_probe_out[0]_i_4_0 ),
        .I3(\wr_en[2]_i_2_n_0 ),
        .I4(\G_PROBE_OUT[0].wr_probe_out[0]_i_6_0 ),
        .I5(s_daddr_o[1]),
        .O(\wr_en[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wr_en[2]_i_2 
       (.I0(s_daddr_o[2]),
        .I1(s_daddr_o[3]),
        .I2(s_daddr_o[0]),
        .I3(s_daddr_o[16]),
        .O(\wr_en[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \wr_en[4]_i_1 
       (.I0(xsdb_wr__0),
        .I1(\wr_en[4]_i_2_n_0 ),
        .I2(\G_PROBE_OUT[0].wr_probe_out[0]_i_4_0 ),
        .I3(\wr_en[4]_i_3_n_0 ),
        .I4(\G_PROBE_OUT[0].wr_probe_out[0]_i_6_0 ),
        .I5(s_daddr_o[2]),
        .O(\wr_en[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wr_en[4]_i_2 
       (.I0(s_daddr_o[10]),
        .I1(s_daddr_o[11]),
        .I2(s_daddr_o[8]),
        .I3(s_daddr_o[9]),
        .O(\wr_en[4]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wr_en[4]_i_3 
       (.I0(s_daddr_o[16]),
        .I1(s_daddr_o[3]),
        .I2(s_daddr_o[0]),
        .I3(s_daddr_o[1]),
        .O(\wr_en[4]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_en_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(\wr_en[2]_i_1_n_0 ),
        .Q(wr_control_reg),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \wr_en_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(\wr_en[4]_i_1_n_0 ),
        .Q(wr_probe_out_modified),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \xsdb_addr_2_0_p1_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(s_daddr_o[0]),
        .Q(xsdb_addr_2_0_p1[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \xsdb_addr_2_0_p1_reg[1] 
       (.C(out),
        .CE(1'b1),
        .D(s_daddr_o[1]),
        .Q(xsdb_addr_2_0_p1[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \xsdb_addr_2_0_p1_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(s_daddr_o[2]),
        .Q(xsdb_addr_2_0_p1[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \xsdb_addr_2_0_p2_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(xsdb_addr_2_0_p1[0]),
        .Q(xsdb_addr_2_0_p2[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \xsdb_addr_2_0_p2_reg[1] 
       (.C(out),
        .CE(1'b1),
        .D(xsdb_addr_2_0_p1[1]),
        .Q(xsdb_addr_2_0_p2[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \xsdb_addr_2_0_p2_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(xsdb_addr_2_0_p1[2]),
        .Q(xsdb_addr_2_0_p2[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    xsdb_addr_8_p1_reg
       (.C(out),
        .CE(1'b1),
        .D(s_daddr_o[8]),
        .Q(xsdb_addr_8_p1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    xsdb_addr_8_p2_reg
       (.C(out),
        .CE(1'b1),
        .D(xsdb_addr_8_p1),
        .Q(xsdb_addr_8_p2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    xsdb_drdy_i_1
       (.I0(s_dwe_o),
        .I1(s_den_o),
        .I2(rd_en_p2),
        .O(xsdb_drdy_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    xsdb_drdy_reg
       (.C(out),
        .CE(1'b1),
        .D(xsdb_drdy_i_1_n_0),
        .Q(s_drdy_i),
        .R(s_rst_o));
endmodule

(* ORIG_REF_NAME = "vio_v3_0_19_probe_out_all" *) 
module design_1_vio_0_1_vio_v3_0_19_probe_out_all
   (probe_out0,
    Probe_out_reg,
    SR,
    in0,
    clk,
    out,
    xsdb_wr__0,
    \G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ,
    \G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ,
    s_daddr_o,
    Q);
  output [0:0]probe_out0;
  output [0:0]Probe_out_reg;
  input [0:0]SR;
  input in0;
  input clk;
  input out;
  input xsdb_wr__0;
  input \G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ;
  input \G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ;
  input [8:0]s_daddr_o;
  input [0:0]Q;

  (* async_reg = "true" *) wire Committ_1;
  (* async_reg = "true" *) wire Committ_2;
  wire \G_PROBE_OUT[0].PROBE_OUT0_INST_n_1 ;
  wire \G_PROBE_OUT[0].wr_probe_out[0]_i_1_n_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out[0]_i_3_n_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out[0]_i_5_n_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ;
  wire \G_PROBE_OUT[0].wr_probe_out_reg_n_0_[0] ;
  wire [0:0]Probe_out_reg;
  wire [0:0]Q;
  wire [0:0]SR;
  wire clk;
  wire in0;
  wire out;
  wire [0:0]probe_out0;
  wire [8:0]s_daddr_o;
  wire xsdb_wr__0;

  initial assign Committ_1_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    Committ_1_reg
       (.C(clk),
        .CE(1'b1),
        .D(in0),
        .Q(Committ_1),
        .R(1'b0));
  initial assign Committ_2_reg.notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    Committ_2_reg
       (.C(clk),
        .CE(1'b1),
        .D(Committ_1),
        .Q(Committ_2),
        .R(1'b0));
  design_1_vio_0_1_vio_v3_0_19_probe_out_one \G_PROBE_OUT[0].PROBE_OUT0_INST 
       (.Q(Q),
        .SR(SR),
        .clk(clk),
        .\data_int_reg[0]_0 (\G_PROBE_OUT[0].PROBE_OUT0_INST_n_1 ),
        .\data_int_reg[0]_1 (out),
        .\data_int_reg[0]_2 (\G_PROBE_OUT[0].wr_probe_out_reg_n_0_[0] ),
        .out(Committ_2),
        .probe_out0(probe_out0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \G_PROBE_OUT[0].wr_probe_out[0]_i_1 
       (.I0(xsdb_wr__0),
        .I1(\G_PROBE_OUT[0].wr_probe_out[0]_i_3_n_0 ),
        .I2(\G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ),
        .I3(\G_PROBE_OUT[0].wr_probe_out[0]_i_5_n_0 ),
        .I4(\G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ),
        .I5(s_daddr_o[4]),
        .O(\G_PROBE_OUT[0].wr_probe_out[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \G_PROBE_OUT[0].wr_probe_out[0]_i_3 
       (.I0(s_daddr_o[6]),
        .I1(s_daddr_o[7]),
        .I2(s_daddr_o[8]),
        .I3(s_daddr_o[5]),
        .O(\G_PROBE_OUT[0].wr_probe_out[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \G_PROBE_OUT[0].wr_probe_out[0]_i_5 
       (.I0(s_daddr_o[2]),
        .I1(s_daddr_o[3]),
        .I2(s_daddr_o[0]),
        .I3(s_daddr_o[1]),
        .O(\G_PROBE_OUT[0].wr_probe_out[0]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \G_PROBE_OUT[0].wr_probe_out_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(\G_PROBE_OUT[0].wr_probe_out[0]_i_1_n_0 ),
        .Q(\G_PROBE_OUT[0].wr_probe_out_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Probe_out_reg_int_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(\G_PROBE_OUT[0].PROBE_OUT0_INST_n_1 ),
        .Q(Probe_out_reg),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "vio_v3_0_19_probe_out_one" *) 
module design_1_vio_0_1_vio_v3_0_19_probe_out_one
   (probe_out0,
    \data_int_reg[0]_0 ,
    SR,
    out,
    clk,
    \data_int_reg[0]_1 ,
    Q,
    \data_int_reg[0]_2 );
  output [0:0]probe_out0;
  output \data_int_reg[0]_0 ;
  input [0:0]SR;
  input out;
  input clk;
  input \data_int_reg[0]_1 ;
  input [0:0]Q;
  input \data_int_reg[0]_2 ;

  wire [0:0]Q;
  (* DIRECT_RESET *) wire [0:0]SR;
  wire clk;
  wire \data_int[0]_i_1_n_0 ;
  wire \data_int_reg[0]_0 ;
  wire \data_int_reg[0]_1 ;
  wire \data_int_reg[0]_2 ;
  wire out;
  (* DONT_TOUCH *) wire [0:0]probe_out0;

  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Probe_out_reg[0] 
       (.C(clk),
        .CE(out),
        .D(\data_int_reg[0]_0 ),
        .Q(probe_out0),
        .S(SR));
  LUT3 #(
    .INIT(8'hB8)) 
    \data_int[0]_i_1 
       (.I0(Q),
        .I1(\data_int_reg[0]_2 ),
        .I2(\data_int_reg[0]_0 ),
        .O(\data_int[0]_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \data_int_reg[0] 
       (.C(\data_int_reg[0]_1 ),
        .CE(1'b1),
        .D(\data_int[0]_i_1_n_0 ),
        .Q(\data_int_reg[0]_0 ),
        .S(SR));
endmodule

(* C_BUILD_REVISION = "0" *) (* C_BUS_ADDR_WIDTH = "17" *) (* C_BUS_DATA_WIDTH = "16" *) 
(* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) (* C_CORE_MAJOR_VER = "2" *) 
(* C_CORE_MINOR_ALPHA_VER = "97" *) (* C_CORE_MINOR_VER = "0" *) (* C_CORE_TYPE = "2" *) 
(* C_CSE_DRV_VER = "1" *) (* C_EN_PROBE_IN_ACTIVITY = "0" *) (* C_EN_SYNCHRONIZATION = "1" *) 
(* C_MAJOR_VERSION = "2013" *) (* C_MAX_NUM_PROBE = "256" *) (* C_MAX_WIDTH_PER_PROBE = "256" *) 
(* C_MINOR_VERSION = "1" *) (* C_NEXT_SLAVE = "0" *) (* C_NUM_PROBE_IN = "0" *) 
(* C_NUM_PROBE_OUT = "1" *) (* C_PIPE_IFACE = "0" *) (* C_PROBE_IN0_WIDTH = "1" *) 
(* C_PROBE_IN100_WIDTH = "1" *) (* C_PROBE_IN101_WIDTH = "1" *) (* C_PROBE_IN102_WIDTH = "1" *) 
(* C_PROBE_IN103_WIDTH = "1" *) (* C_PROBE_IN104_WIDTH = "1" *) (* C_PROBE_IN105_WIDTH = "1" *) 
(* C_PROBE_IN106_WIDTH = "1" *) (* C_PROBE_IN107_WIDTH = "1" *) (* C_PROBE_IN108_WIDTH = "1" *) 
(* C_PROBE_IN109_WIDTH = "1" *) (* C_PROBE_IN10_WIDTH = "1" *) (* C_PROBE_IN110_WIDTH = "1" *) 
(* C_PROBE_IN111_WIDTH = "1" *) (* C_PROBE_IN112_WIDTH = "1" *) (* C_PROBE_IN113_WIDTH = "1" *) 
(* C_PROBE_IN114_WIDTH = "1" *) (* C_PROBE_IN115_WIDTH = "1" *) (* C_PROBE_IN116_WIDTH = "1" *) 
(* C_PROBE_IN117_WIDTH = "1" *) (* C_PROBE_IN118_WIDTH = "1" *) (* C_PROBE_IN119_WIDTH = "1" *) 
(* C_PROBE_IN11_WIDTH = "1" *) (* C_PROBE_IN120_WIDTH = "1" *) (* C_PROBE_IN121_WIDTH = "1" *) 
(* C_PROBE_IN122_WIDTH = "1" *) (* C_PROBE_IN123_WIDTH = "1" *) (* C_PROBE_IN124_WIDTH = "1" *) 
(* C_PROBE_IN125_WIDTH = "1" *) (* C_PROBE_IN126_WIDTH = "1" *) (* C_PROBE_IN127_WIDTH = "1" *) 
(* C_PROBE_IN128_WIDTH = "1" *) (* C_PROBE_IN129_WIDTH = "1" *) (* C_PROBE_IN12_WIDTH = "1" *) 
(* C_PROBE_IN130_WIDTH = "1" *) (* C_PROBE_IN131_WIDTH = "1" *) (* C_PROBE_IN132_WIDTH = "1" *) 
(* C_PROBE_IN133_WIDTH = "1" *) (* C_PROBE_IN134_WIDTH = "1" *) (* C_PROBE_IN135_WIDTH = "1" *) 
(* C_PROBE_IN136_WIDTH = "1" *) (* C_PROBE_IN137_WIDTH = "1" *) (* C_PROBE_IN138_WIDTH = "1" *) 
(* C_PROBE_IN139_WIDTH = "1" *) (* C_PROBE_IN13_WIDTH = "1" *) (* C_PROBE_IN140_WIDTH = "1" *) 
(* C_PROBE_IN141_WIDTH = "1" *) (* C_PROBE_IN142_WIDTH = "1" *) (* C_PROBE_IN143_WIDTH = "1" *) 
(* C_PROBE_IN144_WIDTH = "1" *) (* C_PROBE_IN145_WIDTH = "1" *) (* C_PROBE_IN146_WIDTH = "1" *) 
(* C_PROBE_IN147_WIDTH = "1" *) (* C_PROBE_IN148_WIDTH = "1" *) (* C_PROBE_IN149_WIDTH = "1" *) 
(* C_PROBE_IN14_WIDTH = "1" *) (* C_PROBE_IN150_WIDTH = "1" *) (* C_PROBE_IN151_WIDTH = "1" *) 
(* C_PROBE_IN152_WIDTH = "1" *) (* C_PROBE_IN153_WIDTH = "1" *) (* C_PROBE_IN154_WIDTH = "1" *) 
(* C_PROBE_IN155_WIDTH = "1" *) (* C_PROBE_IN156_WIDTH = "1" *) (* C_PROBE_IN157_WIDTH = "1" *) 
(* C_PROBE_IN158_WIDTH = "1" *) (* C_PROBE_IN159_WIDTH = "1" *) (* C_PROBE_IN15_WIDTH = "1" *) 
(* C_PROBE_IN160_WIDTH = "1" *) (* C_PROBE_IN161_WIDTH = "1" *) (* C_PROBE_IN162_WIDTH = "1" *) 
(* C_PROBE_IN163_WIDTH = "1" *) (* C_PROBE_IN164_WIDTH = "1" *) (* C_PROBE_IN165_WIDTH = "1" *) 
(* C_PROBE_IN166_WIDTH = "1" *) (* C_PROBE_IN167_WIDTH = "1" *) (* C_PROBE_IN168_WIDTH = "1" *) 
(* C_PROBE_IN169_WIDTH = "1" *) (* C_PROBE_IN16_WIDTH = "1" *) (* C_PROBE_IN170_WIDTH = "1" *) 
(* C_PROBE_IN171_WIDTH = "1" *) (* C_PROBE_IN172_WIDTH = "1" *) (* C_PROBE_IN173_WIDTH = "1" *) 
(* C_PROBE_IN174_WIDTH = "1" *) (* C_PROBE_IN175_WIDTH = "1" *) (* C_PROBE_IN176_WIDTH = "1" *) 
(* C_PROBE_IN177_WIDTH = "1" *) (* C_PROBE_IN178_WIDTH = "1" *) (* C_PROBE_IN179_WIDTH = "1" *) 
(* C_PROBE_IN17_WIDTH = "1" *) (* C_PROBE_IN180_WIDTH = "1" *) (* C_PROBE_IN181_WIDTH = "1" *) 
(* C_PROBE_IN182_WIDTH = "1" *) (* C_PROBE_IN183_WIDTH = "1" *) (* C_PROBE_IN184_WIDTH = "1" *) 
(* C_PROBE_IN185_WIDTH = "1" *) (* C_PROBE_IN186_WIDTH = "1" *) (* C_PROBE_IN187_WIDTH = "1" *) 
(* C_PROBE_IN188_WIDTH = "1" *) (* C_PROBE_IN189_WIDTH = "1" *) (* C_PROBE_IN18_WIDTH = "1" *) 
(* C_PROBE_IN190_WIDTH = "1" *) (* C_PROBE_IN191_WIDTH = "1" *) (* C_PROBE_IN192_WIDTH = "1" *) 
(* C_PROBE_IN193_WIDTH = "1" *) (* C_PROBE_IN194_WIDTH = "1" *) (* C_PROBE_IN195_WIDTH = "1" *) 
(* C_PROBE_IN196_WIDTH = "1" *) (* C_PROBE_IN197_WIDTH = "1" *) (* C_PROBE_IN198_WIDTH = "1" *) 
(* C_PROBE_IN199_WIDTH = "1" *) (* C_PROBE_IN19_WIDTH = "1" *) (* C_PROBE_IN1_WIDTH = "1" *) 
(* C_PROBE_IN200_WIDTH = "1" *) (* C_PROBE_IN201_WIDTH = "1" *) (* C_PROBE_IN202_WIDTH = "1" *) 
(* C_PROBE_IN203_WIDTH = "1" *) (* C_PROBE_IN204_WIDTH = "1" *) (* C_PROBE_IN205_WIDTH = "1" *) 
(* C_PROBE_IN206_WIDTH = "1" *) (* C_PROBE_IN207_WIDTH = "1" *) (* C_PROBE_IN208_WIDTH = "1" *) 
(* C_PROBE_IN209_WIDTH = "1" *) (* C_PROBE_IN20_WIDTH = "1" *) (* C_PROBE_IN210_WIDTH = "1" *) 
(* C_PROBE_IN211_WIDTH = "1" *) (* C_PROBE_IN212_WIDTH = "1" *) (* C_PROBE_IN213_WIDTH = "1" *) 
(* C_PROBE_IN214_WIDTH = "1" *) (* C_PROBE_IN215_WIDTH = "1" *) (* C_PROBE_IN216_WIDTH = "1" *) 
(* C_PROBE_IN217_WIDTH = "1" *) (* C_PROBE_IN218_WIDTH = "1" *) (* C_PROBE_IN219_WIDTH = "1" *) 
(* C_PROBE_IN21_WIDTH = "1" *) (* C_PROBE_IN220_WIDTH = "1" *) (* C_PROBE_IN221_WIDTH = "1" *) 
(* C_PROBE_IN222_WIDTH = "1" *) (* C_PROBE_IN223_WIDTH = "1" *) (* C_PROBE_IN224_WIDTH = "1" *) 
(* C_PROBE_IN225_WIDTH = "1" *) (* C_PROBE_IN226_WIDTH = "1" *) (* C_PROBE_IN227_WIDTH = "1" *) 
(* C_PROBE_IN228_WIDTH = "1" *) (* C_PROBE_IN229_WIDTH = "1" *) (* C_PROBE_IN22_WIDTH = "1" *) 
(* C_PROBE_IN230_WIDTH = "1" *) (* C_PROBE_IN231_WIDTH = "1" *) (* C_PROBE_IN232_WIDTH = "1" *) 
(* C_PROBE_IN233_WIDTH = "1" *) (* C_PROBE_IN234_WIDTH = "1" *) (* C_PROBE_IN235_WIDTH = "1" *) 
(* C_PROBE_IN236_WIDTH = "1" *) (* C_PROBE_IN237_WIDTH = "1" *) (* C_PROBE_IN238_WIDTH = "1" *) 
(* C_PROBE_IN239_WIDTH = "1" *) (* C_PROBE_IN23_WIDTH = "1" *) (* C_PROBE_IN240_WIDTH = "1" *) 
(* C_PROBE_IN241_WIDTH = "1" *) (* C_PROBE_IN242_WIDTH = "1" *) (* C_PROBE_IN243_WIDTH = "1" *) 
(* C_PROBE_IN244_WIDTH = "1" *) (* C_PROBE_IN245_WIDTH = "1" *) (* C_PROBE_IN246_WIDTH = "1" *) 
(* C_PROBE_IN247_WIDTH = "1" *) (* C_PROBE_IN248_WIDTH = "1" *) (* C_PROBE_IN249_WIDTH = "1" *) 
(* C_PROBE_IN24_WIDTH = "1" *) (* C_PROBE_IN250_WIDTH = "1" *) (* C_PROBE_IN251_WIDTH = "1" *) 
(* C_PROBE_IN252_WIDTH = "1" *) (* C_PROBE_IN253_WIDTH = "1" *) (* C_PROBE_IN254_WIDTH = "1" *) 
(* C_PROBE_IN255_WIDTH = "1" *) (* C_PROBE_IN25_WIDTH = "1" *) (* C_PROBE_IN26_WIDTH = "1" *) 
(* C_PROBE_IN27_WIDTH = "1" *) (* C_PROBE_IN28_WIDTH = "1" *) (* C_PROBE_IN29_WIDTH = "1" *) 
(* C_PROBE_IN2_WIDTH = "1" *) (* C_PROBE_IN30_WIDTH = "1" *) (* C_PROBE_IN31_WIDTH = "1" *) 
(* C_PROBE_IN32_WIDTH = "1" *) (* C_PROBE_IN33_WIDTH = "1" *) (* C_PROBE_IN34_WIDTH = "1" *) 
(* C_PROBE_IN35_WIDTH = "1" *) (* C_PROBE_IN36_WIDTH = "1" *) (* C_PROBE_IN37_WIDTH = "1" *) 
(* C_PROBE_IN38_WIDTH = "1" *) (* C_PROBE_IN39_WIDTH = "1" *) (* C_PROBE_IN3_WIDTH = "1" *) 
(* C_PROBE_IN40_WIDTH = "1" *) (* C_PROBE_IN41_WIDTH = "1" *) (* C_PROBE_IN42_WIDTH = "1" *) 
(* C_PROBE_IN43_WIDTH = "1" *) (* C_PROBE_IN44_WIDTH = "1" *) (* C_PROBE_IN45_WIDTH = "1" *) 
(* C_PROBE_IN46_WIDTH = "1" *) (* C_PROBE_IN47_WIDTH = "1" *) (* C_PROBE_IN48_WIDTH = "1" *) 
(* C_PROBE_IN49_WIDTH = "1" *) (* C_PROBE_IN4_WIDTH = "1" *) (* C_PROBE_IN50_WIDTH = "1" *) 
(* C_PROBE_IN51_WIDTH = "1" *) (* C_PROBE_IN52_WIDTH = "1" *) (* C_PROBE_IN53_WIDTH = "1" *) 
(* C_PROBE_IN54_WIDTH = "1" *) (* C_PROBE_IN55_WIDTH = "1" *) (* C_PROBE_IN56_WIDTH = "1" *) 
(* C_PROBE_IN57_WIDTH = "1" *) (* C_PROBE_IN58_WIDTH = "1" *) (* C_PROBE_IN59_WIDTH = "1" *) 
(* C_PROBE_IN5_WIDTH = "1" *) (* C_PROBE_IN60_WIDTH = "1" *) (* C_PROBE_IN61_WIDTH = "1" *) 
(* C_PROBE_IN62_WIDTH = "1" *) (* C_PROBE_IN63_WIDTH = "1" *) (* C_PROBE_IN64_WIDTH = "1" *) 
(* C_PROBE_IN65_WIDTH = "1" *) (* C_PROBE_IN66_WIDTH = "1" *) (* C_PROBE_IN67_WIDTH = "1" *) 
(* C_PROBE_IN68_WIDTH = "1" *) (* C_PROBE_IN69_WIDTH = "1" *) (* C_PROBE_IN6_WIDTH = "1" *) 
(* C_PROBE_IN70_WIDTH = "1" *) (* C_PROBE_IN71_WIDTH = "1" *) (* C_PROBE_IN72_WIDTH = "1" *) 
(* C_PROBE_IN73_WIDTH = "1" *) (* C_PROBE_IN74_WIDTH = "1" *) (* C_PROBE_IN75_WIDTH = "1" *) 
(* C_PROBE_IN76_WIDTH = "1" *) (* C_PROBE_IN77_WIDTH = "1" *) (* C_PROBE_IN78_WIDTH = "1" *) 
(* C_PROBE_IN79_WIDTH = "1" *) (* C_PROBE_IN7_WIDTH = "1" *) (* C_PROBE_IN80_WIDTH = "1" *) 
(* C_PROBE_IN81_WIDTH = "1" *) (* C_PROBE_IN82_WIDTH = "1" *) (* C_PROBE_IN83_WIDTH = "1" *) 
(* C_PROBE_IN84_WIDTH = "1" *) (* C_PROBE_IN85_WIDTH = "1" *) (* C_PROBE_IN86_WIDTH = "1" *) 
(* C_PROBE_IN87_WIDTH = "1" *) (* C_PROBE_IN88_WIDTH = "1" *) (* C_PROBE_IN89_WIDTH = "1" *) 
(* C_PROBE_IN8_WIDTH = "1" *) (* C_PROBE_IN90_WIDTH = "1" *) (* C_PROBE_IN91_WIDTH = "1" *) 
(* C_PROBE_IN92_WIDTH = "1" *) (* C_PROBE_IN93_WIDTH = "1" *) (* C_PROBE_IN94_WIDTH = "1" *) 
(* C_PROBE_IN95_WIDTH = "1" *) (* C_PROBE_IN96_WIDTH = "1" *) (* C_PROBE_IN97_WIDTH = "1" *) 
(* C_PROBE_IN98_WIDTH = "1" *) (* C_PROBE_IN99_WIDTH = "1" *) (* C_PROBE_IN9_WIDTH = "1" *) 
(* C_PROBE_OUT0_INIT_VAL = "1'b1" *) (* C_PROBE_OUT0_WIDTH = "1" *) (* C_PROBE_OUT100_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT100_WIDTH = "1" *) (* C_PROBE_OUT101_INIT_VAL = "1'b0" *) (* C_PROBE_OUT101_WIDTH = "1" *) 
(* C_PROBE_OUT102_INIT_VAL = "1'b0" *) (* C_PROBE_OUT102_WIDTH = "1" *) (* C_PROBE_OUT103_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT103_WIDTH = "1" *) (* C_PROBE_OUT104_INIT_VAL = "1'b0" *) (* C_PROBE_OUT104_WIDTH = "1" *) 
(* C_PROBE_OUT105_INIT_VAL = "1'b0" *) (* C_PROBE_OUT105_WIDTH = "1" *) (* C_PROBE_OUT106_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT106_WIDTH = "1" *) (* C_PROBE_OUT107_INIT_VAL = "1'b0" *) (* C_PROBE_OUT107_WIDTH = "1" *) 
(* C_PROBE_OUT108_INIT_VAL = "1'b0" *) (* C_PROBE_OUT108_WIDTH = "1" *) (* C_PROBE_OUT109_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT109_WIDTH = "1" *) (* C_PROBE_OUT10_INIT_VAL = "1'b0" *) (* C_PROBE_OUT10_WIDTH = "1" *) 
(* C_PROBE_OUT110_INIT_VAL = "1'b0" *) (* C_PROBE_OUT110_WIDTH = "1" *) (* C_PROBE_OUT111_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT111_WIDTH = "1" *) (* C_PROBE_OUT112_INIT_VAL = "1'b0" *) (* C_PROBE_OUT112_WIDTH = "1" *) 
(* C_PROBE_OUT113_INIT_VAL = "1'b0" *) (* C_PROBE_OUT113_WIDTH = "1" *) (* C_PROBE_OUT114_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT114_WIDTH = "1" *) (* C_PROBE_OUT115_INIT_VAL = "1'b0" *) (* C_PROBE_OUT115_WIDTH = "1" *) 
(* C_PROBE_OUT116_INIT_VAL = "1'b0" *) (* C_PROBE_OUT116_WIDTH = "1" *) (* C_PROBE_OUT117_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT117_WIDTH = "1" *) (* C_PROBE_OUT118_INIT_VAL = "1'b0" *) (* C_PROBE_OUT118_WIDTH = "1" *) 
(* C_PROBE_OUT119_INIT_VAL = "1'b0" *) (* C_PROBE_OUT119_WIDTH = "1" *) (* C_PROBE_OUT11_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT11_WIDTH = "1" *) (* C_PROBE_OUT120_INIT_VAL = "1'b0" *) (* C_PROBE_OUT120_WIDTH = "1" *) 
(* C_PROBE_OUT121_INIT_VAL = "1'b0" *) (* C_PROBE_OUT121_WIDTH = "1" *) (* C_PROBE_OUT122_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT122_WIDTH = "1" *) (* C_PROBE_OUT123_INIT_VAL = "1'b0" *) (* C_PROBE_OUT123_WIDTH = "1" *) 
(* C_PROBE_OUT124_INIT_VAL = "1'b0" *) (* C_PROBE_OUT124_WIDTH = "1" *) (* C_PROBE_OUT125_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT125_WIDTH = "1" *) (* C_PROBE_OUT126_INIT_VAL = "1'b0" *) (* C_PROBE_OUT126_WIDTH = "1" *) 
(* C_PROBE_OUT127_INIT_VAL = "1'b0" *) (* C_PROBE_OUT127_WIDTH = "1" *) (* C_PROBE_OUT128_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT128_WIDTH = "1" *) (* C_PROBE_OUT129_INIT_VAL = "1'b0" *) (* C_PROBE_OUT129_WIDTH = "1" *) 
(* C_PROBE_OUT12_INIT_VAL = "1'b0" *) (* C_PROBE_OUT12_WIDTH = "1" *) (* C_PROBE_OUT130_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT130_WIDTH = "1" *) (* C_PROBE_OUT131_INIT_VAL = "1'b0" *) (* C_PROBE_OUT131_WIDTH = "1" *) 
(* C_PROBE_OUT132_INIT_VAL = "1'b0" *) (* C_PROBE_OUT132_WIDTH = "1" *) (* C_PROBE_OUT133_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT133_WIDTH = "1" *) (* C_PROBE_OUT134_INIT_VAL = "1'b0" *) (* C_PROBE_OUT134_WIDTH = "1" *) 
(* C_PROBE_OUT135_INIT_VAL = "1'b0" *) (* C_PROBE_OUT135_WIDTH = "1" *) (* C_PROBE_OUT136_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT136_WIDTH = "1" *) (* C_PROBE_OUT137_INIT_VAL = "1'b0" *) (* C_PROBE_OUT137_WIDTH = "1" *) 
(* C_PROBE_OUT138_INIT_VAL = "1'b0" *) (* C_PROBE_OUT138_WIDTH = "1" *) (* C_PROBE_OUT139_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT139_WIDTH = "1" *) (* C_PROBE_OUT13_INIT_VAL = "1'b0" *) (* C_PROBE_OUT13_WIDTH = "1" *) 
(* C_PROBE_OUT140_INIT_VAL = "1'b0" *) (* C_PROBE_OUT140_WIDTH = "1" *) (* C_PROBE_OUT141_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT141_WIDTH = "1" *) (* C_PROBE_OUT142_INIT_VAL = "1'b0" *) (* C_PROBE_OUT142_WIDTH = "1" *) 
(* C_PROBE_OUT143_INIT_VAL = "1'b0" *) (* C_PROBE_OUT143_WIDTH = "1" *) (* C_PROBE_OUT144_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT144_WIDTH = "1" *) (* C_PROBE_OUT145_INIT_VAL = "1'b0" *) (* C_PROBE_OUT145_WIDTH = "1" *) 
(* C_PROBE_OUT146_INIT_VAL = "1'b0" *) (* C_PROBE_OUT146_WIDTH = "1" *) (* C_PROBE_OUT147_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT147_WIDTH = "1" *) (* C_PROBE_OUT148_INIT_VAL = "1'b0" *) (* C_PROBE_OUT148_WIDTH = "1" *) 
(* C_PROBE_OUT149_INIT_VAL = "1'b0" *) (* C_PROBE_OUT149_WIDTH = "1" *) (* C_PROBE_OUT14_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT14_WIDTH = "1" *) (* C_PROBE_OUT150_INIT_VAL = "1'b0" *) (* C_PROBE_OUT150_WIDTH = "1" *) 
(* C_PROBE_OUT151_INIT_VAL = "1'b0" *) (* C_PROBE_OUT151_WIDTH = "1" *) (* C_PROBE_OUT152_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT152_WIDTH = "1" *) (* C_PROBE_OUT153_INIT_VAL = "1'b0" *) (* C_PROBE_OUT153_WIDTH = "1" *) 
(* C_PROBE_OUT154_INIT_VAL = "1'b0" *) (* C_PROBE_OUT154_WIDTH = "1" *) (* C_PROBE_OUT155_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT155_WIDTH = "1" *) (* C_PROBE_OUT156_INIT_VAL = "1'b0" *) (* C_PROBE_OUT156_WIDTH = "1" *) 
(* C_PROBE_OUT157_INIT_VAL = "1'b0" *) (* C_PROBE_OUT157_WIDTH = "1" *) (* C_PROBE_OUT158_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT158_WIDTH = "1" *) (* C_PROBE_OUT159_INIT_VAL = "1'b0" *) (* C_PROBE_OUT159_WIDTH = "1" *) 
(* C_PROBE_OUT15_INIT_VAL = "1'b0" *) (* C_PROBE_OUT15_WIDTH = "1" *) (* C_PROBE_OUT160_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT160_WIDTH = "1" *) (* C_PROBE_OUT161_INIT_VAL = "1'b0" *) (* C_PROBE_OUT161_WIDTH = "1" *) 
(* C_PROBE_OUT162_INIT_VAL = "1'b0" *) (* C_PROBE_OUT162_WIDTH = "1" *) (* C_PROBE_OUT163_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT163_WIDTH = "1" *) (* C_PROBE_OUT164_INIT_VAL = "1'b0" *) (* C_PROBE_OUT164_WIDTH = "1" *) 
(* C_PROBE_OUT165_INIT_VAL = "1'b0" *) (* C_PROBE_OUT165_WIDTH = "1" *) (* C_PROBE_OUT166_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT166_WIDTH = "1" *) (* C_PROBE_OUT167_INIT_VAL = "1'b0" *) (* C_PROBE_OUT167_WIDTH = "1" *) 
(* C_PROBE_OUT168_INIT_VAL = "1'b0" *) (* C_PROBE_OUT168_WIDTH = "1" *) (* C_PROBE_OUT169_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT169_WIDTH = "1" *) (* C_PROBE_OUT16_INIT_VAL = "1'b0" *) (* C_PROBE_OUT16_WIDTH = "1" *) 
(* C_PROBE_OUT170_INIT_VAL = "1'b0" *) (* C_PROBE_OUT170_WIDTH = "1" *) (* C_PROBE_OUT171_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT171_WIDTH = "1" *) (* C_PROBE_OUT172_INIT_VAL = "1'b0" *) (* C_PROBE_OUT172_WIDTH = "1" *) 
(* C_PROBE_OUT173_INIT_VAL = "1'b0" *) (* C_PROBE_OUT173_WIDTH = "1" *) (* C_PROBE_OUT174_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT174_WIDTH = "1" *) (* C_PROBE_OUT175_INIT_VAL = "1'b0" *) (* C_PROBE_OUT175_WIDTH = "1" *) 
(* C_PROBE_OUT176_INIT_VAL = "1'b0" *) (* C_PROBE_OUT176_WIDTH = "1" *) (* C_PROBE_OUT177_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT177_WIDTH = "1" *) (* C_PROBE_OUT178_INIT_VAL = "1'b0" *) (* C_PROBE_OUT178_WIDTH = "1" *) 
(* C_PROBE_OUT179_INIT_VAL = "1'b0" *) (* C_PROBE_OUT179_WIDTH = "1" *) (* C_PROBE_OUT17_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT17_WIDTH = "1" *) (* C_PROBE_OUT180_INIT_VAL = "1'b0" *) (* C_PROBE_OUT180_WIDTH = "1" *) 
(* C_PROBE_OUT181_INIT_VAL = "1'b0" *) (* C_PROBE_OUT181_WIDTH = "1" *) (* C_PROBE_OUT182_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT182_WIDTH = "1" *) (* C_PROBE_OUT183_INIT_VAL = "1'b0" *) (* C_PROBE_OUT183_WIDTH = "1" *) 
(* C_PROBE_OUT184_INIT_VAL = "1'b0" *) (* C_PROBE_OUT184_WIDTH = "1" *) (* C_PROBE_OUT185_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT185_WIDTH = "1" *) (* C_PROBE_OUT186_INIT_VAL = "1'b0" *) (* C_PROBE_OUT186_WIDTH = "1" *) 
(* C_PROBE_OUT187_INIT_VAL = "1'b0" *) (* C_PROBE_OUT187_WIDTH = "1" *) (* C_PROBE_OUT188_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT188_WIDTH = "1" *) (* C_PROBE_OUT189_INIT_VAL = "1'b0" *) (* C_PROBE_OUT189_WIDTH = "1" *) 
(* C_PROBE_OUT18_INIT_VAL = "1'b0" *) (* C_PROBE_OUT18_WIDTH = "1" *) (* C_PROBE_OUT190_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT190_WIDTH = "1" *) (* C_PROBE_OUT191_INIT_VAL = "1'b0" *) (* C_PROBE_OUT191_WIDTH = "1" *) 
(* C_PROBE_OUT192_INIT_VAL = "1'b0" *) (* C_PROBE_OUT192_WIDTH = "1" *) (* C_PROBE_OUT193_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT193_WIDTH = "1" *) (* C_PROBE_OUT194_INIT_VAL = "1'b0" *) (* C_PROBE_OUT194_WIDTH = "1" *) 
(* C_PROBE_OUT195_INIT_VAL = "1'b0" *) (* C_PROBE_OUT195_WIDTH = "1" *) (* C_PROBE_OUT196_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT196_WIDTH = "1" *) (* C_PROBE_OUT197_INIT_VAL = "1'b0" *) (* C_PROBE_OUT197_WIDTH = "1" *) 
(* C_PROBE_OUT198_INIT_VAL = "1'b0" *) (* C_PROBE_OUT198_WIDTH = "1" *) (* C_PROBE_OUT199_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT199_WIDTH = "1" *) (* C_PROBE_OUT19_INIT_VAL = "1'b0" *) (* C_PROBE_OUT19_WIDTH = "1" *) 
(* C_PROBE_OUT1_INIT_VAL = "1'b0" *) (* C_PROBE_OUT1_WIDTH = "1" *) (* C_PROBE_OUT200_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT200_WIDTH = "1" *) (* C_PROBE_OUT201_INIT_VAL = "1'b0" *) (* C_PROBE_OUT201_WIDTH = "1" *) 
(* C_PROBE_OUT202_INIT_VAL = "1'b0" *) (* C_PROBE_OUT202_WIDTH = "1" *) (* C_PROBE_OUT203_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT203_WIDTH = "1" *) (* C_PROBE_OUT204_INIT_VAL = "1'b0" *) (* C_PROBE_OUT204_WIDTH = "1" *) 
(* C_PROBE_OUT205_INIT_VAL = "1'b0" *) (* C_PROBE_OUT205_WIDTH = "1" *) (* C_PROBE_OUT206_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT206_WIDTH = "1" *) (* C_PROBE_OUT207_INIT_VAL = "1'b0" *) (* C_PROBE_OUT207_WIDTH = "1" *) 
(* C_PROBE_OUT208_INIT_VAL = "1'b0" *) (* C_PROBE_OUT208_WIDTH = "1" *) (* C_PROBE_OUT209_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT209_WIDTH = "1" *) (* C_PROBE_OUT20_INIT_VAL = "1'b0" *) (* C_PROBE_OUT20_WIDTH = "1" *) 
(* C_PROBE_OUT210_INIT_VAL = "1'b0" *) (* C_PROBE_OUT210_WIDTH = "1" *) (* C_PROBE_OUT211_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT211_WIDTH = "1" *) (* C_PROBE_OUT212_INIT_VAL = "1'b0" *) (* C_PROBE_OUT212_WIDTH = "1" *) 
(* C_PROBE_OUT213_INIT_VAL = "1'b0" *) (* C_PROBE_OUT213_WIDTH = "1" *) (* C_PROBE_OUT214_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT214_WIDTH = "1" *) (* C_PROBE_OUT215_INIT_VAL = "1'b0" *) (* C_PROBE_OUT215_WIDTH = "1" *) 
(* C_PROBE_OUT216_INIT_VAL = "1'b0" *) (* C_PROBE_OUT216_WIDTH = "1" *) (* C_PROBE_OUT217_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT217_WIDTH = "1" *) (* C_PROBE_OUT218_INIT_VAL = "1'b0" *) (* C_PROBE_OUT218_WIDTH = "1" *) 
(* C_PROBE_OUT219_INIT_VAL = "1'b0" *) (* C_PROBE_OUT219_WIDTH = "1" *) (* C_PROBE_OUT21_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT21_WIDTH = "1" *) (* C_PROBE_OUT220_INIT_VAL = "1'b0" *) (* C_PROBE_OUT220_WIDTH = "1" *) 
(* C_PROBE_OUT221_INIT_VAL = "1'b0" *) (* C_PROBE_OUT221_WIDTH = "1" *) (* C_PROBE_OUT222_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT222_WIDTH = "1" *) (* C_PROBE_OUT223_INIT_VAL = "1'b0" *) (* C_PROBE_OUT223_WIDTH = "1" *) 
(* C_PROBE_OUT224_INIT_VAL = "1'b0" *) (* C_PROBE_OUT224_WIDTH = "1" *) (* C_PROBE_OUT225_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT225_WIDTH = "1" *) (* C_PROBE_OUT226_INIT_VAL = "1'b0" *) (* C_PROBE_OUT226_WIDTH = "1" *) 
(* C_PROBE_OUT227_INIT_VAL = "1'b0" *) (* C_PROBE_OUT227_WIDTH = "1" *) (* C_PROBE_OUT228_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT228_WIDTH = "1" *) (* C_PROBE_OUT229_INIT_VAL = "1'b0" *) (* C_PROBE_OUT229_WIDTH = "1" *) 
(* C_PROBE_OUT22_INIT_VAL = "1'b0" *) (* C_PROBE_OUT22_WIDTH = "1" *) (* C_PROBE_OUT230_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT230_WIDTH = "1" *) (* C_PROBE_OUT231_INIT_VAL = "1'b0" *) (* C_PROBE_OUT231_WIDTH = "1" *) 
(* C_PROBE_OUT232_INIT_VAL = "1'b0" *) (* C_PROBE_OUT232_WIDTH = "1" *) (* C_PROBE_OUT233_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT233_WIDTH = "1" *) (* C_PROBE_OUT234_INIT_VAL = "1'b0" *) (* C_PROBE_OUT234_WIDTH = "1" *) 
(* C_PROBE_OUT235_INIT_VAL = "1'b0" *) (* C_PROBE_OUT235_WIDTH = "1" *) (* C_PROBE_OUT236_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT236_WIDTH = "1" *) (* C_PROBE_OUT237_INIT_VAL = "1'b0" *) (* C_PROBE_OUT237_WIDTH = "1" *) 
(* C_PROBE_OUT238_INIT_VAL = "1'b0" *) (* C_PROBE_OUT238_WIDTH = "1" *) (* C_PROBE_OUT239_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT239_WIDTH = "1" *) (* C_PROBE_OUT23_INIT_VAL = "1'b0" *) (* C_PROBE_OUT23_WIDTH = "1" *) 
(* C_PROBE_OUT240_INIT_VAL = "1'b0" *) (* C_PROBE_OUT240_WIDTH = "1" *) (* C_PROBE_OUT241_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT241_WIDTH = "1" *) (* C_PROBE_OUT242_INIT_VAL = "1'b0" *) (* C_PROBE_OUT242_WIDTH = "1" *) 
(* C_PROBE_OUT243_INIT_VAL = "1'b0" *) (* C_PROBE_OUT243_WIDTH = "1" *) (* C_PROBE_OUT244_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT244_WIDTH = "1" *) (* C_PROBE_OUT245_INIT_VAL = "1'b0" *) (* C_PROBE_OUT245_WIDTH = "1" *) 
(* C_PROBE_OUT246_INIT_VAL = "1'b0" *) (* C_PROBE_OUT246_WIDTH = "1" *) (* C_PROBE_OUT247_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT247_WIDTH = "1" *) (* C_PROBE_OUT248_INIT_VAL = "1'b0" *) (* C_PROBE_OUT248_WIDTH = "1" *) 
(* C_PROBE_OUT249_INIT_VAL = "1'b0" *) (* C_PROBE_OUT249_WIDTH = "1" *) (* C_PROBE_OUT24_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT24_WIDTH = "1" *) (* C_PROBE_OUT250_INIT_VAL = "1'b0" *) (* C_PROBE_OUT250_WIDTH = "1" *) 
(* C_PROBE_OUT251_INIT_VAL = "1'b0" *) (* C_PROBE_OUT251_WIDTH = "1" *) (* C_PROBE_OUT252_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT252_WIDTH = "1" *) (* C_PROBE_OUT253_INIT_VAL = "1'b0" *) (* C_PROBE_OUT253_WIDTH = "1" *) 
(* C_PROBE_OUT254_INIT_VAL = "1'b0" *) (* C_PROBE_OUT254_WIDTH = "1" *) (* C_PROBE_OUT255_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT255_WIDTH = "1" *) (* C_PROBE_OUT25_INIT_VAL = "1'b0" *) (* C_PROBE_OUT25_WIDTH = "1" *) 
(* C_PROBE_OUT26_INIT_VAL = "1'b0" *) (* C_PROBE_OUT26_WIDTH = "1" *) (* C_PROBE_OUT27_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT27_WIDTH = "1" *) (* C_PROBE_OUT28_INIT_VAL = "1'b0" *) (* C_PROBE_OUT28_WIDTH = "1" *) 
(* C_PROBE_OUT29_INIT_VAL = "1'b0" *) (* C_PROBE_OUT29_WIDTH = "1" *) (* C_PROBE_OUT2_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT2_WIDTH = "1" *) (* C_PROBE_OUT30_INIT_VAL = "1'b0" *) (* C_PROBE_OUT30_WIDTH = "1" *) 
(* C_PROBE_OUT31_INIT_VAL = "1'b0" *) (* C_PROBE_OUT31_WIDTH = "1" *) (* C_PROBE_OUT32_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT32_WIDTH = "1" *) (* C_PROBE_OUT33_INIT_VAL = "1'b0" *) (* C_PROBE_OUT33_WIDTH = "1" *) 
(* C_PROBE_OUT34_INIT_VAL = "1'b0" *) (* C_PROBE_OUT34_WIDTH = "1" *) (* C_PROBE_OUT35_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT35_WIDTH = "1" *) (* C_PROBE_OUT36_INIT_VAL = "1'b0" *) (* C_PROBE_OUT36_WIDTH = "1" *) 
(* C_PROBE_OUT37_INIT_VAL = "1'b0" *) (* C_PROBE_OUT37_WIDTH = "1" *) (* C_PROBE_OUT38_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT38_WIDTH = "1" *) (* C_PROBE_OUT39_INIT_VAL = "1'b0" *) (* C_PROBE_OUT39_WIDTH = "1" *) 
(* C_PROBE_OUT3_INIT_VAL = "1'b0" *) (* C_PROBE_OUT3_WIDTH = "1" *) (* C_PROBE_OUT40_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT40_WIDTH = "1" *) (* C_PROBE_OUT41_INIT_VAL = "1'b0" *) (* C_PROBE_OUT41_WIDTH = "1" *) 
(* C_PROBE_OUT42_INIT_VAL = "1'b0" *) (* C_PROBE_OUT42_WIDTH = "1" *) (* C_PROBE_OUT43_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT43_WIDTH = "1" *) (* C_PROBE_OUT44_INIT_VAL = "1'b0" *) (* C_PROBE_OUT44_WIDTH = "1" *) 
(* C_PROBE_OUT45_INIT_VAL = "1'b0" *) (* C_PROBE_OUT45_WIDTH = "1" *) (* C_PROBE_OUT46_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT46_WIDTH = "1" *) (* C_PROBE_OUT47_INIT_VAL = "1'b0" *) (* C_PROBE_OUT47_WIDTH = "1" *) 
(* C_PROBE_OUT48_INIT_VAL = "1'b0" *) (* C_PROBE_OUT48_WIDTH = "1" *) (* C_PROBE_OUT49_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT49_WIDTH = "1" *) (* C_PROBE_OUT4_INIT_VAL = "1'b0" *) (* C_PROBE_OUT4_WIDTH = "1" *) 
(* C_PROBE_OUT50_INIT_VAL = "1'b0" *) (* C_PROBE_OUT50_WIDTH = "1" *) (* C_PROBE_OUT51_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT51_WIDTH = "1" *) (* C_PROBE_OUT52_INIT_VAL = "1'b0" *) (* C_PROBE_OUT52_WIDTH = "1" *) 
(* C_PROBE_OUT53_INIT_VAL = "1'b0" *) (* C_PROBE_OUT53_WIDTH = "1" *) (* C_PROBE_OUT54_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT54_WIDTH = "1" *) (* C_PROBE_OUT55_INIT_VAL = "1'b0" *) (* C_PROBE_OUT55_WIDTH = "1" *) 
(* C_PROBE_OUT56_INIT_VAL = "1'b0" *) (* C_PROBE_OUT56_WIDTH = "1" *) (* C_PROBE_OUT57_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT57_WIDTH = "1" *) (* C_PROBE_OUT58_INIT_VAL = "1'b0" *) (* C_PROBE_OUT58_WIDTH = "1" *) 
(* C_PROBE_OUT59_INIT_VAL = "1'b0" *) (* C_PROBE_OUT59_WIDTH = "1" *) (* C_PROBE_OUT5_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT5_WIDTH = "1" *) (* C_PROBE_OUT60_INIT_VAL = "1'b0" *) (* C_PROBE_OUT60_WIDTH = "1" *) 
(* C_PROBE_OUT61_INIT_VAL = "1'b0" *) (* C_PROBE_OUT61_WIDTH = "1" *) (* C_PROBE_OUT62_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT62_WIDTH = "1" *) (* C_PROBE_OUT63_INIT_VAL = "1'b0" *) (* C_PROBE_OUT63_WIDTH = "1" *) 
(* C_PROBE_OUT64_INIT_VAL = "1'b0" *) (* C_PROBE_OUT64_WIDTH = "1" *) (* C_PROBE_OUT65_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT65_WIDTH = "1" *) (* C_PROBE_OUT66_INIT_VAL = "1'b0" *) (* C_PROBE_OUT66_WIDTH = "1" *) 
(* C_PROBE_OUT67_INIT_VAL = "1'b0" *) (* C_PROBE_OUT67_WIDTH = "1" *) (* C_PROBE_OUT68_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT68_WIDTH = "1" *) (* C_PROBE_OUT69_INIT_VAL = "1'b0" *) (* C_PROBE_OUT69_WIDTH = "1" *) 
(* C_PROBE_OUT6_INIT_VAL = "1'b0" *) (* C_PROBE_OUT6_WIDTH = "1" *) (* C_PROBE_OUT70_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT70_WIDTH = "1" *) (* C_PROBE_OUT71_INIT_VAL = "1'b0" *) (* C_PROBE_OUT71_WIDTH = "1" *) 
(* C_PROBE_OUT72_INIT_VAL = "1'b0" *) (* C_PROBE_OUT72_WIDTH = "1" *) (* C_PROBE_OUT73_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT73_WIDTH = "1" *) (* C_PROBE_OUT74_INIT_VAL = "1'b0" *) (* C_PROBE_OUT74_WIDTH = "1" *) 
(* C_PROBE_OUT75_INIT_VAL = "1'b0" *) (* C_PROBE_OUT75_WIDTH = "1" *) (* C_PROBE_OUT76_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT76_WIDTH = "1" *) (* C_PROBE_OUT77_INIT_VAL = "1'b0" *) (* C_PROBE_OUT77_WIDTH = "1" *) 
(* C_PROBE_OUT78_INIT_VAL = "1'b0" *) (* C_PROBE_OUT78_WIDTH = "1" *) (* C_PROBE_OUT79_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT79_WIDTH = "1" *) (* C_PROBE_OUT7_INIT_VAL = "1'b0" *) (* C_PROBE_OUT7_WIDTH = "1" *) 
(* C_PROBE_OUT80_INIT_VAL = "1'b0" *) (* C_PROBE_OUT80_WIDTH = "1" *) (* C_PROBE_OUT81_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT81_WIDTH = "1" *) (* C_PROBE_OUT82_INIT_VAL = "1'b0" *) (* C_PROBE_OUT82_WIDTH = "1" *) 
(* C_PROBE_OUT83_INIT_VAL = "1'b0" *) (* C_PROBE_OUT83_WIDTH = "1" *) (* C_PROBE_OUT84_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT84_WIDTH = "1" *) (* C_PROBE_OUT85_INIT_VAL = "1'b0" *) (* C_PROBE_OUT85_WIDTH = "1" *) 
(* C_PROBE_OUT86_INIT_VAL = "1'b0" *) (* C_PROBE_OUT86_WIDTH = "1" *) (* C_PROBE_OUT87_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT87_WIDTH = "1" *) (* C_PROBE_OUT88_INIT_VAL = "1'b0" *) (* C_PROBE_OUT88_WIDTH = "1" *) 
(* C_PROBE_OUT89_INIT_VAL = "1'b0" *) (* C_PROBE_OUT89_WIDTH = "1" *) (* C_PROBE_OUT8_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT8_WIDTH = "1" *) (* C_PROBE_OUT90_INIT_VAL = "1'b0" *) (* C_PROBE_OUT90_WIDTH = "1" *) 
(* C_PROBE_OUT91_INIT_VAL = "1'b0" *) (* C_PROBE_OUT91_WIDTH = "1" *) (* C_PROBE_OUT92_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT92_WIDTH = "1" *) (* C_PROBE_OUT93_INIT_VAL = "1'b0" *) (* C_PROBE_OUT93_WIDTH = "1" *) 
(* C_PROBE_OUT94_INIT_VAL = "1'b0" *) (* C_PROBE_OUT94_WIDTH = "1" *) (* C_PROBE_OUT95_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT95_WIDTH = "1" *) (* C_PROBE_OUT96_INIT_VAL = "1'b0" *) (* C_PROBE_OUT96_WIDTH = "1" *) 
(* C_PROBE_OUT97_INIT_VAL = "1'b0" *) (* C_PROBE_OUT97_WIDTH = "1" *) (* C_PROBE_OUT98_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT98_WIDTH = "1" *) (* C_PROBE_OUT99_INIT_VAL = "1'b0" *) (* C_PROBE_OUT99_WIDTH = "1" *) 
(* C_PROBE_OUT9_INIT_VAL = "1'b0" *) (* C_PROBE_OUT9_WIDTH = "1" *) (* C_USE_TEST_REG = "1" *) 
(* C_XDEVICEFAMILY = "zynq" *) (* C_XLNX_HW_PROBE_INFO = "DEFAULT" *) (* C_XSDB_SLAVE_TYPE = "33" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT0 = "16'b0000000000000000" *) (* LC_HIGH_BIT_POS_PROBE_OUT1 = "16'b0000000000000001" *) (* LC_HIGH_BIT_POS_PROBE_OUT10 = "16'b0000000000001010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT100 = "16'b0000000001100100" *) (* LC_HIGH_BIT_POS_PROBE_OUT101 = "16'b0000000001100101" *) (* LC_HIGH_BIT_POS_PROBE_OUT102 = "16'b0000000001100110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT103 = "16'b0000000001100111" *) (* LC_HIGH_BIT_POS_PROBE_OUT104 = "16'b0000000001101000" *) (* LC_HIGH_BIT_POS_PROBE_OUT105 = "16'b0000000001101001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT106 = "16'b0000000001101010" *) (* LC_HIGH_BIT_POS_PROBE_OUT107 = "16'b0000000001101011" *) (* LC_HIGH_BIT_POS_PROBE_OUT108 = "16'b0000000001101100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT109 = "16'b0000000001101101" *) (* LC_HIGH_BIT_POS_PROBE_OUT11 = "16'b0000000000001011" *) (* LC_HIGH_BIT_POS_PROBE_OUT110 = "16'b0000000001101110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT111 = "16'b0000000001101111" *) (* LC_HIGH_BIT_POS_PROBE_OUT112 = "16'b0000000001110000" *) (* LC_HIGH_BIT_POS_PROBE_OUT113 = "16'b0000000001110001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT114 = "16'b0000000001110010" *) (* LC_HIGH_BIT_POS_PROBE_OUT115 = "16'b0000000001110011" *) (* LC_HIGH_BIT_POS_PROBE_OUT116 = "16'b0000000001110100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT117 = "16'b0000000001110101" *) (* LC_HIGH_BIT_POS_PROBE_OUT118 = "16'b0000000001110110" *) (* LC_HIGH_BIT_POS_PROBE_OUT119 = "16'b0000000001110111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT12 = "16'b0000000000001100" *) (* LC_HIGH_BIT_POS_PROBE_OUT120 = "16'b0000000001111000" *) (* LC_HIGH_BIT_POS_PROBE_OUT121 = "16'b0000000001111001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT122 = "16'b0000000001111010" *) (* LC_HIGH_BIT_POS_PROBE_OUT123 = "16'b0000000001111011" *) (* LC_HIGH_BIT_POS_PROBE_OUT124 = "16'b0000000001111100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT125 = "16'b0000000001111101" *) (* LC_HIGH_BIT_POS_PROBE_OUT126 = "16'b0000000001111110" *) (* LC_HIGH_BIT_POS_PROBE_OUT127 = "16'b0000000001111111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT128 = "16'b0000000010000000" *) (* LC_HIGH_BIT_POS_PROBE_OUT129 = "16'b0000000010000001" *) (* LC_HIGH_BIT_POS_PROBE_OUT13 = "16'b0000000000001101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT130 = "16'b0000000010000010" *) (* LC_HIGH_BIT_POS_PROBE_OUT131 = "16'b0000000010000011" *) (* LC_HIGH_BIT_POS_PROBE_OUT132 = "16'b0000000010000100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT133 = "16'b0000000010000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT134 = "16'b0000000010000110" *) (* LC_HIGH_BIT_POS_PROBE_OUT135 = "16'b0000000010000111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT136 = "16'b0000000010001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT137 = "16'b0000000010001001" *) (* LC_HIGH_BIT_POS_PROBE_OUT138 = "16'b0000000010001010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT139 = "16'b0000000010001011" *) (* LC_HIGH_BIT_POS_PROBE_OUT14 = "16'b0000000000001110" *) (* LC_HIGH_BIT_POS_PROBE_OUT140 = "16'b0000000010001100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT141 = "16'b0000000010001101" *) (* LC_HIGH_BIT_POS_PROBE_OUT142 = "16'b0000000010001110" *) (* LC_HIGH_BIT_POS_PROBE_OUT143 = "16'b0000000010001111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT144 = "16'b0000000010010000" *) (* LC_HIGH_BIT_POS_PROBE_OUT145 = "16'b0000000010010001" *) (* LC_HIGH_BIT_POS_PROBE_OUT146 = "16'b0000000010010010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT147 = "16'b0000000010010011" *) (* LC_HIGH_BIT_POS_PROBE_OUT148 = "16'b0000000010010100" *) (* LC_HIGH_BIT_POS_PROBE_OUT149 = "16'b0000000010010101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT15 = "16'b0000000000001111" *) (* LC_HIGH_BIT_POS_PROBE_OUT150 = "16'b0000000010010110" *) (* LC_HIGH_BIT_POS_PROBE_OUT151 = "16'b0000000010010111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT152 = "16'b0000000010011000" *) (* LC_HIGH_BIT_POS_PROBE_OUT153 = "16'b0000000010011001" *) (* LC_HIGH_BIT_POS_PROBE_OUT154 = "16'b0000000010011010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT155 = "16'b0000000010011011" *) (* LC_HIGH_BIT_POS_PROBE_OUT156 = "16'b0000000010011100" *) (* LC_HIGH_BIT_POS_PROBE_OUT157 = "16'b0000000010011101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT158 = "16'b0000000010011110" *) (* LC_HIGH_BIT_POS_PROBE_OUT159 = "16'b0000000010011111" *) (* LC_HIGH_BIT_POS_PROBE_OUT16 = "16'b0000000000010000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT160 = "16'b0000000010100000" *) (* LC_HIGH_BIT_POS_PROBE_OUT161 = "16'b0000000010100001" *) (* LC_HIGH_BIT_POS_PROBE_OUT162 = "16'b0000000010100010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT163 = "16'b0000000010100011" *) (* LC_HIGH_BIT_POS_PROBE_OUT164 = "16'b0000000010100100" *) (* LC_HIGH_BIT_POS_PROBE_OUT165 = "16'b0000000010100101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT166 = "16'b0000000010100110" *) (* LC_HIGH_BIT_POS_PROBE_OUT167 = "16'b0000000010100111" *) (* LC_HIGH_BIT_POS_PROBE_OUT168 = "16'b0000000010101000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT169 = "16'b0000000010101001" *) (* LC_HIGH_BIT_POS_PROBE_OUT17 = "16'b0000000000010001" *) (* LC_HIGH_BIT_POS_PROBE_OUT170 = "16'b0000000010101010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT171 = "16'b0000000010101011" *) (* LC_HIGH_BIT_POS_PROBE_OUT172 = "16'b0000000010101100" *) (* LC_HIGH_BIT_POS_PROBE_OUT173 = "16'b0000000010101101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT174 = "16'b0000000010101110" *) (* LC_HIGH_BIT_POS_PROBE_OUT175 = "16'b0000000010101111" *) (* LC_HIGH_BIT_POS_PROBE_OUT176 = "16'b0000000010110000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT177 = "16'b0000000010110001" *) (* LC_HIGH_BIT_POS_PROBE_OUT178 = "16'b0000000010110010" *) (* LC_HIGH_BIT_POS_PROBE_OUT179 = "16'b0000000010110011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT18 = "16'b0000000000010010" *) (* LC_HIGH_BIT_POS_PROBE_OUT180 = "16'b0000000010110100" *) (* LC_HIGH_BIT_POS_PROBE_OUT181 = "16'b0000000010110101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT182 = "16'b0000000010110110" *) (* LC_HIGH_BIT_POS_PROBE_OUT183 = "16'b0000000010110111" *) (* LC_HIGH_BIT_POS_PROBE_OUT184 = "16'b0000000010111000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT185 = "16'b0000000010111001" *) (* LC_HIGH_BIT_POS_PROBE_OUT186 = "16'b0000000010111010" *) (* LC_HIGH_BIT_POS_PROBE_OUT187 = "16'b0000000010111011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT188 = "16'b0000000010111100" *) (* LC_HIGH_BIT_POS_PROBE_OUT189 = "16'b0000000010111101" *) (* LC_HIGH_BIT_POS_PROBE_OUT19 = "16'b0000000000010011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT190 = "16'b0000000010111110" *) (* LC_HIGH_BIT_POS_PROBE_OUT191 = "16'b0000000010111111" *) (* LC_HIGH_BIT_POS_PROBE_OUT192 = "16'b0000000011000000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT193 = "16'b0000000011000001" *) (* LC_HIGH_BIT_POS_PROBE_OUT194 = "16'b0000000011000010" *) (* LC_HIGH_BIT_POS_PROBE_OUT195 = "16'b0000000011000011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT196 = "16'b0000000011000100" *) (* LC_HIGH_BIT_POS_PROBE_OUT197 = "16'b0000000011000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT198 = "16'b0000000011000110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT199 = "16'b0000000011000111" *) (* LC_HIGH_BIT_POS_PROBE_OUT2 = "16'b0000000000000010" *) (* LC_HIGH_BIT_POS_PROBE_OUT20 = "16'b0000000000010100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT200 = "16'b0000000011001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT201 = "16'b0000000011001001" *) (* LC_HIGH_BIT_POS_PROBE_OUT202 = "16'b0000000011001010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT203 = "16'b0000000011001011" *) (* LC_HIGH_BIT_POS_PROBE_OUT204 = "16'b0000000011001100" *) (* LC_HIGH_BIT_POS_PROBE_OUT205 = "16'b0000000011001101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT206 = "16'b0000000011001110" *) (* LC_HIGH_BIT_POS_PROBE_OUT207 = "16'b0000000011001111" *) (* LC_HIGH_BIT_POS_PROBE_OUT208 = "16'b0000000011010000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT209 = "16'b0000000011010001" *) (* LC_HIGH_BIT_POS_PROBE_OUT21 = "16'b0000000000010101" *) (* LC_HIGH_BIT_POS_PROBE_OUT210 = "16'b0000000011010010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT211 = "16'b0000000011010011" *) (* LC_HIGH_BIT_POS_PROBE_OUT212 = "16'b0000000011010100" *) (* LC_HIGH_BIT_POS_PROBE_OUT213 = "16'b0000000011010101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT214 = "16'b0000000011010110" *) (* LC_HIGH_BIT_POS_PROBE_OUT215 = "16'b0000000011010111" *) (* LC_HIGH_BIT_POS_PROBE_OUT216 = "16'b0000000011011000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT217 = "16'b0000000011011001" *) (* LC_HIGH_BIT_POS_PROBE_OUT218 = "16'b0000000011011010" *) (* LC_HIGH_BIT_POS_PROBE_OUT219 = "16'b0000000011011011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT22 = "16'b0000000000010110" *) (* LC_HIGH_BIT_POS_PROBE_OUT220 = "16'b0000000011011100" *) (* LC_HIGH_BIT_POS_PROBE_OUT221 = "16'b0000000011011101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT222 = "16'b0000000011011110" *) (* LC_HIGH_BIT_POS_PROBE_OUT223 = "16'b0000000011011111" *) (* LC_HIGH_BIT_POS_PROBE_OUT224 = "16'b0000000011100000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT225 = "16'b0000000011100001" *) (* LC_HIGH_BIT_POS_PROBE_OUT226 = "16'b0000000011100010" *) (* LC_HIGH_BIT_POS_PROBE_OUT227 = "16'b0000000011100011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT228 = "16'b0000000011100100" *) (* LC_HIGH_BIT_POS_PROBE_OUT229 = "16'b0000000011100101" *) (* LC_HIGH_BIT_POS_PROBE_OUT23 = "16'b0000000000010111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT230 = "16'b0000000011100110" *) (* LC_HIGH_BIT_POS_PROBE_OUT231 = "16'b0000000011100111" *) (* LC_HIGH_BIT_POS_PROBE_OUT232 = "16'b0000000011101000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT233 = "16'b0000000011101001" *) (* LC_HIGH_BIT_POS_PROBE_OUT234 = "16'b0000000011101010" *) (* LC_HIGH_BIT_POS_PROBE_OUT235 = "16'b0000000011101011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT236 = "16'b0000000011101100" *) (* LC_HIGH_BIT_POS_PROBE_OUT237 = "16'b0000000011101101" *) (* LC_HIGH_BIT_POS_PROBE_OUT238 = "16'b0000000011101110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT239 = "16'b0000000011101111" *) (* LC_HIGH_BIT_POS_PROBE_OUT24 = "16'b0000000000011000" *) (* LC_HIGH_BIT_POS_PROBE_OUT240 = "16'b0000000011110000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT241 = "16'b0000000011110001" *) (* LC_HIGH_BIT_POS_PROBE_OUT242 = "16'b0000000011110010" *) (* LC_HIGH_BIT_POS_PROBE_OUT243 = "16'b0000000011110011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT244 = "16'b0000000011110100" *) (* LC_HIGH_BIT_POS_PROBE_OUT245 = "16'b0000000011110101" *) (* LC_HIGH_BIT_POS_PROBE_OUT246 = "16'b0000000011110110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT247 = "16'b0000000011110111" *) (* LC_HIGH_BIT_POS_PROBE_OUT248 = "16'b0000000011111000" *) (* LC_HIGH_BIT_POS_PROBE_OUT249 = "16'b0000000011111001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT25 = "16'b0000000000011001" *) (* LC_HIGH_BIT_POS_PROBE_OUT250 = "16'b0000000011111010" *) (* LC_HIGH_BIT_POS_PROBE_OUT251 = "16'b0000000011111011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT252 = "16'b0000000011111100" *) (* LC_HIGH_BIT_POS_PROBE_OUT253 = "16'b0000000011111101" *) (* LC_HIGH_BIT_POS_PROBE_OUT254 = "16'b0000000011111110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT255 = "16'b0000000011111111" *) (* LC_HIGH_BIT_POS_PROBE_OUT26 = "16'b0000000000011010" *) (* LC_HIGH_BIT_POS_PROBE_OUT27 = "16'b0000000000011011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT28 = "16'b0000000000011100" *) (* LC_HIGH_BIT_POS_PROBE_OUT29 = "16'b0000000000011101" *) (* LC_HIGH_BIT_POS_PROBE_OUT3 = "16'b0000000000000011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT30 = "16'b0000000000011110" *) (* LC_HIGH_BIT_POS_PROBE_OUT31 = "16'b0000000000011111" *) (* LC_HIGH_BIT_POS_PROBE_OUT32 = "16'b0000000000100000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT33 = "16'b0000000000100001" *) (* LC_HIGH_BIT_POS_PROBE_OUT34 = "16'b0000000000100010" *) (* LC_HIGH_BIT_POS_PROBE_OUT35 = "16'b0000000000100011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT36 = "16'b0000000000100100" *) (* LC_HIGH_BIT_POS_PROBE_OUT37 = "16'b0000000000100101" *) (* LC_HIGH_BIT_POS_PROBE_OUT38 = "16'b0000000000100110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT39 = "16'b0000000000100111" *) (* LC_HIGH_BIT_POS_PROBE_OUT4 = "16'b0000000000000100" *) (* LC_HIGH_BIT_POS_PROBE_OUT40 = "16'b0000000000101000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT41 = "16'b0000000000101001" *) (* LC_HIGH_BIT_POS_PROBE_OUT42 = "16'b0000000000101010" *) (* LC_HIGH_BIT_POS_PROBE_OUT43 = "16'b0000000000101011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT44 = "16'b0000000000101100" *) (* LC_HIGH_BIT_POS_PROBE_OUT45 = "16'b0000000000101101" *) (* LC_HIGH_BIT_POS_PROBE_OUT46 = "16'b0000000000101110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT47 = "16'b0000000000101111" *) (* LC_HIGH_BIT_POS_PROBE_OUT48 = "16'b0000000000110000" *) (* LC_HIGH_BIT_POS_PROBE_OUT49 = "16'b0000000000110001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT5 = "16'b0000000000000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT50 = "16'b0000000000110010" *) (* LC_HIGH_BIT_POS_PROBE_OUT51 = "16'b0000000000110011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT52 = "16'b0000000000110100" *) (* LC_HIGH_BIT_POS_PROBE_OUT53 = "16'b0000000000110101" *) (* LC_HIGH_BIT_POS_PROBE_OUT54 = "16'b0000000000110110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT55 = "16'b0000000000110111" *) (* LC_HIGH_BIT_POS_PROBE_OUT56 = "16'b0000000000111000" *) (* LC_HIGH_BIT_POS_PROBE_OUT57 = "16'b0000000000111001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT58 = "16'b0000000000111010" *) (* LC_HIGH_BIT_POS_PROBE_OUT59 = "16'b0000000000111011" *) (* LC_HIGH_BIT_POS_PROBE_OUT6 = "16'b0000000000000110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT60 = "16'b0000000000111100" *) (* LC_HIGH_BIT_POS_PROBE_OUT61 = "16'b0000000000111101" *) (* LC_HIGH_BIT_POS_PROBE_OUT62 = "16'b0000000000111110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT63 = "16'b0000000000111111" *) (* LC_HIGH_BIT_POS_PROBE_OUT64 = "16'b0000000001000000" *) (* LC_HIGH_BIT_POS_PROBE_OUT65 = "16'b0000000001000001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT66 = "16'b0000000001000010" *) (* LC_HIGH_BIT_POS_PROBE_OUT67 = "16'b0000000001000011" *) (* LC_HIGH_BIT_POS_PROBE_OUT68 = "16'b0000000001000100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT69 = "16'b0000000001000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT7 = "16'b0000000000000111" *) (* LC_HIGH_BIT_POS_PROBE_OUT70 = "16'b0000000001000110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT71 = "16'b0000000001000111" *) (* LC_HIGH_BIT_POS_PROBE_OUT72 = "16'b0000000001001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT73 = "16'b0000000001001001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT74 = "16'b0000000001001010" *) (* LC_HIGH_BIT_POS_PROBE_OUT75 = "16'b0000000001001011" *) (* LC_HIGH_BIT_POS_PROBE_OUT76 = "16'b0000000001001100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT77 = "16'b0000000001001101" *) (* LC_HIGH_BIT_POS_PROBE_OUT78 = "16'b0000000001001110" *) (* LC_HIGH_BIT_POS_PROBE_OUT79 = "16'b0000000001001111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT8 = "16'b0000000000001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT80 = "16'b0000000001010000" *) (* LC_HIGH_BIT_POS_PROBE_OUT81 = "16'b0000000001010001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT82 = "16'b0000000001010010" *) (* LC_HIGH_BIT_POS_PROBE_OUT83 = "16'b0000000001010011" *) (* LC_HIGH_BIT_POS_PROBE_OUT84 = "16'b0000000001010100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT85 = "16'b0000000001010101" *) (* LC_HIGH_BIT_POS_PROBE_OUT86 = "16'b0000000001010110" *) (* LC_HIGH_BIT_POS_PROBE_OUT87 = "16'b0000000001010111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT88 = "16'b0000000001011000" *) (* LC_HIGH_BIT_POS_PROBE_OUT89 = "16'b0000000001011001" *) (* LC_HIGH_BIT_POS_PROBE_OUT9 = "16'b0000000000001001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT90 = "16'b0000000001011010" *) (* LC_HIGH_BIT_POS_PROBE_OUT91 = "16'b0000000001011011" *) (* LC_HIGH_BIT_POS_PROBE_OUT92 = "16'b0000000001011100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT93 = "16'b0000000001011101" *) (* LC_HIGH_BIT_POS_PROBE_OUT94 = "16'b0000000001011110" *) (* LC_HIGH_BIT_POS_PROBE_OUT95 = "16'b0000000001011111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT96 = "16'b0000000001100000" *) (* LC_HIGH_BIT_POS_PROBE_OUT97 = "16'b0000000001100001" *) (* LC_HIGH_BIT_POS_PROBE_OUT98 = "16'b0000000001100010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT99 = "16'b0000000001100011" *) (* LC_LOW_BIT_POS_PROBE_OUT0 = "16'b0000000000000000" *) (* LC_LOW_BIT_POS_PROBE_OUT1 = "16'b0000000000000001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT10 = "16'b0000000000001010" *) (* LC_LOW_BIT_POS_PROBE_OUT100 = "16'b0000000001100100" *) (* LC_LOW_BIT_POS_PROBE_OUT101 = "16'b0000000001100101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT102 = "16'b0000000001100110" *) (* LC_LOW_BIT_POS_PROBE_OUT103 = "16'b0000000001100111" *) (* LC_LOW_BIT_POS_PROBE_OUT104 = "16'b0000000001101000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT105 = "16'b0000000001101001" *) (* LC_LOW_BIT_POS_PROBE_OUT106 = "16'b0000000001101010" *) (* LC_LOW_BIT_POS_PROBE_OUT107 = "16'b0000000001101011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT108 = "16'b0000000001101100" *) (* LC_LOW_BIT_POS_PROBE_OUT109 = "16'b0000000001101101" *) (* LC_LOW_BIT_POS_PROBE_OUT11 = "16'b0000000000001011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT110 = "16'b0000000001101110" *) (* LC_LOW_BIT_POS_PROBE_OUT111 = "16'b0000000001101111" *) (* LC_LOW_BIT_POS_PROBE_OUT112 = "16'b0000000001110000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT113 = "16'b0000000001110001" *) (* LC_LOW_BIT_POS_PROBE_OUT114 = "16'b0000000001110010" *) (* LC_LOW_BIT_POS_PROBE_OUT115 = "16'b0000000001110011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT116 = "16'b0000000001110100" *) (* LC_LOW_BIT_POS_PROBE_OUT117 = "16'b0000000001110101" *) (* LC_LOW_BIT_POS_PROBE_OUT118 = "16'b0000000001110110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT119 = "16'b0000000001110111" *) (* LC_LOW_BIT_POS_PROBE_OUT12 = "16'b0000000000001100" *) (* LC_LOW_BIT_POS_PROBE_OUT120 = "16'b0000000001111000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT121 = "16'b0000000001111001" *) (* LC_LOW_BIT_POS_PROBE_OUT122 = "16'b0000000001111010" *) (* LC_LOW_BIT_POS_PROBE_OUT123 = "16'b0000000001111011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT124 = "16'b0000000001111100" *) (* LC_LOW_BIT_POS_PROBE_OUT125 = "16'b0000000001111101" *) (* LC_LOW_BIT_POS_PROBE_OUT126 = "16'b0000000001111110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT127 = "16'b0000000001111111" *) (* LC_LOW_BIT_POS_PROBE_OUT128 = "16'b0000000010000000" *) (* LC_LOW_BIT_POS_PROBE_OUT129 = "16'b0000000010000001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT13 = "16'b0000000000001101" *) (* LC_LOW_BIT_POS_PROBE_OUT130 = "16'b0000000010000010" *) (* LC_LOW_BIT_POS_PROBE_OUT131 = "16'b0000000010000011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT132 = "16'b0000000010000100" *) (* LC_LOW_BIT_POS_PROBE_OUT133 = "16'b0000000010000101" *) (* LC_LOW_BIT_POS_PROBE_OUT134 = "16'b0000000010000110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT135 = "16'b0000000010000111" *) (* LC_LOW_BIT_POS_PROBE_OUT136 = "16'b0000000010001000" *) (* LC_LOW_BIT_POS_PROBE_OUT137 = "16'b0000000010001001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT138 = "16'b0000000010001010" *) (* LC_LOW_BIT_POS_PROBE_OUT139 = "16'b0000000010001011" *) (* LC_LOW_BIT_POS_PROBE_OUT14 = "16'b0000000000001110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT140 = "16'b0000000010001100" *) (* LC_LOW_BIT_POS_PROBE_OUT141 = "16'b0000000010001101" *) (* LC_LOW_BIT_POS_PROBE_OUT142 = "16'b0000000010001110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT143 = "16'b0000000010001111" *) (* LC_LOW_BIT_POS_PROBE_OUT144 = "16'b0000000010010000" *) (* LC_LOW_BIT_POS_PROBE_OUT145 = "16'b0000000010010001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT146 = "16'b0000000010010010" *) (* LC_LOW_BIT_POS_PROBE_OUT147 = "16'b0000000010010011" *) (* LC_LOW_BIT_POS_PROBE_OUT148 = "16'b0000000010010100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT149 = "16'b0000000010010101" *) (* LC_LOW_BIT_POS_PROBE_OUT15 = "16'b0000000000001111" *) (* LC_LOW_BIT_POS_PROBE_OUT150 = "16'b0000000010010110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT151 = "16'b0000000010010111" *) (* LC_LOW_BIT_POS_PROBE_OUT152 = "16'b0000000010011000" *) (* LC_LOW_BIT_POS_PROBE_OUT153 = "16'b0000000010011001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT154 = "16'b0000000010011010" *) (* LC_LOW_BIT_POS_PROBE_OUT155 = "16'b0000000010011011" *) (* LC_LOW_BIT_POS_PROBE_OUT156 = "16'b0000000010011100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT157 = "16'b0000000010011101" *) (* LC_LOW_BIT_POS_PROBE_OUT158 = "16'b0000000010011110" *) (* LC_LOW_BIT_POS_PROBE_OUT159 = "16'b0000000010011111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT16 = "16'b0000000000010000" *) (* LC_LOW_BIT_POS_PROBE_OUT160 = "16'b0000000010100000" *) (* LC_LOW_BIT_POS_PROBE_OUT161 = "16'b0000000010100001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT162 = "16'b0000000010100010" *) (* LC_LOW_BIT_POS_PROBE_OUT163 = "16'b0000000010100011" *) (* LC_LOW_BIT_POS_PROBE_OUT164 = "16'b0000000010100100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT165 = "16'b0000000010100101" *) (* LC_LOW_BIT_POS_PROBE_OUT166 = "16'b0000000010100110" *) (* LC_LOW_BIT_POS_PROBE_OUT167 = "16'b0000000010100111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT168 = "16'b0000000010101000" *) (* LC_LOW_BIT_POS_PROBE_OUT169 = "16'b0000000010101001" *) (* LC_LOW_BIT_POS_PROBE_OUT17 = "16'b0000000000010001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT170 = "16'b0000000010101010" *) (* LC_LOW_BIT_POS_PROBE_OUT171 = "16'b0000000010101011" *) (* LC_LOW_BIT_POS_PROBE_OUT172 = "16'b0000000010101100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT173 = "16'b0000000010101101" *) (* LC_LOW_BIT_POS_PROBE_OUT174 = "16'b0000000010101110" *) (* LC_LOW_BIT_POS_PROBE_OUT175 = "16'b0000000010101111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT176 = "16'b0000000010110000" *) (* LC_LOW_BIT_POS_PROBE_OUT177 = "16'b0000000010110001" *) (* LC_LOW_BIT_POS_PROBE_OUT178 = "16'b0000000010110010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT179 = "16'b0000000010110011" *) (* LC_LOW_BIT_POS_PROBE_OUT18 = "16'b0000000000010010" *) (* LC_LOW_BIT_POS_PROBE_OUT180 = "16'b0000000010110100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT181 = "16'b0000000010110101" *) (* LC_LOW_BIT_POS_PROBE_OUT182 = "16'b0000000010110110" *) (* LC_LOW_BIT_POS_PROBE_OUT183 = "16'b0000000010110111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT184 = "16'b0000000010111000" *) (* LC_LOW_BIT_POS_PROBE_OUT185 = "16'b0000000010111001" *) (* LC_LOW_BIT_POS_PROBE_OUT186 = "16'b0000000010111010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT187 = "16'b0000000010111011" *) (* LC_LOW_BIT_POS_PROBE_OUT188 = "16'b0000000010111100" *) (* LC_LOW_BIT_POS_PROBE_OUT189 = "16'b0000000010111101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT19 = "16'b0000000000010011" *) (* LC_LOW_BIT_POS_PROBE_OUT190 = "16'b0000000010111110" *) (* LC_LOW_BIT_POS_PROBE_OUT191 = "16'b0000000010111111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT192 = "16'b0000000011000000" *) (* LC_LOW_BIT_POS_PROBE_OUT193 = "16'b0000000011000001" *) (* LC_LOW_BIT_POS_PROBE_OUT194 = "16'b0000000011000010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT195 = "16'b0000000011000011" *) (* LC_LOW_BIT_POS_PROBE_OUT196 = "16'b0000000011000100" *) (* LC_LOW_BIT_POS_PROBE_OUT197 = "16'b0000000011000101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT198 = "16'b0000000011000110" *) (* LC_LOW_BIT_POS_PROBE_OUT199 = "16'b0000000011000111" *) (* LC_LOW_BIT_POS_PROBE_OUT2 = "16'b0000000000000010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT20 = "16'b0000000000010100" *) (* LC_LOW_BIT_POS_PROBE_OUT200 = "16'b0000000011001000" *) (* LC_LOW_BIT_POS_PROBE_OUT201 = "16'b0000000011001001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT202 = "16'b0000000011001010" *) (* LC_LOW_BIT_POS_PROBE_OUT203 = "16'b0000000011001011" *) (* LC_LOW_BIT_POS_PROBE_OUT204 = "16'b0000000011001100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT205 = "16'b0000000011001101" *) (* LC_LOW_BIT_POS_PROBE_OUT206 = "16'b0000000011001110" *) (* LC_LOW_BIT_POS_PROBE_OUT207 = "16'b0000000011001111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT208 = "16'b0000000011010000" *) (* LC_LOW_BIT_POS_PROBE_OUT209 = "16'b0000000011010001" *) (* LC_LOW_BIT_POS_PROBE_OUT21 = "16'b0000000000010101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT210 = "16'b0000000011010010" *) (* LC_LOW_BIT_POS_PROBE_OUT211 = "16'b0000000011010011" *) (* LC_LOW_BIT_POS_PROBE_OUT212 = "16'b0000000011010100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT213 = "16'b0000000011010101" *) (* LC_LOW_BIT_POS_PROBE_OUT214 = "16'b0000000011010110" *) (* LC_LOW_BIT_POS_PROBE_OUT215 = "16'b0000000011010111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT216 = "16'b0000000011011000" *) (* LC_LOW_BIT_POS_PROBE_OUT217 = "16'b0000000011011001" *) (* LC_LOW_BIT_POS_PROBE_OUT218 = "16'b0000000011011010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT219 = "16'b0000000011011011" *) (* LC_LOW_BIT_POS_PROBE_OUT22 = "16'b0000000000010110" *) (* LC_LOW_BIT_POS_PROBE_OUT220 = "16'b0000000011011100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT221 = "16'b0000000011011101" *) (* LC_LOW_BIT_POS_PROBE_OUT222 = "16'b0000000011011110" *) (* LC_LOW_BIT_POS_PROBE_OUT223 = "16'b0000000011011111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT224 = "16'b0000000011100000" *) (* LC_LOW_BIT_POS_PROBE_OUT225 = "16'b0000000011100001" *) (* LC_LOW_BIT_POS_PROBE_OUT226 = "16'b0000000011100010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT227 = "16'b0000000011100011" *) (* LC_LOW_BIT_POS_PROBE_OUT228 = "16'b0000000011100100" *) (* LC_LOW_BIT_POS_PROBE_OUT229 = "16'b0000000011100101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT23 = "16'b0000000000010111" *) (* LC_LOW_BIT_POS_PROBE_OUT230 = "16'b0000000011100110" *) (* LC_LOW_BIT_POS_PROBE_OUT231 = "16'b0000000011100111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT232 = "16'b0000000011101000" *) (* LC_LOW_BIT_POS_PROBE_OUT233 = "16'b0000000011101001" *) (* LC_LOW_BIT_POS_PROBE_OUT234 = "16'b0000000011101010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT235 = "16'b0000000011101011" *) (* LC_LOW_BIT_POS_PROBE_OUT236 = "16'b0000000011101100" *) (* LC_LOW_BIT_POS_PROBE_OUT237 = "16'b0000000011101101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT238 = "16'b0000000011101110" *) (* LC_LOW_BIT_POS_PROBE_OUT239 = "16'b0000000011101111" *) (* LC_LOW_BIT_POS_PROBE_OUT24 = "16'b0000000000011000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT240 = "16'b0000000011110000" *) (* LC_LOW_BIT_POS_PROBE_OUT241 = "16'b0000000011110001" *) (* LC_LOW_BIT_POS_PROBE_OUT242 = "16'b0000000011110010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT243 = "16'b0000000011110011" *) (* LC_LOW_BIT_POS_PROBE_OUT244 = "16'b0000000011110100" *) (* LC_LOW_BIT_POS_PROBE_OUT245 = "16'b0000000011110101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT246 = "16'b0000000011110110" *) (* LC_LOW_BIT_POS_PROBE_OUT247 = "16'b0000000011110111" *) (* LC_LOW_BIT_POS_PROBE_OUT248 = "16'b0000000011111000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT249 = "16'b0000000011111001" *) (* LC_LOW_BIT_POS_PROBE_OUT25 = "16'b0000000000011001" *) (* LC_LOW_BIT_POS_PROBE_OUT250 = "16'b0000000011111010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT251 = "16'b0000000011111011" *) (* LC_LOW_BIT_POS_PROBE_OUT252 = "16'b0000000011111100" *) (* LC_LOW_BIT_POS_PROBE_OUT253 = "16'b0000000011111101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT254 = "16'b0000000011111110" *) (* LC_LOW_BIT_POS_PROBE_OUT255 = "16'b0000000011111111" *) (* LC_LOW_BIT_POS_PROBE_OUT26 = "16'b0000000000011010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT27 = "16'b0000000000011011" *) (* LC_LOW_BIT_POS_PROBE_OUT28 = "16'b0000000000011100" *) (* LC_LOW_BIT_POS_PROBE_OUT29 = "16'b0000000000011101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT3 = "16'b0000000000000011" *) (* LC_LOW_BIT_POS_PROBE_OUT30 = "16'b0000000000011110" *) (* LC_LOW_BIT_POS_PROBE_OUT31 = "16'b0000000000011111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT32 = "16'b0000000000100000" *) (* LC_LOW_BIT_POS_PROBE_OUT33 = "16'b0000000000100001" *) (* LC_LOW_BIT_POS_PROBE_OUT34 = "16'b0000000000100010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT35 = "16'b0000000000100011" *) (* LC_LOW_BIT_POS_PROBE_OUT36 = "16'b0000000000100100" *) (* LC_LOW_BIT_POS_PROBE_OUT37 = "16'b0000000000100101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT38 = "16'b0000000000100110" *) (* LC_LOW_BIT_POS_PROBE_OUT39 = "16'b0000000000100111" *) (* LC_LOW_BIT_POS_PROBE_OUT4 = "16'b0000000000000100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT40 = "16'b0000000000101000" *) (* LC_LOW_BIT_POS_PROBE_OUT41 = "16'b0000000000101001" *) (* LC_LOW_BIT_POS_PROBE_OUT42 = "16'b0000000000101010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT43 = "16'b0000000000101011" *) (* LC_LOW_BIT_POS_PROBE_OUT44 = "16'b0000000000101100" *) (* LC_LOW_BIT_POS_PROBE_OUT45 = "16'b0000000000101101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT46 = "16'b0000000000101110" *) (* LC_LOW_BIT_POS_PROBE_OUT47 = "16'b0000000000101111" *) (* LC_LOW_BIT_POS_PROBE_OUT48 = "16'b0000000000110000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT49 = "16'b0000000000110001" *) (* LC_LOW_BIT_POS_PROBE_OUT5 = "16'b0000000000000101" *) (* LC_LOW_BIT_POS_PROBE_OUT50 = "16'b0000000000110010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT51 = "16'b0000000000110011" *) (* LC_LOW_BIT_POS_PROBE_OUT52 = "16'b0000000000110100" *) (* LC_LOW_BIT_POS_PROBE_OUT53 = "16'b0000000000110101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT54 = "16'b0000000000110110" *) (* LC_LOW_BIT_POS_PROBE_OUT55 = "16'b0000000000110111" *) (* LC_LOW_BIT_POS_PROBE_OUT56 = "16'b0000000000111000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT57 = "16'b0000000000111001" *) (* LC_LOW_BIT_POS_PROBE_OUT58 = "16'b0000000000111010" *) (* LC_LOW_BIT_POS_PROBE_OUT59 = "16'b0000000000111011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT6 = "16'b0000000000000110" *) (* LC_LOW_BIT_POS_PROBE_OUT60 = "16'b0000000000111100" *) (* LC_LOW_BIT_POS_PROBE_OUT61 = "16'b0000000000111101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT62 = "16'b0000000000111110" *) (* LC_LOW_BIT_POS_PROBE_OUT63 = "16'b0000000000111111" *) (* LC_LOW_BIT_POS_PROBE_OUT64 = "16'b0000000001000000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT65 = "16'b0000000001000001" *) (* LC_LOW_BIT_POS_PROBE_OUT66 = "16'b0000000001000010" *) (* LC_LOW_BIT_POS_PROBE_OUT67 = "16'b0000000001000011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT68 = "16'b0000000001000100" *) (* LC_LOW_BIT_POS_PROBE_OUT69 = "16'b0000000001000101" *) (* LC_LOW_BIT_POS_PROBE_OUT7 = "16'b0000000000000111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT70 = "16'b0000000001000110" *) (* LC_LOW_BIT_POS_PROBE_OUT71 = "16'b0000000001000111" *) (* LC_LOW_BIT_POS_PROBE_OUT72 = "16'b0000000001001000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT73 = "16'b0000000001001001" *) (* LC_LOW_BIT_POS_PROBE_OUT74 = "16'b0000000001001010" *) (* LC_LOW_BIT_POS_PROBE_OUT75 = "16'b0000000001001011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT76 = "16'b0000000001001100" *) (* LC_LOW_BIT_POS_PROBE_OUT77 = "16'b0000000001001101" *) (* LC_LOW_BIT_POS_PROBE_OUT78 = "16'b0000000001001110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT79 = "16'b0000000001001111" *) (* LC_LOW_BIT_POS_PROBE_OUT8 = "16'b0000000000001000" *) (* LC_LOW_BIT_POS_PROBE_OUT80 = "16'b0000000001010000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT81 = "16'b0000000001010001" *) (* LC_LOW_BIT_POS_PROBE_OUT82 = "16'b0000000001010010" *) (* LC_LOW_BIT_POS_PROBE_OUT83 = "16'b0000000001010011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT84 = "16'b0000000001010100" *) (* LC_LOW_BIT_POS_PROBE_OUT85 = "16'b0000000001010101" *) (* LC_LOW_BIT_POS_PROBE_OUT86 = "16'b0000000001010110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT87 = "16'b0000000001010111" *) (* LC_LOW_BIT_POS_PROBE_OUT88 = "16'b0000000001011000" *) (* LC_LOW_BIT_POS_PROBE_OUT89 = "16'b0000000001011001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT9 = "16'b0000000000001001" *) (* LC_LOW_BIT_POS_PROBE_OUT90 = "16'b0000000001011010" *) (* LC_LOW_BIT_POS_PROBE_OUT91 = "16'b0000000001011011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT92 = "16'b0000000001011100" *) (* LC_LOW_BIT_POS_PROBE_OUT93 = "16'b0000000001011101" *) (* LC_LOW_BIT_POS_PROBE_OUT94 = "16'b0000000001011110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT95 = "16'b0000000001011111" *) (* LC_LOW_BIT_POS_PROBE_OUT96 = "16'b0000000001100000" *) (* LC_LOW_BIT_POS_PROBE_OUT97 = "16'b0000000001100001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT98 = "16'b0000000001100010" *) (* LC_LOW_BIT_POS_PROBE_OUT99 = "16'b0000000001100011" *) (* LC_PROBE_IN_WIDTH_STRING = "2048'b
(* LC_PROBE_OUT_HIGH_BIT_POS_STRING = "4096'bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001" *) (* LC_PROBE_OUT_LOW_BIT_POS_STRING = "4096'b
(* LC_PROBE_OUT_WIDTH_STRING = "2048'b
(* ORIG_REF_NAME = "vio_v3_0_19_vio" *) (* dont_touch = "true" *) (* downgradeipidentifiedwarnings = "yes" *) 
module design_1_vio_0_1_vio_v3_0_19_vio
   (clk,
    probe_in0,
    probe_in1,
    probe_in2,
    probe_in3,
    probe_in4,
    probe_in5,
    probe_in6,
    probe_in7,
    probe_in8,
    probe_in9,
    probe_in10,
    probe_in11,
    probe_in12,
    probe_in13,
    probe_in14,
    probe_in15,
    probe_in16,
    probe_in17,
    probe_in18,
    probe_in19,
    probe_in20,
    probe_in21,
    probe_in22,
    probe_in23,
    probe_in24,
    probe_in25,
    probe_in26,
    probe_in27,
    probe_in28,
    probe_in29,
    probe_in30,
    probe_in31,
    probe_in32,
    probe_in33,
    probe_in34,
    probe_in35,
    probe_in36,
    probe_in37,
    probe_in38,
    probe_in39,
    probe_in40,
    probe_in41,
    probe_in42,
    probe_in43,
    probe_in44,
    probe_in45,
    probe_in46,
    probe_in47,
    probe_in48,
    probe_in49,
    probe_in50,
    probe_in51,
    probe_in52,
    probe_in53,
    probe_in54,
    probe_in55,
    probe_in56,
    probe_in57,
    probe_in58,
    probe_in59,
    probe_in60,
    probe_in61,
    probe_in62,
    probe_in63,
    probe_in64,
    probe_in65,
    probe_in66,
    probe_in67,
    probe_in68,
    probe_in69,
    probe_in70,
    probe_in71,
    probe_in72,
    probe_in73,
    probe_in74,
    probe_in75,
    probe_in76,
    probe_in77,
    probe_in78,
    probe_in79,
    probe_in80,
    probe_in81,
    probe_in82,
    probe_in83,
    probe_in84,
    probe_in85,
    probe_in86,
    probe_in87,
    probe_in88,
    probe_in89,
    probe_in90,
    probe_in91,
    probe_in92,
    probe_in93,
    probe_in94,
    probe_in95,
    probe_in96,
    probe_in97,
    probe_in98,
    probe_in99,
    probe_in100,
    probe_in101,
    probe_in102,
    probe_in103,
    probe_in104,
    probe_in105,
    probe_in106,
    probe_in107,
    probe_in108,
    probe_in109,
    probe_in110,
    probe_in111,
    probe_in112,
    probe_in113,
    probe_in114,
    probe_in115,
    probe_in116,
    probe_in117,
    probe_in118,
    probe_in119,
    probe_in120,
    probe_in121,
    probe_in122,
    probe_in123,
    probe_in124,
    probe_in125,
    probe_in126,
    probe_in127,
    probe_in128,
    probe_in129,
    probe_in130,
    probe_in131,
    probe_in132,
    probe_in133,
    probe_in134,
    probe_in135,
    probe_in136,
    probe_in137,
    probe_in138,
    probe_in139,
    probe_in140,
    probe_in141,
    probe_in142,
    probe_in143,
    probe_in144,
    probe_in145,
    probe_in146,
    probe_in147,
    probe_in148,
    probe_in149,
    probe_in150,
    probe_in151,
    probe_in152,
    probe_in153,
    probe_in154,
    probe_in155,
    probe_in156,
    probe_in157,
    probe_in158,
    probe_in159,
    probe_in160,
    probe_in161,
    probe_in162,
    probe_in163,
    probe_in164,
    probe_in165,
    probe_in166,
    probe_in167,
    probe_in168,
    probe_in169,
    probe_in170,
    probe_in171,
    probe_in172,
    probe_in173,
    probe_in174,
    probe_in175,
    probe_in176,
    probe_in177,
    probe_in178,
    probe_in179,
    probe_in180,
    probe_in181,
    probe_in182,
    probe_in183,
    probe_in184,
    probe_in185,
    probe_in186,
    probe_in187,
    probe_in188,
    probe_in189,
    probe_in190,
    probe_in191,
    probe_in192,
    probe_in193,
    probe_in194,
    probe_in195,
    probe_in196,
    probe_in197,
    probe_in198,
    probe_in199,
    probe_in200,
    probe_in201,
    probe_in202,
    probe_in203,
    probe_in204,
    probe_in205,
    probe_in206,
    probe_in207,
    probe_in208,
    probe_in209,
    probe_in210,
    probe_in211,
    probe_in212,
    probe_in213,
    probe_in214,
    probe_in215,
    probe_in216,
    probe_in217,
    probe_in218,
    probe_in219,
    probe_in220,
    probe_in221,
    probe_in222,
    probe_in223,
    probe_in224,
    probe_in225,
    probe_in226,
    probe_in227,
    probe_in228,
    probe_in229,
    probe_in230,
    probe_in231,
    probe_in232,
    probe_in233,
    probe_in234,
    probe_in235,
    probe_in236,
    probe_in237,
    probe_in238,
    probe_in239,
    probe_in240,
    probe_in241,
    probe_in242,
    probe_in243,
    probe_in244,
    probe_in245,
    probe_in246,
    probe_in247,
    probe_in248,
    probe_in249,
    probe_in250,
    probe_in251,
    probe_in252,
    probe_in253,
    probe_in254,
    probe_in255,
    sl_iport0,
    sl_oport0,
    probe_out0,
    probe_out1,
    probe_out2,
    probe_out3,
    probe_out4,
    probe_out5,
    probe_out6,
    probe_out7,
    probe_out8,
    probe_out9,
    probe_out10,
    probe_out11,
    probe_out12,
    probe_out13,
    probe_out14,
    probe_out15,
    probe_out16,
    probe_out17,
    probe_out18,
    probe_out19,
    probe_out20,
    probe_out21,
    probe_out22,
    probe_out23,
    probe_out24,
    probe_out25,
    probe_out26,
    probe_out27,
    probe_out28,
    probe_out29,
    probe_out30,
    probe_out31,
    probe_out32,
    probe_out33,
    probe_out34,
    probe_out35,
    probe_out36,
    probe_out37,
    probe_out38,
    probe_out39,
    probe_out40,
    probe_out41,
    probe_out42,
    probe_out43,
    probe_out44,
    probe_out45,
    probe_out46,
    probe_out47,
    probe_out48,
    probe_out49,
    probe_out50,
    probe_out51,
    probe_out52,
    probe_out53,
    probe_out54,
    probe_out55,
    probe_out56,
    probe_out57,
    probe_out58,
    probe_out59,
    probe_out60,
    probe_out61,
    probe_out62,
    probe_out63,
    probe_out64,
    probe_out65,
    probe_out66,
    probe_out67,
    probe_out68,
    probe_out69,
    probe_out70,
    probe_out71,
    probe_out72,
    probe_out73,
    probe_out74,
    probe_out75,
    probe_out76,
    probe_out77,
    probe_out78,
    probe_out79,
    probe_out80,
    probe_out81,
    probe_out82,
    probe_out83,
    probe_out84,
    probe_out85,
    probe_out86,
    probe_out87,
    probe_out88,
    probe_out89,
    probe_out90,
    probe_out91,
    probe_out92,
    probe_out93,
    probe_out94,
    probe_out95,
    probe_out96,
    probe_out97,
    probe_out98,
    probe_out99,
    probe_out100,
    probe_out101,
    probe_out102,
    probe_out103,
    probe_out104,
    probe_out105,
    probe_out106,
    probe_out107,
    probe_out108,
    probe_out109,
    probe_out110,
    probe_out111,
    probe_out112,
    probe_out113,
    probe_out114,
    probe_out115,
    probe_out116,
    probe_out117,
    probe_out118,
    probe_out119,
    probe_out120,
    probe_out121,
    probe_out122,
    probe_out123,
    probe_out124,
    probe_out125,
    probe_out126,
    probe_out127,
    probe_out128,
    probe_out129,
    probe_out130,
    probe_out131,
    probe_out132,
    probe_out133,
    probe_out134,
    probe_out135,
    probe_out136,
    probe_out137,
    probe_out138,
    probe_out139,
    probe_out140,
    probe_out141,
    probe_out142,
    probe_out143,
    probe_out144,
    probe_out145,
    probe_out146,
    probe_out147,
    probe_out148,
    probe_out149,
    probe_out150,
    probe_out151,
    probe_out152,
    probe_out153,
    probe_out154,
    probe_out155,
    probe_out156,
    probe_out157,
    probe_out158,
    probe_out159,
    probe_out160,
    probe_out161,
    probe_out162,
    probe_out163,
    probe_out164,
    probe_out165,
    probe_out166,
    probe_out167,
    probe_out168,
    probe_out169,
    probe_out170,
    probe_out171,
    probe_out172,
    probe_out173,
    probe_out174,
    probe_out175,
    probe_out176,
    probe_out177,
    probe_out178,
    probe_out179,
    probe_out180,
    probe_out181,
    probe_out182,
    probe_out183,
    probe_out184,
    probe_out185,
    probe_out186,
    probe_out187,
    probe_out188,
    probe_out189,
    probe_out190,
    probe_out191,
    probe_out192,
    probe_out193,
    probe_out194,
    probe_out195,
    probe_out196,
    probe_out197,
    probe_out198,
    probe_out199,
    probe_out200,
    probe_out201,
    probe_out202,
    probe_out203,
    probe_out204,
    probe_out205,
    probe_out206,
    probe_out207,
    probe_out208,
    probe_out209,
    probe_out210,
    probe_out211,
    probe_out212,
    probe_out213,
    probe_out214,
    probe_out215,
    probe_out216,
    probe_out217,
    probe_out218,
    probe_out219,
    probe_out220,
    probe_out221,
    probe_out222,
    probe_out223,
    probe_out224,
    probe_out225,
    probe_out226,
    probe_out227,
    probe_out228,
    probe_out229,
    probe_out230,
    probe_out231,
    probe_out232,
    probe_out233,
    probe_out234,
    probe_out235,
    probe_out236,
    probe_out237,
    probe_out238,
    probe_out239,
    probe_out240,
    probe_out241,
    probe_out242,
    probe_out243,
    probe_out244,
    probe_out245,
    probe_out246,
    probe_out247,
    probe_out248,
    probe_out249,
    probe_out250,
    probe_out251,
    probe_out252,
    probe_out253,
    probe_out254,
    probe_out255);
  input clk;
  input [0:0]probe_in0;
  input [0:0]probe_in1;
  input [0:0]probe_in2;
  input [0:0]probe_in3;
  input [0:0]probe_in4;
  input [0:0]probe_in5;
  input [0:0]probe_in6;
  input [0:0]probe_in7;
  input [0:0]probe_in8;
  input [0:0]probe_in9;
  input [0:0]probe_in10;
  input [0:0]probe_in11;
  input [0:0]probe_in12;
  input [0:0]probe_in13;
  input [0:0]probe_in14;
  input [0:0]probe_in15;
  input [0:0]probe_in16;
  input [0:0]probe_in17;
  input [0:0]probe_in18;
  input [0:0]probe_in19;
  input [0:0]probe_in20;
  input [0:0]probe_in21;
  input [0:0]probe_in22;
  input [0:0]probe_in23;
  input [0:0]probe_in24;
  input [0:0]probe_in25;
  input [0:0]probe_in26;
  input [0:0]probe_in27;
  input [0:0]probe_in28;
  input [0:0]probe_in29;
  input [0:0]probe_in30;
  input [0:0]probe_in31;
  input [0:0]probe_in32;
  input [0:0]probe_in33;
  input [0:0]probe_in34;
  input [0:0]probe_in35;
  input [0:0]probe_in36;
  input [0:0]probe_in37;
  input [0:0]probe_in38;
  input [0:0]probe_in39;
  input [0:0]probe_in40;
  input [0:0]probe_in41;
  input [0:0]probe_in42;
  input [0:0]probe_in43;
  input [0:0]probe_in44;
  input [0:0]probe_in45;
  input [0:0]probe_in46;
  input [0:0]probe_in47;
  input [0:0]probe_in48;
  input [0:0]probe_in49;
  input [0:0]probe_in50;
  input [0:0]probe_in51;
  input [0:0]probe_in52;
  input [0:0]probe_in53;
  input [0:0]probe_in54;
  input [0:0]probe_in55;
  input [0:0]probe_in56;
  input [0:0]probe_in57;
  input [0:0]probe_in58;
  input [0:0]probe_in59;
  input [0:0]probe_in60;
  input [0:0]probe_in61;
  input [0:0]probe_in62;
  input [0:0]probe_in63;
  input [0:0]probe_in64;
  input [0:0]probe_in65;
  input [0:0]probe_in66;
  input [0:0]probe_in67;
  input [0:0]probe_in68;
  input [0:0]probe_in69;
  input [0:0]probe_in70;
  input [0:0]probe_in71;
  input [0:0]probe_in72;
  input [0:0]probe_in73;
  input [0:0]probe_in74;
  input [0:0]probe_in75;
  input [0:0]probe_in76;
  input [0:0]probe_in77;
  input [0:0]probe_in78;
  input [0:0]probe_in79;
  input [0:0]probe_in80;
  input [0:0]probe_in81;
  input [0:0]probe_in82;
  input [0:0]probe_in83;
  input [0:0]probe_in84;
  input [0:0]probe_in85;
  input [0:0]probe_in86;
  input [0:0]probe_in87;
  input [0:0]probe_in88;
  input [0:0]probe_in89;
  input [0:0]probe_in90;
  input [0:0]probe_in91;
  input [0:0]probe_in92;
  input [0:0]probe_in93;
  input [0:0]probe_in94;
  input [0:0]probe_in95;
  input [0:0]probe_in96;
  input [0:0]probe_in97;
  input [0:0]probe_in98;
  input [0:0]probe_in99;
  input [0:0]probe_in100;
  input [0:0]probe_in101;
  input [0:0]probe_in102;
  input [0:0]probe_in103;
  input [0:0]probe_in104;
  input [0:0]probe_in105;
  input [0:0]probe_in106;
  input [0:0]probe_in107;
  input [0:0]probe_in108;
  input [0:0]probe_in109;
  input [0:0]probe_in110;
  input [0:0]probe_in111;
  input [0:0]probe_in112;
  input [0:0]probe_in113;
  input [0:0]probe_in114;
  input [0:0]probe_in115;
  input [0:0]probe_in116;
  input [0:0]probe_in117;
  input [0:0]probe_in118;
  input [0:0]probe_in119;
  input [0:0]probe_in120;
  input [0:0]probe_in121;
  input [0:0]probe_in122;
  input [0:0]probe_in123;
  input [0:0]probe_in124;
  input [0:0]probe_in125;
  input [0:0]probe_in126;
  input [0:0]probe_in127;
  input [0:0]probe_in128;
  input [0:0]probe_in129;
  input [0:0]probe_in130;
  input [0:0]probe_in131;
  input [0:0]probe_in132;
  input [0:0]probe_in133;
  input [0:0]probe_in134;
  input [0:0]probe_in135;
  input [0:0]probe_in136;
  input [0:0]probe_in137;
  input [0:0]probe_in138;
  input [0:0]probe_in139;
  input [0:0]probe_in140;
  input [0:0]probe_in141;
  input [0:0]probe_in142;
  input [0:0]probe_in143;
  input [0:0]probe_in144;
  input [0:0]probe_in145;
  input [0:0]probe_in146;
  input [0:0]probe_in147;
  input [0:0]probe_in148;
  input [0:0]probe_in149;
  input [0:0]probe_in150;
  input [0:0]probe_in151;
  input [0:0]probe_in152;
  input [0:0]probe_in153;
  input [0:0]probe_in154;
  input [0:0]probe_in155;
  input [0:0]probe_in156;
  input [0:0]probe_in157;
  input [0:0]probe_in158;
  input [0:0]probe_in159;
  input [0:0]probe_in160;
  input [0:0]probe_in161;
  input [0:0]probe_in162;
  input [0:0]probe_in163;
  input [0:0]probe_in164;
  input [0:0]probe_in165;
  input [0:0]probe_in166;
  input [0:0]probe_in167;
  input [0:0]probe_in168;
  input [0:0]probe_in169;
  input [0:0]probe_in170;
  input [0:0]probe_in171;
  input [0:0]probe_in172;
  input [0:0]probe_in173;
  input [0:0]probe_in174;
  input [0:0]probe_in175;
  input [0:0]probe_in176;
  input [0:0]probe_in177;
  input [0:0]probe_in178;
  input [0:0]probe_in179;
  input [0:0]probe_in180;
  input [0:0]probe_in181;
  input [0:0]probe_in182;
  input [0:0]probe_in183;
  input [0:0]probe_in184;
  input [0:0]probe_in185;
  input [0:0]probe_in186;
  input [0:0]probe_in187;
  input [0:0]probe_in188;
  input [0:0]probe_in189;
  input [0:0]probe_in190;
  input [0:0]probe_in191;
  input [0:0]probe_in192;
  input [0:0]probe_in193;
  input [0:0]probe_in194;
  input [0:0]probe_in195;
  input [0:0]probe_in196;
  input [0:0]probe_in197;
  input [0:0]probe_in198;
  input [0:0]probe_in199;
  input [0:0]probe_in200;
  input [0:0]probe_in201;
  input [0:0]probe_in202;
  input [0:0]probe_in203;
  input [0:0]probe_in204;
  input [0:0]probe_in205;
  input [0:0]probe_in206;
  input [0:0]probe_in207;
  input [0:0]probe_in208;
  input [0:0]probe_in209;
  input [0:0]probe_in210;
  input [0:0]probe_in211;
  input [0:0]probe_in212;
  input [0:0]probe_in213;
  input [0:0]probe_in214;
  input [0:0]probe_in215;
  input [0:0]probe_in216;
  input [0:0]probe_in217;
  input [0:0]probe_in218;
  input [0:0]probe_in219;
  input [0:0]probe_in220;
  input [0:0]probe_in221;
  input [0:0]probe_in222;
  input [0:0]probe_in223;
  input [0:0]probe_in224;
  input [0:0]probe_in225;
  input [0:0]probe_in226;
  input [0:0]probe_in227;
  input [0:0]probe_in228;
  input [0:0]probe_in229;
  input [0:0]probe_in230;
  input [0:0]probe_in231;
  input [0:0]probe_in232;
  input [0:0]probe_in233;
  input [0:0]probe_in234;
  input [0:0]probe_in235;
  input [0:0]probe_in236;
  input [0:0]probe_in237;
  input [0:0]probe_in238;
  input [0:0]probe_in239;
  input [0:0]probe_in240;
  input [0:0]probe_in241;
  input [0:0]probe_in242;
  input [0:0]probe_in243;
  input [0:0]probe_in244;
  input [0:0]probe_in245;
  input [0:0]probe_in246;
  input [0:0]probe_in247;
  input [0:0]probe_in248;
  input [0:0]probe_in249;
  input [0:0]probe_in250;
  input [0:0]probe_in251;
  input [0:0]probe_in252;
  input [0:0]probe_in253;
  input [0:0]probe_in254;
  input [0:0]probe_in255;
  (* dont_touch = "true" *) input [36:0]sl_iport0;
  (* dont_touch = "true" *) output [16:0]sl_oport0;
  output [0:0]probe_out0;
  output [0:0]probe_out1;
  output [0:0]probe_out2;
  output [0:0]probe_out3;
  output [0:0]probe_out4;
  output [0:0]probe_out5;
  output [0:0]probe_out6;
  output [0:0]probe_out7;
  output [0:0]probe_out8;
  output [0:0]probe_out9;
  output [0:0]probe_out10;
  output [0:0]probe_out11;
  output [0:0]probe_out12;
  output [0:0]probe_out13;
  output [0:0]probe_out14;
  output [0:0]probe_out15;
  output [0:0]probe_out16;
  output [0:0]probe_out17;
  output [0:0]probe_out18;
  output [0:0]probe_out19;
  output [0:0]probe_out20;
  output [0:0]probe_out21;
  output [0:0]probe_out22;
  output [0:0]probe_out23;
  output [0:0]probe_out24;
  output [0:0]probe_out25;
  output [0:0]probe_out26;
  output [0:0]probe_out27;
  output [0:0]probe_out28;
  output [0:0]probe_out29;
  output [0:0]probe_out30;
  output [0:0]probe_out31;
  output [0:0]probe_out32;
  output [0:0]probe_out33;
  output [0:0]probe_out34;
  output [0:0]probe_out35;
  output [0:0]probe_out36;
  output [0:0]probe_out37;
  output [0:0]probe_out38;
  output [0:0]probe_out39;
  output [0:0]probe_out40;
  output [0:0]probe_out41;
  output [0:0]probe_out42;
  output [0:0]probe_out43;
  output [0:0]probe_out44;
  output [0:0]probe_out45;
  output [0:0]probe_out46;
  output [0:0]probe_out47;
  output [0:0]probe_out48;
  output [0:0]probe_out49;
  output [0:0]probe_out50;
  output [0:0]probe_out51;
  output [0:0]probe_out52;
  output [0:0]probe_out53;
  output [0:0]probe_out54;
  output [0:0]probe_out55;
  output [0:0]probe_out56;
  output [0:0]probe_out57;
  output [0:0]probe_out58;
  output [0:0]probe_out59;
  output [0:0]probe_out60;
  output [0:0]probe_out61;
  output [0:0]probe_out62;
  output [0:0]probe_out63;
  output [0:0]probe_out64;
  output [0:0]probe_out65;
  output [0:0]probe_out66;
  output [0:0]probe_out67;
  output [0:0]probe_out68;
  output [0:0]probe_out69;
  output [0:0]probe_out70;
  output [0:0]probe_out71;
  output [0:0]probe_out72;
  output [0:0]probe_out73;
  output [0:0]probe_out74;
  output [0:0]probe_out75;
  output [0:0]probe_out76;
  output [0:0]probe_out77;
  output [0:0]probe_out78;
  output [0:0]probe_out79;
  output [0:0]probe_out80;
  output [0:0]probe_out81;
  output [0:0]probe_out82;
  output [0:0]probe_out83;
  output [0:0]probe_out84;
  output [0:0]probe_out85;
  output [0:0]probe_out86;
  output [0:0]probe_out87;
  output [0:0]probe_out88;
  output [0:0]probe_out89;
  output [0:0]probe_out90;
  output [0:0]probe_out91;
  output [0:0]probe_out92;
  output [0:0]probe_out93;
  output [0:0]probe_out94;
  output [0:0]probe_out95;
  output [0:0]probe_out96;
  output [0:0]probe_out97;
  output [0:0]probe_out98;
  output [0:0]probe_out99;
  output [0:0]probe_out100;
  output [0:0]probe_out101;
  output [0:0]probe_out102;
  output [0:0]probe_out103;
  output [0:0]probe_out104;
  output [0:0]probe_out105;
  output [0:0]probe_out106;
  output [0:0]probe_out107;
  output [0:0]probe_out108;
  output [0:0]probe_out109;
  output [0:0]probe_out110;
  output [0:0]probe_out111;
  output [0:0]probe_out112;
  output [0:0]probe_out113;
  output [0:0]probe_out114;
  output [0:0]probe_out115;
  output [0:0]probe_out116;
  output [0:0]probe_out117;
  output [0:0]probe_out118;
  output [0:0]probe_out119;
  output [0:0]probe_out120;
  output [0:0]probe_out121;
  output [0:0]probe_out122;
  output [0:0]probe_out123;
  output [0:0]probe_out124;
  output [0:0]probe_out125;
  output [0:0]probe_out126;
  output [0:0]probe_out127;
  output [0:0]probe_out128;
  output [0:0]probe_out129;
  output [0:0]probe_out130;
  output [0:0]probe_out131;
  output [0:0]probe_out132;
  output [0:0]probe_out133;
  output [0:0]probe_out134;
  output [0:0]probe_out135;
  output [0:0]probe_out136;
  output [0:0]probe_out137;
  output [0:0]probe_out138;
  output [0:0]probe_out139;
  output [0:0]probe_out140;
  output [0:0]probe_out141;
  output [0:0]probe_out142;
  output [0:0]probe_out143;
  output [0:0]probe_out144;
  output [0:0]probe_out145;
  output [0:0]probe_out146;
  output [0:0]probe_out147;
  output [0:0]probe_out148;
  output [0:0]probe_out149;
  output [0:0]probe_out150;
  output [0:0]probe_out151;
  output [0:0]probe_out152;
  output [0:0]probe_out153;
  output [0:0]probe_out154;
  output [0:0]probe_out155;
  output [0:0]probe_out156;
  output [0:0]probe_out157;
  output [0:0]probe_out158;
  output [0:0]probe_out159;
  output [0:0]probe_out160;
  output [0:0]probe_out161;
  output [0:0]probe_out162;
  output [0:0]probe_out163;
  output [0:0]probe_out164;
  output [0:0]probe_out165;
  output [0:0]probe_out166;
  output [0:0]probe_out167;
  output [0:0]probe_out168;
  output [0:0]probe_out169;
  output [0:0]probe_out170;
  output [0:0]probe_out171;
  output [0:0]probe_out172;
  output [0:0]probe_out173;
  output [0:0]probe_out174;
  output [0:0]probe_out175;
  output [0:0]probe_out176;
  output [0:0]probe_out177;
  output [0:0]probe_out178;
  output [0:0]probe_out179;
  output [0:0]probe_out180;
  output [0:0]probe_out181;
  output [0:0]probe_out182;
  output [0:0]probe_out183;
  output [0:0]probe_out184;
  output [0:0]probe_out185;
  output [0:0]probe_out186;
  output [0:0]probe_out187;
  output [0:0]probe_out188;
  output [0:0]probe_out189;
  output [0:0]probe_out190;
  output [0:0]probe_out191;
  output [0:0]probe_out192;
  output [0:0]probe_out193;
  output [0:0]probe_out194;
  output [0:0]probe_out195;
  output [0:0]probe_out196;
  output [0:0]probe_out197;
  output [0:0]probe_out198;
  output [0:0]probe_out199;
  output [0:0]probe_out200;
  output [0:0]probe_out201;
  output [0:0]probe_out202;
  output [0:0]probe_out203;
  output [0:0]probe_out204;
  output [0:0]probe_out205;
  output [0:0]probe_out206;
  output [0:0]probe_out207;
  output [0:0]probe_out208;
  output [0:0]probe_out209;
  output [0:0]probe_out210;
  output [0:0]probe_out211;
  output [0:0]probe_out212;
  output [0:0]probe_out213;
  output [0:0]probe_out214;
  output [0:0]probe_out215;
  output [0:0]probe_out216;
  output [0:0]probe_out217;
  output [0:0]probe_out218;
  output [0:0]probe_out219;
  output [0:0]probe_out220;
  output [0:0]probe_out221;
  output [0:0]probe_out222;
  output [0:0]probe_out223;
  output [0:0]probe_out224;
  output [0:0]probe_out225;
  output [0:0]probe_out226;
  output [0:0]probe_out227;
  output [0:0]probe_out228;
  output [0:0]probe_out229;
  output [0:0]probe_out230;
  output [0:0]probe_out231;
  output [0:0]probe_out232;
  output [0:0]probe_out233;
  output [0:0]probe_out234;
  output [0:0]probe_out235;
  output [0:0]probe_out236;
  output [0:0]probe_out237;
  output [0:0]probe_out238;
  output [0:0]probe_out239;
  output [0:0]probe_out240;
  output [0:0]probe_out241;
  output [0:0]probe_out242;
  output [0:0]probe_out243;
  output [0:0]probe_out244;
  output [0:0]probe_out245;
  output [0:0]probe_out246;
  output [0:0]probe_out247;
  output [0:0]probe_out248;
  output [0:0]probe_out249;
  output [0:0]probe_out250;
  output [0:0]probe_out251;
  output [0:0]probe_out252;
  output [0:0]probe_out253;
  output [0:0]probe_out254;
  output [0:0]probe_out255;

  wire \<const0> ;
  wire DECODER_INST_n_4;
  wire DECODER_INST_n_5;
  wire [0:0]Probe_out_reg;
  wire [16:0]bus_addr;
  (* DONT_TOUCH *) wire bus_clk;
  wire \bus_data_int_reg_n_0_[10] ;
  wire \bus_data_int_reg_n_0_[11] ;
  wire \bus_data_int_reg_n_0_[12] ;
  wire \bus_data_int_reg_n_0_[13] ;
  wire \bus_data_int_reg_n_0_[14] ;
  wire \bus_data_int_reg_n_0_[15] ;
  wire \bus_data_int_reg_n_0_[2] ;
  wire \bus_data_int_reg_n_0_[3] ;
  wire \bus_data_int_reg_n_0_[4] ;
  wire \bus_data_int_reg_n_0_[5] ;
  wire \bus_data_int_reg_n_0_[6] ;
  wire \bus_data_int_reg_n_0_[7] ;
  wire \bus_data_int_reg_n_0_[8] ;
  wire \bus_data_int_reg_n_0_[9] ;
  wire bus_den;
  wire [15:0]bus_di;
  wire [15:0]bus_do;
  wire bus_drdy;
  wire bus_dwe;
  wire bus_rst;
  wire clear;
  wire clk;
  wire committ;
  wire p_0_in;
  wire p_2_in;
  wire [0:0]probe_out0;
  (* DONT_TOUCH *) wire [36:0]sl_iport0;
  (* DONT_TOUCH *) wire [16:0]sl_oport0;
  wire xsdb_wr__0;

  assign probe_out1[0] = \<const0> ;
  assign probe_out10[0] = \<const0> ;
  assign probe_out100[0] = \<const0> ;
  assign probe_out101[0] = \<const0> ;
  assign probe_out102[0] = \<const0> ;
  assign probe_out103[0] = \<const0> ;
  assign probe_out104[0] = \<const0> ;
  assign probe_out105[0] = \<const0> ;
  assign probe_out106[0] = \<const0> ;
  assign probe_out107[0] = \<const0> ;
  assign probe_out108[0] = \<const0> ;
  assign probe_out109[0] = \<const0> ;
  assign probe_out11[0] = \<const0> ;
  assign probe_out110[0] = \<const0> ;
  assign probe_out111[0] = \<const0> ;
  assign probe_out112[0] = \<const0> ;
  assign probe_out113[0] = \<const0> ;
  assign probe_out114[0] = \<const0> ;
  assign probe_out115[0] = \<const0> ;
  assign probe_out116[0] = \<const0> ;
  assign probe_out117[0] = \<const0> ;
  assign probe_out118[0] = \<const0> ;
  assign probe_out119[0] = \<const0> ;
  assign probe_out12[0] = \<const0> ;
  assign probe_out120[0] = \<const0> ;
  assign probe_out121[0] = \<const0> ;
  assign probe_out122[0] = \<const0> ;
  assign probe_out123[0] = \<const0> ;
  assign probe_out124[0] = \<const0> ;
  assign probe_out125[0] = \<const0> ;
  assign probe_out126[0] = \<const0> ;
  assign probe_out127[0] = \<const0> ;
  assign probe_out128[0] = \<const0> ;
  assign probe_out129[0] = \<const0> ;
  assign probe_out13[0] = \<const0> ;
  assign probe_out130[0] = \<const0> ;
  assign probe_out131[0] = \<const0> ;
  assign probe_out132[0] = \<const0> ;
  assign probe_out133[0] = \<const0> ;
  assign probe_out134[0] = \<const0> ;
  assign probe_out135[0] = \<const0> ;
  assign probe_out136[0] = \<const0> ;
  assign probe_out137[0] = \<const0> ;
  assign probe_out138[0] = \<const0> ;
  assign probe_out139[0] = \<const0> ;
  assign probe_out14[0] = \<const0> ;
  assign probe_out140[0] = \<const0> ;
  assign probe_out141[0] = \<const0> ;
  assign probe_out142[0] = \<const0> ;
  assign probe_out143[0] = \<const0> ;
  assign probe_out144[0] = \<const0> ;
  assign probe_out145[0] = \<const0> ;
  assign probe_out146[0] = \<const0> ;
  assign probe_out147[0] = \<const0> ;
  assign probe_out148[0] = \<const0> ;
  assign probe_out149[0] = \<const0> ;
  assign probe_out15[0] = \<const0> ;
  assign probe_out150[0] = \<const0> ;
  assign probe_out151[0] = \<const0> ;
  assign probe_out152[0] = \<const0> ;
  assign probe_out153[0] = \<const0> ;
  assign probe_out154[0] = \<const0> ;
  assign probe_out155[0] = \<const0> ;
  assign probe_out156[0] = \<const0> ;
  assign probe_out157[0] = \<const0> ;
  assign probe_out158[0] = \<const0> ;
  assign probe_out159[0] = \<const0> ;
  assign probe_out16[0] = \<const0> ;
  assign probe_out160[0] = \<const0> ;
  assign probe_out161[0] = \<const0> ;
  assign probe_out162[0] = \<const0> ;
  assign probe_out163[0] = \<const0> ;
  assign probe_out164[0] = \<const0> ;
  assign probe_out165[0] = \<const0> ;
  assign probe_out166[0] = \<const0> ;
  assign probe_out167[0] = \<const0> ;
  assign probe_out168[0] = \<const0> ;
  assign probe_out169[0] = \<const0> ;
  assign probe_out17[0] = \<const0> ;
  assign probe_out170[0] = \<const0> ;
  assign probe_out171[0] = \<const0> ;
  assign probe_out172[0] = \<const0> ;
  assign probe_out173[0] = \<const0> ;
  assign probe_out174[0] = \<const0> ;
  assign probe_out175[0] = \<const0> ;
  assign probe_out176[0] = \<const0> ;
  assign probe_out177[0] = \<const0> ;
  assign probe_out178[0] = \<const0> ;
  assign probe_out179[0] = \<const0> ;
  assign probe_out18[0] = \<const0> ;
  assign probe_out180[0] = \<const0> ;
  assign probe_out181[0] = \<const0> ;
  assign probe_out182[0] = \<const0> ;
  assign probe_out183[0] = \<const0> ;
  assign probe_out184[0] = \<const0> ;
  assign probe_out185[0] = \<const0> ;
  assign probe_out186[0] = \<const0> ;
  assign probe_out187[0] = \<const0> ;
  assign probe_out188[0] = \<const0> ;
  assign probe_out189[0] = \<const0> ;
  assign probe_out19[0] = \<const0> ;
  assign probe_out190[0] = \<const0> ;
  assign probe_out191[0] = \<const0> ;
  assign probe_out192[0] = \<const0> ;
  assign probe_out193[0] = \<const0> ;
  assign probe_out194[0] = \<const0> ;
  assign probe_out195[0] = \<const0> ;
  assign probe_out196[0] = \<const0> ;
  assign probe_out197[0] = \<const0> ;
  assign probe_out198[0] = \<const0> ;
  assign probe_out199[0] = \<const0> ;
  assign probe_out2[0] = \<const0> ;
  assign probe_out20[0] = \<const0> ;
  assign probe_out200[0] = \<const0> ;
  assign probe_out201[0] = \<const0> ;
  assign probe_out202[0] = \<const0> ;
  assign probe_out203[0] = \<const0> ;
  assign probe_out204[0] = \<const0> ;
  assign probe_out205[0] = \<const0> ;
  assign probe_out206[0] = \<const0> ;
  assign probe_out207[0] = \<const0> ;
  assign probe_out208[0] = \<const0> ;
  assign probe_out209[0] = \<const0> ;
  assign probe_out21[0] = \<const0> ;
  assign probe_out210[0] = \<const0> ;
  assign probe_out211[0] = \<const0> ;
  assign probe_out212[0] = \<const0> ;
  assign probe_out213[0] = \<const0> ;
  assign probe_out214[0] = \<const0> ;
  assign probe_out215[0] = \<const0> ;
  assign probe_out216[0] = \<const0> ;
  assign probe_out217[0] = \<const0> ;
  assign probe_out218[0] = \<const0> ;
  assign probe_out219[0] = \<const0> ;
  assign probe_out22[0] = \<const0> ;
  assign probe_out220[0] = \<const0> ;
  assign probe_out221[0] = \<const0> ;
  assign probe_out222[0] = \<const0> ;
  assign probe_out223[0] = \<const0> ;
  assign probe_out224[0] = \<const0> ;
  assign probe_out225[0] = \<const0> ;
  assign probe_out226[0] = \<const0> ;
  assign probe_out227[0] = \<const0> ;
  assign probe_out228[0] = \<const0> ;
  assign probe_out229[0] = \<const0> ;
  assign probe_out23[0] = \<const0> ;
  assign probe_out230[0] = \<const0> ;
  assign probe_out231[0] = \<const0> ;
  assign probe_out232[0] = \<const0> ;
  assign probe_out233[0] = \<const0> ;
  assign probe_out234[0] = \<const0> ;
  assign probe_out235[0] = \<const0> ;
  assign probe_out236[0] = \<const0> ;
  assign probe_out237[0] = \<const0> ;
  assign probe_out238[0] = \<const0> ;
  assign probe_out239[0] = \<const0> ;
  assign probe_out24[0] = \<const0> ;
  assign probe_out240[0] = \<const0> ;
  assign probe_out241[0] = \<const0> ;
  assign probe_out242[0] = \<const0> ;
  assign probe_out243[0] = \<const0> ;
  assign probe_out244[0] = \<const0> ;
  assign probe_out245[0] = \<const0> ;
  assign probe_out246[0] = \<const0> ;
  assign probe_out247[0] = \<const0> ;
  assign probe_out248[0] = \<const0> ;
  assign probe_out249[0] = \<const0> ;
  assign probe_out25[0] = \<const0> ;
  assign probe_out250[0] = \<const0> ;
  assign probe_out251[0] = \<const0> ;
  assign probe_out252[0] = \<const0> ;
  assign probe_out253[0] = \<const0> ;
  assign probe_out254[0] = \<const0> ;
  assign probe_out255[0] = \<const0> ;
  assign probe_out26[0] = \<const0> ;
  assign probe_out27[0] = \<const0> ;
  assign probe_out28[0] = \<const0> ;
  assign probe_out29[0] = \<const0> ;
  assign probe_out3[0] = \<const0> ;
  assign probe_out30[0] = \<const0> ;
  assign probe_out31[0] = \<const0> ;
  assign probe_out32[0] = \<const0> ;
  assign probe_out33[0] = \<const0> ;
  assign probe_out34[0] = \<const0> ;
  assign probe_out35[0] = \<const0> ;
  assign probe_out36[0] = \<const0> ;
  assign probe_out37[0] = \<const0> ;
  assign probe_out38[0] = \<const0> ;
  assign probe_out39[0] = \<const0> ;
  assign probe_out4[0] = \<const0> ;
  assign probe_out40[0] = \<const0> ;
  assign probe_out41[0] = \<const0> ;
  assign probe_out42[0] = \<const0> ;
  assign probe_out43[0] = \<const0> ;
  assign probe_out44[0] = \<const0> ;
  assign probe_out45[0] = \<const0> ;
  assign probe_out46[0] = \<const0> ;
  assign probe_out47[0] = \<const0> ;
  assign probe_out48[0] = \<const0> ;
  assign probe_out49[0] = \<const0> ;
  assign probe_out5[0] = \<const0> ;
  assign probe_out50[0] = \<const0> ;
  assign probe_out51[0] = \<const0> ;
  assign probe_out52[0] = \<const0> ;
  assign probe_out53[0] = \<const0> ;
  assign probe_out54[0] = \<const0> ;
  assign probe_out55[0] = \<const0> ;
  assign probe_out56[0] = \<const0> ;
  assign probe_out57[0] = \<const0> ;
  assign probe_out58[0] = \<const0> ;
  assign probe_out59[0] = \<const0> ;
  assign probe_out6[0] = \<const0> ;
  assign probe_out60[0] = \<const0> ;
  assign probe_out61[0] = \<const0> ;
  assign probe_out62[0] = \<const0> ;
  assign probe_out63[0] = \<const0> ;
  assign probe_out64[0] = \<const0> ;
  assign probe_out65[0] = \<const0> ;
  assign probe_out66[0] = \<const0> ;
  assign probe_out67[0] = \<const0> ;
  assign probe_out68[0] = \<const0> ;
  assign probe_out69[0] = \<const0> ;
  assign probe_out7[0] = \<const0> ;
  assign probe_out70[0] = \<const0> ;
  assign probe_out71[0] = \<const0> ;
  assign probe_out72[0] = \<const0> ;
  assign probe_out73[0] = \<const0> ;
  assign probe_out74[0] = \<const0> ;
  assign probe_out75[0] = \<const0> ;
  assign probe_out76[0] = \<const0> ;
  assign probe_out77[0] = \<const0> ;
  assign probe_out78[0] = \<const0> ;
  assign probe_out79[0] = \<const0> ;
  assign probe_out8[0] = \<const0> ;
  assign probe_out80[0] = \<const0> ;
  assign probe_out81[0] = \<const0> ;
  assign probe_out82[0] = \<const0> ;
  assign probe_out83[0] = \<const0> ;
  assign probe_out84[0] = \<const0> ;
  assign probe_out85[0] = \<const0> ;
  assign probe_out86[0] = \<const0> ;
  assign probe_out87[0] = \<const0> ;
  assign probe_out88[0] = \<const0> ;
  assign probe_out89[0] = \<const0> ;
  assign probe_out9[0] = \<const0> ;
  assign probe_out90[0] = \<const0> ;
  assign probe_out91[0] = \<const0> ;
  assign probe_out92[0] = \<const0> ;
  assign probe_out93[0] = \<const0> ;
  assign probe_out94[0] = \<const0> ;
  assign probe_out95[0] = \<const0> ;
  assign probe_out96[0] = \<const0> ;
  assign probe_out97[0] = \<const0> ;
  assign probe_out98[0] = \<const0> ;
  assign probe_out99[0] = \<const0> ;
  design_1_vio_0_1_vio_v3_0_19_decoder DECODER_INST
       (.\G_PROBE_OUT[0].wr_probe_out[0]_i_4_0 (DECODER_INST_n_4),
        .\G_PROBE_OUT[0].wr_probe_out[0]_i_6_0 (DECODER_INST_n_5),
        .Probe_out_reg(Probe_out_reg),
        .Q({\bus_data_int_reg_n_0_[15] ,\bus_data_int_reg_n_0_[14] ,\bus_data_int_reg_n_0_[13] ,\bus_data_int_reg_n_0_[12] ,\bus_data_int_reg_n_0_[11] ,\bus_data_int_reg_n_0_[10] ,\bus_data_int_reg_n_0_[9] ,\bus_data_int_reg_n_0_[8] ,\bus_data_int_reg_n_0_[7] ,\bus_data_int_reg_n_0_[6] ,\bus_data_int_reg_n_0_[5] ,\bus_data_int_reg_n_0_[4] ,\bus_data_int_reg_n_0_[3] ,\bus_data_int_reg_n_0_[2] ,p_0_in,p_2_in}),
        .SR(clear),
        .in0(committ),
        .out(bus_clk),
        .s_daddr_o(bus_addr),
        .s_den_o(bus_den),
        .s_do_i(bus_do),
        .s_drdy_i(bus_drdy),
        .s_dwe_o(bus_dwe),
        .s_rst_o(bus_rst),
        .xsdb_wr__0(xsdb_wr__0));
  GND GND
       (.G(\<const0> ));
  design_1_vio_0_1_vio_v3_0_19_probe_out_all PROBE_OUT_ALL_INST
       (.\G_PROBE_OUT[0].wr_probe_out_reg[0]_0 (DECODER_INST_n_4),
        .\G_PROBE_OUT[0].wr_probe_out_reg[0]_1 (DECODER_INST_n_5),
        .Probe_out_reg(Probe_out_reg),
        .Q(p_2_in),
        .SR(clear),
        .clk(clk),
        .in0(committ),
        .out(bus_clk),
        .probe_out0(probe_out0),
        .s_daddr_o({bus_addr[16],bus_addr[11:8],bus_addr[3:0]}),
        .xsdb_wr__0(xsdb_wr__0));
  (* C_BUILD_REVISION = "0" *) 
  (* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_MAJOR_VER = "2" *) 
  (* C_CORE_MINOR_VER = "0" *) 
  (* C_CORE_TYPE = "2" *) 
  (* C_CSE_DRV_VER = "1" *) 
  (* C_MAJOR_VERSION = "2013" *) 
  (* C_MINOR_VERSION = "1" *) 
  (* C_NEXT_SLAVE = "0" *) 
  (* C_PIPE_IFACE = "0" *) 
  (* C_USE_TEST_REG = "1" *) 
  (* C_XDEVICEFAMILY = "zynq" *) 
  (* C_XSDB_SLAVE_TYPE = "33" *) 
  (* DONT_TOUCH *) 
  design_1_vio_0_1_xsdbs_v1_0_2_xsdbs U_XSDB_SLAVE
       (.s_daddr_o(bus_addr),
        .s_dclk_o(bus_clk),
        .s_den_o(bus_den),
        .s_di_o(bus_di),
        .s_do_i(bus_do),
        .s_drdy_i(bus_drdy),
        .s_dwe_o(bus_dwe),
        .s_rst_o(bus_rst),
        .sl_iport_i(sl_iport0),
        .sl_oport_o(sl_oport0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[0] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[0]),
        .Q(p_2_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[10] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[10]),
        .Q(\bus_data_int_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[11] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[11]),
        .Q(\bus_data_int_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[12] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[12]),
        .Q(\bus_data_int_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[13] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[13]),
        .Q(\bus_data_int_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[14] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[14]),
        .Q(\bus_data_int_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[15] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[15]),
        .Q(\bus_data_int_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[1] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[1]),
        .Q(p_0_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[2] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[2]),
        .Q(\bus_data_int_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[3] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[3]),
        .Q(\bus_data_int_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[4] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[4]),
        .Q(\bus_data_int_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[5] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[5]),
        .Q(\bus_data_int_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[6] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[6]),
        .Q(\bus_data_int_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[7] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[7]),
        .Q(\bus_data_int_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[8] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[8]),
        .Q(\bus_data_int_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bus_data_int_reg[9] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[9]),
        .Q(\bus_data_int_reg_n_0_[9] ),
        .R(1'b0));
endmodule

(* C_BUILD_REVISION = "0" *) (* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_CORE_MAJOR_VER = "2" *) (* C_CORE_MINOR_VER = "0" *) (* C_CORE_TYPE = "2" *) 
(* C_CSE_DRV_VER = "1" *) (* C_MAJOR_VERSION = "2013" *) (* C_MINOR_VERSION = "1" *) 
(* C_NEXT_SLAVE = "0" *) (* C_PIPE_IFACE = "0" *) (* C_USE_TEST_REG = "1" *) 
(* C_XDEVICEFAMILY = "zynq" *) (* C_XSDB_SLAVE_TYPE = "33" *) (* ORIG_REF_NAME = "xsdbs_v1_0_2_xsdbs" *) 
(* dont_touch = "true" *) 
module design_1_vio_0_1_xsdbs_v1_0_2_xsdbs
   (s_rst_o,
    s_dclk_o,
    s_den_o,
    s_dwe_o,
    s_daddr_o,
    s_di_o,
    sl_oport_o,
    s_do_i,
    sl_iport_i,
    s_drdy_i);
  output s_rst_o;
  output s_dclk_o;
  output s_den_o;
  output s_dwe_o;
  output [16:0]s_daddr_o;
  output [15:0]s_di_o;
  output [16:0]sl_oport_o;
  input [15:0]s_do_i;
  input [36:0]sl_iport_i;
  input s_drdy_i;

  wire [15:0]reg_do;
  wire \reg_do[0]_i_2_n_0 ;
  wire \reg_do[0]_i_3_n_0 ;
  wire \reg_do[0]_i_4_n_0 ;
  wire \reg_do[10]_i_2_n_0 ;
  wire \reg_do[10]_i_3_n_0 ;
  wire \reg_do[10]_i_4_n_0 ;
  wire \reg_do[10]_i_5_n_0 ;
  wire \reg_do[11]_i_2_n_0 ;
  wire \reg_do[11]_i_3_n_0 ;
  wire \reg_do[12]_i_2_n_0 ;
  wire \reg_do[12]_i_3_n_0 ;
  wire \reg_do[13]_i_2_n_0 ;
  wire \reg_do[13]_i_3_n_0 ;
  wire \reg_do[14]_i_2_n_0 ;
  wire \reg_do[14]_i_3_n_0 ;
  wire \reg_do[15]_i_2_n_0 ;
  wire \reg_do[15]_i_3_n_0 ;
  wire \reg_do[15]_i_4_n_0 ;
  wire \reg_do[15]_i_5_n_0 ;
  wire \reg_do[15]_i_6_n_0 ;
  wire \reg_do[1]_i_2_n_0 ;
  wire \reg_do[1]_i_3_n_0 ;
  wire \reg_do[1]_i_4_n_0 ;
  wire \reg_do[2]_i_2_n_0 ;
  wire \reg_do[2]_i_3_n_0 ;
  wire \reg_do[2]_i_4_n_0 ;
  wire \reg_do[3]_i_2_n_0 ;
  wire \reg_do[3]_i_3_n_0 ;
  wire \reg_do[3]_i_4_n_0 ;
  wire \reg_do[4]_i_2_n_0 ;
  wire \reg_do[4]_i_3_n_0 ;
  wire \reg_do[4]_i_4_n_0 ;
  wire \reg_do[5]_i_2_n_0 ;
  wire \reg_do[5]_i_3_n_0 ;
  wire \reg_do[5]_i_4_n_0 ;
  wire \reg_do[5]_i_5_n_0 ;
  wire \reg_do[6]_i_2_n_0 ;
  wire \reg_do[6]_i_3_n_0 ;
  wire \reg_do[6]_i_4_n_0 ;
  wire \reg_do[7]_i_2_n_0 ;
  wire \reg_do[7]_i_3_n_0 ;
  wire \reg_do[7]_i_4_n_0 ;
  wire \reg_do[8]_i_2_n_0 ;
  wire \reg_do[8]_i_3_n_0 ;
  wire \reg_do[8]_i_4_n_0 ;
  wire \reg_do[9]_i_2_n_0 ;
  wire \reg_do[9]_i_3_n_0 ;
  wire \reg_do[9]_i_4_n_0 ;
  wire \reg_do[9]_i_5_n_0 ;
  wire \reg_do[9]_i_6_n_0 ;
  wire \reg_do_reg_n_0_[0] ;
  wire \reg_do_reg_n_0_[10] ;
  wire \reg_do_reg_n_0_[11] ;
  wire \reg_do_reg_n_0_[12] ;
  wire \reg_do_reg_n_0_[13] ;
  wire \reg_do_reg_n_0_[14] ;
  wire \reg_do_reg_n_0_[15] ;
  wire \reg_do_reg_n_0_[1] ;
  wire \reg_do_reg_n_0_[2] ;
  wire \reg_do_reg_n_0_[3] ;
  wire \reg_do_reg_n_0_[4] ;
  wire \reg_do_reg_n_0_[5] ;
  wire \reg_do_reg_n_0_[6] ;
  wire \reg_do_reg_n_0_[7] ;
  wire \reg_do_reg_n_0_[8] ;
  wire \reg_do_reg_n_0_[9] ;
  wire reg_drdy;
  wire reg_drdy_i_1_n_0;
  wire [15:0]reg_test;
  wire reg_test0;
  wire s_den_o;
  wire s_den_o_INST_0_i_1_n_0;
  wire [15:0]s_do_i;
  wire s_drdy_i;
  wire [36:0]sl_iport_i;
  wire [16:0]sl_oport_o;
  (* DONT_TOUCH *) (* UUID = "1" *) wire [127:0]uuid_stamp;

  assign s_daddr_o[16:0] = sl_iport_i[20:4];
  assign s_dclk_o = sl_iport_i[1];
  assign s_di_o[15:0] = sl_iport_i[36:21];
  assign s_dwe_o = sl_iport_i[3];
  assign s_rst_o = sl_iport_i[0];
  LUT6 #(
    .INIT(64'hAAAAAAAA0020AAAA)) 
    \reg_do[0]_i_1 
       (.I0(\reg_do[0]_i_2_n_0 ),
        .I1(\reg_do[9]_i_3_n_0 ),
        .I2(reg_test[0]),
        .I3(sl_iport_i[4]),
        .I4(sl_iport_i[5]),
        .I5(\reg_do[9]_i_2_n_0 ),
        .O(reg_do[0]));
  LUT6 #(
    .INIT(64'hABABABAAAAAAABAA)) 
    \reg_do[0]_i_2 
       (.I0(\reg_do[5]_i_3_n_0 ),
        .I1(sl_iport_i[8]),
        .I2(sl_iport_i[7]),
        .I3(\reg_do[0]_i_3_n_0 ),
        .I4(sl_iport_i[6]),
        .I5(\reg_do[0]_i_4_n_0 ),
        .O(\reg_do[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[0]_i_3 
       (.I0(uuid_stamp[48]),
        .I1(uuid_stamp[32]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[16]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[0]),
        .O(\reg_do[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[0]_i_4 
       (.I0(uuid_stamp[112]),
        .I1(uuid_stamp[96]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[80]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[64]),
        .O(\reg_do[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF2808)) 
    \reg_do[10]_i_1 
       (.I0(\reg_do[10]_i_2_n_0 ),
        .I1(sl_iport_i[4]),
        .I2(sl_iport_i[5]),
        .I3(reg_test[10]),
        .I4(\reg_do[10]_i_3_n_0 ),
        .O(reg_do[10]));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \reg_do[10]_i_2 
       (.I0(sl_iport_i[6]),
        .I1(sl_iport_i[9]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(sl_iport_i[11]),
        .I5(sl_iport_i[10]),
        .O(\reg_do[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[10]_i_3 
       (.I0(\reg_do[10]_i_4_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[10]_i_5_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[10]_i_4 
       (.I0(uuid_stamp[122]),
        .I1(uuid_stamp[106]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[90]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[74]),
        .O(\reg_do[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[10]_i_5 
       (.I0(uuid_stamp[58]),
        .I1(uuid_stamp[42]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[26]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[10]),
        .O(\reg_do[10]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \reg_do[11]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[11]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[11]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[11]),
        .O(reg_do[11]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[11]_i_2 
       (.I0(uuid_stamp[59]),
        .I1(uuid_stamp[43]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[27]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[11]),
        .O(\reg_do[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[11]_i_3 
       (.I0(uuid_stamp[123]),
        .I1(uuid_stamp[107]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[91]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[75]),
        .O(\reg_do[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h5404FFFF54045404)) 
    \reg_do[12]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[12]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[12]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[12]),
        .O(reg_do[12]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[12]_i_2 
       (.I0(uuid_stamp[124]),
        .I1(uuid_stamp[108]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[92]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[76]),
        .O(\reg_do[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[12]_i_3 
       (.I0(uuid_stamp[60]),
        .I1(uuid_stamp[44]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[28]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[12]),
        .O(\reg_do[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \reg_do[13]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[13]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[13]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[13]),
        .O(reg_do[13]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[13]_i_2 
       (.I0(uuid_stamp[61]),
        .I1(uuid_stamp[45]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[29]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[13]),
        .O(\reg_do[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[13]_i_3 
       (.I0(uuid_stamp[125]),
        .I1(uuid_stamp[109]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[93]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[77]),
        .O(\reg_do[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \reg_do[14]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[14]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[14]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[14]),
        .O(reg_do[14]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[14]_i_2 
       (.I0(uuid_stamp[62]),
        .I1(uuid_stamp[46]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[30]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[14]),
        .O(\reg_do[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[14]_i_3 
       (.I0(uuid_stamp[126]),
        .I1(uuid_stamp[110]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[94]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[78]),
        .O(\reg_do[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0B01FFFF0B010B01)) 
    \reg_do[15]_i_1 
       (.I0(\reg_do[15]_i_2_n_0 ),
        .I1(\reg_do[15]_i_3_n_0 ),
        .I2(\reg_do[15]_i_4_n_0 ),
        .I3(\reg_do[15]_i_5_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[15]),
        .O(reg_do[15]));
  LUT3 #(
    .INIT(8'h45)) 
    \reg_do[15]_i_2 
       (.I0(sl_iport_i[8]),
        .I1(sl_iport_i[7]),
        .I2(sl_iport_i[6]),
        .O(\reg_do[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \reg_do[15]_i_3 
       (.I0(uuid_stamp[127]),
        .I1(uuid_stamp[111]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[95]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[79]),
        .O(\reg_do[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \reg_do[15]_i_4 
       (.I0(sl_iport_i[7]),
        .I1(sl_iport_i[8]),
        .I2(sl_iport_i[9]),
        .I3(sl_iport_i[11]),
        .I4(sl_iport_i[10]),
        .O(\reg_do[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[15]_i_5 
       (.I0(uuid_stamp[63]),
        .I1(uuid_stamp[47]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[31]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[15]),
        .O(\reg_do[15]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFD0FFFFFFFF)) 
    \reg_do[15]_i_6 
       (.I0(sl_iport_i[6]),
        .I1(sl_iport_i[7]),
        .I2(sl_iport_i[8]),
        .I3(\reg_do[9]_i_2_n_0 ),
        .I4(sl_iport_i[4]),
        .I5(sl_iport_i[5]),
        .O(\reg_do[15]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAFEAA)) 
    \reg_do[1]_i_1 
       (.I0(\reg_do[1]_i_2_n_0 ),
        .I1(reg_test[1]),
        .I2(\reg_do[9]_i_3_n_0 ),
        .I3(sl_iport_i[5]),
        .I4(sl_iport_i[4]),
        .I5(\reg_do[9]_i_2_n_0 ),
        .O(reg_do[1]));
  LUT6 #(
    .INIT(64'h00000000FFAE00A2)) 
    \reg_do[1]_i_2 
       (.I0(\reg_do[1]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[1]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[1]_i_3 
       (.I0(uuid_stamp[49]),
        .I1(uuid_stamp[33]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[17]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[1]),
        .O(\reg_do[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[1]_i_4 
       (.I0(uuid_stamp[113]),
        .I1(uuid_stamp[97]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[81]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[65]),
        .O(\reg_do[1]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[2]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[2]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[2]_i_2_n_0 ),
        .O(reg_do[2]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[2]_i_2 
       (.I0(\reg_do[2]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[2]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[2]_i_3 
       (.I0(uuid_stamp[114]),
        .I1(uuid_stamp[98]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[82]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[66]),
        .O(\reg_do[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[2]_i_4 
       (.I0(uuid_stamp[50]),
        .I1(uuid_stamp[34]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[18]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[2]),
        .O(\reg_do[2]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[3]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[3]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[3]_i_2_n_0 ),
        .O(reg_do[3]));
  LUT6 #(
    .INIT(64'h000000003333AA3A)) 
    \reg_do[3]_i_2 
       (.I0(\reg_do[3]_i_3_n_0 ),
        .I1(\reg_do[3]_i_4_n_0 ),
        .I2(sl_iport_i[6]),
        .I3(sl_iport_i[7]),
        .I4(sl_iport_i[8]),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[3]_i_3 
       (.I0(uuid_stamp[51]),
        .I1(uuid_stamp[35]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[19]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[3]),
        .O(\reg_do[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h05F5030305F5F3F3)) 
    \reg_do[3]_i_4 
       (.I0(uuid_stamp[83]),
        .I1(uuid_stamp[67]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[115]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[99]),
        .O(\reg_do[3]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[4]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[4]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[4]_i_2_n_0 ),
        .O(reg_do[4]));
  LUT6 #(
    .INIT(64'h00000000FFAE00A2)) 
    \reg_do[4]_i_2 
       (.I0(\reg_do[4]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[4]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[4]_i_3 
       (.I0(uuid_stamp[52]),
        .I1(uuid_stamp[36]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[20]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[4]),
        .O(\reg_do[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[4]_i_4 
       (.I0(uuid_stamp[116]),
        .I1(uuid_stamp[100]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[84]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[68]),
        .O(\reg_do[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h888888888A88A8A8)) 
    \reg_do[5]_i_1 
       (.I0(\reg_do[5]_i_2_n_0 ),
        .I1(\reg_do[9]_i_2_n_0 ),
        .I2(\reg_do[9]_i_3_n_0 ),
        .I3(reg_test[5]),
        .I4(sl_iport_i[5]),
        .I5(sl_iport_i[4]),
        .O(reg_do[5]));
  LUT6 #(
    .INIT(64'hABABABAAAAAAABAA)) 
    \reg_do[5]_i_2 
       (.I0(\reg_do[5]_i_3_n_0 ),
        .I1(sl_iport_i[8]),
        .I2(sl_iport_i[7]),
        .I3(\reg_do[5]_i_4_n_0 ),
        .I4(sl_iport_i[6]),
        .I5(\reg_do[5]_i_5_n_0 ),
        .O(\reg_do[5]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \reg_do[5]_i_3 
       (.I0(sl_iport_i[10]),
        .I1(sl_iport_i[11]),
        .I2(sl_iport_i[9]),
        .I3(sl_iport_i[8]),
        .O(\reg_do[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[5]_i_4 
       (.I0(uuid_stamp[53]),
        .I1(uuid_stamp[37]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[21]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[5]),
        .O(\reg_do[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[5]_i_5 
       (.I0(uuid_stamp[117]),
        .I1(uuid_stamp[101]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[85]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[69]),
        .O(\reg_do[5]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[6]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[6]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[6]_i_2_n_0 ),
        .O(reg_do[6]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[6]_i_2 
       (.I0(\reg_do[6]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[6]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[6]_i_3 
       (.I0(uuid_stamp[118]),
        .I1(uuid_stamp[102]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[86]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[70]),
        .O(\reg_do[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[6]_i_4 
       (.I0(uuid_stamp[54]),
        .I1(uuid_stamp[38]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[22]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[6]),
        .O(\reg_do[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[7]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[7]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[7]_i_2_n_0 ),
        .O(reg_do[7]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[7]_i_2 
       (.I0(\reg_do[7]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[7]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[7]_i_3 
       (.I0(uuid_stamp[119]),
        .I1(uuid_stamp[103]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[87]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[71]),
        .O(\reg_do[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[7]_i_4 
       (.I0(uuid_stamp[55]),
        .I1(uuid_stamp[39]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[23]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[7]),
        .O(\reg_do[7]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF7500)) 
    \reg_do[8]_i_1 
       (.I0(sl_iport_i[5]),
        .I1(sl_iport_i[4]),
        .I2(reg_test[8]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[8]_i_2_n_0 ),
        .O(reg_do[8]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[8]_i_2 
       (.I0(\reg_do[8]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[8]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[8]_i_3 
       (.I0(uuid_stamp[120]),
        .I1(uuid_stamp[104]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[88]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[72]),
        .O(\reg_do[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[8]_i_4 
       (.I0(uuid_stamp[56]),
        .I1(uuid_stamp[40]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[24]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[8]),
        .O(\reg_do[8]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40144010)) 
    \reg_do[9]_i_1 
       (.I0(\reg_do[9]_i_2_n_0 ),
        .I1(sl_iport_i[5]),
        .I2(sl_iport_i[4]),
        .I3(\reg_do[9]_i_3_n_0 ),
        .I4(reg_test[9]),
        .I5(\reg_do[9]_i_4_n_0 ),
        .O(reg_do[9]));
  LUT5 #(
    .INIT(32'hFF7FFFFF)) 
    \reg_do[9]_i_2 
       (.I0(sl_iport_i[10]),
        .I1(sl_iport_i[11]),
        .I2(sl_iport_i[8]),
        .I3(sl_iport_i[7]),
        .I4(sl_iport_i[9]),
        .O(\reg_do[9]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h8A)) 
    \reg_do[9]_i_3 
       (.I0(sl_iport_i[8]),
        .I1(sl_iport_i[7]),
        .I2(sl_iport_i[6]),
        .O(\reg_do[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[9]_i_4 
       (.I0(\reg_do[9]_i_5_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[9]_i_6_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[9]_i_5 
       (.I0(uuid_stamp[121]),
        .I1(uuid_stamp[105]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[89]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[73]),
        .O(\reg_do[9]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[9]_i_6 
       (.I0(uuid_stamp[57]),
        .I1(uuid_stamp[41]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[25]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[9]),
        .O(\reg_do[9]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[0] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[0]),
        .Q(\reg_do_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[10] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[10]),
        .Q(\reg_do_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[11] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[11]),
        .Q(\reg_do_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[12] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[12]),
        .Q(\reg_do_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[13] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[13]),
        .Q(\reg_do_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[14] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[14]),
        .Q(\reg_do_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[15] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[15]),
        .Q(\reg_do_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[1] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[1]),
        .Q(\reg_do_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[2] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[2]),
        .Q(\reg_do_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[3] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[3]),
        .Q(\reg_do_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[4] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[4]),
        .Q(\reg_do_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[5] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[5]),
        .Q(\reg_do_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[6] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[6]),
        .Q(\reg_do_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[7] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[7]),
        .Q(\reg_do_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[8] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[8]),
        .Q(\reg_do_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[9] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[9]),
        .Q(\reg_do_reg_n_0_[9] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    reg_drdy_i_1
       (.I0(s_den_o_INST_0_i_1_n_0),
        .I1(sl_iport_i[12]),
        .I2(sl_iport_i[13]),
        .I3(sl_iport_i[14]),
        .I4(sl_iport_i[0]),
        .I5(sl_iport_i[2]),
        .O(reg_drdy_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    reg_drdy_reg
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_drdy_i_1_n_0),
        .Q(reg_drdy),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \reg_test[15]_i_1 
       (.I0(s_den_o_INST_0_i_1_n_0),
        .I1(sl_iport_i[12]),
        .I2(sl_iport_i[13]),
        .I3(sl_iport_i[14]),
        .I4(sl_iport_i[3]),
        .I5(sl_iport_i[2]),
        .O(reg_test0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[0] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[21]),
        .Q(reg_test[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[10] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[31]),
        .Q(reg_test[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[11] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[32]),
        .Q(reg_test[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[12] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[33]),
        .Q(reg_test[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[13] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[34]),
        .Q(reg_test[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[14] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[35]),
        .Q(reg_test[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[15] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[36]),
        .Q(reg_test[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[1] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[22]),
        .Q(reg_test[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[2] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[23]),
        .Q(reg_test[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[3] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[24]),
        .Q(reg_test[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[4] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[25]),
        .Q(reg_test[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[5] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[26]),
        .Q(reg_test[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[6] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[27]),
        .Q(reg_test[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[7] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[28]),
        .Q(reg_test[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[8] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[29]),
        .Q(reg_test[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[9] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[30]),
        .Q(reg_test[9]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h7FFF0000)) 
    s_den_o_INST_0
       (.I0(s_den_o_INST_0_i_1_n_0),
        .I1(sl_iport_i[12]),
        .I2(sl_iport_i[13]),
        .I3(sl_iport_i[14]),
        .I4(sl_iport_i[2]),
        .O(s_den_o));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    s_den_o_INST_0_i_1
       (.I0(sl_iport_i[15]),
        .I1(sl_iport_i[16]),
        .I2(sl_iport_i[17]),
        .I3(sl_iport_i[18]),
        .I4(sl_iport_i[20]),
        .I5(sl_iport_i[19]),
        .O(s_den_o_INST_0_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \sl_oport_o[0]_INST_0 
       (.I0(reg_drdy),
        .I1(s_drdy_i),
        .O(sl_oport_o[0]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[10]_INST_0 
       (.I0(\reg_do_reg_n_0_[9] ),
        .I1(reg_drdy),
        .I2(s_do_i[9]),
        .O(sl_oport_o[10]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[11]_INST_0 
       (.I0(\reg_do_reg_n_0_[10] ),
        .I1(reg_drdy),
        .I2(s_do_i[10]),
        .O(sl_oport_o[11]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[12]_INST_0 
       (.I0(\reg_do_reg_n_0_[11] ),
        .I1(reg_drdy),
        .I2(s_do_i[11]),
        .O(sl_oport_o[12]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[13]_INST_0 
       (.I0(\reg_do_reg_n_0_[12] ),
        .I1(reg_drdy),
        .I2(s_do_i[12]),
        .O(sl_oport_o[13]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[14]_INST_0 
       (.I0(\reg_do_reg_n_0_[13] ),
        .I1(reg_drdy),
        .I2(s_do_i[13]),
        .O(sl_oport_o[14]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[15]_INST_0 
       (.I0(\reg_do_reg_n_0_[14] ),
        .I1(reg_drdy),
        .I2(s_do_i[14]),
        .O(sl_oport_o[15]));
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[16]_INST_0 
       (.I0(\reg_do_reg_n_0_[15] ),
        .I1(reg_drdy),
        .I2(s_do_i[15]),
        .O(sl_oport_o[16]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[1]_INST_0 
       (.I0(\reg_do_reg_n_0_[0] ),
        .I1(reg_drdy),
        .I2(s_do_i[0]),
        .O(sl_oport_o[1]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[2]_INST_0 
       (.I0(\reg_do_reg_n_0_[1] ),
        .I1(reg_drdy),
        .I2(s_do_i[1]),
        .O(sl_oport_o[2]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[3]_INST_0 
       (.I0(\reg_do_reg_n_0_[2] ),
        .I1(reg_drdy),
        .I2(s_do_i[2]),
        .O(sl_oport_o[3]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[4]_INST_0 
       (.I0(\reg_do_reg_n_0_[3] ),
        .I1(reg_drdy),
        .I2(s_do_i[3]),
        .O(sl_oport_o[4]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[5]_INST_0 
       (.I0(\reg_do_reg_n_0_[4] ),
        .I1(reg_drdy),
        .I2(s_do_i[4]),
        .O(sl_oport_o[5]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[6]_INST_0 
       (.I0(\reg_do_reg_n_0_[5] ),
        .I1(reg_drdy),
        .I2(s_do_i[5]),
        .O(sl_oport_o[6]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[7]_INST_0 
       (.I0(\reg_do_reg_n_0_[6] ),
        .I1(reg_drdy),
        .I2(s_do_i[6]),
        .O(sl_oport_o[7]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[8]_INST_0 
       (.I0(\reg_do_reg_n_0_[7] ),
        .I1(reg_drdy),
        .I2(s_do_i[7]),
        .O(sl_oport_o[8]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[9]_INST_0 
       (.I0(\reg_do_reg_n_0_[8] ),
        .I1(reg_drdy),
        .I2(s_do_i[8]),
        .O(sl_oport_o[9]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[0] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[0]),
        .Q(uuid_stamp[0]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[100] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[100]),
        .Q(uuid_stamp[100]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[101] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[101]),
        .Q(uuid_stamp[101]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[102] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[102]),
        .Q(uuid_stamp[102]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[103] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[103]),
        .Q(uuid_stamp[103]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[104] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[104]),
        .Q(uuid_stamp[104]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[105] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[105]),
        .Q(uuid_stamp[105]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[106] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[106]),
        .Q(uuid_stamp[106]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[107] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[107]),
        .Q(uuid_stamp[107]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[108] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[108]),
        .Q(uuid_stamp[108]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[109] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[109]),
        .Q(uuid_stamp[109]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[10] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[10]),
        .Q(uuid_stamp[10]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[110] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[110]),
        .Q(uuid_stamp[110]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[111] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[111]),
        .Q(uuid_stamp[111]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[112] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[112]),
        .Q(uuid_stamp[112]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[113] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[113]),
        .Q(uuid_stamp[113]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[114] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[114]),
        .Q(uuid_stamp[114]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[115] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[115]),
        .Q(uuid_stamp[115]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[116] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[116]),
        .Q(uuid_stamp[116]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[117] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[117]),
        .Q(uuid_stamp[117]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[118] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[118]),
        .Q(uuid_stamp[118]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[119] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[119]),
        .Q(uuid_stamp[119]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[11] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[11]),
        .Q(uuid_stamp[11]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[120] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[120]),
        .Q(uuid_stamp[120]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[121] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[121]),
        .Q(uuid_stamp[121]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[122] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[122]),
        .Q(uuid_stamp[122]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[123] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[123]),
        .Q(uuid_stamp[123]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[124] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[124]),
        .Q(uuid_stamp[124]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[125] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[125]),
        .Q(uuid_stamp[125]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[126] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[126]),
        .Q(uuid_stamp[126]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[127] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[127]),
        .Q(uuid_stamp[127]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[12] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[12]),
        .Q(uuid_stamp[12]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[13] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[13]),
        .Q(uuid_stamp[13]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[14] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[14]),
        .Q(uuid_stamp[14]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[15] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[15]),
        .Q(uuid_stamp[15]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[16] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[16]),
        .Q(uuid_stamp[16]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[17] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[17]),
        .Q(uuid_stamp[17]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[18] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[18]),
        .Q(uuid_stamp[18]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[19] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[19]),
        .Q(uuid_stamp[19]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[1] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[1]),
        .Q(uuid_stamp[1]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[20] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[20]),
        .Q(uuid_stamp[20]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[21] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[21]),
        .Q(uuid_stamp[21]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[22] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[22]),
        .Q(uuid_stamp[22]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[23] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[23]),
        .Q(uuid_stamp[23]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[24] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[24]),
        .Q(uuid_stamp[24]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[25] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[25]),
        .Q(uuid_stamp[25]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[26] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[26]),
        .Q(uuid_stamp[26]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[27] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[27]),
        .Q(uuid_stamp[27]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[28] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[28]),
        .Q(uuid_stamp[28]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[29] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[29]),
        .Q(uuid_stamp[29]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[2] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[2]),
        .Q(uuid_stamp[2]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[30] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[30]),
        .Q(uuid_stamp[30]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[31] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[31]),
        .Q(uuid_stamp[31]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[32] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[32]),
        .Q(uuid_stamp[32]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[33] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[33]),
        .Q(uuid_stamp[33]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[34] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[34]),
        .Q(uuid_stamp[34]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[35] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[35]),
        .Q(uuid_stamp[35]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[36] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[36]),
        .Q(uuid_stamp[36]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[37] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[37]),
        .Q(uuid_stamp[37]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[38] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[38]),
        .Q(uuid_stamp[38]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[39] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[39]),
        .Q(uuid_stamp[39]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[3] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[3]),
        .Q(uuid_stamp[3]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[40] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[40]),
        .Q(uuid_stamp[40]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[41] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[41]),
        .Q(uuid_stamp[41]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[42] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[42]),
        .Q(uuid_stamp[42]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[43] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[43]),
        .Q(uuid_stamp[43]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[44] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[44]),
        .Q(uuid_stamp[44]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[45] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[45]),
        .Q(uuid_stamp[45]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[46] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[46]),
        .Q(uuid_stamp[46]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[47] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[47]),
        .Q(uuid_stamp[47]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[48] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[48]),
        .Q(uuid_stamp[48]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[49] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[49]),
        .Q(uuid_stamp[49]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[4] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[4]),
        .Q(uuid_stamp[4]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[50] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[50]),
        .Q(uuid_stamp[50]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[51] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[51]),
        .Q(uuid_stamp[51]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[52] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[52]),
        .Q(uuid_stamp[52]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[53] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[53]),
        .Q(uuid_stamp[53]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[54] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[54]),
        .Q(uuid_stamp[54]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[55] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[55]),
        .Q(uuid_stamp[55]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[56] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[56]),
        .Q(uuid_stamp[56]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[57] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[57]),
        .Q(uuid_stamp[57]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[58] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[58]),
        .Q(uuid_stamp[58]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[59] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[59]),
        .Q(uuid_stamp[59]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[5] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[5]),
        .Q(uuid_stamp[5]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[60] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[60]),
        .Q(uuid_stamp[60]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[61] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[61]),
        .Q(uuid_stamp[61]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[62] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[62]),
        .Q(uuid_stamp[62]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[63] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[63]),
        .Q(uuid_stamp[63]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[64] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[64]),
        .Q(uuid_stamp[64]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[65] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[65]),
        .Q(uuid_stamp[65]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[66] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[66]),
        .Q(uuid_stamp[66]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[67] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[67]),
        .Q(uuid_stamp[67]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[68] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[68]),
        .Q(uuid_stamp[68]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[69] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[69]),
        .Q(uuid_stamp[69]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[6] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[6]),
        .Q(uuid_stamp[6]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[70] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[70]),
        .Q(uuid_stamp[70]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[71] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[71]),
        .Q(uuid_stamp[71]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[72] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[72]),
        .Q(uuid_stamp[72]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[73] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[73]),
        .Q(uuid_stamp[73]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[74] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[74]),
        .Q(uuid_stamp[74]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[75] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[75]),
        .Q(uuid_stamp[75]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[76] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[76]),
        .Q(uuid_stamp[76]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[77] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[77]),
        .Q(uuid_stamp[77]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[78] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[78]),
        .Q(uuid_stamp[78]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[79] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[79]),
        .Q(uuid_stamp[79]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[7] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[7]),
        .Q(uuid_stamp[7]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[80] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[80]),
        .Q(uuid_stamp[80]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[81] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[81]),
        .Q(uuid_stamp[81]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[82] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[82]),
        .Q(uuid_stamp[82]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[83] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[83]),
        .Q(uuid_stamp[83]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[84] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[84]),
        .Q(uuid_stamp[84]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[85] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[85]),
        .Q(uuid_stamp[85]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[86] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[86]),
        .Q(uuid_stamp[86]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[87] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[87]),
        .Q(uuid_stamp[87]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[88] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[88]),
        .Q(uuid_stamp[88]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[89] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[89]),
        .Q(uuid_stamp[89]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[8] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[8]),
        .Q(uuid_stamp[8]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[90] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[90]),
        .Q(uuid_stamp[90]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[91] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[91]),
        .Q(uuid_stamp[91]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[92] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[92]),
        .Q(uuid_stamp[92]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[93] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[93]),
        .Q(uuid_stamp[93]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[94] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[94]),
        .Q(uuid_stamp[94]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[95] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[95]),
        .Q(uuid_stamp[95]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[96] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[96]),
        .Q(uuid_stamp[96]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[97] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[97]),
        .Q(uuid_stamp[97]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[98] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[98]),
        .Q(uuid_stamp[98]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b0)) 
    \uuid_stamp_reg[99] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[99]),
        .Q(uuid_stamp[99]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE #(
    .INIT(1'b1)) 
    \uuid_stamp_reg[9] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[9]),
        .Q(uuid_stamp[9]),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
